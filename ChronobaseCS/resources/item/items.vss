
// What makes something an "item"?
// - I can use it.
// - I can see it on the ground.
// Perhaps someday we should split these into their own components?

mut struct ItemTTC {
  ItemTTC isa IInteractableTTC;

  item: IItem;

  fn Destruct(this: ItemTTC overrides IDestructible): Void {
    ItemTTCExtensions.Destruct
  }

  fn Interact(
    this: ItemTTC overrides IInteractableTTC,
    context: $IncendianFalls.SSContext,
    game: Game,
    superstate: $Superstate,
    interactingUnit: Unit,
    containingTileLocation: Location):
  Str {
    ItemTTCExtensions.Interact
  }
}

mut interface IItem {
  IItem isa IUnitComponent;
}


mut interface ICloneableUC {
  ICloneableUC isa IUnitComponent;

  fn ClonifyAndReturnNewReal(newRoot: $Root): ICloneableUC;
}

// This is just here to force it to generate a MutBunch:IItem, which we
// can use to downcast IItem to IImmediatelyUseItem.
// Same with impulses.
mut struct Wat {
  items: MutBunch:&IItem;
  impulses: MutBunch:&IImpulse;
  blah: MutBunch:&&IPostActingUC;
  bloop: MutBunch:&&IPreActingUC;
}

mut interface IUsableItem {
  IUsableItem isa IItem;

  fn Use(
      game: &Game,
      superstate: $Superstate,
      unit: &Unit)
  : Void;
}

mut interface IImmediatelyUseItem {
  IImmediatelyUseItem isa IUsableItem;
}

mut interface IPickUpReactorItem {
  IPickUpReactorItem isa IItem;

  fn ReactToPickUp(
    game: &Game,
    superstate: $Superstate,
    unit: &Unit)
  : Void;
}
