
root mut struct Game {
  rand: Rand;
  squareLevelsOnly: Bool;
  levels: MutSet:Level;
  var player: ?&Unit;

  var level: ?&Level;
  var time: Int;

  // See Suspending doc for more info on these.
  var actingUnit: ?Unit;
  var pauseBeforeNextUnit: Bool;

  // Whenever a unit starts taking an action, it should increment this number.
  // This is how the view knows what effects are part of the same action.
  var actionNum: Int;

  var instructions: Str; // "" for nothing. Someday will want to make a mutable wrapper.
  var hideInput: Bool;

  var evvent: ?IGameEvent;
}

imm interface IGameEvent { }

imm struct ShowOverlayEvent {
  ShowOverlayEvent isa IGameEvent;

  text: Str;
  template: Str; // "normal", "dramatic", "aside"
  speakerRole: Str; // "kylin", "kylinBrother", "narrator", "halohadrian"
  isFirstInSequence: Bool;
  isLastInSequence: Bool;
  // Whether this dialog is hiding something. If so, we want to send the button trigger
  // *before* things fade out.
  isObscuring: Bool;

  buttons: ImmList:Button;
}

imm struct Button {
  label: Str;
  triggerName: Str;
}

imm struct FlyCameraEvent {
  FlyCameraEvent isa IGameEvent;

  lookAt: Location;
  relativeCameraPosition: Vec3;
  transitionTimeMs: Int; // Time to get to the specified camera
  endTriggerName: Str;
}

imm struct WaitEvent {
  WaitEvent isa IGameEvent;

  lockInput: Bool;

  // Time until it calls the trigger again.
  // If 0, will run when there's no more animations.
  timeMs: Int;

  endTriggerName: Str;
}

imm struct SetGameSpeedEvent {
  SetGameSpeedEvent isa IGameEvent;

  percent: Int; // 100 for normal speed, 0 for paused, 200 for double speed.
}
