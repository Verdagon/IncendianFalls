
root mut struct Game {
  rand: Rand;
  squareLevelsOnly: Bool;
  levels: MutSet:Level;
  var player: ?&Unit;

  var level: ?&Level;
  var time: Int;

  // See GLS for more info on these.
  var actingUnit: ?Unit;
  var pauseBeforeNextUnit: Bool;

  // Whenever a unit starts taking an action, it should increment this number.
  // This is how the view knows what effects are part of the same action.
  var actionNum: Int;

  var instructions: Str; // "" for nothing. Someday will want to make a mutable wrapper.
  var hideInput: Bool;

  var evvent: ?IGameEvent;

  // comm stands for communication.
  comms: MutList:Comm;
}

imm interface IGameEvent { }

// Stands for Communication
mut struct Comm {
  template: ICommTemplate;

  actions: ImmList:CommAction;

  texts: ImmList:CommText;
}

imm interface ICommTemplate { }
imm struct AsideCommTemplate {
  AsideCommTemplate isa ICommTemplate;
}
imm struct DialogueCommTemplate {
  DialogueCommTemplate isa ICommTemplate;
}
imm struct NormalCommTemplate {
  NormalCommTemplate isa ICommTemplate;
}
imm struct DramaticCommTemplate {
  DramaticCommTemplate isa ICommTemplate;
  // Whether this dialog is hiding something. If so, we want to send the button trigger
  // for the last page *before* it fades out.
  isObscuring: Bool;
}
// Get rid of these, only used by the view
imm struct ErrorCommTemplate {
  ErrorCommTemplate isa ICommTemplate;
}
imm struct InstructionsCommTemplate {
  InstructionsCommTemplate isa ICommTemplate;
}

imm struct CommText {
  speakerRole: Str; // "kylin", "kylinBrother", "narrator", "halohadrian"
  text: Str;
}

imm struct CommAction {
  label: Str;
  triggerName: Str;
}

imm struct FlyCameraEvent {
  FlyCameraEvent isa IGameEvent;

  lookAt: Location;
  relativeCameraPosition: Vec3;
  transitionTimeMs: Int; // Time to get to the specified camera
}

imm struct WaitEvent {
  WaitEvent isa IGameEvent;

  // Time until it calls the trigger again.
  // If 0, will run when there's no more animations.
  timeMs: Int;
}

imm struct WaitForEverythingEvent {
  WaitForEverythingEvent isa IGameEvent;
}

imm struct WaitForCameraEvent {
  WaitForCameraEvent isa IGameEvent;
}

imm struct SetGameSpeedEvent {
  SetGameSpeedEvent isa IGameEvent;

  percent: Int; // 100 for normal speed, 0 for paused, 200 for double speed.
}

// Sent whenever the game code reverts by one turn.
imm struct RevertedEvent {
  RevertedEvent isa IGameEvent;
}
