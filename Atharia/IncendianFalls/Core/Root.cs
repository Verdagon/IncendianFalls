using System;
using System.Collections;

using System.Collections.Generic;

namespace Atharia.Model {

public interface ILogger {
  void Info(string str);
  void Warning(string str);
  void Error(string str);
}

public struct VersionAndIncarnation<T> {
  public int version;
  public T incarnation;
  public VersionAndIncarnation(int version, T incarnation) {
    this.version = version;
    this.incarnation = incarnation;
  }
}

public class Root {
  private static readonly int VERSION_HASH_MULTIPLIER = 179424673;
  private static readonly int NEXT_ID_HASH_MULTIPLIER = 373587883;

  private void CheckRootsEqual(Root a, Root b) {
    if (a != b) {
      throw new System.Exception("Given objects aren't from the same root!");
    }
  }

  public readonly ILogger logger;

  // This *always* points to a live RootIncarnation. When we snapshot, we eagerly
  // make a new one of these.
  private RootIncarnation rootIncarnation;

  bool locked;

  // 0 means everything

  readonly SortedDictionary<int, List<IRandEffectObserver>> observersForRand =
      new SortedDictionary<int, List<IRandEffectObserver>>();
  readonly List<RandCreateEffect> effectsRandCreateEffect =
      new List<RandCreateEffect>();
  readonly List<RandDeleteEffect> effectsRandDeleteEffect =
      new List<RandDeleteEffect>();
  readonly List<RandSetRandEffect> effectsRandSetRandEffect =
      new List<RandSetRandEffect>();

  readonly SortedDictionary<int, List<IHoldPositionImpulseEffectObserver>> observersForHoldPositionImpulse =
      new SortedDictionary<int, List<IHoldPositionImpulseEffectObserver>>();
  readonly List<HoldPositionImpulseCreateEffect> effectsHoldPositionImpulseCreateEffect =
      new List<HoldPositionImpulseCreateEffect>();
  readonly List<HoldPositionImpulseDeleteEffect> effectsHoldPositionImpulseDeleteEffect =
      new List<HoldPositionImpulseDeleteEffect>();

  readonly SortedDictionary<int, List<IWanderAICapabilityUCEffectObserver>> observersForWanderAICapabilityUC =
      new SortedDictionary<int, List<IWanderAICapabilityUCEffectObserver>>();
  readonly List<WanderAICapabilityUCCreateEffect> effectsWanderAICapabilityUCCreateEffect =
      new List<WanderAICapabilityUCCreateEffect>();
  readonly List<WanderAICapabilityUCDeleteEffect> effectsWanderAICapabilityUCDeleteEffect =
      new List<WanderAICapabilityUCDeleteEffect>();

  readonly SortedDictionary<int, List<ITutorialDefyCounterUCEffectObserver>> observersForTutorialDefyCounterUC =
      new SortedDictionary<int, List<ITutorialDefyCounterUCEffectObserver>>();
  readonly List<TutorialDefyCounterUCCreateEffect> effectsTutorialDefyCounterUCCreateEffect =
      new List<TutorialDefyCounterUCCreateEffect>();
  readonly List<TutorialDefyCounterUCDeleteEffect> effectsTutorialDefyCounterUCDeleteEffect =
      new List<TutorialDefyCounterUCDeleteEffect>();
  readonly List<TutorialDefyCounterUCSetNumDefiesRemainingEffect> effectsTutorialDefyCounterUCSetNumDefiesRemainingEffect =
      new List<TutorialDefyCounterUCSetNumDefiesRemainingEffect>();

  readonly SortedDictionary<int, List<IUnitEffectObserver>> observersForUnit =
      new SortedDictionary<int, List<IUnitEffectObserver>>();
  readonly List<UnitCreateEffect> effectsUnitCreateEffect =
      new List<UnitCreateEffect>();
  readonly List<UnitDeleteEffect> effectsUnitDeleteEffect =
      new List<UnitDeleteEffect>();
  readonly List<UnitSetAliveEffect> effectsUnitSetAliveEffect =
      new List<UnitSetAliveEffect>();
  readonly List<UnitSetLifeEndTimeEffect> effectsUnitSetLifeEndTimeEffect =
      new List<UnitSetLifeEndTimeEffect>();
  readonly List<UnitSetLocationEffect> effectsUnitSetLocationEffect =
      new List<UnitSetLocationEffect>();
  readonly List<UnitSetNextActionTimeEffect> effectsUnitSetNextActionTimeEffect =
      new List<UnitSetNextActionTimeEffect>();
  readonly List<UnitSetHpEffect> effectsUnitSetHpEffect =
      new List<UnitSetHpEffect>();

  readonly SortedDictionary<int, List<IIUnitComponentMutBunchEffectObserver>> observersForIUnitComponentMutBunch =
      new SortedDictionary<int, List<IIUnitComponentMutBunchEffectObserver>>();
  readonly List<IUnitComponentMutBunchCreateEffect> effectsIUnitComponentMutBunchCreateEffect =
      new List<IUnitComponentMutBunchCreateEffect>();
  readonly List<IUnitComponentMutBunchDeleteEffect> effectsIUnitComponentMutBunchDeleteEffect =
      new List<IUnitComponentMutBunchDeleteEffect>();

  readonly SortedDictionary<int, List<ILightningChargedUCEffectObserver>> observersForLightningChargedUC =
      new SortedDictionary<int, List<ILightningChargedUCEffectObserver>>();
  readonly List<LightningChargedUCCreateEffect> effectsLightningChargedUCCreateEffect =
      new List<LightningChargedUCCreateEffect>();
  readonly List<LightningChargedUCDeleteEffect> effectsLightningChargedUCDeleteEffect =
      new List<LightningChargedUCDeleteEffect>();

  readonly SortedDictionary<int, List<ILightningChargingUCEffectObserver>> observersForLightningChargingUC =
      new SortedDictionary<int, List<ILightningChargingUCEffectObserver>>();
  readonly List<LightningChargingUCCreateEffect> effectsLightningChargingUCCreateEffect =
      new List<LightningChargingUCCreateEffect>();
  readonly List<LightningChargingUCDeleteEffect> effectsLightningChargingUCDeleteEffect =
      new List<LightningChargingUCDeleteEffect>();

  readonly SortedDictionary<int, List<IDoomedUCEffectObserver>> observersForDoomedUC =
      new SortedDictionary<int, List<IDoomedUCEffectObserver>>();
  readonly List<DoomedUCCreateEffect> effectsDoomedUCCreateEffect =
      new List<DoomedUCCreateEffect>();
  readonly List<DoomedUCDeleteEffect> effectsDoomedUCDeleteEffect =
      new List<DoomedUCDeleteEffect>();

  readonly SortedDictionary<int, List<ITemporaryCloneImpulseEffectObserver>> observersForTemporaryCloneImpulse =
      new SortedDictionary<int, List<ITemporaryCloneImpulseEffectObserver>>();
  readonly List<TemporaryCloneImpulseCreateEffect> effectsTemporaryCloneImpulseCreateEffect =
      new List<TemporaryCloneImpulseCreateEffect>();
  readonly List<TemporaryCloneImpulseDeleteEffect> effectsTemporaryCloneImpulseDeleteEffect =
      new List<TemporaryCloneImpulseDeleteEffect>();

  readonly SortedDictionary<int, List<ITemporaryCloneAICapabilityUCEffectObserver>> observersForTemporaryCloneAICapabilityUC =
      new SortedDictionary<int, List<ITemporaryCloneAICapabilityUCEffectObserver>>();
  readonly List<TemporaryCloneAICapabilityUCCreateEffect> effectsTemporaryCloneAICapabilityUCCreateEffect =
      new List<TemporaryCloneAICapabilityUCCreateEffect>();
  readonly List<TemporaryCloneAICapabilityUCDeleteEffect> effectsTemporaryCloneAICapabilityUCDeleteEffect =
      new List<TemporaryCloneAICapabilityUCDeleteEffect>();
  readonly List<TemporaryCloneAICapabilityUCSetChargesEffect> effectsTemporaryCloneAICapabilityUCSetChargesEffect =
      new List<TemporaryCloneAICapabilityUCSetChargesEffect>();

  readonly SortedDictionary<int, List<ISummonImpulseEffectObserver>> observersForSummonImpulse =
      new SortedDictionary<int, List<ISummonImpulseEffectObserver>>();
  readonly List<SummonImpulseCreateEffect> effectsSummonImpulseCreateEffect =
      new List<SummonImpulseCreateEffect>();
  readonly List<SummonImpulseDeleteEffect> effectsSummonImpulseDeleteEffect =
      new List<SummonImpulseDeleteEffect>();

  readonly SortedDictionary<int, List<ISummonAICapabilityUCEffectObserver>> observersForSummonAICapabilityUC =
      new SortedDictionary<int, List<ISummonAICapabilityUCEffectObserver>>();
  readonly List<SummonAICapabilityUCCreateEffect> effectsSummonAICapabilityUCCreateEffect =
      new List<SummonAICapabilityUCCreateEffect>();
  readonly List<SummonAICapabilityUCDeleteEffect> effectsSummonAICapabilityUCDeleteEffect =
      new List<SummonAICapabilityUCDeleteEffect>();
  readonly List<SummonAICapabilityUCSetChargesEffect> effectsSummonAICapabilityUCSetChargesEffect =
      new List<SummonAICapabilityUCSetChargesEffect>();

  readonly SortedDictionary<int, List<ISorcerousUCEffectObserver>> observersForSorcerousUC =
      new SortedDictionary<int, List<ISorcerousUCEffectObserver>>();
  readonly List<SorcerousUCCreateEffect> effectsSorcerousUCCreateEffect =
      new List<SorcerousUCCreateEffect>();
  readonly List<SorcerousUCDeleteEffect> effectsSorcerousUCDeleteEffect =
      new List<SorcerousUCDeleteEffect>();
  readonly List<SorcerousUCSetMpEffect> effectsSorcerousUCSetMpEffect =
      new List<SorcerousUCSetMpEffect>();
  readonly List<SorcerousUCSetMaxMpEffect> effectsSorcerousUCSetMaxMpEffect =
      new List<SorcerousUCSetMaxMpEffect>();

  readonly SortedDictionary<int, List<IBaseOffenseUCEffectObserver>> observersForBaseOffenseUC =
      new SortedDictionary<int, List<IBaseOffenseUCEffectObserver>>();
  readonly List<BaseOffenseUCCreateEffect> effectsBaseOffenseUCCreateEffect =
      new List<BaseOffenseUCCreateEffect>();
  readonly List<BaseOffenseUCDeleteEffect> effectsBaseOffenseUCDeleteEffect =
      new List<BaseOffenseUCDeleteEffect>();

  readonly SortedDictionary<int, List<IBaseMovementTimeUCEffectObserver>> observersForBaseMovementTimeUC =
      new SortedDictionary<int, List<IBaseMovementTimeUCEffectObserver>>();
  readonly List<BaseMovementTimeUCCreateEffect> effectsBaseMovementTimeUCCreateEffect =
      new List<BaseMovementTimeUCCreateEffect>();
  readonly List<BaseMovementTimeUCDeleteEffect> effectsBaseMovementTimeUCDeleteEffect =
      new List<BaseMovementTimeUCDeleteEffect>();

  readonly SortedDictionary<int, List<IBaseDefenseUCEffectObserver>> observersForBaseDefenseUC =
      new SortedDictionary<int, List<IBaseDefenseUCEffectObserver>>();
  readonly List<BaseDefenseUCCreateEffect> effectsBaseDefenseUCCreateEffect =
      new List<BaseDefenseUCCreateEffect>();
  readonly List<BaseDefenseUCDeleteEffect> effectsBaseDefenseUCDeleteEffect =
      new List<BaseDefenseUCDeleteEffect>();

  readonly SortedDictionary<int, List<IBaseCombatTimeUCEffectObserver>> observersForBaseCombatTimeUC =
      new SortedDictionary<int, List<IBaseCombatTimeUCEffectObserver>>();
  readonly List<BaseCombatTimeUCCreateEffect> effectsBaseCombatTimeUCCreateEffect =
      new List<BaseCombatTimeUCCreateEffect>();
  readonly List<BaseCombatTimeUCDeleteEffect> effectsBaseCombatTimeUCDeleteEffect =
      new List<BaseCombatTimeUCDeleteEffect>();

  readonly SortedDictionary<int, List<IMiredUCEffectObserver>> observersForMiredUC =
      new SortedDictionary<int, List<IMiredUCEffectObserver>>();
  readonly List<MiredUCCreateEffect> effectsMiredUCCreateEffect =
      new List<MiredUCCreateEffect>();
  readonly List<MiredUCDeleteEffect> effectsMiredUCDeleteEffect =
      new List<MiredUCDeleteEffect>();

  readonly SortedDictionary<int, List<IMireImpulseEffectObserver>> observersForMireImpulse =
      new SortedDictionary<int, List<IMireImpulseEffectObserver>>();
  readonly List<MireImpulseCreateEffect> effectsMireImpulseCreateEffect =
      new List<MireImpulseCreateEffect>();
  readonly List<MireImpulseDeleteEffect> effectsMireImpulseDeleteEffect =
      new List<MireImpulseDeleteEffect>();

  readonly SortedDictionary<int, List<IEvaporateImpulseEffectObserver>> observersForEvaporateImpulse =
      new SortedDictionary<int, List<IEvaporateImpulseEffectObserver>>();
  readonly List<EvaporateImpulseCreateEffect> effectsEvaporateImpulseCreateEffect =
      new List<EvaporateImpulseCreateEffect>();
  readonly List<EvaporateImpulseDeleteEffect> effectsEvaporateImpulseDeleteEffect =
      new List<EvaporateImpulseDeleteEffect>();

  readonly SortedDictionary<int, List<ITimeCloneAICapabilityUCEffectObserver>> observersForTimeCloneAICapabilityUC =
      new SortedDictionary<int, List<ITimeCloneAICapabilityUCEffectObserver>>();
  readonly List<TimeCloneAICapabilityUCCreateEffect> effectsTimeCloneAICapabilityUCCreateEffect =
      new List<TimeCloneAICapabilityUCCreateEffect>();
  readonly List<TimeCloneAICapabilityUCDeleteEffect> effectsTimeCloneAICapabilityUCDeleteEffect =
      new List<TimeCloneAICapabilityUCDeleteEffect>();

  readonly SortedDictionary<int, List<IMoveImpulseEffectObserver>> observersForMoveImpulse =
      new SortedDictionary<int, List<IMoveImpulseEffectObserver>>();
  readonly List<MoveImpulseCreateEffect> effectsMoveImpulseCreateEffect =
      new List<MoveImpulseCreateEffect>();
  readonly List<MoveImpulseDeleteEffect> effectsMoveImpulseDeleteEffect =
      new List<MoveImpulseDeleteEffect>();

  readonly SortedDictionary<int, List<IKamikazeTargetTTCEffectObserver>> observersForKamikazeTargetTTC =
      new SortedDictionary<int, List<IKamikazeTargetTTCEffectObserver>>();
  readonly List<KamikazeTargetTTCCreateEffect> effectsKamikazeTargetTTCCreateEffect =
      new List<KamikazeTargetTTCCreateEffect>();
  readonly List<KamikazeTargetTTCDeleteEffect> effectsKamikazeTargetTTCDeleteEffect =
      new List<KamikazeTargetTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IKamikazeJumpImpulseEffectObserver>> observersForKamikazeJumpImpulse =
      new SortedDictionary<int, List<IKamikazeJumpImpulseEffectObserver>>();
  readonly List<KamikazeJumpImpulseCreateEffect> effectsKamikazeJumpImpulseCreateEffect =
      new List<KamikazeJumpImpulseCreateEffect>();
  readonly List<KamikazeJumpImpulseDeleteEffect> effectsKamikazeJumpImpulseDeleteEffect =
      new List<KamikazeJumpImpulseDeleteEffect>();

  readonly SortedDictionary<int, List<IKamikazeTargetImpulseEffectObserver>> observersForKamikazeTargetImpulse =
      new SortedDictionary<int, List<IKamikazeTargetImpulseEffectObserver>>();
  readonly List<KamikazeTargetImpulseCreateEffect> effectsKamikazeTargetImpulseCreateEffect =
      new List<KamikazeTargetImpulseCreateEffect>();
  readonly List<KamikazeTargetImpulseDeleteEffect> effectsKamikazeTargetImpulseDeleteEffect =
      new List<KamikazeTargetImpulseDeleteEffect>();

  readonly SortedDictionary<int, List<IKamikazeAICapabilityUCEffectObserver>> observersForKamikazeAICapabilityUC =
      new SortedDictionary<int, List<IKamikazeAICapabilityUCEffectObserver>>();
  readonly List<KamikazeAICapabilityUCCreateEffect> effectsKamikazeAICapabilityUCCreateEffect =
      new List<KamikazeAICapabilityUCCreateEffect>();
  readonly List<KamikazeAICapabilityUCDeleteEffect> effectsKamikazeAICapabilityUCDeleteEffect =
      new List<KamikazeAICapabilityUCDeleteEffect>();
  readonly List<KamikazeAICapabilityUCSetTargetByLocationEffect> effectsKamikazeAICapabilityUCSetTargetByLocationEffect =
      new List<KamikazeAICapabilityUCSetTargetByLocationEffect>();
  readonly List<KamikazeAICapabilityUCSetTargetLocationCenterEffect> effectsKamikazeAICapabilityUCSetTargetLocationCenterEffect =
      new List<KamikazeAICapabilityUCSetTargetLocationCenterEffect>();

  readonly SortedDictionary<int, List<IInvincibilityUCEffectObserver>> observersForInvincibilityUC =
      new SortedDictionary<int, List<IInvincibilityUCEffectObserver>>();
  readonly List<InvincibilityUCCreateEffect> effectsInvincibilityUCCreateEffect =
      new List<InvincibilityUCCreateEffect>();
  readonly List<InvincibilityUCDeleteEffect> effectsInvincibilityUCDeleteEffect =
      new List<InvincibilityUCDeleteEffect>();

  readonly SortedDictionary<int, List<IGuardAICapabilityUCEffectObserver>> observersForGuardAICapabilityUC =
      new SortedDictionary<int, List<IGuardAICapabilityUCEffectObserver>>();
  readonly List<GuardAICapabilityUCCreateEffect> effectsGuardAICapabilityUCCreateEffect =
      new List<GuardAICapabilityUCCreateEffect>();
  readonly List<GuardAICapabilityUCDeleteEffect> effectsGuardAICapabilityUCDeleteEffect =
      new List<GuardAICapabilityUCDeleteEffect>();

  readonly SortedDictionary<int, List<INoImpulseEffectObserver>> observersForNoImpulse =
      new SortedDictionary<int, List<INoImpulseEffectObserver>>();
  readonly List<NoImpulseCreateEffect> effectsNoImpulseCreateEffect =
      new List<NoImpulseCreateEffect>();
  readonly List<NoImpulseDeleteEffect> effectsNoImpulseDeleteEffect =
      new List<NoImpulseDeleteEffect>();

  readonly SortedDictionary<int, List<IFireImpulseEffectObserver>> observersForFireImpulse =
      new SortedDictionary<int, List<IFireImpulseEffectObserver>>();
  readonly List<FireImpulseCreateEffect> effectsFireImpulseCreateEffect =
      new List<FireImpulseCreateEffect>();
  readonly List<FireImpulseDeleteEffect> effectsFireImpulseDeleteEffect =
      new List<FireImpulseDeleteEffect>();

  readonly SortedDictionary<int, List<IDefyingUCEffectObserver>> observersForDefyingUC =
      new SortedDictionary<int, List<IDefyingUCEffectObserver>>();
  readonly List<DefyingUCCreateEffect> effectsDefyingUCCreateEffect =
      new List<DefyingUCCreateEffect>();
  readonly List<DefyingUCDeleteEffect> effectsDefyingUCDeleteEffect =
      new List<DefyingUCDeleteEffect>();

  readonly SortedDictionary<int, List<IDefyImpulseEffectObserver>> observersForDefyImpulse =
      new SortedDictionary<int, List<IDefyImpulseEffectObserver>>();
  readonly List<DefyImpulseCreateEffect> effectsDefyImpulseCreateEffect =
      new List<DefyImpulseCreateEffect>();
  readonly List<DefyImpulseDeleteEffect> effectsDefyImpulseDeleteEffect =
      new List<DefyImpulseDeleteEffect>();

  readonly SortedDictionary<int, List<ICounteringUCEffectObserver>> observersForCounteringUC =
      new SortedDictionary<int, List<ICounteringUCEffectObserver>>();
  readonly List<CounteringUCCreateEffect> effectsCounteringUCCreateEffect =
      new List<CounteringUCCreateEffect>();
  readonly List<CounteringUCDeleteEffect> effectsCounteringUCDeleteEffect =
      new List<CounteringUCDeleteEffect>();

  readonly SortedDictionary<int, List<ICounterImpulseEffectObserver>> observersForCounterImpulse =
      new SortedDictionary<int, List<ICounterImpulseEffectObserver>>();
  readonly List<CounterImpulseCreateEffect> effectsCounterImpulseCreateEffect =
      new List<CounterImpulseCreateEffect>();
  readonly List<CounterImpulseDeleteEffect> effectsCounterImpulseDeleteEffect =
      new List<CounterImpulseDeleteEffect>();

  readonly SortedDictionary<int, List<IUnleashBideImpulseEffectObserver>> observersForUnleashBideImpulse =
      new SortedDictionary<int, List<IUnleashBideImpulseEffectObserver>>();
  readonly List<UnleashBideImpulseCreateEffect> effectsUnleashBideImpulseCreateEffect =
      new List<UnleashBideImpulseCreateEffect>();
  readonly List<UnleashBideImpulseDeleteEffect> effectsUnleashBideImpulseDeleteEffect =
      new List<UnleashBideImpulseDeleteEffect>();

  readonly SortedDictionary<int, List<IContinueBidingImpulseEffectObserver>> observersForContinueBidingImpulse =
      new SortedDictionary<int, List<IContinueBidingImpulseEffectObserver>>();
  readonly List<ContinueBidingImpulseCreateEffect> effectsContinueBidingImpulseCreateEffect =
      new List<ContinueBidingImpulseCreateEffect>();
  readonly List<ContinueBidingImpulseDeleteEffect> effectsContinueBidingImpulseDeleteEffect =
      new List<ContinueBidingImpulseDeleteEffect>();

  readonly SortedDictionary<int, List<IStartBidingImpulseEffectObserver>> observersForStartBidingImpulse =
      new SortedDictionary<int, List<IStartBidingImpulseEffectObserver>>();
  readonly List<StartBidingImpulseCreateEffect> effectsStartBidingImpulseCreateEffect =
      new List<StartBidingImpulseCreateEffect>();
  readonly List<StartBidingImpulseDeleteEffect> effectsStartBidingImpulseDeleteEffect =
      new List<StartBidingImpulseDeleteEffect>();

  readonly SortedDictionary<int, List<IBideAICapabilityUCEffectObserver>> observersForBideAICapabilityUC =
      new SortedDictionary<int, List<IBideAICapabilityUCEffectObserver>>();
  readonly List<BideAICapabilityUCCreateEffect> effectsBideAICapabilityUCCreateEffect =
      new List<BideAICapabilityUCCreateEffect>();
  readonly List<BideAICapabilityUCDeleteEffect> effectsBideAICapabilityUCDeleteEffect =
      new List<BideAICapabilityUCDeleteEffect>();
  readonly List<BideAICapabilityUCSetChargeEffect> effectsBideAICapabilityUCSetChargeEffect =
      new List<BideAICapabilityUCSetChargeEffect>();

  readonly SortedDictionary<int, List<IAttackImpulseEffectObserver>> observersForAttackImpulse =
      new SortedDictionary<int, List<IAttackImpulseEffectObserver>>();
  readonly List<AttackImpulseCreateEffect> effectsAttackImpulseCreateEffect =
      new List<AttackImpulseCreateEffect>();
  readonly List<AttackImpulseDeleteEffect> effectsAttackImpulseDeleteEffect =
      new List<AttackImpulseDeleteEffect>();

  readonly SortedDictionary<int, List<IPursueImpulseEffectObserver>> observersForPursueImpulse =
      new SortedDictionary<int, List<IPursueImpulseEffectObserver>>();
  readonly List<PursueImpulseCreateEffect> effectsPursueImpulseCreateEffect =
      new List<PursueImpulseCreateEffect>();
  readonly List<PursueImpulseDeleteEffect> effectsPursueImpulseDeleteEffect =
      new List<PursueImpulseDeleteEffect>();

  readonly SortedDictionary<int, List<IKillDirectiveEffectObserver>> observersForKillDirective =
      new SortedDictionary<int, List<IKillDirectiveEffectObserver>>();
  readonly List<KillDirectiveCreateEffect> effectsKillDirectiveCreateEffect =
      new List<KillDirectiveCreateEffect>();
  readonly List<KillDirectiveDeleteEffect> effectsKillDirectiveDeleteEffect =
      new List<KillDirectiveDeleteEffect>();

  readonly SortedDictionary<int, List<IAttackAICapabilityUCEffectObserver>> observersForAttackAICapabilityUC =
      new SortedDictionary<int, List<IAttackAICapabilityUCEffectObserver>>();
  readonly List<AttackAICapabilityUCCreateEffect> effectsAttackAICapabilityUCCreateEffect =
      new List<AttackAICapabilityUCCreateEffect>();
  readonly List<AttackAICapabilityUCDeleteEffect> effectsAttackAICapabilityUCDeleteEffect =
      new List<AttackAICapabilityUCDeleteEffect>();
  readonly List<AttackAICapabilityUCSetKillDirectiveEffect> effectsAttackAICapabilityUCSetKillDirectiveEffect =
      new List<AttackAICapabilityUCSetKillDirectiveEffect>();

  readonly SortedDictionary<int, List<IWarperTTCEffectObserver>> observersForWarperTTC =
      new SortedDictionary<int, List<IWarperTTCEffectObserver>>();
  readonly List<WarperTTCCreateEffect> effectsWarperTTCCreateEffect =
      new List<WarperTTCCreateEffect>();
  readonly List<WarperTTCDeleteEffect> effectsWarperTTCDeleteEffect =
      new List<WarperTTCDeleteEffect>();

  readonly SortedDictionary<int, List<ITimeAnchorTTCEffectObserver>> observersForTimeAnchorTTC =
      new SortedDictionary<int, List<ITimeAnchorTTCEffectObserver>>();
  readonly List<TimeAnchorTTCCreateEffect> effectsTimeAnchorTTCCreateEffect =
      new List<TimeAnchorTTCCreateEffect>();
  readonly List<TimeAnchorTTCDeleteEffect> effectsTimeAnchorTTCDeleteEffect =
      new List<TimeAnchorTTCDeleteEffect>();

  readonly SortedDictionary<int, List<ITerrainTileEffectObserver>> observersForTerrainTile =
      new SortedDictionary<int, List<ITerrainTileEffectObserver>>();
  readonly List<TerrainTileCreateEffect> effectsTerrainTileCreateEffect =
      new List<TerrainTileCreateEffect>();
  readonly List<TerrainTileDeleteEffect> effectsTerrainTileDeleteEffect =
      new List<TerrainTileDeleteEffect>();
  readonly List<TerrainTileSetElevationEffect> effectsTerrainTileSetElevationEffect =
      new List<TerrainTileSetElevationEffect>();

  readonly SortedDictionary<int, List<IITerrainTileComponentMutBunchEffectObserver>> observersForITerrainTileComponentMutBunch =
      new SortedDictionary<int, List<IITerrainTileComponentMutBunchEffectObserver>>();
  readonly List<ITerrainTileComponentMutBunchCreateEffect> effectsITerrainTileComponentMutBunchCreateEffect =
      new List<ITerrainTileComponentMutBunchCreateEffect>();
  readonly List<ITerrainTileComponentMutBunchDeleteEffect> effectsITerrainTileComponentMutBunchDeleteEffect =
      new List<ITerrainTileComponentMutBunchDeleteEffect>();

  readonly SortedDictionary<int, List<ITerrainEffectObserver>> observersForTerrain =
      new SortedDictionary<int, List<ITerrainEffectObserver>>();
  readonly List<TerrainCreateEffect> effectsTerrainCreateEffect =
      new List<TerrainCreateEffect>();
  readonly List<TerrainDeleteEffect> effectsTerrainDeleteEffect =
      new List<TerrainDeleteEffect>();
  readonly List<TerrainSetPatternEffect> effectsTerrainSetPatternEffect =
      new List<TerrainSetPatternEffect>();

  readonly SortedDictionary<int, List<ISimplePresenceTriggerTTCEffectObserver>> observersForSimplePresenceTriggerTTC =
      new SortedDictionary<int, List<ISimplePresenceTriggerTTCEffectObserver>>();
  readonly List<SimplePresenceTriggerTTCCreateEffect> effectsSimplePresenceTriggerTTCCreateEffect =
      new List<SimplePresenceTriggerTTCCreateEffect>();
  readonly List<SimplePresenceTriggerTTCDeleteEffect> effectsSimplePresenceTriggerTTCDeleteEffect =
      new List<SimplePresenceTriggerTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IFireBombImpulseEffectObserver>> observersForFireBombImpulse =
      new SortedDictionary<int, List<IFireBombImpulseEffectObserver>>();
  readonly List<FireBombImpulseCreateEffect> effectsFireBombImpulseCreateEffect =
      new List<FireBombImpulseCreateEffect>();
  readonly List<FireBombImpulseDeleteEffect> effectsFireBombImpulseDeleteEffect =
      new List<FireBombImpulseDeleteEffect>();

  readonly SortedDictionary<int, List<IFireBombTTCEffectObserver>> observersForFireBombTTC =
      new SortedDictionary<int, List<IFireBombTTCEffectObserver>>();
  readonly List<FireBombTTCCreateEffect> effectsFireBombTTCCreateEffect =
      new List<FireBombTTCCreateEffect>();
  readonly List<FireBombTTCDeleteEffect> effectsFireBombTTCDeleteEffect =
      new List<FireBombTTCDeleteEffect>();
  readonly List<FireBombTTCSetTurnsUntilExplosionEffect> effectsFireBombTTCSetTurnsUntilExplosionEffect =
      new List<FireBombTTCSetTurnsUntilExplosionEffect>();

  readonly SortedDictionary<int, List<IMarkerTTCEffectObserver>> observersForMarkerTTC =
      new SortedDictionary<int, List<IMarkerTTCEffectObserver>>();
  readonly List<MarkerTTCCreateEffect> effectsMarkerTTCCreateEffect =
      new List<MarkerTTCCreateEffect>();
  readonly List<MarkerTTCDeleteEffect> effectsMarkerTTCDeleteEffect =
      new List<MarkerTTCDeleteEffect>();

  readonly SortedDictionary<int, List<ILevelLinkTTCEffectObserver>> observersForLevelLinkTTC =
      new SortedDictionary<int, List<ILevelLinkTTCEffectObserver>>();
  readonly List<LevelLinkTTCCreateEffect> effectsLevelLinkTTCCreateEffect =
      new List<LevelLinkTTCCreateEffect>();
  readonly List<LevelLinkTTCDeleteEffect> effectsLevelLinkTTCDeleteEffect =
      new List<LevelLinkTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IMudTTCEffectObserver>> observersForMudTTC =
      new SortedDictionary<int, List<IMudTTCEffectObserver>>();
  readonly List<MudTTCCreateEffect> effectsMudTTCCreateEffect =
      new List<MudTTCCreateEffect>();
  readonly List<MudTTCDeleteEffect> effectsMudTTCDeleteEffect =
      new List<MudTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IDirtTTCEffectObserver>> observersForDirtTTC =
      new SortedDictionary<int, List<IDirtTTCEffectObserver>>();
  readonly List<DirtTTCCreateEffect> effectsDirtTTCCreateEffect =
      new List<DirtTTCCreateEffect>();
  readonly List<DirtTTCDeleteEffect> effectsDirtTTCDeleteEffect =
      new List<DirtTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IObsidianTTCEffectObserver>> observersForObsidianTTC =
      new SortedDictionary<int, List<IObsidianTTCEffectObserver>>();
  readonly List<ObsidianTTCCreateEffect> effectsObsidianTTCCreateEffect =
      new List<ObsidianTTCCreateEffect>();
  readonly List<ObsidianTTCDeleteEffect> effectsObsidianTTCDeleteEffect =
      new List<ObsidianTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IDownStairsTTCEffectObserver>> observersForDownStairsTTC =
      new SortedDictionary<int, List<IDownStairsTTCEffectObserver>>();
  readonly List<DownStairsTTCCreateEffect> effectsDownStairsTTCCreateEffect =
      new List<DownStairsTTCCreateEffect>();
  readonly List<DownStairsTTCDeleteEffect> effectsDownStairsTTCDeleteEffect =
      new List<DownStairsTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IUpStairsTTCEffectObserver>> observersForUpStairsTTC =
      new SortedDictionary<int, List<IUpStairsTTCEffectObserver>>();
  readonly List<UpStairsTTCCreateEffect> effectsUpStairsTTCCreateEffect =
      new List<UpStairsTTCCreateEffect>();
  readonly List<UpStairsTTCDeleteEffect> effectsUpStairsTTCDeleteEffect =
      new List<UpStairsTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IWallTTCEffectObserver>> observersForWallTTC =
      new SortedDictionary<int, List<IWallTTCEffectObserver>>();
  readonly List<WallTTCCreateEffect> effectsWallTTCCreateEffect =
      new List<WallTTCCreateEffect>();
  readonly List<WallTTCDeleteEffect> effectsWallTTCDeleteEffect =
      new List<WallTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IBloodTTCEffectObserver>> observersForBloodTTC =
      new SortedDictionary<int, List<IBloodTTCEffectObserver>>();
  readonly List<BloodTTCCreateEffect> effectsBloodTTCCreateEffect =
      new List<BloodTTCCreateEffect>();
  readonly List<BloodTTCDeleteEffect> effectsBloodTTCDeleteEffect =
      new List<BloodTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IRocksTTCEffectObserver>> observersForRocksTTC =
      new SortedDictionary<int, List<IRocksTTCEffectObserver>>();
  readonly List<RocksTTCCreateEffect> effectsRocksTTCCreateEffect =
      new List<RocksTTCCreateEffect>();
  readonly List<RocksTTCDeleteEffect> effectsRocksTTCDeleteEffect =
      new List<RocksTTCDeleteEffect>();

  readonly SortedDictionary<int, List<ITreeTTCEffectObserver>> observersForTreeTTC =
      new SortedDictionary<int, List<ITreeTTCEffectObserver>>();
  readonly List<TreeTTCCreateEffect> effectsTreeTTCCreateEffect =
      new List<TreeTTCCreateEffect>();
  readonly List<TreeTTCDeleteEffect> effectsTreeTTCDeleteEffect =
      new List<TreeTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IWaterTTCEffectObserver>> observersForWaterTTC =
      new SortedDictionary<int, List<IWaterTTCEffectObserver>>();
  readonly List<WaterTTCCreateEffect> effectsWaterTTCCreateEffect =
      new List<WaterTTCCreateEffect>();
  readonly List<WaterTTCDeleteEffect> effectsWaterTTCDeleteEffect =
      new List<WaterTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IFloorTTCEffectObserver>> observersForFloorTTC =
      new SortedDictionary<int, List<IFloorTTCEffectObserver>>();
  readonly List<FloorTTCCreateEffect> effectsFloorTTCCreateEffect =
      new List<FloorTTCCreateEffect>();
  readonly List<FloorTTCDeleteEffect> effectsFloorTTCDeleteEffect =
      new List<FloorTTCDeleteEffect>();

  readonly SortedDictionary<int, List<ICaveWallTTCEffectObserver>> observersForCaveWallTTC =
      new SortedDictionary<int, List<ICaveWallTTCEffectObserver>>();
  readonly List<CaveWallTTCCreateEffect> effectsCaveWallTTCCreateEffect =
      new List<CaveWallTTCCreateEffect>();
  readonly List<CaveWallTTCDeleteEffect> effectsCaveWallTTCDeleteEffect =
      new List<CaveWallTTCDeleteEffect>();

  readonly SortedDictionary<int, List<ICaveTTCEffectObserver>> observersForCaveTTC =
      new SortedDictionary<int, List<ICaveTTCEffectObserver>>();
  readonly List<CaveTTCCreateEffect> effectsCaveTTCCreateEffect =
      new List<CaveTTCCreateEffect>();
  readonly List<CaveTTCDeleteEffect> effectsCaveTTCDeleteEffect =
      new List<CaveTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IFallsTTCEffectObserver>> observersForFallsTTC =
      new SortedDictionary<int, List<IFallsTTCEffectObserver>>();
  readonly List<FallsTTCCreateEffect> effectsFallsTTCCreateEffect =
      new List<FallsTTCCreateEffect>();
  readonly List<FallsTTCDeleteEffect> effectsFallsTTCDeleteEffect =
      new List<FallsTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IFireTTCEffectObserver>> observersForFireTTC =
      new SortedDictionary<int, List<IFireTTCEffectObserver>>();
  readonly List<FireTTCCreateEffect> effectsFireTTCCreateEffect =
      new List<FireTTCCreateEffect>();
  readonly List<FireTTCDeleteEffect> effectsFireTTCDeleteEffect =
      new List<FireTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IObsidianFloorTTCEffectObserver>> observersForObsidianFloorTTC =
      new SortedDictionary<int, List<IObsidianFloorTTCEffectObserver>>();
  readonly List<ObsidianFloorTTCCreateEffect> effectsObsidianFloorTTCCreateEffect =
      new List<ObsidianFloorTTCCreateEffect>();
  readonly List<ObsidianFloorTTCDeleteEffect> effectsObsidianFloorTTCDeleteEffect =
      new List<ObsidianFloorTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IMagmaTTCEffectObserver>> observersForMagmaTTC =
      new SortedDictionary<int, List<IMagmaTTCEffectObserver>>();
  readonly List<MagmaTTCCreateEffect> effectsMagmaTTCCreateEffect =
      new List<MagmaTTCCreateEffect>();
  readonly List<MagmaTTCDeleteEffect> effectsMagmaTTCDeleteEffect =
      new List<MagmaTTCDeleteEffect>();

  readonly SortedDictionary<int, List<ICliffTTCEffectObserver>> observersForCliffTTC =
      new SortedDictionary<int, List<ICliffTTCEffectObserver>>();
  readonly List<CliffTTCCreateEffect> effectsCliffTTCCreateEffect =
      new List<CliffTTCCreateEffect>();
  readonly List<CliffTTCDeleteEffect> effectsCliffTTCDeleteEffect =
      new List<CliffTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IRavaNestTTCEffectObserver>> observersForRavaNestTTC =
      new SortedDictionary<int, List<IRavaNestTTCEffectObserver>>();
  readonly List<RavaNestTTCCreateEffect> effectsRavaNestTTCCreateEffect =
      new List<RavaNestTTCCreateEffect>();
  readonly List<RavaNestTTCDeleteEffect> effectsRavaNestTTCDeleteEffect =
      new List<RavaNestTTCDeleteEffect>();

  readonly SortedDictionary<int, List<ICliffLandingTTCEffectObserver>> observersForCliffLandingTTC =
      new SortedDictionary<int, List<ICliffLandingTTCEffectObserver>>();
  readonly List<CliffLandingTTCCreateEffect> effectsCliffLandingTTCCreateEffect =
      new List<CliffLandingTTCCreateEffect>();
  readonly List<CliffLandingTTCDeleteEffect> effectsCliffLandingTTCDeleteEffect =
      new List<CliffLandingTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IStoneTTCEffectObserver>> observersForStoneTTC =
      new SortedDictionary<int, List<IStoneTTCEffectObserver>>();
  readonly List<StoneTTCCreateEffect> effectsStoneTTCCreateEffect =
      new List<StoneTTCCreateEffect>();
  readonly List<StoneTTCDeleteEffect> effectsStoneTTCDeleteEffect =
      new List<StoneTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IGrassTTCEffectObserver>> observersForGrassTTC =
      new SortedDictionary<int, List<IGrassTTCEffectObserver>>();
  readonly List<GrassTTCCreateEffect> effectsGrassTTCCreateEffect =
      new List<GrassTTCCreateEffect>();
  readonly List<GrassTTCDeleteEffect> effectsGrassTTCDeleteEffect =
      new List<GrassTTCDeleteEffect>();

  readonly SortedDictionary<int, List<ILevelEffectObserver>> observersForLevel =
      new SortedDictionary<int, List<ILevelEffectObserver>>();
  readonly List<LevelCreateEffect> effectsLevelCreateEffect =
      new List<LevelCreateEffect>();
  readonly List<LevelDeleteEffect> effectsLevelDeleteEffect =
      new List<LevelDeleteEffect>();
  readonly List<LevelSetControllerEffect> effectsLevelSetControllerEffect =
      new List<LevelSetControllerEffect>();
  readonly List<LevelSetTimeEffect> effectsLevelSetTimeEffect =
      new List<LevelSetTimeEffect>();

  readonly SortedDictionary<int, List<ISpeedRingEffectObserver>> observersForSpeedRing =
      new SortedDictionary<int, List<ISpeedRingEffectObserver>>();
  readonly List<SpeedRingCreateEffect> effectsSpeedRingCreateEffect =
      new List<SpeedRingCreateEffect>();
  readonly List<SpeedRingDeleteEffect> effectsSpeedRingDeleteEffect =
      new List<SpeedRingDeleteEffect>();

  readonly SortedDictionary<int, List<IManaPotionEffectObserver>> observersForManaPotion =
      new SortedDictionary<int, List<IManaPotionEffectObserver>>();
  readonly List<ManaPotionCreateEffect> effectsManaPotionCreateEffect =
      new List<ManaPotionCreateEffect>();
  readonly List<ManaPotionDeleteEffect> effectsManaPotionDeleteEffect =
      new List<ManaPotionDeleteEffect>();

  readonly SortedDictionary<int, List<IWatEffectObserver>> observersForWat =
      new SortedDictionary<int, List<IWatEffectObserver>>();
  readonly List<WatCreateEffect> effectsWatCreateEffect =
      new List<WatCreateEffect>();
  readonly List<WatDeleteEffect> effectsWatDeleteEffect =
      new List<WatDeleteEffect>();

  readonly SortedDictionary<int, List<IIImpulseStrongMutBunchEffectObserver>> observersForIImpulseStrongMutBunch =
      new SortedDictionary<int, List<IIImpulseStrongMutBunchEffectObserver>>();
  readonly List<IImpulseStrongMutBunchCreateEffect> effectsIImpulseStrongMutBunchCreateEffect =
      new List<IImpulseStrongMutBunchCreateEffect>();
  readonly List<IImpulseStrongMutBunchDeleteEffect> effectsIImpulseStrongMutBunchDeleteEffect =
      new List<IImpulseStrongMutBunchDeleteEffect>();

  readonly SortedDictionary<int, List<IIItemStrongMutBunchEffectObserver>> observersForIItemStrongMutBunch =
      new SortedDictionary<int, List<IIItemStrongMutBunchEffectObserver>>();
  readonly List<IItemStrongMutBunchCreateEffect> effectsIItemStrongMutBunchCreateEffect =
      new List<IItemStrongMutBunchCreateEffect>();
  readonly List<IItemStrongMutBunchDeleteEffect> effectsIItemStrongMutBunchDeleteEffect =
      new List<IItemStrongMutBunchDeleteEffect>();

  readonly SortedDictionary<int, List<IItemTTCEffectObserver>> observersForItemTTC =
      new SortedDictionary<int, List<IItemTTCEffectObserver>>();
  readonly List<ItemTTCCreateEffect> effectsItemTTCCreateEffect =
      new List<ItemTTCCreateEffect>();
  readonly List<ItemTTCDeleteEffect> effectsItemTTCDeleteEffect =
      new List<ItemTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IHealthPotionEffectObserver>> observersForHealthPotion =
      new SortedDictionary<int, List<IHealthPotionEffectObserver>>();
  readonly List<HealthPotionCreateEffect> effectsHealthPotionCreateEffect =
      new List<HealthPotionCreateEffect>();
  readonly List<HealthPotionDeleteEffect> effectsHealthPotionDeleteEffect =
      new List<HealthPotionDeleteEffect>();

  readonly SortedDictionary<int, List<IGlaiveEffectObserver>> observersForGlaive =
      new SortedDictionary<int, List<IGlaiveEffectObserver>>();
  readonly List<GlaiveCreateEffect> effectsGlaiveCreateEffect =
      new List<GlaiveCreateEffect>();
  readonly List<GlaiveDeleteEffect> effectsGlaiveDeleteEffect =
      new List<GlaiveDeleteEffect>();

  readonly SortedDictionary<int, List<ISlowRodEffectObserver>> observersForSlowRod =
      new SortedDictionary<int, List<ISlowRodEffectObserver>>();
  readonly List<SlowRodCreateEffect> effectsSlowRodCreateEffect =
      new List<SlowRodCreateEffect>();
  readonly List<SlowRodDeleteEffect> effectsSlowRodDeleteEffect =
      new List<SlowRodDeleteEffect>();

  readonly SortedDictionary<int, List<IBlastRodEffectObserver>> observersForBlastRod =
      new SortedDictionary<int, List<IBlastRodEffectObserver>>();
  readonly List<BlastRodCreateEffect> effectsBlastRodCreateEffect =
      new List<BlastRodCreateEffect>();
  readonly List<BlastRodDeleteEffect> effectsBlastRodDeleteEffect =
      new List<BlastRodDeleteEffect>();

  readonly SortedDictionary<int, List<IArmorEffectObserver>> observersForArmor =
      new SortedDictionary<int, List<IArmorEffectObserver>>();
  readonly List<ArmorCreateEffect> effectsArmorCreateEffect =
      new List<ArmorCreateEffect>();
  readonly List<ArmorDeleteEffect> effectsArmorDeleteEffect =
      new List<ArmorDeleteEffect>();

  readonly SortedDictionary<int, List<ISquareCaveLevelControllerEffectObserver>> observersForSquareCaveLevelController =
      new SortedDictionary<int, List<ISquareCaveLevelControllerEffectObserver>>();
  readonly List<SquareCaveLevelControllerCreateEffect> effectsSquareCaveLevelControllerCreateEffect =
      new List<SquareCaveLevelControllerCreateEffect>();
  readonly List<SquareCaveLevelControllerDeleteEffect> effectsSquareCaveLevelControllerDeleteEffect =
      new List<SquareCaveLevelControllerDeleteEffect>();

  readonly SortedDictionary<int, List<IRavashrikeLevelControllerEffectObserver>> observersForRavashrikeLevelController =
      new SortedDictionary<int, List<IRavashrikeLevelControllerEffectObserver>>();
  readonly List<RavashrikeLevelControllerCreateEffect> effectsRavashrikeLevelControllerCreateEffect =
      new List<RavashrikeLevelControllerCreateEffect>();
  readonly List<RavashrikeLevelControllerDeleteEffect> effectsRavashrikeLevelControllerDeleteEffect =
      new List<RavashrikeLevelControllerDeleteEffect>();

  readonly SortedDictionary<int, List<IPentagonalCaveLevelControllerEffectObserver>> observersForPentagonalCaveLevelController =
      new SortedDictionary<int, List<IPentagonalCaveLevelControllerEffectObserver>>();
  readonly List<PentagonalCaveLevelControllerCreateEffect> effectsPentagonalCaveLevelControllerCreateEffect =
      new List<PentagonalCaveLevelControllerCreateEffect>();
  readonly List<PentagonalCaveLevelControllerDeleteEffect> effectsPentagonalCaveLevelControllerDeleteEffect =
      new List<PentagonalCaveLevelControllerDeleteEffect>();

  readonly SortedDictionary<int, List<IIncendianFallsLevelLinkerTTCEffectObserver>> observersForIncendianFallsLevelLinkerTTC =
      new SortedDictionary<int, List<IIncendianFallsLevelLinkerTTCEffectObserver>>();
  readonly List<IncendianFallsLevelLinkerTTCCreateEffect> effectsIncendianFallsLevelLinkerTTCCreateEffect =
      new List<IncendianFallsLevelLinkerTTCCreateEffect>();
  readonly List<IncendianFallsLevelLinkerTTCDeleteEffect> effectsIncendianFallsLevelLinkerTTCDeleteEffect =
      new List<IncendianFallsLevelLinkerTTCDeleteEffect>();

  readonly SortedDictionary<int, List<ICliffLevelControllerEffectObserver>> observersForCliffLevelController =
      new SortedDictionary<int, List<ICliffLevelControllerEffectObserver>>();
  readonly List<CliffLevelControllerCreateEffect> effectsCliffLevelControllerCreateEffect =
      new List<CliffLevelControllerCreateEffect>();
  readonly List<CliffLevelControllerDeleteEffect> effectsCliffLevelControllerDeleteEffect =
      new List<CliffLevelControllerDeleteEffect>();

  readonly SortedDictionary<int, List<IPreGauntletLevelControllerEffectObserver>> observersForPreGauntletLevelController =
      new SortedDictionary<int, List<IPreGauntletLevelControllerEffectObserver>>();
  readonly List<PreGauntletLevelControllerCreateEffect> effectsPreGauntletLevelControllerCreateEffect =
      new List<PreGauntletLevelControllerCreateEffect>();
  readonly List<PreGauntletLevelControllerDeleteEffect> effectsPreGauntletLevelControllerDeleteEffect =
      new List<PreGauntletLevelControllerDeleteEffect>();

  readonly SortedDictionary<int, List<IGauntletLevelControllerEffectObserver>> observersForGauntletLevelController =
      new SortedDictionary<int, List<IGauntletLevelControllerEffectObserver>>();
  readonly List<GauntletLevelControllerCreateEffect> effectsGauntletLevelControllerCreateEffect =
      new List<GauntletLevelControllerCreateEffect>();
  readonly List<GauntletLevelControllerDeleteEffect> effectsGauntletLevelControllerDeleteEffect =
      new List<GauntletLevelControllerDeleteEffect>();

  readonly SortedDictionary<int, List<IExecutionStateEffectObserver>> observersForExecutionState =
      new SortedDictionary<int, List<IExecutionStateEffectObserver>>();
  readonly List<ExecutionStateCreateEffect> effectsExecutionStateCreateEffect =
      new List<ExecutionStateCreateEffect>();
  readonly List<ExecutionStateDeleteEffect> effectsExecutionStateDeleteEffect =
      new List<ExecutionStateDeleteEffect>();
  readonly List<ExecutionStateSetActingUnitEffect> effectsExecutionStateSetActingUnitEffect =
      new List<ExecutionStateSetActingUnitEffect>();
  readonly List<ExecutionStateSetActingUnitDidActionEffect> effectsExecutionStateSetActingUnitDidActionEffect =
      new List<ExecutionStateSetActingUnitDidActionEffect>();
  readonly List<ExecutionStateSetRemainingPreActingUnitComponentsEffect> effectsExecutionStateSetRemainingPreActingUnitComponentsEffect =
      new List<ExecutionStateSetRemainingPreActingUnitComponentsEffect>();
  readonly List<ExecutionStateSetRemainingPostActingUnitComponentsEffect> effectsExecutionStateSetRemainingPostActingUnitComponentsEffect =
      new List<ExecutionStateSetRemainingPostActingUnitComponentsEffect>();

  readonly SortedDictionary<int, List<IIPostActingUCWeakMutBunchEffectObserver>> observersForIPostActingUCWeakMutBunch =
      new SortedDictionary<int, List<IIPostActingUCWeakMutBunchEffectObserver>>();
  readonly List<IPostActingUCWeakMutBunchCreateEffect> effectsIPostActingUCWeakMutBunchCreateEffect =
      new List<IPostActingUCWeakMutBunchCreateEffect>();
  readonly List<IPostActingUCWeakMutBunchDeleteEffect> effectsIPostActingUCWeakMutBunchDeleteEffect =
      new List<IPostActingUCWeakMutBunchDeleteEffect>();

  readonly SortedDictionary<int, List<IIPreActingUCWeakMutBunchEffectObserver>> observersForIPreActingUCWeakMutBunch =
      new SortedDictionary<int, List<IIPreActingUCWeakMutBunchEffectObserver>>();
  readonly List<IPreActingUCWeakMutBunchCreateEffect> effectsIPreActingUCWeakMutBunchCreateEffect =
      new List<IPreActingUCWeakMutBunchCreateEffect>();
  readonly List<IPreActingUCWeakMutBunchDeleteEffect> effectsIPreActingUCWeakMutBunchDeleteEffect =
      new List<IPreActingUCWeakMutBunchDeleteEffect>();

  readonly SortedDictionary<int, List<IGameEffectObserver>> observersForGame =
      new SortedDictionary<int, List<IGameEffectObserver>>();
  readonly List<GameCreateEffect> effectsGameCreateEffect =
      new List<GameCreateEffect>();
  readonly List<GameDeleteEffect> effectsGameDeleteEffect =
      new List<GameDeleteEffect>();
  readonly List<GameSetPlayerEffect> effectsGameSetPlayerEffect =
      new List<GameSetPlayerEffect>();
  readonly List<GameSetLevelEffect> effectsGameSetLevelEffect =
      new List<GameSetLevelEffect>();
  readonly List<GameSetTimeEffect> effectsGameSetTimeEffect =
      new List<GameSetTimeEffect>();

  readonly SortedDictionary<int, List<IVolcaetusLevelControllerEffectObserver>> observersForVolcaetusLevelController =
      new SortedDictionary<int, List<IVolcaetusLevelControllerEffectObserver>>();
  readonly List<VolcaetusLevelControllerCreateEffect> effectsVolcaetusLevelControllerCreateEffect =
      new List<VolcaetusLevelControllerCreateEffect>();
  readonly List<VolcaetusLevelControllerDeleteEffect> effectsVolcaetusLevelControllerDeleteEffect =
      new List<VolcaetusLevelControllerDeleteEffect>();

  readonly SortedDictionary<int, List<ITutorial2LevelControllerEffectObserver>> observersForTutorial2LevelController =
      new SortedDictionary<int, List<ITutorial2LevelControllerEffectObserver>>();
  readonly List<Tutorial2LevelControllerCreateEffect> effectsTutorial2LevelControllerCreateEffect =
      new List<Tutorial2LevelControllerCreateEffect>();
  readonly List<Tutorial2LevelControllerDeleteEffect> effectsTutorial2LevelControllerDeleteEffect =
      new List<Tutorial2LevelControllerDeleteEffect>();

  readonly SortedDictionary<int, List<ITutorial1LevelControllerEffectObserver>> observersForTutorial1LevelController =
      new SortedDictionary<int, List<ITutorial1LevelControllerEffectObserver>>();
  readonly List<Tutorial1LevelControllerCreateEffect> effectsTutorial1LevelControllerCreateEffect =
      new List<Tutorial1LevelControllerCreateEffect>();
  readonly List<Tutorial1LevelControllerDeleteEffect> effectsTutorial1LevelControllerDeleteEffect =
      new List<Tutorial1LevelControllerDeleteEffect>();

  readonly SortedDictionary<int, List<IRetreatLevelControllerEffectObserver>> observersForRetreatLevelController =
      new SortedDictionary<int, List<IRetreatLevelControllerEffectObserver>>();
  readonly List<RetreatLevelControllerCreateEffect> effectsRetreatLevelControllerCreateEffect =
      new List<RetreatLevelControllerCreateEffect>();
  readonly List<RetreatLevelControllerDeleteEffect> effectsRetreatLevelControllerDeleteEffect =
      new List<RetreatLevelControllerDeleteEffect>();

  readonly SortedDictionary<int, List<ISotaventoLevelControllerEffectObserver>> observersForSotaventoLevelController =
      new SortedDictionary<int, List<ISotaventoLevelControllerEffectObserver>>();
  readonly List<SotaventoLevelControllerCreateEffect> effectsSotaventoLevelControllerCreateEffect =
      new List<SotaventoLevelControllerCreateEffect>();
  readonly List<SotaventoLevelControllerDeleteEffect> effectsSotaventoLevelControllerDeleteEffect =
      new List<SotaventoLevelControllerDeleteEffect>();

  readonly SortedDictionary<int, List<INestLevelControllerEffectObserver>> observersForNestLevelController =
      new SortedDictionary<int, List<INestLevelControllerEffectObserver>>();
  readonly List<NestLevelControllerCreateEffect> effectsNestLevelControllerCreateEffect =
      new List<NestLevelControllerCreateEffect>();
  readonly List<NestLevelControllerDeleteEffect> effectsNestLevelControllerDeleteEffect =
      new List<NestLevelControllerDeleteEffect>();

  readonly SortedDictionary<int, List<ILakeLevelControllerEffectObserver>> observersForLakeLevelController =
      new SortedDictionary<int, List<ILakeLevelControllerEffectObserver>>();
  readonly List<LakeLevelControllerCreateEffect> effectsLakeLevelControllerCreateEffect =
      new List<LakeLevelControllerCreateEffect>();
  readonly List<LakeLevelControllerDeleteEffect> effectsLakeLevelControllerDeleteEffect =
      new List<LakeLevelControllerDeleteEffect>();

  readonly SortedDictionary<int, List<IEmberDeepLevelLinkerTTCEffectObserver>> observersForEmberDeepLevelLinkerTTC =
      new SortedDictionary<int, List<IEmberDeepLevelLinkerTTCEffectObserver>>();
  readonly List<EmberDeepLevelLinkerTTCCreateEffect> effectsEmberDeepLevelLinkerTTCCreateEffect =
      new List<EmberDeepLevelLinkerTTCCreateEffect>();
  readonly List<EmberDeepLevelLinkerTTCDeleteEffect> effectsEmberDeepLevelLinkerTTCDeleteEffect =
      new List<EmberDeepLevelLinkerTTCDeleteEffect>();

  readonly SortedDictionary<int, List<IDirtRoadLevelControllerEffectObserver>> observersForDirtRoadLevelController =
      new SortedDictionary<int, List<IDirtRoadLevelControllerEffectObserver>>();
  readonly List<DirtRoadLevelControllerCreateEffect> effectsDirtRoadLevelControllerCreateEffect =
      new List<DirtRoadLevelControllerCreateEffect>();
  readonly List<DirtRoadLevelControllerDeleteEffect> effectsDirtRoadLevelControllerDeleteEffect =
      new List<DirtRoadLevelControllerDeleteEffect>();

  readonly SortedDictionary<int, List<ICaveLevelControllerEffectObserver>> observersForCaveLevelController =
      new SortedDictionary<int, List<ICaveLevelControllerEffectObserver>>();
  readonly List<CaveLevelControllerCreateEffect> effectsCaveLevelControllerCreateEffect =
      new List<CaveLevelControllerCreateEffect>();
  readonly List<CaveLevelControllerDeleteEffect> effectsCaveLevelControllerDeleteEffect =
      new List<CaveLevelControllerDeleteEffect>();

  readonly SortedDictionary<int, List<IBridgesLevelControllerEffectObserver>> observersForBridgesLevelController =
      new SortedDictionary<int, List<IBridgesLevelControllerEffectObserver>>();
  readonly List<BridgesLevelControllerCreateEffect> effectsBridgesLevelControllerCreateEffect =
      new List<BridgesLevelControllerCreateEffect>();
  readonly List<BridgesLevelControllerDeleteEffect> effectsBridgesLevelControllerDeleteEffect =
      new List<BridgesLevelControllerDeleteEffect>();

  readonly SortedDictionary<int, List<IAncientTownLevelControllerEffectObserver>> observersForAncientTownLevelController =
      new SortedDictionary<int, List<IAncientTownLevelControllerEffectObserver>>();
  readonly List<AncientTownLevelControllerCreateEffect> effectsAncientTownLevelControllerCreateEffect =
      new List<AncientTownLevelControllerCreateEffect>();
  readonly List<AncientTownLevelControllerDeleteEffect> effectsAncientTownLevelControllerDeleteEffect =
      new List<AncientTownLevelControllerDeleteEffect>();

  readonly SortedDictionary<int, List<IIGameEventMutListEffectObserver>> observersForIGameEventMutList =
      new SortedDictionary<int, List<IIGameEventMutListEffectObserver>>();
  readonly List<IGameEventMutListCreateEffect> effectsIGameEventMutListCreateEffect =
      new List<IGameEventMutListCreateEffect>();
  readonly List<IGameEventMutListDeleteEffect> effectsIGameEventMutListDeleteEffect =
      new List<IGameEventMutListDeleteEffect>();
  readonly List<IGameEventMutListAddEffect> effectsIGameEventMutListAddEffect =
      new List<IGameEventMutListAddEffect>();
  readonly List<IGameEventMutListRemoveEffect> effectsIGameEventMutListRemoveEffect =
      new List<IGameEventMutListRemoveEffect>();

  readonly SortedDictionary<int, List<ILocationMutListEffectObserver>> observersForLocationMutList =
      new SortedDictionary<int, List<ILocationMutListEffectObserver>>();
  readonly List<LocationMutListCreateEffect> effectsLocationMutListCreateEffect =
      new List<LocationMutListCreateEffect>();
  readonly List<LocationMutListDeleteEffect> effectsLocationMutListDeleteEffect =
      new List<LocationMutListDeleteEffect>();
  readonly List<LocationMutListAddEffect> effectsLocationMutListAddEffect =
      new List<LocationMutListAddEffect>();
  readonly List<LocationMutListRemoveEffect> effectsLocationMutListRemoveEffect =
      new List<LocationMutListRemoveEffect>();

  readonly SortedDictionary<int, List<IIRequestMutListEffectObserver>> observersForIRequestMutList =
      new SortedDictionary<int, List<IIRequestMutListEffectObserver>>();
  readonly List<IRequestMutListCreateEffect> effectsIRequestMutListCreateEffect =
      new List<IRequestMutListCreateEffect>();
  readonly List<IRequestMutListDeleteEffect> effectsIRequestMutListDeleteEffect =
      new List<IRequestMutListDeleteEffect>();
  readonly List<IRequestMutListAddEffect> effectsIRequestMutListAddEffect =
      new List<IRequestMutListAddEffect>();
  readonly List<IRequestMutListRemoveEffect> effectsIRequestMutListRemoveEffect =
      new List<IRequestMutListRemoveEffect>();

  readonly SortedDictionary<int, List<IIUnitEventMutListEffectObserver>> observersForIUnitEventMutList =
      new SortedDictionary<int, List<IIUnitEventMutListEffectObserver>>();
  readonly List<IUnitEventMutListCreateEffect> effectsIUnitEventMutListCreateEffect =
      new List<IUnitEventMutListCreateEffect>();
  readonly List<IUnitEventMutListDeleteEffect> effectsIUnitEventMutListDeleteEffect =
      new List<IUnitEventMutListDeleteEffect>();
  readonly List<IUnitEventMutListAddEffect> effectsIUnitEventMutListAddEffect =
      new List<IUnitEventMutListAddEffect>();
  readonly List<IUnitEventMutListRemoveEffect> effectsIUnitEventMutListRemoveEffect =
      new List<IUnitEventMutListRemoveEffect>();

  readonly SortedDictionary<int, List<ILevelMutSetEffectObserver>> observersForLevelMutSet =
      new SortedDictionary<int, List<ILevelMutSetEffectObserver>>();
  readonly List<LevelMutSetCreateEffect> effectsLevelMutSetCreateEffect =
      new List<LevelMutSetCreateEffect>();
  readonly List<LevelMutSetDeleteEffect> effectsLevelMutSetDeleteEffect =
      new List<LevelMutSetDeleteEffect>();
  readonly List<LevelMutSetAddEffect> effectsLevelMutSetAddEffect =
      new List<LevelMutSetAddEffect>();
  readonly List<LevelMutSetRemoveEffect> effectsLevelMutSetRemoveEffect =
      new List<LevelMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IDoomedUCWeakMutSetEffectObserver>> observersForDoomedUCWeakMutSet =
      new SortedDictionary<int, List<IDoomedUCWeakMutSetEffectObserver>>();
  readonly List<DoomedUCWeakMutSetCreateEffect> effectsDoomedUCWeakMutSetCreateEffect =
      new List<DoomedUCWeakMutSetCreateEffect>();
  readonly List<DoomedUCWeakMutSetDeleteEffect> effectsDoomedUCWeakMutSetDeleteEffect =
      new List<DoomedUCWeakMutSetDeleteEffect>();
  readonly List<DoomedUCWeakMutSetAddEffect> effectsDoomedUCWeakMutSetAddEffect =
      new List<DoomedUCWeakMutSetAddEffect>();
  readonly List<DoomedUCWeakMutSetRemoveEffect> effectsDoomedUCWeakMutSetRemoveEffect =
      new List<DoomedUCWeakMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IMiredUCWeakMutSetEffectObserver>> observersForMiredUCWeakMutSet =
      new SortedDictionary<int, List<IMiredUCWeakMutSetEffectObserver>>();
  readonly List<MiredUCWeakMutSetCreateEffect> effectsMiredUCWeakMutSetCreateEffect =
      new List<MiredUCWeakMutSetCreateEffect>();
  readonly List<MiredUCWeakMutSetDeleteEffect> effectsMiredUCWeakMutSetDeleteEffect =
      new List<MiredUCWeakMutSetDeleteEffect>();
  readonly List<MiredUCWeakMutSetAddEffect> effectsMiredUCWeakMutSetAddEffect =
      new List<MiredUCWeakMutSetAddEffect>();
  readonly List<MiredUCWeakMutSetRemoveEffect> effectsMiredUCWeakMutSetRemoveEffect =
      new List<MiredUCWeakMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IInvincibilityUCWeakMutSetEffectObserver>> observersForInvincibilityUCWeakMutSet =
      new SortedDictionary<int, List<IInvincibilityUCWeakMutSetEffectObserver>>();
  readonly List<InvincibilityUCWeakMutSetCreateEffect> effectsInvincibilityUCWeakMutSetCreateEffect =
      new List<InvincibilityUCWeakMutSetCreateEffect>();
  readonly List<InvincibilityUCWeakMutSetDeleteEffect> effectsInvincibilityUCWeakMutSetDeleteEffect =
      new List<InvincibilityUCWeakMutSetDeleteEffect>();
  readonly List<InvincibilityUCWeakMutSetAddEffect> effectsInvincibilityUCWeakMutSetAddEffect =
      new List<InvincibilityUCWeakMutSetAddEffect>();
  readonly List<InvincibilityUCWeakMutSetRemoveEffect> effectsInvincibilityUCWeakMutSetRemoveEffect =
      new List<InvincibilityUCWeakMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IDefyingUCWeakMutSetEffectObserver>> observersForDefyingUCWeakMutSet =
      new SortedDictionary<int, List<IDefyingUCWeakMutSetEffectObserver>>();
  readonly List<DefyingUCWeakMutSetCreateEffect> effectsDefyingUCWeakMutSetCreateEffect =
      new List<DefyingUCWeakMutSetCreateEffect>();
  readonly List<DefyingUCWeakMutSetDeleteEffect> effectsDefyingUCWeakMutSetDeleteEffect =
      new List<DefyingUCWeakMutSetDeleteEffect>();
  readonly List<DefyingUCWeakMutSetAddEffect> effectsDefyingUCWeakMutSetAddEffect =
      new List<DefyingUCWeakMutSetAddEffect>();
  readonly List<DefyingUCWeakMutSetRemoveEffect> effectsDefyingUCWeakMutSetRemoveEffect =
      new List<DefyingUCWeakMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ICounteringUCWeakMutSetEffectObserver>> observersForCounteringUCWeakMutSet =
      new SortedDictionary<int, List<ICounteringUCWeakMutSetEffectObserver>>();
  readonly List<CounteringUCWeakMutSetCreateEffect> effectsCounteringUCWeakMutSetCreateEffect =
      new List<CounteringUCWeakMutSetCreateEffect>();
  readonly List<CounteringUCWeakMutSetDeleteEffect> effectsCounteringUCWeakMutSetDeleteEffect =
      new List<CounteringUCWeakMutSetDeleteEffect>();
  readonly List<CounteringUCWeakMutSetAddEffect> effectsCounteringUCWeakMutSetAddEffect =
      new List<CounteringUCWeakMutSetAddEffect>();
  readonly List<CounteringUCWeakMutSetRemoveEffect> effectsCounteringUCWeakMutSetRemoveEffect =
      new List<CounteringUCWeakMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IAttackAICapabilityUCWeakMutSetEffectObserver>> observersForAttackAICapabilityUCWeakMutSet =
      new SortedDictionary<int, List<IAttackAICapabilityUCWeakMutSetEffectObserver>>();
  readonly List<AttackAICapabilityUCWeakMutSetCreateEffect> effectsAttackAICapabilityUCWeakMutSetCreateEffect =
      new List<AttackAICapabilityUCWeakMutSetCreateEffect>();
  readonly List<AttackAICapabilityUCWeakMutSetDeleteEffect> effectsAttackAICapabilityUCWeakMutSetDeleteEffect =
      new List<AttackAICapabilityUCWeakMutSetDeleteEffect>();
  readonly List<AttackAICapabilityUCWeakMutSetAddEffect> effectsAttackAICapabilityUCWeakMutSetAddEffect =
      new List<AttackAICapabilityUCWeakMutSetAddEffect>();
  readonly List<AttackAICapabilityUCWeakMutSetRemoveEffect> effectsAttackAICapabilityUCWeakMutSetRemoveEffect =
      new List<AttackAICapabilityUCWeakMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ILightningChargedUCWeakMutSetEffectObserver>> observersForLightningChargedUCWeakMutSet =
      new SortedDictionary<int, List<ILightningChargedUCWeakMutSetEffectObserver>>();
  readonly List<LightningChargedUCWeakMutSetCreateEffect> effectsLightningChargedUCWeakMutSetCreateEffect =
      new List<LightningChargedUCWeakMutSetCreateEffect>();
  readonly List<LightningChargedUCWeakMutSetDeleteEffect> effectsLightningChargedUCWeakMutSetDeleteEffect =
      new List<LightningChargedUCWeakMutSetDeleteEffect>();
  readonly List<LightningChargedUCWeakMutSetAddEffect> effectsLightningChargedUCWeakMutSetAddEffect =
      new List<LightningChargedUCWeakMutSetAddEffect>();
  readonly List<LightningChargedUCWeakMutSetRemoveEffect> effectsLightningChargedUCWeakMutSetRemoveEffect =
      new List<LightningChargedUCWeakMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ITimeCloneAICapabilityUCWeakMutSetEffectObserver>> observersForTimeCloneAICapabilityUCWeakMutSet =
      new SortedDictionary<int, List<ITimeCloneAICapabilityUCWeakMutSetEffectObserver>>();
  readonly List<TimeCloneAICapabilityUCWeakMutSetCreateEffect> effectsTimeCloneAICapabilityUCWeakMutSetCreateEffect =
      new List<TimeCloneAICapabilityUCWeakMutSetCreateEffect>();
  readonly List<TimeCloneAICapabilityUCWeakMutSetDeleteEffect> effectsTimeCloneAICapabilityUCWeakMutSetDeleteEffect =
      new List<TimeCloneAICapabilityUCWeakMutSetDeleteEffect>();
  readonly List<TimeCloneAICapabilityUCWeakMutSetAddEffect> effectsTimeCloneAICapabilityUCWeakMutSetAddEffect =
      new List<TimeCloneAICapabilityUCWeakMutSetAddEffect>();
  readonly List<TimeCloneAICapabilityUCWeakMutSetRemoveEffect> effectsTimeCloneAICapabilityUCWeakMutSetRemoveEffect =
      new List<TimeCloneAICapabilityUCWeakMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IManaPotionStrongMutSetEffectObserver>> observersForManaPotionStrongMutSet =
      new SortedDictionary<int, List<IManaPotionStrongMutSetEffectObserver>>();
  readonly List<ManaPotionStrongMutSetCreateEffect> effectsManaPotionStrongMutSetCreateEffect =
      new List<ManaPotionStrongMutSetCreateEffect>();
  readonly List<ManaPotionStrongMutSetDeleteEffect> effectsManaPotionStrongMutSetDeleteEffect =
      new List<ManaPotionStrongMutSetDeleteEffect>();
  readonly List<ManaPotionStrongMutSetAddEffect> effectsManaPotionStrongMutSetAddEffect =
      new List<ManaPotionStrongMutSetAddEffect>();
  readonly List<ManaPotionStrongMutSetRemoveEffect> effectsManaPotionStrongMutSetRemoveEffect =
      new List<ManaPotionStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IHealthPotionStrongMutSetEffectObserver>> observersForHealthPotionStrongMutSet =
      new SortedDictionary<int, List<IHealthPotionStrongMutSetEffectObserver>>();
  readonly List<HealthPotionStrongMutSetCreateEffect> effectsHealthPotionStrongMutSetCreateEffect =
      new List<HealthPotionStrongMutSetCreateEffect>();
  readonly List<HealthPotionStrongMutSetDeleteEffect> effectsHealthPotionStrongMutSetDeleteEffect =
      new List<HealthPotionStrongMutSetDeleteEffect>();
  readonly List<HealthPotionStrongMutSetAddEffect> effectsHealthPotionStrongMutSetAddEffect =
      new List<HealthPotionStrongMutSetAddEffect>();
  readonly List<HealthPotionStrongMutSetRemoveEffect> effectsHealthPotionStrongMutSetRemoveEffect =
      new List<HealthPotionStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ISpeedRingStrongMutSetEffectObserver>> observersForSpeedRingStrongMutSet =
      new SortedDictionary<int, List<ISpeedRingStrongMutSetEffectObserver>>();
  readonly List<SpeedRingStrongMutSetCreateEffect> effectsSpeedRingStrongMutSetCreateEffect =
      new List<SpeedRingStrongMutSetCreateEffect>();
  readonly List<SpeedRingStrongMutSetDeleteEffect> effectsSpeedRingStrongMutSetDeleteEffect =
      new List<SpeedRingStrongMutSetDeleteEffect>();
  readonly List<SpeedRingStrongMutSetAddEffect> effectsSpeedRingStrongMutSetAddEffect =
      new List<SpeedRingStrongMutSetAddEffect>();
  readonly List<SpeedRingStrongMutSetRemoveEffect> effectsSpeedRingStrongMutSetRemoveEffect =
      new List<SpeedRingStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IGlaiveStrongMutSetEffectObserver>> observersForGlaiveStrongMutSet =
      new SortedDictionary<int, List<IGlaiveStrongMutSetEffectObserver>>();
  readonly List<GlaiveStrongMutSetCreateEffect> effectsGlaiveStrongMutSetCreateEffect =
      new List<GlaiveStrongMutSetCreateEffect>();
  readonly List<GlaiveStrongMutSetDeleteEffect> effectsGlaiveStrongMutSetDeleteEffect =
      new List<GlaiveStrongMutSetDeleteEffect>();
  readonly List<GlaiveStrongMutSetAddEffect> effectsGlaiveStrongMutSetAddEffect =
      new List<GlaiveStrongMutSetAddEffect>();
  readonly List<GlaiveStrongMutSetRemoveEffect> effectsGlaiveStrongMutSetRemoveEffect =
      new List<GlaiveStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ISlowRodStrongMutSetEffectObserver>> observersForSlowRodStrongMutSet =
      new SortedDictionary<int, List<ISlowRodStrongMutSetEffectObserver>>();
  readonly List<SlowRodStrongMutSetCreateEffect> effectsSlowRodStrongMutSetCreateEffect =
      new List<SlowRodStrongMutSetCreateEffect>();
  readonly List<SlowRodStrongMutSetDeleteEffect> effectsSlowRodStrongMutSetDeleteEffect =
      new List<SlowRodStrongMutSetDeleteEffect>();
  readonly List<SlowRodStrongMutSetAddEffect> effectsSlowRodStrongMutSetAddEffect =
      new List<SlowRodStrongMutSetAddEffect>();
  readonly List<SlowRodStrongMutSetRemoveEffect> effectsSlowRodStrongMutSetRemoveEffect =
      new List<SlowRodStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IBlastRodStrongMutSetEffectObserver>> observersForBlastRodStrongMutSet =
      new SortedDictionary<int, List<IBlastRodStrongMutSetEffectObserver>>();
  readonly List<BlastRodStrongMutSetCreateEffect> effectsBlastRodStrongMutSetCreateEffect =
      new List<BlastRodStrongMutSetCreateEffect>();
  readonly List<BlastRodStrongMutSetDeleteEffect> effectsBlastRodStrongMutSetDeleteEffect =
      new List<BlastRodStrongMutSetDeleteEffect>();
  readonly List<BlastRodStrongMutSetAddEffect> effectsBlastRodStrongMutSetAddEffect =
      new List<BlastRodStrongMutSetAddEffect>();
  readonly List<BlastRodStrongMutSetRemoveEffect> effectsBlastRodStrongMutSetRemoveEffect =
      new List<BlastRodStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IArmorStrongMutSetEffectObserver>> observersForArmorStrongMutSet =
      new SortedDictionary<int, List<IArmorStrongMutSetEffectObserver>>();
  readonly List<ArmorStrongMutSetCreateEffect> effectsArmorStrongMutSetCreateEffect =
      new List<ArmorStrongMutSetCreateEffect>();
  readonly List<ArmorStrongMutSetDeleteEffect> effectsArmorStrongMutSetDeleteEffect =
      new List<ArmorStrongMutSetDeleteEffect>();
  readonly List<ArmorStrongMutSetAddEffect> effectsArmorStrongMutSetAddEffect =
      new List<ArmorStrongMutSetAddEffect>();
  readonly List<ArmorStrongMutSetRemoveEffect> effectsArmorStrongMutSetRemoveEffect =
      new List<ArmorStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IHoldPositionImpulseStrongMutSetEffectObserver>> observersForHoldPositionImpulseStrongMutSet =
      new SortedDictionary<int, List<IHoldPositionImpulseStrongMutSetEffectObserver>>();
  readonly List<HoldPositionImpulseStrongMutSetCreateEffect> effectsHoldPositionImpulseStrongMutSetCreateEffect =
      new List<HoldPositionImpulseStrongMutSetCreateEffect>();
  readonly List<HoldPositionImpulseStrongMutSetDeleteEffect> effectsHoldPositionImpulseStrongMutSetDeleteEffect =
      new List<HoldPositionImpulseStrongMutSetDeleteEffect>();
  readonly List<HoldPositionImpulseStrongMutSetAddEffect> effectsHoldPositionImpulseStrongMutSetAddEffect =
      new List<HoldPositionImpulseStrongMutSetAddEffect>();
  readonly List<HoldPositionImpulseStrongMutSetRemoveEffect> effectsHoldPositionImpulseStrongMutSetRemoveEffect =
      new List<HoldPositionImpulseStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ITemporaryCloneImpulseStrongMutSetEffectObserver>> observersForTemporaryCloneImpulseStrongMutSet =
      new SortedDictionary<int, List<ITemporaryCloneImpulseStrongMutSetEffectObserver>>();
  readonly List<TemporaryCloneImpulseStrongMutSetCreateEffect> effectsTemporaryCloneImpulseStrongMutSetCreateEffect =
      new List<TemporaryCloneImpulseStrongMutSetCreateEffect>();
  readonly List<TemporaryCloneImpulseStrongMutSetDeleteEffect> effectsTemporaryCloneImpulseStrongMutSetDeleteEffect =
      new List<TemporaryCloneImpulseStrongMutSetDeleteEffect>();
  readonly List<TemporaryCloneImpulseStrongMutSetAddEffect> effectsTemporaryCloneImpulseStrongMutSetAddEffect =
      new List<TemporaryCloneImpulseStrongMutSetAddEffect>();
  readonly List<TemporaryCloneImpulseStrongMutSetRemoveEffect> effectsTemporaryCloneImpulseStrongMutSetRemoveEffect =
      new List<TemporaryCloneImpulseStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ISummonImpulseStrongMutSetEffectObserver>> observersForSummonImpulseStrongMutSet =
      new SortedDictionary<int, List<ISummonImpulseStrongMutSetEffectObserver>>();
  readonly List<SummonImpulseStrongMutSetCreateEffect> effectsSummonImpulseStrongMutSetCreateEffect =
      new List<SummonImpulseStrongMutSetCreateEffect>();
  readonly List<SummonImpulseStrongMutSetDeleteEffect> effectsSummonImpulseStrongMutSetDeleteEffect =
      new List<SummonImpulseStrongMutSetDeleteEffect>();
  readonly List<SummonImpulseStrongMutSetAddEffect> effectsSummonImpulseStrongMutSetAddEffect =
      new List<SummonImpulseStrongMutSetAddEffect>();
  readonly List<SummonImpulseStrongMutSetRemoveEffect> effectsSummonImpulseStrongMutSetRemoveEffect =
      new List<SummonImpulseStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IMireImpulseStrongMutSetEffectObserver>> observersForMireImpulseStrongMutSet =
      new SortedDictionary<int, List<IMireImpulseStrongMutSetEffectObserver>>();
  readonly List<MireImpulseStrongMutSetCreateEffect> effectsMireImpulseStrongMutSetCreateEffect =
      new List<MireImpulseStrongMutSetCreateEffect>();
  readonly List<MireImpulseStrongMutSetDeleteEffect> effectsMireImpulseStrongMutSetDeleteEffect =
      new List<MireImpulseStrongMutSetDeleteEffect>();
  readonly List<MireImpulseStrongMutSetAddEffect> effectsMireImpulseStrongMutSetAddEffect =
      new List<MireImpulseStrongMutSetAddEffect>();
  readonly List<MireImpulseStrongMutSetRemoveEffect> effectsMireImpulseStrongMutSetRemoveEffect =
      new List<MireImpulseStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IEvaporateImpulseStrongMutSetEffectObserver>> observersForEvaporateImpulseStrongMutSet =
      new SortedDictionary<int, List<IEvaporateImpulseStrongMutSetEffectObserver>>();
  readonly List<EvaporateImpulseStrongMutSetCreateEffect> effectsEvaporateImpulseStrongMutSetCreateEffect =
      new List<EvaporateImpulseStrongMutSetCreateEffect>();
  readonly List<EvaporateImpulseStrongMutSetDeleteEffect> effectsEvaporateImpulseStrongMutSetDeleteEffect =
      new List<EvaporateImpulseStrongMutSetDeleteEffect>();
  readonly List<EvaporateImpulseStrongMutSetAddEffect> effectsEvaporateImpulseStrongMutSetAddEffect =
      new List<EvaporateImpulseStrongMutSetAddEffect>();
  readonly List<EvaporateImpulseStrongMutSetRemoveEffect> effectsEvaporateImpulseStrongMutSetRemoveEffect =
      new List<EvaporateImpulseStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IMoveImpulseStrongMutSetEffectObserver>> observersForMoveImpulseStrongMutSet =
      new SortedDictionary<int, List<IMoveImpulseStrongMutSetEffectObserver>>();
  readonly List<MoveImpulseStrongMutSetCreateEffect> effectsMoveImpulseStrongMutSetCreateEffect =
      new List<MoveImpulseStrongMutSetCreateEffect>();
  readonly List<MoveImpulseStrongMutSetDeleteEffect> effectsMoveImpulseStrongMutSetDeleteEffect =
      new List<MoveImpulseStrongMutSetDeleteEffect>();
  readonly List<MoveImpulseStrongMutSetAddEffect> effectsMoveImpulseStrongMutSetAddEffect =
      new List<MoveImpulseStrongMutSetAddEffect>();
  readonly List<MoveImpulseStrongMutSetRemoveEffect> effectsMoveImpulseStrongMutSetRemoveEffect =
      new List<MoveImpulseStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IKamikazeJumpImpulseStrongMutSetEffectObserver>> observersForKamikazeJumpImpulseStrongMutSet =
      new SortedDictionary<int, List<IKamikazeJumpImpulseStrongMutSetEffectObserver>>();
  readonly List<KamikazeJumpImpulseStrongMutSetCreateEffect> effectsKamikazeJumpImpulseStrongMutSetCreateEffect =
      new List<KamikazeJumpImpulseStrongMutSetCreateEffect>();
  readonly List<KamikazeJumpImpulseStrongMutSetDeleteEffect> effectsKamikazeJumpImpulseStrongMutSetDeleteEffect =
      new List<KamikazeJumpImpulseStrongMutSetDeleteEffect>();
  readonly List<KamikazeJumpImpulseStrongMutSetAddEffect> effectsKamikazeJumpImpulseStrongMutSetAddEffect =
      new List<KamikazeJumpImpulseStrongMutSetAddEffect>();
  readonly List<KamikazeJumpImpulseStrongMutSetRemoveEffect> effectsKamikazeJumpImpulseStrongMutSetRemoveEffect =
      new List<KamikazeJumpImpulseStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IKamikazeTargetImpulseStrongMutSetEffectObserver>> observersForKamikazeTargetImpulseStrongMutSet =
      new SortedDictionary<int, List<IKamikazeTargetImpulseStrongMutSetEffectObserver>>();
  readonly List<KamikazeTargetImpulseStrongMutSetCreateEffect> effectsKamikazeTargetImpulseStrongMutSetCreateEffect =
      new List<KamikazeTargetImpulseStrongMutSetCreateEffect>();
  readonly List<KamikazeTargetImpulseStrongMutSetDeleteEffect> effectsKamikazeTargetImpulseStrongMutSetDeleteEffect =
      new List<KamikazeTargetImpulseStrongMutSetDeleteEffect>();
  readonly List<KamikazeTargetImpulseStrongMutSetAddEffect> effectsKamikazeTargetImpulseStrongMutSetAddEffect =
      new List<KamikazeTargetImpulseStrongMutSetAddEffect>();
  readonly List<KamikazeTargetImpulseStrongMutSetRemoveEffect> effectsKamikazeTargetImpulseStrongMutSetRemoveEffect =
      new List<KamikazeTargetImpulseStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<INoImpulseStrongMutSetEffectObserver>> observersForNoImpulseStrongMutSet =
      new SortedDictionary<int, List<INoImpulseStrongMutSetEffectObserver>>();
  readonly List<NoImpulseStrongMutSetCreateEffect> effectsNoImpulseStrongMutSetCreateEffect =
      new List<NoImpulseStrongMutSetCreateEffect>();
  readonly List<NoImpulseStrongMutSetDeleteEffect> effectsNoImpulseStrongMutSetDeleteEffect =
      new List<NoImpulseStrongMutSetDeleteEffect>();
  readonly List<NoImpulseStrongMutSetAddEffect> effectsNoImpulseStrongMutSetAddEffect =
      new List<NoImpulseStrongMutSetAddEffect>();
  readonly List<NoImpulseStrongMutSetRemoveEffect> effectsNoImpulseStrongMutSetRemoveEffect =
      new List<NoImpulseStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IFireImpulseStrongMutSetEffectObserver>> observersForFireImpulseStrongMutSet =
      new SortedDictionary<int, List<IFireImpulseStrongMutSetEffectObserver>>();
  readonly List<FireImpulseStrongMutSetCreateEffect> effectsFireImpulseStrongMutSetCreateEffect =
      new List<FireImpulseStrongMutSetCreateEffect>();
  readonly List<FireImpulseStrongMutSetDeleteEffect> effectsFireImpulseStrongMutSetDeleteEffect =
      new List<FireImpulseStrongMutSetDeleteEffect>();
  readonly List<FireImpulseStrongMutSetAddEffect> effectsFireImpulseStrongMutSetAddEffect =
      new List<FireImpulseStrongMutSetAddEffect>();
  readonly List<FireImpulseStrongMutSetRemoveEffect> effectsFireImpulseStrongMutSetRemoveEffect =
      new List<FireImpulseStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IDefyImpulseStrongMutSetEffectObserver>> observersForDefyImpulseStrongMutSet =
      new SortedDictionary<int, List<IDefyImpulseStrongMutSetEffectObserver>>();
  readonly List<DefyImpulseStrongMutSetCreateEffect> effectsDefyImpulseStrongMutSetCreateEffect =
      new List<DefyImpulseStrongMutSetCreateEffect>();
  readonly List<DefyImpulseStrongMutSetDeleteEffect> effectsDefyImpulseStrongMutSetDeleteEffect =
      new List<DefyImpulseStrongMutSetDeleteEffect>();
  readonly List<DefyImpulseStrongMutSetAddEffect> effectsDefyImpulseStrongMutSetAddEffect =
      new List<DefyImpulseStrongMutSetAddEffect>();
  readonly List<DefyImpulseStrongMutSetRemoveEffect> effectsDefyImpulseStrongMutSetRemoveEffect =
      new List<DefyImpulseStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ICounterImpulseStrongMutSetEffectObserver>> observersForCounterImpulseStrongMutSet =
      new SortedDictionary<int, List<ICounterImpulseStrongMutSetEffectObserver>>();
  readonly List<CounterImpulseStrongMutSetCreateEffect> effectsCounterImpulseStrongMutSetCreateEffect =
      new List<CounterImpulseStrongMutSetCreateEffect>();
  readonly List<CounterImpulseStrongMutSetDeleteEffect> effectsCounterImpulseStrongMutSetDeleteEffect =
      new List<CounterImpulseStrongMutSetDeleteEffect>();
  readonly List<CounterImpulseStrongMutSetAddEffect> effectsCounterImpulseStrongMutSetAddEffect =
      new List<CounterImpulseStrongMutSetAddEffect>();
  readonly List<CounterImpulseStrongMutSetRemoveEffect> effectsCounterImpulseStrongMutSetRemoveEffect =
      new List<CounterImpulseStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IUnleashBideImpulseStrongMutSetEffectObserver>> observersForUnleashBideImpulseStrongMutSet =
      new SortedDictionary<int, List<IUnleashBideImpulseStrongMutSetEffectObserver>>();
  readonly List<UnleashBideImpulseStrongMutSetCreateEffect> effectsUnleashBideImpulseStrongMutSetCreateEffect =
      new List<UnleashBideImpulseStrongMutSetCreateEffect>();
  readonly List<UnleashBideImpulseStrongMutSetDeleteEffect> effectsUnleashBideImpulseStrongMutSetDeleteEffect =
      new List<UnleashBideImpulseStrongMutSetDeleteEffect>();
  readonly List<UnleashBideImpulseStrongMutSetAddEffect> effectsUnleashBideImpulseStrongMutSetAddEffect =
      new List<UnleashBideImpulseStrongMutSetAddEffect>();
  readonly List<UnleashBideImpulseStrongMutSetRemoveEffect> effectsUnleashBideImpulseStrongMutSetRemoveEffect =
      new List<UnleashBideImpulseStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IContinueBidingImpulseStrongMutSetEffectObserver>> observersForContinueBidingImpulseStrongMutSet =
      new SortedDictionary<int, List<IContinueBidingImpulseStrongMutSetEffectObserver>>();
  readonly List<ContinueBidingImpulseStrongMutSetCreateEffect> effectsContinueBidingImpulseStrongMutSetCreateEffect =
      new List<ContinueBidingImpulseStrongMutSetCreateEffect>();
  readonly List<ContinueBidingImpulseStrongMutSetDeleteEffect> effectsContinueBidingImpulseStrongMutSetDeleteEffect =
      new List<ContinueBidingImpulseStrongMutSetDeleteEffect>();
  readonly List<ContinueBidingImpulseStrongMutSetAddEffect> effectsContinueBidingImpulseStrongMutSetAddEffect =
      new List<ContinueBidingImpulseStrongMutSetAddEffect>();
  readonly List<ContinueBidingImpulseStrongMutSetRemoveEffect> effectsContinueBidingImpulseStrongMutSetRemoveEffect =
      new List<ContinueBidingImpulseStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IStartBidingImpulseStrongMutSetEffectObserver>> observersForStartBidingImpulseStrongMutSet =
      new SortedDictionary<int, List<IStartBidingImpulseStrongMutSetEffectObserver>>();
  readonly List<StartBidingImpulseStrongMutSetCreateEffect> effectsStartBidingImpulseStrongMutSetCreateEffect =
      new List<StartBidingImpulseStrongMutSetCreateEffect>();
  readonly List<StartBidingImpulseStrongMutSetDeleteEffect> effectsStartBidingImpulseStrongMutSetDeleteEffect =
      new List<StartBidingImpulseStrongMutSetDeleteEffect>();
  readonly List<StartBidingImpulseStrongMutSetAddEffect> effectsStartBidingImpulseStrongMutSetAddEffect =
      new List<StartBidingImpulseStrongMutSetAddEffect>();
  readonly List<StartBidingImpulseStrongMutSetRemoveEffect> effectsStartBidingImpulseStrongMutSetRemoveEffect =
      new List<StartBidingImpulseStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IAttackImpulseStrongMutSetEffectObserver>> observersForAttackImpulseStrongMutSet =
      new SortedDictionary<int, List<IAttackImpulseStrongMutSetEffectObserver>>();
  readonly List<AttackImpulseStrongMutSetCreateEffect> effectsAttackImpulseStrongMutSetCreateEffect =
      new List<AttackImpulseStrongMutSetCreateEffect>();
  readonly List<AttackImpulseStrongMutSetDeleteEffect> effectsAttackImpulseStrongMutSetDeleteEffect =
      new List<AttackImpulseStrongMutSetDeleteEffect>();
  readonly List<AttackImpulseStrongMutSetAddEffect> effectsAttackImpulseStrongMutSetAddEffect =
      new List<AttackImpulseStrongMutSetAddEffect>();
  readonly List<AttackImpulseStrongMutSetRemoveEffect> effectsAttackImpulseStrongMutSetRemoveEffect =
      new List<AttackImpulseStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IPursueImpulseStrongMutSetEffectObserver>> observersForPursueImpulseStrongMutSet =
      new SortedDictionary<int, List<IPursueImpulseStrongMutSetEffectObserver>>();
  readonly List<PursueImpulseStrongMutSetCreateEffect> effectsPursueImpulseStrongMutSetCreateEffect =
      new List<PursueImpulseStrongMutSetCreateEffect>();
  readonly List<PursueImpulseStrongMutSetDeleteEffect> effectsPursueImpulseStrongMutSetDeleteEffect =
      new List<PursueImpulseStrongMutSetDeleteEffect>();
  readonly List<PursueImpulseStrongMutSetAddEffect> effectsPursueImpulseStrongMutSetAddEffect =
      new List<PursueImpulseStrongMutSetAddEffect>();
  readonly List<PursueImpulseStrongMutSetRemoveEffect> effectsPursueImpulseStrongMutSetRemoveEffect =
      new List<PursueImpulseStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IFireBombImpulseStrongMutSetEffectObserver>> observersForFireBombImpulseStrongMutSet =
      new SortedDictionary<int, List<IFireBombImpulseStrongMutSetEffectObserver>>();
  readonly List<FireBombImpulseStrongMutSetCreateEffect> effectsFireBombImpulseStrongMutSetCreateEffect =
      new List<FireBombImpulseStrongMutSetCreateEffect>();
  readonly List<FireBombImpulseStrongMutSetDeleteEffect> effectsFireBombImpulseStrongMutSetDeleteEffect =
      new List<FireBombImpulseStrongMutSetDeleteEffect>();
  readonly List<FireBombImpulseStrongMutSetAddEffect> effectsFireBombImpulseStrongMutSetAddEffect =
      new List<FireBombImpulseStrongMutSetAddEffect>();
  readonly List<FireBombImpulseStrongMutSetRemoveEffect> effectsFireBombImpulseStrongMutSetRemoveEffect =
      new List<FireBombImpulseStrongMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IUnitMutSetEffectObserver>> observersForUnitMutSet =
      new SortedDictionary<int, List<IUnitMutSetEffectObserver>>();
  readonly List<UnitMutSetCreateEffect> effectsUnitMutSetCreateEffect =
      new List<UnitMutSetCreateEffect>();
  readonly List<UnitMutSetDeleteEffect> effectsUnitMutSetDeleteEffect =
      new List<UnitMutSetDeleteEffect>();
  readonly List<UnitMutSetAddEffect> effectsUnitMutSetAddEffect =
      new List<UnitMutSetAddEffect>();
  readonly List<UnitMutSetRemoveEffect> effectsUnitMutSetRemoveEffect =
      new List<UnitMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ISimplePresenceTriggerTTCMutSetEffectObserver>> observersForSimplePresenceTriggerTTCMutSet =
      new SortedDictionary<int, List<ISimplePresenceTriggerTTCMutSetEffectObserver>>();
  readonly List<SimplePresenceTriggerTTCMutSetCreateEffect> effectsSimplePresenceTriggerTTCMutSetCreateEffect =
      new List<SimplePresenceTriggerTTCMutSetCreateEffect>();
  readonly List<SimplePresenceTriggerTTCMutSetDeleteEffect> effectsSimplePresenceTriggerTTCMutSetDeleteEffect =
      new List<SimplePresenceTriggerTTCMutSetDeleteEffect>();
  readonly List<SimplePresenceTriggerTTCMutSetAddEffect> effectsSimplePresenceTriggerTTCMutSetAddEffect =
      new List<SimplePresenceTriggerTTCMutSetAddEffect>();
  readonly List<SimplePresenceTriggerTTCMutSetRemoveEffect> effectsSimplePresenceTriggerTTCMutSetRemoveEffect =
      new List<SimplePresenceTriggerTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IItemTTCMutSetEffectObserver>> observersForItemTTCMutSet =
      new SortedDictionary<int, List<IItemTTCMutSetEffectObserver>>();
  readonly List<ItemTTCMutSetCreateEffect> effectsItemTTCMutSetCreateEffect =
      new List<ItemTTCMutSetCreateEffect>();
  readonly List<ItemTTCMutSetDeleteEffect> effectsItemTTCMutSetDeleteEffect =
      new List<ItemTTCMutSetDeleteEffect>();
  readonly List<ItemTTCMutSetAddEffect> effectsItemTTCMutSetAddEffect =
      new List<ItemTTCMutSetAddEffect>();
  readonly List<ItemTTCMutSetRemoveEffect> effectsItemTTCMutSetRemoveEffect =
      new List<ItemTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IKamikazeTargetTTCMutSetEffectObserver>> observersForKamikazeTargetTTCMutSet =
      new SortedDictionary<int, List<IKamikazeTargetTTCMutSetEffectObserver>>();
  readonly List<KamikazeTargetTTCMutSetCreateEffect> effectsKamikazeTargetTTCMutSetCreateEffect =
      new List<KamikazeTargetTTCMutSetCreateEffect>();
  readonly List<KamikazeTargetTTCMutSetDeleteEffect> effectsKamikazeTargetTTCMutSetDeleteEffect =
      new List<KamikazeTargetTTCMutSetDeleteEffect>();
  readonly List<KamikazeTargetTTCMutSetAddEffect> effectsKamikazeTargetTTCMutSetAddEffect =
      new List<KamikazeTargetTTCMutSetAddEffect>();
  readonly List<KamikazeTargetTTCMutSetRemoveEffect> effectsKamikazeTargetTTCMutSetRemoveEffect =
      new List<KamikazeTargetTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IWarperTTCMutSetEffectObserver>> observersForWarperTTCMutSet =
      new SortedDictionary<int, List<IWarperTTCMutSetEffectObserver>>();
  readonly List<WarperTTCMutSetCreateEffect> effectsWarperTTCMutSetCreateEffect =
      new List<WarperTTCMutSetCreateEffect>();
  readonly List<WarperTTCMutSetDeleteEffect> effectsWarperTTCMutSetDeleteEffect =
      new List<WarperTTCMutSetDeleteEffect>();
  readonly List<WarperTTCMutSetAddEffect> effectsWarperTTCMutSetAddEffect =
      new List<WarperTTCMutSetAddEffect>();
  readonly List<WarperTTCMutSetRemoveEffect> effectsWarperTTCMutSetRemoveEffect =
      new List<WarperTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ITimeAnchorTTCMutSetEffectObserver>> observersForTimeAnchorTTCMutSet =
      new SortedDictionary<int, List<ITimeAnchorTTCMutSetEffectObserver>>();
  readonly List<TimeAnchorTTCMutSetCreateEffect> effectsTimeAnchorTTCMutSetCreateEffect =
      new List<TimeAnchorTTCMutSetCreateEffect>();
  readonly List<TimeAnchorTTCMutSetDeleteEffect> effectsTimeAnchorTTCMutSetDeleteEffect =
      new List<TimeAnchorTTCMutSetDeleteEffect>();
  readonly List<TimeAnchorTTCMutSetAddEffect> effectsTimeAnchorTTCMutSetAddEffect =
      new List<TimeAnchorTTCMutSetAddEffect>();
  readonly List<TimeAnchorTTCMutSetRemoveEffect> effectsTimeAnchorTTCMutSetRemoveEffect =
      new List<TimeAnchorTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IFireBombTTCMutSetEffectObserver>> observersForFireBombTTCMutSet =
      new SortedDictionary<int, List<IFireBombTTCMutSetEffectObserver>>();
  readonly List<FireBombTTCMutSetCreateEffect> effectsFireBombTTCMutSetCreateEffect =
      new List<FireBombTTCMutSetCreateEffect>();
  readonly List<FireBombTTCMutSetDeleteEffect> effectsFireBombTTCMutSetDeleteEffect =
      new List<FireBombTTCMutSetDeleteEffect>();
  readonly List<FireBombTTCMutSetAddEffect> effectsFireBombTTCMutSetAddEffect =
      new List<FireBombTTCMutSetAddEffect>();
  readonly List<FireBombTTCMutSetRemoveEffect> effectsFireBombTTCMutSetRemoveEffect =
      new List<FireBombTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IMarkerTTCMutSetEffectObserver>> observersForMarkerTTCMutSet =
      new SortedDictionary<int, List<IMarkerTTCMutSetEffectObserver>>();
  readonly List<MarkerTTCMutSetCreateEffect> effectsMarkerTTCMutSetCreateEffect =
      new List<MarkerTTCMutSetCreateEffect>();
  readonly List<MarkerTTCMutSetDeleteEffect> effectsMarkerTTCMutSetDeleteEffect =
      new List<MarkerTTCMutSetDeleteEffect>();
  readonly List<MarkerTTCMutSetAddEffect> effectsMarkerTTCMutSetAddEffect =
      new List<MarkerTTCMutSetAddEffect>();
  readonly List<MarkerTTCMutSetRemoveEffect> effectsMarkerTTCMutSetRemoveEffect =
      new List<MarkerTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ILevelLinkTTCMutSetEffectObserver>> observersForLevelLinkTTCMutSet =
      new SortedDictionary<int, List<ILevelLinkTTCMutSetEffectObserver>>();
  readonly List<LevelLinkTTCMutSetCreateEffect> effectsLevelLinkTTCMutSetCreateEffect =
      new List<LevelLinkTTCMutSetCreateEffect>();
  readonly List<LevelLinkTTCMutSetDeleteEffect> effectsLevelLinkTTCMutSetDeleteEffect =
      new List<LevelLinkTTCMutSetDeleteEffect>();
  readonly List<LevelLinkTTCMutSetAddEffect> effectsLevelLinkTTCMutSetAddEffect =
      new List<LevelLinkTTCMutSetAddEffect>();
  readonly List<LevelLinkTTCMutSetRemoveEffect> effectsLevelLinkTTCMutSetRemoveEffect =
      new List<LevelLinkTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IMudTTCMutSetEffectObserver>> observersForMudTTCMutSet =
      new SortedDictionary<int, List<IMudTTCMutSetEffectObserver>>();
  readonly List<MudTTCMutSetCreateEffect> effectsMudTTCMutSetCreateEffect =
      new List<MudTTCMutSetCreateEffect>();
  readonly List<MudTTCMutSetDeleteEffect> effectsMudTTCMutSetDeleteEffect =
      new List<MudTTCMutSetDeleteEffect>();
  readonly List<MudTTCMutSetAddEffect> effectsMudTTCMutSetAddEffect =
      new List<MudTTCMutSetAddEffect>();
  readonly List<MudTTCMutSetRemoveEffect> effectsMudTTCMutSetRemoveEffect =
      new List<MudTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IDirtTTCMutSetEffectObserver>> observersForDirtTTCMutSet =
      new SortedDictionary<int, List<IDirtTTCMutSetEffectObserver>>();
  readonly List<DirtTTCMutSetCreateEffect> effectsDirtTTCMutSetCreateEffect =
      new List<DirtTTCMutSetCreateEffect>();
  readonly List<DirtTTCMutSetDeleteEffect> effectsDirtTTCMutSetDeleteEffect =
      new List<DirtTTCMutSetDeleteEffect>();
  readonly List<DirtTTCMutSetAddEffect> effectsDirtTTCMutSetAddEffect =
      new List<DirtTTCMutSetAddEffect>();
  readonly List<DirtTTCMutSetRemoveEffect> effectsDirtTTCMutSetRemoveEffect =
      new List<DirtTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IObsidianTTCMutSetEffectObserver>> observersForObsidianTTCMutSet =
      new SortedDictionary<int, List<IObsidianTTCMutSetEffectObserver>>();
  readonly List<ObsidianTTCMutSetCreateEffect> effectsObsidianTTCMutSetCreateEffect =
      new List<ObsidianTTCMutSetCreateEffect>();
  readonly List<ObsidianTTCMutSetDeleteEffect> effectsObsidianTTCMutSetDeleteEffect =
      new List<ObsidianTTCMutSetDeleteEffect>();
  readonly List<ObsidianTTCMutSetAddEffect> effectsObsidianTTCMutSetAddEffect =
      new List<ObsidianTTCMutSetAddEffect>();
  readonly List<ObsidianTTCMutSetRemoveEffect> effectsObsidianTTCMutSetRemoveEffect =
      new List<ObsidianTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IDownStairsTTCMutSetEffectObserver>> observersForDownStairsTTCMutSet =
      new SortedDictionary<int, List<IDownStairsTTCMutSetEffectObserver>>();
  readonly List<DownStairsTTCMutSetCreateEffect> effectsDownStairsTTCMutSetCreateEffect =
      new List<DownStairsTTCMutSetCreateEffect>();
  readonly List<DownStairsTTCMutSetDeleteEffect> effectsDownStairsTTCMutSetDeleteEffect =
      new List<DownStairsTTCMutSetDeleteEffect>();
  readonly List<DownStairsTTCMutSetAddEffect> effectsDownStairsTTCMutSetAddEffect =
      new List<DownStairsTTCMutSetAddEffect>();
  readonly List<DownStairsTTCMutSetRemoveEffect> effectsDownStairsTTCMutSetRemoveEffect =
      new List<DownStairsTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IUpStairsTTCMutSetEffectObserver>> observersForUpStairsTTCMutSet =
      new SortedDictionary<int, List<IUpStairsTTCMutSetEffectObserver>>();
  readonly List<UpStairsTTCMutSetCreateEffect> effectsUpStairsTTCMutSetCreateEffect =
      new List<UpStairsTTCMutSetCreateEffect>();
  readonly List<UpStairsTTCMutSetDeleteEffect> effectsUpStairsTTCMutSetDeleteEffect =
      new List<UpStairsTTCMutSetDeleteEffect>();
  readonly List<UpStairsTTCMutSetAddEffect> effectsUpStairsTTCMutSetAddEffect =
      new List<UpStairsTTCMutSetAddEffect>();
  readonly List<UpStairsTTCMutSetRemoveEffect> effectsUpStairsTTCMutSetRemoveEffect =
      new List<UpStairsTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IWallTTCMutSetEffectObserver>> observersForWallTTCMutSet =
      new SortedDictionary<int, List<IWallTTCMutSetEffectObserver>>();
  readonly List<WallTTCMutSetCreateEffect> effectsWallTTCMutSetCreateEffect =
      new List<WallTTCMutSetCreateEffect>();
  readonly List<WallTTCMutSetDeleteEffect> effectsWallTTCMutSetDeleteEffect =
      new List<WallTTCMutSetDeleteEffect>();
  readonly List<WallTTCMutSetAddEffect> effectsWallTTCMutSetAddEffect =
      new List<WallTTCMutSetAddEffect>();
  readonly List<WallTTCMutSetRemoveEffect> effectsWallTTCMutSetRemoveEffect =
      new List<WallTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IBloodTTCMutSetEffectObserver>> observersForBloodTTCMutSet =
      new SortedDictionary<int, List<IBloodTTCMutSetEffectObserver>>();
  readonly List<BloodTTCMutSetCreateEffect> effectsBloodTTCMutSetCreateEffect =
      new List<BloodTTCMutSetCreateEffect>();
  readonly List<BloodTTCMutSetDeleteEffect> effectsBloodTTCMutSetDeleteEffect =
      new List<BloodTTCMutSetDeleteEffect>();
  readonly List<BloodTTCMutSetAddEffect> effectsBloodTTCMutSetAddEffect =
      new List<BloodTTCMutSetAddEffect>();
  readonly List<BloodTTCMutSetRemoveEffect> effectsBloodTTCMutSetRemoveEffect =
      new List<BloodTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IRocksTTCMutSetEffectObserver>> observersForRocksTTCMutSet =
      new SortedDictionary<int, List<IRocksTTCMutSetEffectObserver>>();
  readonly List<RocksTTCMutSetCreateEffect> effectsRocksTTCMutSetCreateEffect =
      new List<RocksTTCMutSetCreateEffect>();
  readonly List<RocksTTCMutSetDeleteEffect> effectsRocksTTCMutSetDeleteEffect =
      new List<RocksTTCMutSetDeleteEffect>();
  readonly List<RocksTTCMutSetAddEffect> effectsRocksTTCMutSetAddEffect =
      new List<RocksTTCMutSetAddEffect>();
  readonly List<RocksTTCMutSetRemoveEffect> effectsRocksTTCMutSetRemoveEffect =
      new List<RocksTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ITreeTTCMutSetEffectObserver>> observersForTreeTTCMutSet =
      new SortedDictionary<int, List<ITreeTTCMutSetEffectObserver>>();
  readonly List<TreeTTCMutSetCreateEffect> effectsTreeTTCMutSetCreateEffect =
      new List<TreeTTCMutSetCreateEffect>();
  readonly List<TreeTTCMutSetDeleteEffect> effectsTreeTTCMutSetDeleteEffect =
      new List<TreeTTCMutSetDeleteEffect>();
  readonly List<TreeTTCMutSetAddEffect> effectsTreeTTCMutSetAddEffect =
      new List<TreeTTCMutSetAddEffect>();
  readonly List<TreeTTCMutSetRemoveEffect> effectsTreeTTCMutSetRemoveEffect =
      new List<TreeTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IWaterTTCMutSetEffectObserver>> observersForWaterTTCMutSet =
      new SortedDictionary<int, List<IWaterTTCMutSetEffectObserver>>();
  readonly List<WaterTTCMutSetCreateEffect> effectsWaterTTCMutSetCreateEffect =
      new List<WaterTTCMutSetCreateEffect>();
  readonly List<WaterTTCMutSetDeleteEffect> effectsWaterTTCMutSetDeleteEffect =
      new List<WaterTTCMutSetDeleteEffect>();
  readonly List<WaterTTCMutSetAddEffect> effectsWaterTTCMutSetAddEffect =
      new List<WaterTTCMutSetAddEffect>();
  readonly List<WaterTTCMutSetRemoveEffect> effectsWaterTTCMutSetRemoveEffect =
      new List<WaterTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IFloorTTCMutSetEffectObserver>> observersForFloorTTCMutSet =
      new SortedDictionary<int, List<IFloorTTCMutSetEffectObserver>>();
  readonly List<FloorTTCMutSetCreateEffect> effectsFloorTTCMutSetCreateEffect =
      new List<FloorTTCMutSetCreateEffect>();
  readonly List<FloorTTCMutSetDeleteEffect> effectsFloorTTCMutSetDeleteEffect =
      new List<FloorTTCMutSetDeleteEffect>();
  readonly List<FloorTTCMutSetAddEffect> effectsFloorTTCMutSetAddEffect =
      new List<FloorTTCMutSetAddEffect>();
  readonly List<FloorTTCMutSetRemoveEffect> effectsFloorTTCMutSetRemoveEffect =
      new List<FloorTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ICaveWallTTCMutSetEffectObserver>> observersForCaveWallTTCMutSet =
      new SortedDictionary<int, List<ICaveWallTTCMutSetEffectObserver>>();
  readonly List<CaveWallTTCMutSetCreateEffect> effectsCaveWallTTCMutSetCreateEffect =
      new List<CaveWallTTCMutSetCreateEffect>();
  readonly List<CaveWallTTCMutSetDeleteEffect> effectsCaveWallTTCMutSetDeleteEffect =
      new List<CaveWallTTCMutSetDeleteEffect>();
  readonly List<CaveWallTTCMutSetAddEffect> effectsCaveWallTTCMutSetAddEffect =
      new List<CaveWallTTCMutSetAddEffect>();
  readonly List<CaveWallTTCMutSetRemoveEffect> effectsCaveWallTTCMutSetRemoveEffect =
      new List<CaveWallTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ICaveTTCMutSetEffectObserver>> observersForCaveTTCMutSet =
      new SortedDictionary<int, List<ICaveTTCMutSetEffectObserver>>();
  readonly List<CaveTTCMutSetCreateEffect> effectsCaveTTCMutSetCreateEffect =
      new List<CaveTTCMutSetCreateEffect>();
  readonly List<CaveTTCMutSetDeleteEffect> effectsCaveTTCMutSetDeleteEffect =
      new List<CaveTTCMutSetDeleteEffect>();
  readonly List<CaveTTCMutSetAddEffect> effectsCaveTTCMutSetAddEffect =
      new List<CaveTTCMutSetAddEffect>();
  readonly List<CaveTTCMutSetRemoveEffect> effectsCaveTTCMutSetRemoveEffect =
      new List<CaveTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IFallsTTCMutSetEffectObserver>> observersForFallsTTCMutSet =
      new SortedDictionary<int, List<IFallsTTCMutSetEffectObserver>>();
  readonly List<FallsTTCMutSetCreateEffect> effectsFallsTTCMutSetCreateEffect =
      new List<FallsTTCMutSetCreateEffect>();
  readonly List<FallsTTCMutSetDeleteEffect> effectsFallsTTCMutSetDeleteEffect =
      new List<FallsTTCMutSetDeleteEffect>();
  readonly List<FallsTTCMutSetAddEffect> effectsFallsTTCMutSetAddEffect =
      new List<FallsTTCMutSetAddEffect>();
  readonly List<FallsTTCMutSetRemoveEffect> effectsFallsTTCMutSetRemoveEffect =
      new List<FallsTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IFireTTCMutSetEffectObserver>> observersForFireTTCMutSet =
      new SortedDictionary<int, List<IFireTTCMutSetEffectObserver>>();
  readonly List<FireTTCMutSetCreateEffect> effectsFireTTCMutSetCreateEffect =
      new List<FireTTCMutSetCreateEffect>();
  readonly List<FireTTCMutSetDeleteEffect> effectsFireTTCMutSetDeleteEffect =
      new List<FireTTCMutSetDeleteEffect>();
  readonly List<FireTTCMutSetAddEffect> effectsFireTTCMutSetAddEffect =
      new List<FireTTCMutSetAddEffect>();
  readonly List<FireTTCMutSetRemoveEffect> effectsFireTTCMutSetRemoveEffect =
      new List<FireTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IObsidianFloorTTCMutSetEffectObserver>> observersForObsidianFloorTTCMutSet =
      new SortedDictionary<int, List<IObsidianFloorTTCMutSetEffectObserver>>();
  readonly List<ObsidianFloorTTCMutSetCreateEffect> effectsObsidianFloorTTCMutSetCreateEffect =
      new List<ObsidianFloorTTCMutSetCreateEffect>();
  readonly List<ObsidianFloorTTCMutSetDeleteEffect> effectsObsidianFloorTTCMutSetDeleteEffect =
      new List<ObsidianFloorTTCMutSetDeleteEffect>();
  readonly List<ObsidianFloorTTCMutSetAddEffect> effectsObsidianFloorTTCMutSetAddEffect =
      new List<ObsidianFloorTTCMutSetAddEffect>();
  readonly List<ObsidianFloorTTCMutSetRemoveEffect> effectsObsidianFloorTTCMutSetRemoveEffect =
      new List<ObsidianFloorTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IMagmaTTCMutSetEffectObserver>> observersForMagmaTTCMutSet =
      new SortedDictionary<int, List<IMagmaTTCMutSetEffectObserver>>();
  readonly List<MagmaTTCMutSetCreateEffect> effectsMagmaTTCMutSetCreateEffect =
      new List<MagmaTTCMutSetCreateEffect>();
  readonly List<MagmaTTCMutSetDeleteEffect> effectsMagmaTTCMutSetDeleteEffect =
      new List<MagmaTTCMutSetDeleteEffect>();
  readonly List<MagmaTTCMutSetAddEffect> effectsMagmaTTCMutSetAddEffect =
      new List<MagmaTTCMutSetAddEffect>();
  readonly List<MagmaTTCMutSetRemoveEffect> effectsMagmaTTCMutSetRemoveEffect =
      new List<MagmaTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ICliffTTCMutSetEffectObserver>> observersForCliffTTCMutSet =
      new SortedDictionary<int, List<ICliffTTCMutSetEffectObserver>>();
  readonly List<CliffTTCMutSetCreateEffect> effectsCliffTTCMutSetCreateEffect =
      new List<CliffTTCMutSetCreateEffect>();
  readonly List<CliffTTCMutSetDeleteEffect> effectsCliffTTCMutSetDeleteEffect =
      new List<CliffTTCMutSetDeleteEffect>();
  readonly List<CliffTTCMutSetAddEffect> effectsCliffTTCMutSetAddEffect =
      new List<CliffTTCMutSetAddEffect>();
  readonly List<CliffTTCMutSetRemoveEffect> effectsCliffTTCMutSetRemoveEffect =
      new List<CliffTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IRavaNestTTCMutSetEffectObserver>> observersForRavaNestTTCMutSet =
      new SortedDictionary<int, List<IRavaNestTTCMutSetEffectObserver>>();
  readonly List<RavaNestTTCMutSetCreateEffect> effectsRavaNestTTCMutSetCreateEffect =
      new List<RavaNestTTCMutSetCreateEffect>();
  readonly List<RavaNestTTCMutSetDeleteEffect> effectsRavaNestTTCMutSetDeleteEffect =
      new List<RavaNestTTCMutSetDeleteEffect>();
  readonly List<RavaNestTTCMutSetAddEffect> effectsRavaNestTTCMutSetAddEffect =
      new List<RavaNestTTCMutSetAddEffect>();
  readonly List<RavaNestTTCMutSetRemoveEffect> effectsRavaNestTTCMutSetRemoveEffect =
      new List<RavaNestTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ICliffLandingTTCMutSetEffectObserver>> observersForCliffLandingTTCMutSet =
      new SortedDictionary<int, List<ICliffLandingTTCMutSetEffectObserver>>();
  readonly List<CliffLandingTTCMutSetCreateEffect> effectsCliffLandingTTCMutSetCreateEffect =
      new List<CliffLandingTTCMutSetCreateEffect>();
  readonly List<CliffLandingTTCMutSetDeleteEffect> effectsCliffLandingTTCMutSetDeleteEffect =
      new List<CliffLandingTTCMutSetDeleteEffect>();
  readonly List<CliffLandingTTCMutSetAddEffect> effectsCliffLandingTTCMutSetAddEffect =
      new List<CliffLandingTTCMutSetAddEffect>();
  readonly List<CliffLandingTTCMutSetRemoveEffect> effectsCliffLandingTTCMutSetRemoveEffect =
      new List<CliffLandingTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IStoneTTCMutSetEffectObserver>> observersForStoneTTCMutSet =
      new SortedDictionary<int, List<IStoneTTCMutSetEffectObserver>>();
  readonly List<StoneTTCMutSetCreateEffect> effectsStoneTTCMutSetCreateEffect =
      new List<StoneTTCMutSetCreateEffect>();
  readonly List<StoneTTCMutSetDeleteEffect> effectsStoneTTCMutSetDeleteEffect =
      new List<StoneTTCMutSetDeleteEffect>();
  readonly List<StoneTTCMutSetAddEffect> effectsStoneTTCMutSetAddEffect =
      new List<StoneTTCMutSetAddEffect>();
  readonly List<StoneTTCMutSetRemoveEffect> effectsStoneTTCMutSetRemoveEffect =
      new List<StoneTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IGrassTTCMutSetEffectObserver>> observersForGrassTTCMutSet =
      new SortedDictionary<int, List<IGrassTTCMutSetEffectObserver>>();
  readonly List<GrassTTCMutSetCreateEffect> effectsGrassTTCMutSetCreateEffect =
      new List<GrassTTCMutSetCreateEffect>();
  readonly List<GrassTTCMutSetDeleteEffect> effectsGrassTTCMutSetDeleteEffect =
      new List<GrassTTCMutSetDeleteEffect>();
  readonly List<GrassTTCMutSetAddEffect> effectsGrassTTCMutSetAddEffect =
      new List<GrassTTCMutSetAddEffect>();
  readonly List<GrassTTCMutSetRemoveEffect> effectsGrassTTCMutSetRemoveEffect =
      new List<GrassTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IIncendianFallsLevelLinkerTTCMutSetEffectObserver>> observersForIncendianFallsLevelLinkerTTCMutSet =
      new SortedDictionary<int, List<IIncendianFallsLevelLinkerTTCMutSetEffectObserver>>();
  readonly List<IncendianFallsLevelLinkerTTCMutSetCreateEffect> effectsIncendianFallsLevelLinkerTTCMutSetCreateEffect =
      new List<IncendianFallsLevelLinkerTTCMutSetCreateEffect>();
  readonly List<IncendianFallsLevelLinkerTTCMutSetDeleteEffect> effectsIncendianFallsLevelLinkerTTCMutSetDeleteEffect =
      new List<IncendianFallsLevelLinkerTTCMutSetDeleteEffect>();
  readonly List<IncendianFallsLevelLinkerTTCMutSetAddEffect> effectsIncendianFallsLevelLinkerTTCMutSetAddEffect =
      new List<IncendianFallsLevelLinkerTTCMutSetAddEffect>();
  readonly List<IncendianFallsLevelLinkerTTCMutSetRemoveEffect> effectsIncendianFallsLevelLinkerTTCMutSetRemoveEffect =
      new List<IncendianFallsLevelLinkerTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IEmberDeepLevelLinkerTTCMutSetEffectObserver>> observersForEmberDeepLevelLinkerTTCMutSet =
      new SortedDictionary<int, List<IEmberDeepLevelLinkerTTCMutSetEffectObserver>>();
  readonly List<EmberDeepLevelLinkerTTCMutSetCreateEffect> effectsEmberDeepLevelLinkerTTCMutSetCreateEffect =
      new List<EmberDeepLevelLinkerTTCMutSetCreateEffect>();
  readonly List<EmberDeepLevelLinkerTTCMutSetDeleteEffect> effectsEmberDeepLevelLinkerTTCMutSetDeleteEffect =
      new List<EmberDeepLevelLinkerTTCMutSetDeleteEffect>();
  readonly List<EmberDeepLevelLinkerTTCMutSetAddEffect> effectsEmberDeepLevelLinkerTTCMutSetAddEffect =
      new List<EmberDeepLevelLinkerTTCMutSetAddEffect>();
  readonly List<EmberDeepLevelLinkerTTCMutSetRemoveEffect> effectsEmberDeepLevelLinkerTTCMutSetRemoveEffect =
      new List<EmberDeepLevelLinkerTTCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ITutorialDefyCounterUCMutSetEffectObserver>> observersForTutorialDefyCounterUCMutSet =
      new SortedDictionary<int, List<ITutorialDefyCounterUCMutSetEffectObserver>>();
  readonly List<TutorialDefyCounterUCMutSetCreateEffect> effectsTutorialDefyCounterUCMutSetCreateEffect =
      new List<TutorialDefyCounterUCMutSetCreateEffect>();
  readonly List<TutorialDefyCounterUCMutSetDeleteEffect> effectsTutorialDefyCounterUCMutSetDeleteEffect =
      new List<TutorialDefyCounterUCMutSetDeleteEffect>();
  readonly List<TutorialDefyCounterUCMutSetAddEffect> effectsTutorialDefyCounterUCMutSetAddEffect =
      new List<TutorialDefyCounterUCMutSetAddEffect>();
  readonly List<TutorialDefyCounterUCMutSetRemoveEffect> effectsTutorialDefyCounterUCMutSetRemoveEffect =
      new List<TutorialDefyCounterUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ILightningChargingUCMutSetEffectObserver>> observersForLightningChargingUCMutSet =
      new SortedDictionary<int, List<ILightningChargingUCMutSetEffectObserver>>();
  readonly List<LightningChargingUCMutSetCreateEffect> effectsLightningChargingUCMutSetCreateEffect =
      new List<LightningChargingUCMutSetCreateEffect>();
  readonly List<LightningChargingUCMutSetDeleteEffect> effectsLightningChargingUCMutSetDeleteEffect =
      new List<LightningChargingUCMutSetDeleteEffect>();
  readonly List<LightningChargingUCMutSetAddEffect> effectsLightningChargingUCMutSetAddEffect =
      new List<LightningChargingUCMutSetAddEffect>();
  readonly List<LightningChargingUCMutSetRemoveEffect> effectsLightningChargingUCMutSetRemoveEffect =
      new List<LightningChargingUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IWanderAICapabilityUCMutSetEffectObserver>> observersForWanderAICapabilityUCMutSet =
      new SortedDictionary<int, List<IWanderAICapabilityUCMutSetEffectObserver>>();
  readonly List<WanderAICapabilityUCMutSetCreateEffect> effectsWanderAICapabilityUCMutSetCreateEffect =
      new List<WanderAICapabilityUCMutSetCreateEffect>();
  readonly List<WanderAICapabilityUCMutSetDeleteEffect> effectsWanderAICapabilityUCMutSetDeleteEffect =
      new List<WanderAICapabilityUCMutSetDeleteEffect>();
  readonly List<WanderAICapabilityUCMutSetAddEffect> effectsWanderAICapabilityUCMutSetAddEffect =
      new List<WanderAICapabilityUCMutSetAddEffect>();
  readonly List<WanderAICapabilityUCMutSetRemoveEffect> effectsWanderAICapabilityUCMutSetRemoveEffect =
      new List<WanderAICapabilityUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ITemporaryCloneAICapabilityUCMutSetEffectObserver>> observersForTemporaryCloneAICapabilityUCMutSet =
      new SortedDictionary<int, List<ITemporaryCloneAICapabilityUCMutSetEffectObserver>>();
  readonly List<TemporaryCloneAICapabilityUCMutSetCreateEffect> effectsTemporaryCloneAICapabilityUCMutSetCreateEffect =
      new List<TemporaryCloneAICapabilityUCMutSetCreateEffect>();
  readonly List<TemporaryCloneAICapabilityUCMutSetDeleteEffect> effectsTemporaryCloneAICapabilityUCMutSetDeleteEffect =
      new List<TemporaryCloneAICapabilityUCMutSetDeleteEffect>();
  readonly List<TemporaryCloneAICapabilityUCMutSetAddEffect> effectsTemporaryCloneAICapabilityUCMutSetAddEffect =
      new List<TemporaryCloneAICapabilityUCMutSetAddEffect>();
  readonly List<TemporaryCloneAICapabilityUCMutSetRemoveEffect> effectsTemporaryCloneAICapabilityUCMutSetRemoveEffect =
      new List<TemporaryCloneAICapabilityUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ISummonAICapabilityUCMutSetEffectObserver>> observersForSummonAICapabilityUCMutSet =
      new SortedDictionary<int, List<ISummonAICapabilityUCMutSetEffectObserver>>();
  readonly List<SummonAICapabilityUCMutSetCreateEffect> effectsSummonAICapabilityUCMutSetCreateEffect =
      new List<SummonAICapabilityUCMutSetCreateEffect>();
  readonly List<SummonAICapabilityUCMutSetDeleteEffect> effectsSummonAICapabilityUCMutSetDeleteEffect =
      new List<SummonAICapabilityUCMutSetDeleteEffect>();
  readonly List<SummonAICapabilityUCMutSetAddEffect> effectsSummonAICapabilityUCMutSetAddEffect =
      new List<SummonAICapabilityUCMutSetAddEffect>();
  readonly List<SummonAICapabilityUCMutSetRemoveEffect> effectsSummonAICapabilityUCMutSetRemoveEffect =
      new List<SummonAICapabilityUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IKamikazeAICapabilityUCMutSetEffectObserver>> observersForKamikazeAICapabilityUCMutSet =
      new SortedDictionary<int, List<IKamikazeAICapabilityUCMutSetEffectObserver>>();
  readonly List<KamikazeAICapabilityUCMutSetCreateEffect> effectsKamikazeAICapabilityUCMutSetCreateEffect =
      new List<KamikazeAICapabilityUCMutSetCreateEffect>();
  readonly List<KamikazeAICapabilityUCMutSetDeleteEffect> effectsKamikazeAICapabilityUCMutSetDeleteEffect =
      new List<KamikazeAICapabilityUCMutSetDeleteEffect>();
  readonly List<KamikazeAICapabilityUCMutSetAddEffect> effectsKamikazeAICapabilityUCMutSetAddEffect =
      new List<KamikazeAICapabilityUCMutSetAddEffect>();
  readonly List<KamikazeAICapabilityUCMutSetRemoveEffect> effectsKamikazeAICapabilityUCMutSetRemoveEffect =
      new List<KamikazeAICapabilityUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IGuardAICapabilityUCMutSetEffectObserver>> observersForGuardAICapabilityUCMutSet =
      new SortedDictionary<int, List<IGuardAICapabilityUCMutSetEffectObserver>>();
  readonly List<GuardAICapabilityUCMutSetCreateEffect> effectsGuardAICapabilityUCMutSetCreateEffect =
      new List<GuardAICapabilityUCMutSetCreateEffect>();
  readonly List<GuardAICapabilityUCMutSetDeleteEffect> effectsGuardAICapabilityUCMutSetDeleteEffect =
      new List<GuardAICapabilityUCMutSetDeleteEffect>();
  readonly List<GuardAICapabilityUCMutSetAddEffect> effectsGuardAICapabilityUCMutSetAddEffect =
      new List<GuardAICapabilityUCMutSetAddEffect>();
  readonly List<GuardAICapabilityUCMutSetRemoveEffect> effectsGuardAICapabilityUCMutSetRemoveEffect =
      new List<GuardAICapabilityUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ITimeCloneAICapabilityUCMutSetEffectObserver>> observersForTimeCloneAICapabilityUCMutSet =
      new SortedDictionary<int, List<ITimeCloneAICapabilityUCMutSetEffectObserver>>();
  readonly List<TimeCloneAICapabilityUCMutSetCreateEffect> effectsTimeCloneAICapabilityUCMutSetCreateEffect =
      new List<TimeCloneAICapabilityUCMutSetCreateEffect>();
  readonly List<TimeCloneAICapabilityUCMutSetDeleteEffect> effectsTimeCloneAICapabilityUCMutSetDeleteEffect =
      new List<TimeCloneAICapabilityUCMutSetDeleteEffect>();
  readonly List<TimeCloneAICapabilityUCMutSetAddEffect> effectsTimeCloneAICapabilityUCMutSetAddEffect =
      new List<TimeCloneAICapabilityUCMutSetAddEffect>();
  readonly List<TimeCloneAICapabilityUCMutSetRemoveEffect> effectsTimeCloneAICapabilityUCMutSetRemoveEffect =
      new List<TimeCloneAICapabilityUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IDoomedUCMutSetEffectObserver>> observersForDoomedUCMutSet =
      new SortedDictionary<int, List<IDoomedUCMutSetEffectObserver>>();
  readonly List<DoomedUCMutSetCreateEffect> effectsDoomedUCMutSetCreateEffect =
      new List<DoomedUCMutSetCreateEffect>();
  readonly List<DoomedUCMutSetDeleteEffect> effectsDoomedUCMutSetDeleteEffect =
      new List<DoomedUCMutSetDeleteEffect>();
  readonly List<DoomedUCMutSetAddEffect> effectsDoomedUCMutSetAddEffect =
      new List<DoomedUCMutSetAddEffect>();
  readonly List<DoomedUCMutSetRemoveEffect> effectsDoomedUCMutSetRemoveEffect =
      new List<DoomedUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IMiredUCMutSetEffectObserver>> observersForMiredUCMutSet =
      new SortedDictionary<int, List<IMiredUCMutSetEffectObserver>>();
  readonly List<MiredUCMutSetCreateEffect> effectsMiredUCMutSetCreateEffect =
      new List<MiredUCMutSetCreateEffect>();
  readonly List<MiredUCMutSetDeleteEffect> effectsMiredUCMutSetDeleteEffect =
      new List<MiredUCMutSetDeleteEffect>();
  readonly List<MiredUCMutSetAddEffect> effectsMiredUCMutSetAddEffect =
      new List<MiredUCMutSetAddEffect>();
  readonly List<MiredUCMutSetRemoveEffect> effectsMiredUCMutSetRemoveEffect =
      new List<MiredUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IAttackAICapabilityUCMutSetEffectObserver>> observersForAttackAICapabilityUCMutSet =
      new SortedDictionary<int, List<IAttackAICapabilityUCMutSetEffectObserver>>();
  readonly List<AttackAICapabilityUCMutSetCreateEffect> effectsAttackAICapabilityUCMutSetCreateEffect =
      new List<AttackAICapabilityUCMutSetCreateEffect>();
  readonly List<AttackAICapabilityUCMutSetDeleteEffect> effectsAttackAICapabilityUCMutSetDeleteEffect =
      new List<AttackAICapabilityUCMutSetDeleteEffect>();
  readonly List<AttackAICapabilityUCMutSetAddEffect> effectsAttackAICapabilityUCMutSetAddEffect =
      new List<AttackAICapabilityUCMutSetAddEffect>();
  readonly List<AttackAICapabilityUCMutSetRemoveEffect> effectsAttackAICapabilityUCMutSetRemoveEffect =
      new List<AttackAICapabilityUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ICounteringUCMutSetEffectObserver>> observersForCounteringUCMutSet =
      new SortedDictionary<int, List<ICounteringUCMutSetEffectObserver>>();
  readonly List<CounteringUCMutSetCreateEffect> effectsCounteringUCMutSetCreateEffect =
      new List<CounteringUCMutSetCreateEffect>();
  readonly List<CounteringUCMutSetDeleteEffect> effectsCounteringUCMutSetDeleteEffect =
      new List<CounteringUCMutSetDeleteEffect>();
  readonly List<CounteringUCMutSetAddEffect> effectsCounteringUCMutSetAddEffect =
      new List<CounteringUCMutSetAddEffect>();
  readonly List<CounteringUCMutSetRemoveEffect> effectsCounteringUCMutSetRemoveEffect =
      new List<CounteringUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ILightningChargedUCMutSetEffectObserver>> observersForLightningChargedUCMutSet =
      new SortedDictionary<int, List<ILightningChargedUCMutSetEffectObserver>>();
  readonly List<LightningChargedUCMutSetCreateEffect> effectsLightningChargedUCMutSetCreateEffect =
      new List<LightningChargedUCMutSetCreateEffect>();
  readonly List<LightningChargedUCMutSetDeleteEffect> effectsLightningChargedUCMutSetDeleteEffect =
      new List<LightningChargedUCMutSetDeleteEffect>();
  readonly List<LightningChargedUCMutSetAddEffect> effectsLightningChargedUCMutSetAddEffect =
      new List<LightningChargedUCMutSetAddEffect>();
  readonly List<LightningChargedUCMutSetRemoveEffect> effectsLightningChargedUCMutSetRemoveEffect =
      new List<LightningChargedUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IInvincibilityUCMutSetEffectObserver>> observersForInvincibilityUCMutSet =
      new SortedDictionary<int, List<IInvincibilityUCMutSetEffectObserver>>();
  readonly List<InvincibilityUCMutSetCreateEffect> effectsInvincibilityUCMutSetCreateEffect =
      new List<InvincibilityUCMutSetCreateEffect>();
  readonly List<InvincibilityUCMutSetDeleteEffect> effectsInvincibilityUCMutSetDeleteEffect =
      new List<InvincibilityUCMutSetDeleteEffect>();
  readonly List<InvincibilityUCMutSetAddEffect> effectsInvincibilityUCMutSetAddEffect =
      new List<InvincibilityUCMutSetAddEffect>();
  readonly List<InvincibilityUCMutSetRemoveEffect> effectsInvincibilityUCMutSetRemoveEffect =
      new List<InvincibilityUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IDefyingUCMutSetEffectObserver>> observersForDefyingUCMutSet =
      new SortedDictionary<int, List<IDefyingUCMutSetEffectObserver>>();
  readonly List<DefyingUCMutSetCreateEffect> effectsDefyingUCMutSetCreateEffect =
      new List<DefyingUCMutSetCreateEffect>();
  readonly List<DefyingUCMutSetDeleteEffect> effectsDefyingUCMutSetDeleteEffect =
      new List<DefyingUCMutSetDeleteEffect>();
  readonly List<DefyingUCMutSetAddEffect> effectsDefyingUCMutSetAddEffect =
      new List<DefyingUCMutSetAddEffect>();
  readonly List<DefyingUCMutSetRemoveEffect> effectsDefyingUCMutSetRemoveEffect =
      new List<DefyingUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IBideAICapabilityUCMutSetEffectObserver>> observersForBideAICapabilityUCMutSet =
      new SortedDictionary<int, List<IBideAICapabilityUCMutSetEffectObserver>>();
  readonly List<BideAICapabilityUCMutSetCreateEffect> effectsBideAICapabilityUCMutSetCreateEffect =
      new List<BideAICapabilityUCMutSetCreateEffect>();
  readonly List<BideAICapabilityUCMutSetDeleteEffect> effectsBideAICapabilityUCMutSetDeleteEffect =
      new List<BideAICapabilityUCMutSetDeleteEffect>();
  readonly List<BideAICapabilityUCMutSetAddEffect> effectsBideAICapabilityUCMutSetAddEffect =
      new List<BideAICapabilityUCMutSetAddEffect>();
  readonly List<BideAICapabilityUCMutSetRemoveEffect> effectsBideAICapabilityUCMutSetRemoveEffect =
      new List<BideAICapabilityUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IBaseMovementTimeUCMutSetEffectObserver>> observersForBaseMovementTimeUCMutSet =
      new SortedDictionary<int, List<IBaseMovementTimeUCMutSetEffectObserver>>();
  readonly List<BaseMovementTimeUCMutSetCreateEffect> effectsBaseMovementTimeUCMutSetCreateEffect =
      new List<BaseMovementTimeUCMutSetCreateEffect>();
  readonly List<BaseMovementTimeUCMutSetDeleteEffect> effectsBaseMovementTimeUCMutSetDeleteEffect =
      new List<BaseMovementTimeUCMutSetDeleteEffect>();
  readonly List<BaseMovementTimeUCMutSetAddEffect> effectsBaseMovementTimeUCMutSetAddEffect =
      new List<BaseMovementTimeUCMutSetAddEffect>();
  readonly List<BaseMovementTimeUCMutSetRemoveEffect> effectsBaseMovementTimeUCMutSetRemoveEffect =
      new List<BaseMovementTimeUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IBaseCombatTimeUCMutSetEffectObserver>> observersForBaseCombatTimeUCMutSet =
      new SortedDictionary<int, List<IBaseCombatTimeUCMutSetEffectObserver>>();
  readonly List<BaseCombatTimeUCMutSetCreateEffect> effectsBaseCombatTimeUCMutSetCreateEffect =
      new List<BaseCombatTimeUCMutSetCreateEffect>();
  readonly List<BaseCombatTimeUCMutSetDeleteEffect> effectsBaseCombatTimeUCMutSetDeleteEffect =
      new List<BaseCombatTimeUCMutSetDeleteEffect>();
  readonly List<BaseCombatTimeUCMutSetAddEffect> effectsBaseCombatTimeUCMutSetAddEffect =
      new List<BaseCombatTimeUCMutSetAddEffect>();
  readonly List<BaseCombatTimeUCMutSetRemoveEffect> effectsBaseCombatTimeUCMutSetRemoveEffect =
      new List<BaseCombatTimeUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IManaPotionMutSetEffectObserver>> observersForManaPotionMutSet =
      new SortedDictionary<int, List<IManaPotionMutSetEffectObserver>>();
  readonly List<ManaPotionMutSetCreateEffect> effectsManaPotionMutSetCreateEffect =
      new List<ManaPotionMutSetCreateEffect>();
  readonly List<ManaPotionMutSetDeleteEffect> effectsManaPotionMutSetDeleteEffect =
      new List<ManaPotionMutSetDeleteEffect>();
  readonly List<ManaPotionMutSetAddEffect> effectsManaPotionMutSetAddEffect =
      new List<ManaPotionMutSetAddEffect>();
  readonly List<ManaPotionMutSetRemoveEffect> effectsManaPotionMutSetRemoveEffect =
      new List<ManaPotionMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IHealthPotionMutSetEffectObserver>> observersForHealthPotionMutSet =
      new SortedDictionary<int, List<IHealthPotionMutSetEffectObserver>>();
  readonly List<HealthPotionMutSetCreateEffect> effectsHealthPotionMutSetCreateEffect =
      new List<HealthPotionMutSetCreateEffect>();
  readonly List<HealthPotionMutSetDeleteEffect> effectsHealthPotionMutSetDeleteEffect =
      new List<HealthPotionMutSetDeleteEffect>();
  readonly List<HealthPotionMutSetAddEffect> effectsHealthPotionMutSetAddEffect =
      new List<HealthPotionMutSetAddEffect>();
  readonly List<HealthPotionMutSetRemoveEffect> effectsHealthPotionMutSetRemoveEffect =
      new List<HealthPotionMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ISpeedRingMutSetEffectObserver>> observersForSpeedRingMutSet =
      new SortedDictionary<int, List<ISpeedRingMutSetEffectObserver>>();
  readonly List<SpeedRingMutSetCreateEffect> effectsSpeedRingMutSetCreateEffect =
      new List<SpeedRingMutSetCreateEffect>();
  readonly List<SpeedRingMutSetDeleteEffect> effectsSpeedRingMutSetDeleteEffect =
      new List<SpeedRingMutSetDeleteEffect>();
  readonly List<SpeedRingMutSetAddEffect> effectsSpeedRingMutSetAddEffect =
      new List<SpeedRingMutSetAddEffect>();
  readonly List<SpeedRingMutSetRemoveEffect> effectsSpeedRingMutSetRemoveEffect =
      new List<SpeedRingMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IGlaiveMutSetEffectObserver>> observersForGlaiveMutSet =
      new SortedDictionary<int, List<IGlaiveMutSetEffectObserver>>();
  readonly List<GlaiveMutSetCreateEffect> effectsGlaiveMutSetCreateEffect =
      new List<GlaiveMutSetCreateEffect>();
  readonly List<GlaiveMutSetDeleteEffect> effectsGlaiveMutSetDeleteEffect =
      new List<GlaiveMutSetDeleteEffect>();
  readonly List<GlaiveMutSetAddEffect> effectsGlaiveMutSetAddEffect =
      new List<GlaiveMutSetAddEffect>();
  readonly List<GlaiveMutSetRemoveEffect> effectsGlaiveMutSetRemoveEffect =
      new List<GlaiveMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ISlowRodMutSetEffectObserver>> observersForSlowRodMutSet =
      new SortedDictionary<int, List<ISlowRodMutSetEffectObserver>>();
  readonly List<SlowRodMutSetCreateEffect> effectsSlowRodMutSetCreateEffect =
      new List<SlowRodMutSetCreateEffect>();
  readonly List<SlowRodMutSetDeleteEffect> effectsSlowRodMutSetDeleteEffect =
      new List<SlowRodMutSetDeleteEffect>();
  readonly List<SlowRodMutSetAddEffect> effectsSlowRodMutSetAddEffect =
      new List<SlowRodMutSetAddEffect>();
  readonly List<SlowRodMutSetRemoveEffect> effectsSlowRodMutSetRemoveEffect =
      new List<SlowRodMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IBlastRodMutSetEffectObserver>> observersForBlastRodMutSet =
      new SortedDictionary<int, List<IBlastRodMutSetEffectObserver>>();
  readonly List<BlastRodMutSetCreateEffect> effectsBlastRodMutSetCreateEffect =
      new List<BlastRodMutSetCreateEffect>();
  readonly List<BlastRodMutSetDeleteEffect> effectsBlastRodMutSetDeleteEffect =
      new List<BlastRodMutSetDeleteEffect>();
  readonly List<BlastRodMutSetAddEffect> effectsBlastRodMutSetAddEffect =
      new List<BlastRodMutSetAddEffect>();
  readonly List<BlastRodMutSetRemoveEffect> effectsBlastRodMutSetRemoveEffect =
      new List<BlastRodMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IArmorMutSetEffectObserver>> observersForArmorMutSet =
      new SortedDictionary<int, List<IArmorMutSetEffectObserver>>();
  readonly List<ArmorMutSetCreateEffect> effectsArmorMutSetCreateEffect =
      new List<ArmorMutSetCreateEffect>();
  readonly List<ArmorMutSetDeleteEffect> effectsArmorMutSetDeleteEffect =
      new List<ArmorMutSetDeleteEffect>();
  readonly List<ArmorMutSetAddEffect> effectsArmorMutSetAddEffect =
      new List<ArmorMutSetAddEffect>();
  readonly List<ArmorMutSetRemoveEffect> effectsArmorMutSetRemoveEffect =
      new List<ArmorMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ISorcerousUCMutSetEffectObserver>> observersForSorcerousUCMutSet =
      new SortedDictionary<int, List<ISorcerousUCMutSetEffectObserver>>();
  readonly List<SorcerousUCMutSetCreateEffect> effectsSorcerousUCMutSetCreateEffect =
      new List<SorcerousUCMutSetCreateEffect>();
  readonly List<SorcerousUCMutSetDeleteEffect> effectsSorcerousUCMutSetDeleteEffect =
      new List<SorcerousUCMutSetDeleteEffect>();
  readonly List<SorcerousUCMutSetAddEffect> effectsSorcerousUCMutSetAddEffect =
      new List<SorcerousUCMutSetAddEffect>();
  readonly List<SorcerousUCMutSetRemoveEffect> effectsSorcerousUCMutSetRemoveEffect =
      new List<SorcerousUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IBaseOffenseUCMutSetEffectObserver>> observersForBaseOffenseUCMutSet =
      new SortedDictionary<int, List<IBaseOffenseUCMutSetEffectObserver>>();
  readonly List<BaseOffenseUCMutSetCreateEffect> effectsBaseOffenseUCMutSetCreateEffect =
      new List<BaseOffenseUCMutSetCreateEffect>();
  readonly List<BaseOffenseUCMutSetDeleteEffect> effectsBaseOffenseUCMutSetDeleteEffect =
      new List<BaseOffenseUCMutSetDeleteEffect>();
  readonly List<BaseOffenseUCMutSetAddEffect> effectsBaseOffenseUCMutSetAddEffect =
      new List<BaseOffenseUCMutSetAddEffect>();
  readonly List<BaseOffenseUCMutSetRemoveEffect> effectsBaseOffenseUCMutSetRemoveEffect =
      new List<BaseOffenseUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<IBaseDefenseUCMutSetEffectObserver>> observersForBaseDefenseUCMutSet =
      new SortedDictionary<int, List<IBaseDefenseUCMutSetEffectObserver>>();
  readonly List<BaseDefenseUCMutSetCreateEffect> effectsBaseDefenseUCMutSetCreateEffect =
      new List<BaseDefenseUCMutSetCreateEffect>();
  readonly List<BaseDefenseUCMutSetDeleteEffect> effectsBaseDefenseUCMutSetDeleteEffect =
      new List<BaseDefenseUCMutSetDeleteEffect>();
  readonly List<BaseDefenseUCMutSetAddEffect> effectsBaseDefenseUCMutSetAddEffect =
      new List<BaseDefenseUCMutSetAddEffect>();
  readonly List<BaseDefenseUCMutSetRemoveEffect> effectsBaseDefenseUCMutSetRemoveEffect =
      new List<BaseDefenseUCMutSetRemoveEffect>();

  readonly SortedDictionary<int, List<ITerrainTileByLocationMutMapEffectObserver>> observersForTerrainTileByLocationMutMap =
      new SortedDictionary<int, List<ITerrainTileByLocationMutMapEffectObserver>>();
  readonly List<TerrainTileByLocationMutMapCreateEffect> effectsTerrainTileByLocationMutMapCreateEffect =
      new List<TerrainTileByLocationMutMapCreateEffect>();
  readonly List<TerrainTileByLocationMutMapDeleteEffect> effectsTerrainTileByLocationMutMapDeleteEffect =
      new List<TerrainTileByLocationMutMapDeleteEffect>();
  readonly List<TerrainTileByLocationMutMapAddEffect> effectsTerrainTileByLocationMutMapAddEffect =
      new List<TerrainTileByLocationMutMapAddEffect>();
  readonly List<TerrainTileByLocationMutMapRemoveEffect> effectsTerrainTileByLocationMutMapRemoveEffect =
      new List<TerrainTileByLocationMutMapRemoveEffect>();

  readonly SortedDictionary<int, List<IKamikazeTargetTTCStrongByLocationMutMapEffectObserver>> observersForKamikazeTargetTTCStrongByLocationMutMap =
      new SortedDictionary<int, List<IKamikazeTargetTTCStrongByLocationMutMapEffectObserver>>();
  readonly List<KamikazeTargetTTCStrongByLocationMutMapCreateEffect> effectsKamikazeTargetTTCStrongByLocationMutMapCreateEffect =
      new List<KamikazeTargetTTCStrongByLocationMutMapCreateEffect>();
  readonly List<KamikazeTargetTTCStrongByLocationMutMapDeleteEffect> effectsKamikazeTargetTTCStrongByLocationMutMapDeleteEffect =
      new List<KamikazeTargetTTCStrongByLocationMutMapDeleteEffect>();
  readonly List<KamikazeTargetTTCStrongByLocationMutMapAddEffect> effectsKamikazeTargetTTCStrongByLocationMutMapAddEffect =
      new List<KamikazeTargetTTCStrongByLocationMutMapAddEffect>();
  readonly List<KamikazeTargetTTCStrongByLocationMutMapRemoveEffect> effectsKamikazeTargetTTCStrongByLocationMutMapRemoveEffect =
      new List<KamikazeTargetTTCStrongByLocationMutMapRemoveEffect>();

  public Root(ILogger logger) {
    this.logger = logger;
    int initialVersion = 1;
    int initialNextId = 1;
    int initialHash = VERSION_HASH_MULTIPLIER * initialVersion + NEXT_ID_HASH_MULTIPLIER * initialNextId;
    rootIncarnation = new RootIncarnation(initialVersion, initialNextId, initialHash);
    this.locked = true;
  }

  public Root(ILogger logger, RootIncarnation rootIncarnation) {
    this.logger = logger;
    this.rootIncarnation = rootIncarnation;
    this.locked = false;
    this.Snapshot();
    this.locked = true;
  }

  public int version { get { return rootIncarnation.version; } }

  public RootIncarnation Snapshot() {
    CheckUnlocked();
    RootIncarnation oldIncarnation = rootIncarnation;
    int newHash = oldIncarnation.hash;
    int newVersion = oldIncarnation.version + 1;
    rootIncarnation =
        new RootIncarnation(
            newVersion, oldIncarnation.nextId, newHash, oldIncarnation);
    return oldIncarnation;
  }

  public delegate T ITransaction<T>();

  public T Transact<T>(ITransaction<T> transaction) {
    var stopwatch = new System.Diagnostics.Stopwatch();
    stopwatch.Start();

    if (!locked) {
      throw new Exception("Can't unlock, not locked!");
    }
    locked = false;
    // var rollbackPoint = Snapshot();
    try {
      return transaction();
    } catch (Exception e) {
      // logger.Error("Rolling back because of error: " + e.Message + "\n" + e.StackTrace);
      // Revert(rollbackPoint);
      logger.Error("Encountered error in transaction: " + e.Message + "\n" + e.StackTrace);
      throw;
    } finally {
      if (locked) {
        logger.Error("Can't lock, already locked!");
        Environment.Exit(1);
      }
      locked = true;
      // CheckForViolations();

      stopwatch.Stop();
      var calculationDuration = stopwatch.Elapsed.TotalMilliseconds;

      stopwatch = new System.Diagnostics.Stopwatch();
      stopwatch.Start();
      FlushEvents();
      stopwatch.Stop();
      var flushEventsDuration = stopwatch.Elapsed.TotalMilliseconds;

      logger.Info("Transaction run time " + calculationDuration + ", observers run time " + flushEventsDuration);
    }
  }

  public void CheckUnlocked() {
    if (locked) {
      throw new Exception("Can't proceed, superstructure is locked!");
    }
  }

  private int NewId() {
    this.UpdateHashOnNextIdChange(rootIncarnation.nextId, rootIncarnation.nextId + 1);
    return rootIncarnation.nextId++;
  }

  private void UpdateHashOnNextIdChange(int oldNextId, int newNextId) {
    int oldIdAndVersionHashContribution =
        VERSION_HASH_MULTIPLIER * rootIncarnation.version +
        NEXT_ID_HASH_MULTIPLIER * oldNextId;
    int newIdAndVersionHashContribution =
        VERSION_HASH_MULTIPLIER * rootIncarnation.version +
        NEXT_ID_HASH_MULTIPLIER * newNextId;
    rootIncarnation.hash =
        rootIncarnation.hash -
        oldIdAndVersionHashContribution +
        newIdAndVersionHashContribution;
  }

  private int RecalculateEntireHash() {
    int result =
        VERSION_HASH_MULTIPLIER * rootIncarnation.version +
        NEXT_ID_HASH_MULTIPLIER * rootIncarnation.nextId;

    foreach (var entry in this.rootIncarnation.incarnationsRand) {
      result += GetRandHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsHoldPositionImpulse) {
      result += GetHoldPositionImpulseHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsWanderAICapabilityUC) {
      result += GetWanderAICapabilityUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsTutorialDefyCounterUC) {
      result += GetTutorialDefyCounterUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsUnit) {
      result += GetUnitHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsIUnitComponentMutBunch) {
      result += GetIUnitComponentMutBunchHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsLightningChargedUC) {
      result += GetLightningChargedUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsLightningChargingUC) {
      result += GetLightningChargingUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsDoomedUC) {
      result += GetDoomedUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsTemporaryCloneImpulse) {
      result += GetTemporaryCloneImpulseHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsTemporaryCloneAICapabilityUC) {
      result += GetTemporaryCloneAICapabilityUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsSummonImpulse) {
      result += GetSummonImpulseHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsSummonAICapabilityUC) {
      result += GetSummonAICapabilityUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsSorcerousUC) {
      result += GetSorcerousUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsBaseOffenseUC) {
      result += GetBaseOffenseUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsBaseMovementTimeUC) {
      result += GetBaseMovementTimeUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsBaseDefenseUC) {
      result += GetBaseDefenseUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsBaseCombatTimeUC) {
      result += GetBaseCombatTimeUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsMiredUC) {
      result += GetMiredUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsMireImpulse) {
      result += GetMireImpulseHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsEvaporateImpulse) {
      result += GetEvaporateImpulseHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsTimeCloneAICapabilityUC) {
      result += GetTimeCloneAICapabilityUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsMoveImpulse) {
      result += GetMoveImpulseHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsKamikazeTargetTTC) {
      result += GetKamikazeTargetTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsKamikazeJumpImpulse) {
      result += GetKamikazeJumpImpulseHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsKamikazeTargetImpulse) {
      result += GetKamikazeTargetImpulseHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsKamikazeAICapabilityUC) {
      result += GetKamikazeAICapabilityUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsInvincibilityUC) {
      result += GetInvincibilityUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsGuardAICapabilityUC) {
      result += GetGuardAICapabilityUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsNoImpulse) {
      result += GetNoImpulseHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsFireImpulse) {
      result += GetFireImpulseHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsDefyingUC) {
      result += GetDefyingUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsDefyImpulse) {
      result += GetDefyImpulseHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsCounteringUC) {
      result += GetCounteringUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsCounterImpulse) {
      result += GetCounterImpulseHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsUnleashBideImpulse) {
      result += GetUnleashBideImpulseHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsContinueBidingImpulse) {
      result += GetContinueBidingImpulseHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsStartBidingImpulse) {
      result += GetStartBidingImpulseHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsBideAICapabilityUC) {
      result += GetBideAICapabilityUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsAttackImpulse) {
      result += GetAttackImpulseHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsPursueImpulse) {
      result += GetPursueImpulseHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsKillDirective) {
      result += GetKillDirectiveHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsAttackAICapabilityUC) {
      result += GetAttackAICapabilityUCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsWarperTTC) {
      result += GetWarperTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsTimeAnchorTTC) {
      result += GetTimeAnchorTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsTerrainTile) {
      result += GetTerrainTileHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsITerrainTileComponentMutBunch) {
      result += GetITerrainTileComponentMutBunchHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsTerrain) {
      result += GetTerrainHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsSimplePresenceTriggerTTC) {
      result += GetSimplePresenceTriggerTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsFireBombImpulse) {
      result += GetFireBombImpulseHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsFireBombTTC) {
      result += GetFireBombTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsMarkerTTC) {
      result += GetMarkerTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsLevelLinkTTC) {
      result += GetLevelLinkTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsMudTTC) {
      result += GetMudTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsDirtTTC) {
      result += GetDirtTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsObsidianTTC) {
      result += GetObsidianTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsDownStairsTTC) {
      result += GetDownStairsTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsUpStairsTTC) {
      result += GetUpStairsTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsWallTTC) {
      result += GetWallTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsBloodTTC) {
      result += GetBloodTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsRocksTTC) {
      result += GetRocksTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsTreeTTC) {
      result += GetTreeTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsWaterTTC) {
      result += GetWaterTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsFloorTTC) {
      result += GetFloorTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsCaveWallTTC) {
      result += GetCaveWallTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsCaveTTC) {
      result += GetCaveTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsFallsTTC) {
      result += GetFallsTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsFireTTC) {
      result += GetFireTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsObsidianFloorTTC) {
      result += GetObsidianFloorTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsMagmaTTC) {
      result += GetMagmaTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsCliffTTC) {
      result += GetCliffTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsRavaNestTTC) {
      result += GetRavaNestTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsCliffLandingTTC) {
      result += GetCliffLandingTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsStoneTTC) {
      result += GetStoneTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsGrassTTC) {
      result += GetGrassTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsLevel) {
      result += GetLevelHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsSpeedRing) {
      result += GetSpeedRingHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsManaPotion) {
      result += GetManaPotionHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsWat) {
      result += GetWatHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsIImpulseStrongMutBunch) {
      result += GetIImpulseStrongMutBunchHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsIItemStrongMutBunch) {
      result += GetIItemStrongMutBunchHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsItemTTC) {
      result += GetItemTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsHealthPotion) {
      result += GetHealthPotionHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsGlaive) {
      result += GetGlaiveHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsSlowRod) {
      result += GetSlowRodHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsBlastRod) {
      result += GetBlastRodHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsArmor) {
      result += GetArmorHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsSquareCaveLevelController) {
      result += GetSquareCaveLevelControllerHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsRavashrikeLevelController) {
      result += GetRavashrikeLevelControllerHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsPentagonalCaveLevelController) {
      result += GetPentagonalCaveLevelControllerHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC) {
      result += GetIncendianFallsLevelLinkerTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsCliffLevelController) {
      result += GetCliffLevelControllerHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsPreGauntletLevelController) {
      result += GetPreGauntletLevelControllerHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsGauntletLevelController) {
      result += GetGauntletLevelControllerHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsExecutionState) {
      result += GetExecutionStateHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsIPostActingUCWeakMutBunch) {
      result += GetIPostActingUCWeakMutBunchHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsIPreActingUCWeakMutBunch) {
      result += GetIPreActingUCWeakMutBunchHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsGame) {
      result += GetGameHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsVolcaetusLevelController) {
      result += GetVolcaetusLevelControllerHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsTutorial2LevelController) {
      result += GetTutorial2LevelControllerHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsTutorial1LevelController) {
      result += GetTutorial1LevelControllerHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsRetreatLevelController) {
      result += GetRetreatLevelControllerHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsSotaventoLevelController) {
      result += GetSotaventoLevelControllerHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsNestLevelController) {
      result += GetNestLevelControllerHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsLakeLevelController) {
      result += GetLakeLevelControllerHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsEmberDeepLevelLinkerTTC) {
      result += GetEmberDeepLevelLinkerTTCHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsDirtRoadLevelController) {
      result += GetDirtRoadLevelControllerHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsCaveLevelController) {
      result += GetCaveLevelControllerHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsBridgesLevelController) {
      result += GetBridgesLevelControllerHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsAncientTownLevelController) {
      result += GetAncientTownLevelControllerHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsIGameEventMutList) {
      result += GetIGameEventMutListHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsLocationMutList) {
      result += GetLocationMutListHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsIRequestMutList) {
      result += GetIRequestMutListHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsIUnitEventMutList) {
      result += GetIUnitEventMutListHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsLevelMutSet) {
      result += GetLevelMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsDoomedUCWeakMutSet) {
      result += GetDoomedUCWeakMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsMiredUCWeakMutSet) {
      result += GetMiredUCWeakMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsInvincibilityUCWeakMutSet) {
      result += GetInvincibilityUCWeakMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsDefyingUCWeakMutSet) {
      result += GetDefyingUCWeakMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsCounteringUCWeakMutSet) {
      result += GetCounteringUCWeakMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsAttackAICapabilityUCWeakMutSet) {
      result += GetAttackAICapabilityUCWeakMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsLightningChargedUCWeakMutSet) {
      result += GetLightningChargedUCWeakMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet) {
      result += GetTimeCloneAICapabilityUCWeakMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsManaPotionStrongMutSet) {
      result += GetManaPotionStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsHealthPotionStrongMutSet) {
      result += GetHealthPotionStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsSpeedRingStrongMutSet) {
      result += GetSpeedRingStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsGlaiveStrongMutSet) {
      result += GetGlaiveStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsSlowRodStrongMutSet) {
      result += GetSlowRodStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsBlastRodStrongMutSet) {
      result += GetBlastRodStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsArmorStrongMutSet) {
      result += GetArmorStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsHoldPositionImpulseStrongMutSet) {
      result += GetHoldPositionImpulseStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet) {
      result += GetTemporaryCloneImpulseStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsSummonImpulseStrongMutSet) {
      result += GetSummonImpulseStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsMireImpulseStrongMutSet) {
      result += GetMireImpulseStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsEvaporateImpulseStrongMutSet) {
      result += GetEvaporateImpulseStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsMoveImpulseStrongMutSet) {
      result += GetMoveImpulseStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet) {
      result += GetKamikazeJumpImpulseStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet) {
      result += GetKamikazeTargetImpulseStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsNoImpulseStrongMutSet) {
      result += GetNoImpulseStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsFireImpulseStrongMutSet) {
      result += GetFireImpulseStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsDefyImpulseStrongMutSet) {
      result += GetDefyImpulseStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsCounterImpulseStrongMutSet) {
      result += GetCounterImpulseStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsUnleashBideImpulseStrongMutSet) {
      result += GetUnleashBideImpulseStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsContinueBidingImpulseStrongMutSet) {
      result += GetContinueBidingImpulseStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsStartBidingImpulseStrongMutSet) {
      result += GetStartBidingImpulseStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsAttackImpulseStrongMutSet) {
      result += GetAttackImpulseStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsPursueImpulseStrongMutSet) {
      result += GetPursueImpulseStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsFireBombImpulseStrongMutSet) {
      result += GetFireBombImpulseStrongMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsUnitMutSet) {
      result += GetUnitMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsSimplePresenceTriggerTTCMutSet) {
      result += GetSimplePresenceTriggerTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsItemTTCMutSet) {
      result += GetItemTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsKamikazeTargetTTCMutSet) {
      result += GetKamikazeTargetTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsWarperTTCMutSet) {
      result += GetWarperTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsTimeAnchorTTCMutSet) {
      result += GetTimeAnchorTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsFireBombTTCMutSet) {
      result += GetFireBombTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsMarkerTTCMutSet) {
      result += GetMarkerTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsLevelLinkTTCMutSet) {
      result += GetLevelLinkTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsMudTTCMutSet) {
      result += GetMudTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsDirtTTCMutSet) {
      result += GetDirtTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsObsidianTTCMutSet) {
      result += GetObsidianTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsDownStairsTTCMutSet) {
      result += GetDownStairsTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsUpStairsTTCMutSet) {
      result += GetUpStairsTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsWallTTCMutSet) {
      result += GetWallTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsBloodTTCMutSet) {
      result += GetBloodTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsRocksTTCMutSet) {
      result += GetRocksTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsTreeTTCMutSet) {
      result += GetTreeTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsWaterTTCMutSet) {
      result += GetWaterTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsFloorTTCMutSet) {
      result += GetFloorTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsCaveWallTTCMutSet) {
      result += GetCaveWallTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsCaveTTCMutSet) {
      result += GetCaveTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsFallsTTCMutSet) {
      result += GetFallsTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsFireTTCMutSet) {
      result += GetFireTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsObsidianFloorTTCMutSet) {
      result += GetObsidianFloorTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsMagmaTTCMutSet) {
      result += GetMagmaTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsCliffTTCMutSet) {
      result += GetCliffTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsRavaNestTTCMutSet) {
      result += GetRavaNestTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsCliffLandingTTCMutSet) {
      result += GetCliffLandingTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsStoneTTCMutSet) {
      result += GetStoneTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsGrassTTCMutSet) {
      result += GetGrassTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet) {
      result += GetIncendianFallsLevelLinkerTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet) {
      result += GetEmberDeepLevelLinkerTTCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsTutorialDefyCounterUCMutSet) {
      result += GetTutorialDefyCounterUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsLightningChargingUCMutSet) {
      result += GetLightningChargingUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsWanderAICapabilityUCMutSet) {
      result += GetWanderAICapabilityUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet) {
      result += GetTemporaryCloneAICapabilityUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsSummonAICapabilityUCMutSet) {
      result += GetSummonAICapabilityUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsKamikazeAICapabilityUCMutSet) {
      result += GetKamikazeAICapabilityUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsGuardAICapabilityUCMutSet) {
      result += GetGuardAICapabilityUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsTimeCloneAICapabilityUCMutSet) {
      result += GetTimeCloneAICapabilityUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsDoomedUCMutSet) {
      result += GetDoomedUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsMiredUCMutSet) {
      result += GetMiredUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsAttackAICapabilityUCMutSet) {
      result += GetAttackAICapabilityUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsCounteringUCMutSet) {
      result += GetCounteringUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsLightningChargedUCMutSet) {
      result += GetLightningChargedUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsInvincibilityUCMutSet) {
      result += GetInvincibilityUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsDefyingUCMutSet) {
      result += GetDefyingUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsBideAICapabilityUCMutSet) {
      result += GetBideAICapabilityUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsBaseMovementTimeUCMutSet) {
      result += GetBaseMovementTimeUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsBaseCombatTimeUCMutSet) {
      result += GetBaseCombatTimeUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsManaPotionMutSet) {
      result += GetManaPotionMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsHealthPotionMutSet) {
      result += GetHealthPotionMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsSpeedRingMutSet) {
      result += GetSpeedRingMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsGlaiveMutSet) {
      result += GetGlaiveMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsSlowRodMutSet) {
      result += GetSlowRodMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsBlastRodMutSet) {
      result += GetBlastRodMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsArmorMutSet) {
      result += GetArmorMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsSorcerousUCMutSet) {
      result += GetSorcerousUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsBaseOffenseUCMutSet) {
      result += GetBaseOffenseUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsBaseDefenseUCMutSet) {
      result += GetBaseDefenseUCMutSetHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsTerrainTileByLocationMutMap) {
      result += GetTerrainTileByLocationMutMapHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    foreach (var entry in this.rootIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap) {
      result += GetKamikazeTargetTTCStrongByLocationMutMapHash(entry.Key, entry.Value.version, entry.Value.incarnation);
    }
    return result;
  }

  public void CheckForViolations() {
    List<string> violations = new List<string>();

    foreach (var obj in this.AllRand()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllHoldPositionImpulse()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllWanderAICapabilityUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllTutorialDefyCounterUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllUnit()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllIUnitComponentMutBunch()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllLightningChargedUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllLightningChargingUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllDoomedUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllTemporaryCloneImpulse()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllTemporaryCloneAICapabilityUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllSummonImpulse()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllSummonAICapabilityUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllSorcerousUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllBaseOffenseUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllBaseMovementTimeUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllBaseDefenseUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllBaseCombatTimeUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllMiredUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllMireImpulse()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllEvaporateImpulse()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllTimeCloneAICapabilityUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllMoveImpulse()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllKamikazeTargetTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllKamikazeJumpImpulse()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllKamikazeTargetImpulse()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllKamikazeAICapabilityUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllInvincibilityUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllGuardAICapabilityUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllNoImpulse()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllFireImpulse()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllDefyingUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllDefyImpulse()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllCounteringUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllCounterImpulse()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllUnleashBideImpulse()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllContinueBidingImpulse()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllStartBidingImpulse()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllBideAICapabilityUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllAttackImpulse()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllPursueImpulse()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllKillDirective()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllAttackAICapabilityUC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllWarperTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllTimeAnchorTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllTerrainTile()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllITerrainTileComponentMutBunch()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllTerrain()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllSimplePresenceTriggerTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllFireBombImpulse()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllFireBombTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllMarkerTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllLevelLinkTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllMudTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllDirtTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllObsidianTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllDownStairsTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllUpStairsTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllWallTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllBloodTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllRocksTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllTreeTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllWaterTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllFloorTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllCaveWallTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllCaveTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllFallsTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllFireTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllObsidianFloorTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllMagmaTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllCliffTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllRavaNestTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllCliffLandingTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllStoneTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllGrassTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllLevel()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllSpeedRing()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllManaPotion()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllWat()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllIImpulseStrongMutBunch()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllIItemStrongMutBunch()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllItemTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllHealthPotion()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllGlaive()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllSlowRod()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllBlastRod()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllArmor()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllSquareCaveLevelController()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllRavashrikeLevelController()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllPentagonalCaveLevelController()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllIncendianFallsLevelLinkerTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllCliffLevelController()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllPreGauntletLevelController()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllGauntletLevelController()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllExecutionState()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllIPostActingUCWeakMutBunch()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllIPreActingUCWeakMutBunch()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllGame()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllVolcaetusLevelController()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllTutorial2LevelController()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllTutorial1LevelController()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllRetreatLevelController()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllSotaventoLevelController()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllNestLevelController()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllLakeLevelController()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllEmberDeepLevelLinkerTTC()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllDirtRoadLevelController()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllCaveLevelController()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllBridgesLevelController()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllAncientTownLevelController()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllIGameEventMutList()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllLocationMutList()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllIRequestMutList()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllIUnitEventMutList()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllLevelMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllDoomedUCWeakMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllMiredUCWeakMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllInvincibilityUCWeakMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllDefyingUCWeakMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllCounteringUCWeakMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllAttackAICapabilityUCWeakMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllLightningChargedUCWeakMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllTimeCloneAICapabilityUCWeakMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllManaPotionStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllHealthPotionStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllSpeedRingStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllGlaiveStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllSlowRodStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllBlastRodStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllArmorStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllHoldPositionImpulseStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllTemporaryCloneImpulseStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllSummonImpulseStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllMireImpulseStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllEvaporateImpulseStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllMoveImpulseStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllKamikazeJumpImpulseStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllKamikazeTargetImpulseStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllNoImpulseStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllFireImpulseStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllDefyImpulseStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllCounterImpulseStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllUnleashBideImpulseStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllContinueBidingImpulseStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllStartBidingImpulseStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllAttackImpulseStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllPursueImpulseStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllFireBombImpulseStrongMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllUnitMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllSimplePresenceTriggerTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllItemTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllKamikazeTargetTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllWarperTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllTimeAnchorTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllFireBombTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllMarkerTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllLevelLinkTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllMudTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllDirtTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllObsidianTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllDownStairsTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllUpStairsTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllWallTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllBloodTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllRocksTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllTreeTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllWaterTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllFloorTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllCaveWallTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllCaveTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllFallsTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllFireTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllObsidianFloorTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllMagmaTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllCliffTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllRavaNestTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllCliffLandingTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllStoneTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllGrassTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllIncendianFallsLevelLinkerTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllEmberDeepLevelLinkerTTCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllTutorialDefyCounterUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllLightningChargingUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllWanderAICapabilityUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllTemporaryCloneAICapabilityUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllSummonAICapabilityUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllKamikazeAICapabilityUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllGuardAICapabilityUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllTimeCloneAICapabilityUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllDoomedUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllMiredUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllAttackAICapabilityUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllCounteringUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllLightningChargedUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllInvincibilityUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllDefyingUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllBideAICapabilityUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllBaseMovementTimeUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllBaseCombatTimeUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllManaPotionMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllHealthPotionMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllSpeedRingMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllGlaiveMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllSlowRodMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllBlastRodMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllArmorMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllSorcerousUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllBaseOffenseUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllBaseDefenseUCMutSet()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllTerrainTileByLocationMutMap()) {
      obj.CheckForNullViolations(violations);
    }
    foreach (var obj in this.AllKamikazeTargetTTCStrongByLocationMutMap()) {
      obj.CheckForNullViolations(violations);
    }

    SortedSet<int> reachableIds = new SortedSet<int>();
    foreach (var rootStruct in this.AllGame()) {
      rootStruct.FindReachableObjects(reachableIds);
    }
    foreach (var obj in this.AllRand()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllHoldPositionImpulse()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllWanderAICapabilityUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllTutorialDefyCounterUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllUnit()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllIUnitComponentMutBunch()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllLightningChargedUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllLightningChargingUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllDoomedUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllTemporaryCloneImpulse()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllTemporaryCloneAICapabilityUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllSummonImpulse()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllSummonAICapabilityUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllSorcerousUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllBaseOffenseUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllBaseMovementTimeUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllBaseDefenseUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllBaseCombatTimeUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllMiredUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllMireImpulse()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllEvaporateImpulse()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllTimeCloneAICapabilityUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllMoveImpulse()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllKamikazeTargetTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllKamikazeJumpImpulse()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllKamikazeTargetImpulse()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllKamikazeAICapabilityUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllInvincibilityUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllGuardAICapabilityUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllNoImpulse()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllFireImpulse()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllDefyingUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllDefyImpulse()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllCounteringUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllCounterImpulse()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllUnleashBideImpulse()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllContinueBidingImpulse()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllStartBidingImpulse()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllBideAICapabilityUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllAttackImpulse()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllPursueImpulse()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllKillDirective()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllAttackAICapabilityUC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllWarperTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllTimeAnchorTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllTerrainTile()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllITerrainTileComponentMutBunch()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllTerrain()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllSimplePresenceTriggerTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllFireBombImpulse()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllFireBombTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllMarkerTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllLevelLinkTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllMudTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllDirtTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllObsidianTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllDownStairsTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllUpStairsTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllWallTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllBloodTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllRocksTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllTreeTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllWaterTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllFloorTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllCaveWallTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllCaveTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllFallsTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllFireTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllObsidianFloorTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllMagmaTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllCliffTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllRavaNestTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllCliffLandingTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllStoneTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllGrassTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllLevel()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllSpeedRing()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllManaPotion()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllWat()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllIImpulseStrongMutBunch()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllIItemStrongMutBunch()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllItemTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllHealthPotion()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllGlaive()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllSlowRod()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllBlastRod()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllArmor()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllSquareCaveLevelController()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllRavashrikeLevelController()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllPentagonalCaveLevelController()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllIncendianFallsLevelLinkerTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllCliffLevelController()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllPreGauntletLevelController()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllGauntletLevelController()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllExecutionState()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllIPostActingUCWeakMutBunch()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllIPreActingUCWeakMutBunch()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllGame()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllVolcaetusLevelController()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllTutorial2LevelController()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllTutorial1LevelController()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllRetreatLevelController()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllSotaventoLevelController()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllNestLevelController()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllLakeLevelController()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllEmberDeepLevelLinkerTTC()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllDirtRoadLevelController()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllCaveLevelController()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllBridgesLevelController()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllAncientTownLevelController()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllIGameEventMutList()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllLocationMutList()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllIRequestMutList()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllIUnitEventMutList()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllLevelMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllDoomedUCWeakMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllMiredUCWeakMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllInvincibilityUCWeakMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllDefyingUCWeakMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllCounteringUCWeakMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllAttackAICapabilityUCWeakMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllLightningChargedUCWeakMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllTimeCloneAICapabilityUCWeakMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllManaPotionStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllHealthPotionStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllSpeedRingStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllGlaiveStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllSlowRodStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllBlastRodStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllArmorStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllHoldPositionImpulseStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllTemporaryCloneImpulseStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllSummonImpulseStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllMireImpulseStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllEvaporateImpulseStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllMoveImpulseStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllKamikazeJumpImpulseStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllKamikazeTargetImpulseStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllNoImpulseStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllFireImpulseStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllDefyImpulseStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllCounterImpulseStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllUnleashBideImpulseStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllContinueBidingImpulseStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllStartBidingImpulseStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllAttackImpulseStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllPursueImpulseStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllFireBombImpulseStrongMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllUnitMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllSimplePresenceTriggerTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllItemTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllKamikazeTargetTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllWarperTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllTimeAnchorTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllFireBombTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllMarkerTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllLevelLinkTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllMudTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllDirtTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllObsidianTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllDownStairsTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllUpStairsTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllWallTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllBloodTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllRocksTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllTreeTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllWaterTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllFloorTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllCaveWallTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllCaveTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllFallsTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllFireTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllObsidianFloorTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllMagmaTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllCliffTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllRavaNestTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllCliffLandingTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllStoneTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllGrassTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllIncendianFallsLevelLinkerTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllEmberDeepLevelLinkerTTCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllTutorialDefyCounterUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllLightningChargingUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllWanderAICapabilityUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllTemporaryCloneAICapabilityUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllSummonAICapabilityUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllKamikazeAICapabilityUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllGuardAICapabilityUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllTimeCloneAICapabilityUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllDoomedUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllMiredUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllAttackAICapabilityUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllCounteringUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllLightningChargedUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllInvincibilityUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllDefyingUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllBideAICapabilityUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllBaseMovementTimeUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllBaseCombatTimeUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllManaPotionMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllHealthPotionMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllSpeedRingMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllGlaiveMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllSlowRodMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllBlastRodMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllArmorMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllSorcerousUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllBaseOffenseUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllBaseDefenseUCMutSet()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllTerrainTileByLocationMutMap()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }
    foreach (var obj in this.AllKamikazeTargetTTCStrongByLocationMutMap()) {
      if (!reachableIds.Contains(obj.id)) {
        violations.Add("Unreachable: " + obj + "#" + obj.id);
      }
    }

    if (violations.Count > 0) {
      string message = "Found violations!\n";
      foreach (var violation in violations) {
        message += violation + "\n";
      }
      throw new Exception(message);
    }
  }

  public void FlushEvents() {



    var copyOfObserversForRand =
        new SortedDictionary<int, List<IRandEffectObserver>>();
    foreach (var entry in observersForRand) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForRand.Add(
          objectId,
          new List<IRandEffectObserver>(
              observers));
    }

    var copyOfObserversForHoldPositionImpulse =
        new SortedDictionary<int, List<IHoldPositionImpulseEffectObserver>>();
    foreach (var entry in observersForHoldPositionImpulse) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForHoldPositionImpulse.Add(
          objectId,
          new List<IHoldPositionImpulseEffectObserver>(
              observers));
    }

    var copyOfObserversForWanderAICapabilityUC =
        new SortedDictionary<int, List<IWanderAICapabilityUCEffectObserver>>();
    foreach (var entry in observersForWanderAICapabilityUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForWanderAICapabilityUC.Add(
          objectId,
          new List<IWanderAICapabilityUCEffectObserver>(
              observers));
    }

    var copyOfObserversForTutorialDefyCounterUC =
        new SortedDictionary<int, List<ITutorialDefyCounterUCEffectObserver>>();
    foreach (var entry in observersForTutorialDefyCounterUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForTutorialDefyCounterUC.Add(
          objectId,
          new List<ITutorialDefyCounterUCEffectObserver>(
              observers));
    }

    var copyOfObserversForUnit =
        new SortedDictionary<int, List<IUnitEffectObserver>>();
    foreach (var entry in observersForUnit) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForUnit.Add(
          objectId,
          new List<IUnitEffectObserver>(
              observers));
    }

    var copyOfObserversForIUnitComponentMutBunch =
        new SortedDictionary<int, List<IIUnitComponentMutBunchEffectObserver>>();
    foreach (var entry in observersForIUnitComponentMutBunch) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForIUnitComponentMutBunch.Add(
          objectId,
          new List<IIUnitComponentMutBunchEffectObserver>(
              observers));
    }

    var copyOfObserversForLightningChargedUC =
        new SortedDictionary<int, List<ILightningChargedUCEffectObserver>>();
    foreach (var entry in observersForLightningChargedUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForLightningChargedUC.Add(
          objectId,
          new List<ILightningChargedUCEffectObserver>(
              observers));
    }

    var copyOfObserversForLightningChargingUC =
        new SortedDictionary<int, List<ILightningChargingUCEffectObserver>>();
    foreach (var entry in observersForLightningChargingUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForLightningChargingUC.Add(
          objectId,
          new List<ILightningChargingUCEffectObserver>(
              observers));
    }

    var copyOfObserversForDoomedUC =
        new SortedDictionary<int, List<IDoomedUCEffectObserver>>();
    foreach (var entry in observersForDoomedUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForDoomedUC.Add(
          objectId,
          new List<IDoomedUCEffectObserver>(
              observers));
    }

    var copyOfObserversForTemporaryCloneImpulse =
        new SortedDictionary<int, List<ITemporaryCloneImpulseEffectObserver>>();
    foreach (var entry in observersForTemporaryCloneImpulse) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForTemporaryCloneImpulse.Add(
          objectId,
          new List<ITemporaryCloneImpulseEffectObserver>(
              observers));
    }

    var copyOfObserversForTemporaryCloneAICapabilityUC =
        new SortedDictionary<int, List<ITemporaryCloneAICapabilityUCEffectObserver>>();
    foreach (var entry in observersForTemporaryCloneAICapabilityUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForTemporaryCloneAICapabilityUC.Add(
          objectId,
          new List<ITemporaryCloneAICapabilityUCEffectObserver>(
              observers));
    }

    var copyOfObserversForSummonImpulse =
        new SortedDictionary<int, List<ISummonImpulseEffectObserver>>();
    foreach (var entry in observersForSummonImpulse) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForSummonImpulse.Add(
          objectId,
          new List<ISummonImpulseEffectObserver>(
              observers));
    }

    var copyOfObserversForSummonAICapabilityUC =
        new SortedDictionary<int, List<ISummonAICapabilityUCEffectObserver>>();
    foreach (var entry in observersForSummonAICapabilityUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForSummonAICapabilityUC.Add(
          objectId,
          new List<ISummonAICapabilityUCEffectObserver>(
              observers));
    }

    var copyOfObserversForSorcerousUC =
        new SortedDictionary<int, List<ISorcerousUCEffectObserver>>();
    foreach (var entry in observersForSorcerousUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForSorcerousUC.Add(
          objectId,
          new List<ISorcerousUCEffectObserver>(
              observers));
    }

    var copyOfObserversForBaseOffenseUC =
        new SortedDictionary<int, List<IBaseOffenseUCEffectObserver>>();
    foreach (var entry in observersForBaseOffenseUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForBaseOffenseUC.Add(
          objectId,
          new List<IBaseOffenseUCEffectObserver>(
              observers));
    }

    var copyOfObserversForBaseMovementTimeUC =
        new SortedDictionary<int, List<IBaseMovementTimeUCEffectObserver>>();
    foreach (var entry in observersForBaseMovementTimeUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForBaseMovementTimeUC.Add(
          objectId,
          new List<IBaseMovementTimeUCEffectObserver>(
              observers));
    }

    var copyOfObserversForBaseDefenseUC =
        new SortedDictionary<int, List<IBaseDefenseUCEffectObserver>>();
    foreach (var entry in observersForBaseDefenseUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForBaseDefenseUC.Add(
          objectId,
          new List<IBaseDefenseUCEffectObserver>(
              observers));
    }

    var copyOfObserversForBaseCombatTimeUC =
        new SortedDictionary<int, List<IBaseCombatTimeUCEffectObserver>>();
    foreach (var entry in observersForBaseCombatTimeUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForBaseCombatTimeUC.Add(
          objectId,
          new List<IBaseCombatTimeUCEffectObserver>(
              observers));
    }

    var copyOfObserversForMiredUC =
        new SortedDictionary<int, List<IMiredUCEffectObserver>>();
    foreach (var entry in observersForMiredUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForMiredUC.Add(
          objectId,
          new List<IMiredUCEffectObserver>(
              observers));
    }

    var copyOfObserversForMireImpulse =
        new SortedDictionary<int, List<IMireImpulseEffectObserver>>();
    foreach (var entry in observersForMireImpulse) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForMireImpulse.Add(
          objectId,
          new List<IMireImpulseEffectObserver>(
              observers));
    }

    var copyOfObserversForEvaporateImpulse =
        new SortedDictionary<int, List<IEvaporateImpulseEffectObserver>>();
    foreach (var entry in observersForEvaporateImpulse) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForEvaporateImpulse.Add(
          objectId,
          new List<IEvaporateImpulseEffectObserver>(
              observers));
    }

    var copyOfObserversForTimeCloneAICapabilityUC =
        new SortedDictionary<int, List<ITimeCloneAICapabilityUCEffectObserver>>();
    foreach (var entry in observersForTimeCloneAICapabilityUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForTimeCloneAICapabilityUC.Add(
          objectId,
          new List<ITimeCloneAICapabilityUCEffectObserver>(
              observers));
    }

    var copyOfObserversForMoveImpulse =
        new SortedDictionary<int, List<IMoveImpulseEffectObserver>>();
    foreach (var entry in observersForMoveImpulse) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForMoveImpulse.Add(
          objectId,
          new List<IMoveImpulseEffectObserver>(
              observers));
    }

    var copyOfObserversForKamikazeTargetTTC =
        new SortedDictionary<int, List<IKamikazeTargetTTCEffectObserver>>();
    foreach (var entry in observersForKamikazeTargetTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForKamikazeTargetTTC.Add(
          objectId,
          new List<IKamikazeTargetTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForKamikazeJumpImpulse =
        new SortedDictionary<int, List<IKamikazeJumpImpulseEffectObserver>>();
    foreach (var entry in observersForKamikazeJumpImpulse) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForKamikazeJumpImpulse.Add(
          objectId,
          new List<IKamikazeJumpImpulseEffectObserver>(
              observers));
    }

    var copyOfObserversForKamikazeTargetImpulse =
        new SortedDictionary<int, List<IKamikazeTargetImpulseEffectObserver>>();
    foreach (var entry in observersForKamikazeTargetImpulse) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForKamikazeTargetImpulse.Add(
          objectId,
          new List<IKamikazeTargetImpulseEffectObserver>(
              observers));
    }

    var copyOfObserversForKamikazeAICapabilityUC =
        new SortedDictionary<int, List<IKamikazeAICapabilityUCEffectObserver>>();
    foreach (var entry in observersForKamikazeAICapabilityUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForKamikazeAICapabilityUC.Add(
          objectId,
          new List<IKamikazeAICapabilityUCEffectObserver>(
              observers));
    }

    var copyOfObserversForInvincibilityUC =
        new SortedDictionary<int, List<IInvincibilityUCEffectObserver>>();
    foreach (var entry in observersForInvincibilityUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForInvincibilityUC.Add(
          objectId,
          new List<IInvincibilityUCEffectObserver>(
              observers));
    }

    var copyOfObserversForGuardAICapabilityUC =
        new SortedDictionary<int, List<IGuardAICapabilityUCEffectObserver>>();
    foreach (var entry in observersForGuardAICapabilityUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForGuardAICapabilityUC.Add(
          objectId,
          new List<IGuardAICapabilityUCEffectObserver>(
              observers));
    }

    var copyOfObserversForNoImpulse =
        new SortedDictionary<int, List<INoImpulseEffectObserver>>();
    foreach (var entry in observersForNoImpulse) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForNoImpulse.Add(
          objectId,
          new List<INoImpulseEffectObserver>(
              observers));
    }

    var copyOfObserversForFireImpulse =
        new SortedDictionary<int, List<IFireImpulseEffectObserver>>();
    foreach (var entry in observersForFireImpulse) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForFireImpulse.Add(
          objectId,
          new List<IFireImpulseEffectObserver>(
              observers));
    }

    var copyOfObserversForDefyingUC =
        new SortedDictionary<int, List<IDefyingUCEffectObserver>>();
    foreach (var entry in observersForDefyingUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForDefyingUC.Add(
          objectId,
          new List<IDefyingUCEffectObserver>(
              observers));
    }

    var copyOfObserversForDefyImpulse =
        new SortedDictionary<int, List<IDefyImpulseEffectObserver>>();
    foreach (var entry in observersForDefyImpulse) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForDefyImpulse.Add(
          objectId,
          new List<IDefyImpulseEffectObserver>(
              observers));
    }

    var copyOfObserversForCounteringUC =
        new SortedDictionary<int, List<ICounteringUCEffectObserver>>();
    foreach (var entry in observersForCounteringUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForCounteringUC.Add(
          objectId,
          new List<ICounteringUCEffectObserver>(
              observers));
    }

    var copyOfObserversForCounterImpulse =
        new SortedDictionary<int, List<ICounterImpulseEffectObserver>>();
    foreach (var entry in observersForCounterImpulse) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForCounterImpulse.Add(
          objectId,
          new List<ICounterImpulseEffectObserver>(
              observers));
    }

    var copyOfObserversForUnleashBideImpulse =
        new SortedDictionary<int, List<IUnleashBideImpulseEffectObserver>>();
    foreach (var entry in observersForUnleashBideImpulse) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForUnleashBideImpulse.Add(
          objectId,
          new List<IUnleashBideImpulseEffectObserver>(
              observers));
    }

    var copyOfObserversForContinueBidingImpulse =
        new SortedDictionary<int, List<IContinueBidingImpulseEffectObserver>>();
    foreach (var entry in observersForContinueBidingImpulse) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForContinueBidingImpulse.Add(
          objectId,
          new List<IContinueBidingImpulseEffectObserver>(
              observers));
    }

    var copyOfObserversForStartBidingImpulse =
        new SortedDictionary<int, List<IStartBidingImpulseEffectObserver>>();
    foreach (var entry in observersForStartBidingImpulse) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForStartBidingImpulse.Add(
          objectId,
          new List<IStartBidingImpulseEffectObserver>(
              observers));
    }

    var copyOfObserversForBideAICapabilityUC =
        new SortedDictionary<int, List<IBideAICapabilityUCEffectObserver>>();
    foreach (var entry in observersForBideAICapabilityUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForBideAICapabilityUC.Add(
          objectId,
          new List<IBideAICapabilityUCEffectObserver>(
              observers));
    }

    var copyOfObserversForAttackImpulse =
        new SortedDictionary<int, List<IAttackImpulseEffectObserver>>();
    foreach (var entry in observersForAttackImpulse) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForAttackImpulse.Add(
          objectId,
          new List<IAttackImpulseEffectObserver>(
              observers));
    }

    var copyOfObserversForPursueImpulse =
        new SortedDictionary<int, List<IPursueImpulseEffectObserver>>();
    foreach (var entry in observersForPursueImpulse) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForPursueImpulse.Add(
          objectId,
          new List<IPursueImpulseEffectObserver>(
              observers));
    }

    var copyOfObserversForKillDirective =
        new SortedDictionary<int, List<IKillDirectiveEffectObserver>>();
    foreach (var entry in observersForKillDirective) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForKillDirective.Add(
          objectId,
          new List<IKillDirectiveEffectObserver>(
              observers));
    }

    var copyOfObserversForAttackAICapabilityUC =
        new SortedDictionary<int, List<IAttackAICapabilityUCEffectObserver>>();
    foreach (var entry in observersForAttackAICapabilityUC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForAttackAICapabilityUC.Add(
          objectId,
          new List<IAttackAICapabilityUCEffectObserver>(
              observers));
    }

    var copyOfObserversForWarperTTC =
        new SortedDictionary<int, List<IWarperTTCEffectObserver>>();
    foreach (var entry in observersForWarperTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForWarperTTC.Add(
          objectId,
          new List<IWarperTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForTimeAnchorTTC =
        new SortedDictionary<int, List<ITimeAnchorTTCEffectObserver>>();
    foreach (var entry in observersForTimeAnchorTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForTimeAnchorTTC.Add(
          objectId,
          new List<ITimeAnchorTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForTerrainTile =
        new SortedDictionary<int, List<ITerrainTileEffectObserver>>();
    foreach (var entry in observersForTerrainTile) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForTerrainTile.Add(
          objectId,
          new List<ITerrainTileEffectObserver>(
              observers));
    }

    var copyOfObserversForITerrainTileComponentMutBunch =
        new SortedDictionary<int, List<IITerrainTileComponentMutBunchEffectObserver>>();
    foreach (var entry in observersForITerrainTileComponentMutBunch) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForITerrainTileComponentMutBunch.Add(
          objectId,
          new List<IITerrainTileComponentMutBunchEffectObserver>(
              observers));
    }

    var copyOfObserversForTerrain =
        new SortedDictionary<int, List<ITerrainEffectObserver>>();
    foreach (var entry in observersForTerrain) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForTerrain.Add(
          objectId,
          new List<ITerrainEffectObserver>(
              observers));
    }

    var copyOfObserversForSimplePresenceTriggerTTC =
        new SortedDictionary<int, List<ISimplePresenceTriggerTTCEffectObserver>>();
    foreach (var entry in observersForSimplePresenceTriggerTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForSimplePresenceTriggerTTC.Add(
          objectId,
          new List<ISimplePresenceTriggerTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForFireBombImpulse =
        new SortedDictionary<int, List<IFireBombImpulseEffectObserver>>();
    foreach (var entry in observersForFireBombImpulse) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForFireBombImpulse.Add(
          objectId,
          new List<IFireBombImpulseEffectObserver>(
              observers));
    }

    var copyOfObserversForFireBombTTC =
        new SortedDictionary<int, List<IFireBombTTCEffectObserver>>();
    foreach (var entry in observersForFireBombTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForFireBombTTC.Add(
          objectId,
          new List<IFireBombTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForMarkerTTC =
        new SortedDictionary<int, List<IMarkerTTCEffectObserver>>();
    foreach (var entry in observersForMarkerTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForMarkerTTC.Add(
          objectId,
          new List<IMarkerTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForLevelLinkTTC =
        new SortedDictionary<int, List<ILevelLinkTTCEffectObserver>>();
    foreach (var entry in observersForLevelLinkTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForLevelLinkTTC.Add(
          objectId,
          new List<ILevelLinkTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForMudTTC =
        new SortedDictionary<int, List<IMudTTCEffectObserver>>();
    foreach (var entry in observersForMudTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForMudTTC.Add(
          objectId,
          new List<IMudTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForDirtTTC =
        new SortedDictionary<int, List<IDirtTTCEffectObserver>>();
    foreach (var entry in observersForDirtTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForDirtTTC.Add(
          objectId,
          new List<IDirtTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForObsidianTTC =
        new SortedDictionary<int, List<IObsidianTTCEffectObserver>>();
    foreach (var entry in observersForObsidianTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForObsidianTTC.Add(
          objectId,
          new List<IObsidianTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForDownStairsTTC =
        new SortedDictionary<int, List<IDownStairsTTCEffectObserver>>();
    foreach (var entry in observersForDownStairsTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForDownStairsTTC.Add(
          objectId,
          new List<IDownStairsTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForUpStairsTTC =
        new SortedDictionary<int, List<IUpStairsTTCEffectObserver>>();
    foreach (var entry in observersForUpStairsTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForUpStairsTTC.Add(
          objectId,
          new List<IUpStairsTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForWallTTC =
        new SortedDictionary<int, List<IWallTTCEffectObserver>>();
    foreach (var entry in observersForWallTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForWallTTC.Add(
          objectId,
          new List<IWallTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForBloodTTC =
        new SortedDictionary<int, List<IBloodTTCEffectObserver>>();
    foreach (var entry in observersForBloodTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForBloodTTC.Add(
          objectId,
          new List<IBloodTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForRocksTTC =
        new SortedDictionary<int, List<IRocksTTCEffectObserver>>();
    foreach (var entry in observersForRocksTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForRocksTTC.Add(
          objectId,
          new List<IRocksTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForTreeTTC =
        new SortedDictionary<int, List<ITreeTTCEffectObserver>>();
    foreach (var entry in observersForTreeTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForTreeTTC.Add(
          objectId,
          new List<ITreeTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForWaterTTC =
        new SortedDictionary<int, List<IWaterTTCEffectObserver>>();
    foreach (var entry in observersForWaterTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForWaterTTC.Add(
          objectId,
          new List<IWaterTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForFloorTTC =
        new SortedDictionary<int, List<IFloorTTCEffectObserver>>();
    foreach (var entry in observersForFloorTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForFloorTTC.Add(
          objectId,
          new List<IFloorTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForCaveWallTTC =
        new SortedDictionary<int, List<ICaveWallTTCEffectObserver>>();
    foreach (var entry in observersForCaveWallTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForCaveWallTTC.Add(
          objectId,
          new List<ICaveWallTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForCaveTTC =
        new SortedDictionary<int, List<ICaveTTCEffectObserver>>();
    foreach (var entry in observersForCaveTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForCaveTTC.Add(
          objectId,
          new List<ICaveTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForFallsTTC =
        new SortedDictionary<int, List<IFallsTTCEffectObserver>>();
    foreach (var entry in observersForFallsTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForFallsTTC.Add(
          objectId,
          new List<IFallsTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForFireTTC =
        new SortedDictionary<int, List<IFireTTCEffectObserver>>();
    foreach (var entry in observersForFireTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForFireTTC.Add(
          objectId,
          new List<IFireTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForObsidianFloorTTC =
        new SortedDictionary<int, List<IObsidianFloorTTCEffectObserver>>();
    foreach (var entry in observersForObsidianFloorTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForObsidianFloorTTC.Add(
          objectId,
          new List<IObsidianFloorTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForMagmaTTC =
        new SortedDictionary<int, List<IMagmaTTCEffectObserver>>();
    foreach (var entry in observersForMagmaTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForMagmaTTC.Add(
          objectId,
          new List<IMagmaTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForCliffTTC =
        new SortedDictionary<int, List<ICliffTTCEffectObserver>>();
    foreach (var entry in observersForCliffTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForCliffTTC.Add(
          objectId,
          new List<ICliffTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForRavaNestTTC =
        new SortedDictionary<int, List<IRavaNestTTCEffectObserver>>();
    foreach (var entry in observersForRavaNestTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForRavaNestTTC.Add(
          objectId,
          new List<IRavaNestTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForCliffLandingTTC =
        new SortedDictionary<int, List<ICliffLandingTTCEffectObserver>>();
    foreach (var entry in observersForCliffLandingTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForCliffLandingTTC.Add(
          objectId,
          new List<ICliffLandingTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForStoneTTC =
        new SortedDictionary<int, List<IStoneTTCEffectObserver>>();
    foreach (var entry in observersForStoneTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForStoneTTC.Add(
          objectId,
          new List<IStoneTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForGrassTTC =
        new SortedDictionary<int, List<IGrassTTCEffectObserver>>();
    foreach (var entry in observersForGrassTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForGrassTTC.Add(
          objectId,
          new List<IGrassTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForLevel =
        new SortedDictionary<int, List<ILevelEffectObserver>>();
    foreach (var entry in observersForLevel) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForLevel.Add(
          objectId,
          new List<ILevelEffectObserver>(
              observers));
    }

    var copyOfObserversForSpeedRing =
        new SortedDictionary<int, List<ISpeedRingEffectObserver>>();
    foreach (var entry in observersForSpeedRing) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForSpeedRing.Add(
          objectId,
          new List<ISpeedRingEffectObserver>(
              observers));
    }

    var copyOfObserversForManaPotion =
        new SortedDictionary<int, List<IManaPotionEffectObserver>>();
    foreach (var entry in observersForManaPotion) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForManaPotion.Add(
          objectId,
          new List<IManaPotionEffectObserver>(
              observers));
    }

    var copyOfObserversForWat =
        new SortedDictionary<int, List<IWatEffectObserver>>();
    foreach (var entry in observersForWat) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForWat.Add(
          objectId,
          new List<IWatEffectObserver>(
              observers));
    }

    var copyOfObserversForIImpulseStrongMutBunch =
        new SortedDictionary<int, List<IIImpulseStrongMutBunchEffectObserver>>();
    foreach (var entry in observersForIImpulseStrongMutBunch) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForIImpulseStrongMutBunch.Add(
          objectId,
          new List<IIImpulseStrongMutBunchEffectObserver>(
              observers));
    }

    var copyOfObserversForIItemStrongMutBunch =
        new SortedDictionary<int, List<IIItemStrongMutBunchEffectObserver>>();
    foreach (var entry in observersForIItemStrongMutBunch) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForIItemStrongMutBunch.Add(
          objectId,
          new List<IIItemStrongMutBunchEffectObserver>(
              observers));
    }

    var copyOfObserversForItemTTC =
        new SortedDictionary<int, List<IItemTTCEffectObserver>>();
    foreach (var entry in observersForItemTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForItemTTC.Add(
          objectId,
          new List<IItemTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForHealthPotion =
        new SortedDictionary<int, List<IHealthPotionEffectObserver>>();
    foreach (var entry in observersForHealthPotion) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForHealthPotion.Add(
          objectId,
          new List<IHealthPotionEffectObserver>(
              observers));
    }

    var copyOfObserversForGlaive =
        new SortedDictionary<int, List<IGlaiveEffectObserver>>();
    foreach (var entry in observersForGlaive) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForGlaive.Add(
          objectId,
          new List<IGlaiveEffectObserver>(
              observers));
    }

    var copyOfObserversForSlowRod =
        new SortedDictionary<int, List<ISlowRodEffectObserver>>();
    foreach (var entry in observersForSlowRod) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForSlowRod.Add(
          objectId,
          new List<ISlowRodEffectObserver>(
              observers));
    }

    var copyOfObserversForBlastRod =
        new SortedDictionary<int, List<IBlastRodEffectObserver>>();
    foreach (var entry in observersForBlastRod) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForBlastRod.Add(
          objectId,
          new List<IBlastRodEffectObserver>(
              observers));
    }

    var copyOfObserversForArmor =
        new SortedDictionary<int, List<IArmorEffectObserver>>();
    foreach (var entry in observersForArmor) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForArmor.Add(
          objectId,
          new List<IArmorEffectObserver>(
              observers));
    }

    var copyOfObserversForSquareCaveLevelController =
        new SortedDictionary<int, List<ISquareCaveLevelControllerEffectObserver>>();
    foreach (var entry in observersForSquareCaveLevelController) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForSquareCaveLevelController.Add(
          objectId,
          new List<ISquareCaveLevelControllerEffectObserver>(
              observers));
    }

    var copyOfObserversForRavashrikeLevelController =
        new SortedDictionary<int, List<IRavashrikeLevelControllerEffectObserver>>();
    foreach (var entry in observersForRavashrikeLevelController) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForRavashrikeLevelController.Add(
          objectId,
          new List<IRavashrikeLevelControllerEffectObserver>(
              observers));
    }

    var copyOfObserversForPentagonalCaveLevelController =
        new SortedDictionary<int, List<IPentagonalCaveLevelControllerEffectObserver>>();
    foreach (var entry in observersForPentagonalCaveLevelController) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForPentagonalCaveLevelController.Add(
          objectId,
          new List<IPentagonalCaveLevelControllerEffectObserver>(
              observers));
    }

    var copyOfObserversForIncendianFallsLevelLinkerTTC =
        new SortedDictionary<int, List<IIncendianFallsLevelLinkerTTCEffectObserver>>();
    foreach (var entry in observersForIncendianFallsLevelLinkerTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForIncendianFallsLevelLinkerTTC.Add(
          objectId,
          new List<IIncendianFallsLevelLinkerTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForCliffLevelController =
        new SortedDictionary<int, List<ICliffLevelControllerEffectObserver>>();
    foreach (var entry in observersForCliffLevelController) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForCliffLevelController.Add(
          objectId,
          new List<ICliffLevelControllerEffectObserver>(
              observers));
    }

    var copyOfObserversForPreGauntletLevelController =
        new SortedDictionary<int, List<IPreGauntletLevelControllerEffectObserver>>();
    foreach (var entry in observersForPreGauntletLevelController) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForPreGauntletLevelController.Add(
          objectId,
          new List<IPreGauntletLevelControllerEffectObserver>(
              observers));
    }

    var copyOfObserversForGauntletLevelController =
        new SortedDictionary<int, List<IGauntletLevelControllerEffectObserver>>();
    foreach (var entry in observersForGauntletLevelController) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForGauntletLevelController.Add(
          objectId,
          new List<IGauntletLevelControllerEffectObserver>(
              observers));
    }

    var copyOfObserversForExecutionState =
        new SortedDictionary<int, List<IExecutionStateEffectObserver>>();
    foreach (var entry in observersForExecutionState) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForExecutionState.Add(
          objectId,
          new List<IExecutionStateEffectObserver>(
              observers));
    }

    var copyOfObserversForIPostActingUCWeakMutBunch =
        new SortedDictionary<int, List<IIPostActingUCWeakMutBunchEffectObserver>>();
    foreach (var entry in observersForIPostActingUCWeakMutBunch) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForIPostActingUCWeakMutBunch.Add(
          objectId,
          new List<IIPostActingUCWeakMutBunchEffectObserver>(
              observers));
    }

    var copyOfObserversForIPreActingUCWeakMutBunch =
        new SortedDictionary<int, List<IIPreActingUCWeakMutBunchEffectObserver>>();
    foreach (var entry in observersForIPreActingUCWeakMutBunch) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForIPreActingUCWeakMutBunch.Add(
          objectId,
          new List<IIPreActingUCWeakMutBunchEffectObserver>(
              observers));
    }

    var copyOfObserversForGame =
        new SortedDictionary<int, List<IGameEffectObserver>>();
    foreach (var entry in observersForGame) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForGame.Add(
          objectId,
          new List<IGameEffectObserver>(
              observers));
    }

    var copyOfObserversForVolcaetusLevelController =
        new SortedDictionary<int, List<IVolcaetusLevelControllerEffectObserver>>();
    foreach (var entry in observersForVolcaetusLevelController) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForVolcaetusLevelController.Add(
          objectId,
          new List<IVolcaetusLevelControllerEffectObserver>(
              observers));
    }

    var copyOfObserversForTutorial2LevelController =
        new SortedDictionary<int, List<ITutorial2LevelControllerEffectObserver>>();
    foreach (var entry in observersForTutorial2LevelController) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForTutorial2LevelController.Add(
          objectId,
          new List<ITutorial2LevelControllerEffectObserver>(
              observers));
    }

    var copyOfObserversForTutorial1LevelController =
        new SortedDictionary<int, List<ITutorial1LevelControllerEffectObserver>>();
    foreach (var entry in observersForTutorial1LevelController) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForTutorial1LevelController.Add(
          objectId,
          new List<ITutorial1LevelControllerEffectObserver>(
              observers));
    }

    var copyOfObserversForRetreatLevelController =
        new SortedDictionary<int, List<IRetreatLevelControllerEffectObserver>>();
    foreach (var entry in observersForRetreatLevelController) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForRetreatLevelController.Add(
          objectId,
          new List<IRetreatLevelControllerEffectObserver>(
              observers));
    }

    var copyOfObserversForSotaventoLevelController =
        new SortedDictionary<int, List<ISotaventoLevelControllerEffectObserver>>();
    foreach (var entry in observersForSotaventoLevelController) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForSotaventoLevelController.Add(
          objectId,
          new List<ISotaventoLevelControllerEffectObserver>(
              observers));
    }

    var copyOfObserversForNestLevelController =
        new SortedDictionary<int, List<INestLevelControllerEffectObserver>>();
    foreach (var entry in observersForNestLevelController) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForNestLevelController.Add(
          objectId,
          new List<INestLevelControllerEffectObserver>(
              observers));
    }

    var copyOfObserversForLakeLevelController =
        new SortedDictionary<int, List<ILakeLevelControllerEffectObserver>>();
    foreach (var entry in observersForLakeLevelController) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForLakeLevelController.Add(
          objectId,
          new List<ILakeLevelControllerEffectObserver>(
              observers));
    }

    var copyOfObserversForEmberDeepLevelLinkerTTC =
        new SortedDictionary<int, List<IEmberDeepLevelLinkerTTCEffectObserver>>();
    foreach (var entry in observersForEmberDeepLevelLinkerTTC) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForEmberDeepLevelLinkerTTC.Add(
          objectId,
          new List<IEmberDeepLevelLinkerTTCEffectObserver>(
              observers));
    }

    var copyOfObserversForDirtRoadLevelController =
        new SortedDictionary<int, List<IDirtRoadLevelControllerEffectObserver>>();
    foreach (var entry in observersForDirtRoadLevelController) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForDirtRoadLevelController.Add(
          objectId,
          new List<IDirtRoadLevelControllerEffectObserver>(
              observers));
    }

    var copyOfObserversForCaveLevelController =
        new SortedDictionary<int, List<ICaveLevelControllerEffectObserver>>();
    foreach (var entry in observersForCaveLevelController) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForCaveLevelController.Add(
          objectId,
          new List<ICaveLevelControllerEffectObserver>(
              observers));
    }

    var copyOfObserversForBridgesLevelController =
        new SortedDictionary<int, List<IBridgesLevelControllerEffectObserver>>();
    foreach (var entry in observersForBridgesLevelController) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForBridgesLevelController.Add(
          objectId,
          new List<IBridgesLevelControllerEffectObserver>(
              observers));
    }

    var copyOfObserversForAncientTownLevelController =
        new SortedDictionary<int, List<IAncientTownLevelControllerEffectObserver>>();
    foreach (var entry in observersForAncientTownLevelController) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForAncientTownLevelController.Add(
          objectId,
          new List<IAncientTownLevelControllerEffectObserver>(
              observers));
    }

    var copyOfObserversForIGameEventMutList =
        new SortedDictionary<int, List<IIGameEventMutListEffectObserver>>();
    foreach (var entry in observersForIGameEventMutList) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForIGameEventMutList.Add(
          objectId,
          new List<IIGameEventMutListEffectObserver>(
              observers));
    }

    var copyOfObserversForLocationMutList =
        new SortedDictionary<int, List<ILocationMutListEffectObserver>>();
    foreach (var entry in observersForLocationMutList) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForLocationMutList.Add(
          objectId,
          new List<ILocationMutListEffectObserver>(
              observers));
    }

    var copyOfObserversForIRequestMutList =
        new SortedDictionary<int, List<IIRequestMutListEffectObserver>>();
    foreach (var entry in observersForIRequestMutList) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForIRequestMutList.Add(
          objectId,
          new List<IIRequestMutListEffectObserver>(
              observers));
    }

    var copyOfObserversForIUnitEventMutList =
        new SortedDictionary<int, List<IIUnitEventMutListEffectObserver>>();
    foreach (var entry in observersForIUnitEventMutList) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForIUnitEventMutList.Add(
          objectId,
          new List<IIUnitEventMutListEffectObserver>(
              observers));
    }

    var copyOfObserversForLevelMutSet =
        new SortedDictionary<int, List<ILevelMutSetEffectObserver>>();
    foreach (var entry in observersForLevelMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForLevelMutSet.Add(
          objectId,
          new List<ILevelMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForDoomedUCWeakMutSet =
        new SortedDictionary<int, List<IDoomedUCWeakMutSetEffectObserver>>();
    foreach (var entry in observersForDoomedUCWeakMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForDoomedUCWeakMutSet.Add(
          objectId,
          new List<IDoomedUCWeakMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForMiredUCWeakMutSet =
        new SortedDictionary<int, List<IMiredUCWeakMutSetEffectObserver>>();
    foreach (var entry in observersForMiredUCWeakMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForMiredUCWeakMutSet.Add(
          objectId,
          new List<IMiredUCWeakMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForInvincibilityUCWeakMutSet =
        new SortedDictionary<int, List<IInvincibilityUCWeakMutSetEffectObserver>>();
    foreach (var entry in observersForInvincibilityUCWeakMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForInvincibilityUCWeakMutSet.Add(
          objectId,
          new List<IInvincibilityUCWeakMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForDefyingUCWeakMutSet =
        new SortedDictionary<int, List<IDefyingUCWeakMutSetEffectObserver>>();
    foreach (var entry in observersForDefyingUCWeakMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForDefyingUCWeakMutSet.Add(
          objectId,
          new List<IDefyingUCWeakMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForCounteringUCWeakMutSet =
        new SortedDictionary<int, List<ICounteringUCWeakMutSetEffectObserver>>();
    foreach (var entry in observersForCounteringUCWeakMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForCounteringUCWeakMutSet.Add(
          objectId,
          new List<ICounteringUCWeakMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForAttackAICapabilityUCWeakMutSet =
        new SortedDictionary<int, List<IAttackAICapabilityUCWeakMutSetEffectObserver>>();
    foreach (var entry in observersForAttackAICapabilityUCWeakMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForAttackAICapabilityUCWeakMutSet.Add(
          objectId,
          new List<IAttackAICapabilityUCWeakMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForLightningChargedUCWeakMutSet =
        new SortedDictionary<int, List<ILightningChargedUCWeakMutSetEffectObserver>>();
    foreach (var entry in observersForLightningChargedUCWeakMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForLightningChargedUCWeakMutSet.Add(
          objectId,
          new List<ILightningChargedUCWeakMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForTimeCloneAICapabilityUCWeakMutSet =
        new SortedDictionary<int, List<ITimeCloneAICapabilityUCWeakMutSetEffectObserver>>();
    foreach (var entry in observersForTimeCloneAICapabilityUCWeakMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForTimeCloneAICapabilityUCWeakMutSet.Add(
          objectId,
          new List<ITimeCloneAICapabilityUCWeakMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForManaPotionStrongMutSet =
        new SortedDictionary<int, List<IManaPotionStrongMutSetEffectObserver>>();
    foreach (var entry in observersForManaPotionStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForManaPotionStrongMutSet.Add(
          objectId,
          new List<IManaPotionStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForHealthPotionStrongMutSet =
        new SortedDictionary<int, List<IHealthPotionStrongMutSetEffectObserver>>();
    foreach (var entry in observersForHealthPotionStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForHealthPotionStrongMutSet.Add(
          objectId,
          new List<IHealthPotionStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForSpeedRingStrongMutSet =
        new SortedDictionary<int, List<ISpeedRingStrongMutSetEffectObserver>>();
    foreach (var entry in observersForSpeedRingStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForSpeedRingStrongMutSet.Add(
          objectId,
          new List<ISpeedRingStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForGlaiveStrongMutSet =
        new SortedDictionary<int, List<IGlaiveStrongMutSetEffectObserver>>();
    foreach (var entry in observersForGlaiveStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForGlaiveStrongMutSet.Add(
          objectId,
          new List<IGlaiveStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForSlowRodStrongMutSet =
        new SortedDictionary<int, List<ISlowRodStrongMutSetEffectObserver>>();
    foreach (var entry in observersForSlowRodStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForSlowRodStrongMutSet.Add(
          objectId,
          new List<ISlowRodStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForBlastRodStrongMutSet =
        new SortedDictionary<int, List<IBlastRodStrongMutSetEffectObserver>>();
    foreach (var entry in observersForBlastRodStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForBlastRodStrongMutSet.Add(
          objectId,
          new List<IBlastRodStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForArmorStrongMutSet =
        new SortedDictionary<int, List<IArmorStrongMutSetEffectObserver>>();
    foreach (var entry in observersForArmorStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForArmorStrongMutSet.Add(
          objectId,
          new List<IArmorStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForHoldPositionImpulseStrongMutSet =
        new SortedDictionary<int, List<IHoldPositionImpulseStrongMutSetEffectObserver>>();
    foreach (var entry in observersForHoldPositionImpulseStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForHoldPositionImpulseStrongMutSet.Add(
          objectId,
          new List<IHoldPositionImpulseStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForTemporaryCloneImpulseStrongMutSet =
        new SortedDictionary<int, List<ITemporaryCloneImpulseStrongMutSetEffectObserver>>();
    foreach (var entry in observersForTemporaryCloneImpulseStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForTemporaryCloneImpulseStrongMutSet.Add(
          objectId,
          new List<ITemporaryCloneImpulseStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForSummonImpulseStrongMutSet =
        new SortedDictionary<int, List<ISummonImpulseStrongMutSetEffectObserver>>();
    foreach (var entry in observersForSummonImpulseStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForSummonImpulseStrongMutSet.Add(
          objectId,
          new List<ISummonImpulseStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForMireImpulseStrongMutSet =
        new SortedDictionary<int, List<IMireImpulseStrongMutSetEffectObserver>>();
    foreach (var entry in observersForMireImpulseStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForMireImpulseStrongMutSet.Add(
          objectId,
          new List<IMireImpulseStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForEvaporateImpulseStrongMutSet =
        new SortedDictionary<int, List<IEvaporateImpulseStrongMutSetEffectObserver>>();
    foreach (var entry in observersForEvaporateImpulseStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForEvaporateImpulseStrongMutSet.Add(
          objectId,
          new List<IEvaporateImpulseStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForMoveImpulseStrongMutSet =
        new SortedDictionary<int, List<IMoveImpulseStrongMutSetEffectObserver>>();
    foreach (var entry in observersForMoveImpulseStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForMoveImpulseStrongMutSet.Add(
          objectId,
          new List<IMoveImpulseStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForKamikazeJumpImpulseStrongMutSet =
        new SortedDictionary<int, List<IKamikazeJumpImpulseStrongMutSetEffectObserver>>();
    foreach (var entry in observersForKamikazeJumpImpulseStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForKamikazeJumpImpulseStrongMutSet.Add(
          objectId,
          new List<IKamikazeJumpImpulseStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForKamikazeTargetImpulseStrongMutSet =
        new SortedDictionary<int, List<IKamikazeTargetImpulseStrongMutSetEffectObserver>>();
    foreach (var entry in observersForKamikazeTargetImpulseStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForKamikazeTargetImpulseStrongMutSet.Add(
          objectId,
          new List<IKamikazeTargetImpulseStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForNoImpulseStrongMutSet =
        new SortedDictionary<int, List<INoImpulseStrongMutSetEffectObserver>>();
    foreach (var entry in observersForNoImpulseStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForNoImpulseStrongMutSet.Add(
          objectId,
          new List<INoImpulseStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForFireImpulseStrongMutSet =
        new SortedDictionary<int, List<IFireImpulseStrongMutSetEffectObserver>>();
    foreach (var entry in observersForFireImpulseStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForFireImpulseStrongMutSet.Add(
          objectId,
          new List<IFireImpulseStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForDefyImpulseStrongMutSet =
        new SortedDictionary<int, List<IDefyImpulseStrongMutSetEffectObserver>>();
    foreach (var entry in observersForDefyImpulseStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForDefyImpulseStrongMutSet.Add(
          objectId,
          new List<IDefyImpulseStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForCounterImpulseStrongMutSet =
        new SortedDictionary<int, List<ICounterImpulseStrongMutSetEffectObserver>>();
    foreach (var entry in observersForCounterImpulseStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForCounterImpulseStrongMutSet.Add(
          objectId,
          new List<ICounterImpulseStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForUnleashBideImpulseStrongMutSet =
        new SortedDictionary<int, List<IUnleashBideImpulseStrongMutSetEffectObserver>>();
    foreach (var entry in observersForUnleashBideImpulseStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForUnleashBideImpulseStrongMutSet.Add(
          objectId,
          new List<IUnleashBideImpulseStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForContinueBidingImpulseStrongMutSet =
        new SortedDictionary<int, List<IContinueBidingImpulseStrongMutSetEffectObserver>>();
    foreach (var entry in observersForContinueBidingImpulseStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForContinueBidingImpulseStrongMutSet.Add(
          objectId,
          new List<IContinueBidingImpulseStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForStartBidingImpulseStrongMutSet =
        new SortedDictionary<int, List<IStartBidingImpulseStrongMutSetEffectObserver>>();
    foreach (var entry in observersForStartBidingImpulseStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForStartBidingImpulseStrongMutSet.Add(
          objectId,
          new List<IStartBidingImpulseStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForAttackImpulseStrongMutSet =
        new SortedDictionary<int, List<IAttackImpulseStrongMutSetEffectObserver>>();
    foreach (var entry in observersForAttackImpulseStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForAttackImpulseStrongMutSet.Add(
          objectId,
          new List<IAttackImpulseStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForPursueImpulseStrongMutSet =
        new SortedDictionary<int, List<IPursueImpulseStrongMutSetEffectObserver>>();
    foreach (var entry in observersForPursueImpulseStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForPursueImpulseStrongMutSet.Add(
          objectId,
          new List<IPursueImpulseStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForFireBombImpulseStrongMutSet =
        new SortedDictionary<int, List<IFireBombImpulseStrongMutSetEffectObserver>>();
    foreach (var entry in observersForFireBombImpulseStrongMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForFireBombImpulseStrongMutSet.Add(
          objectId,
          new List<IFireBombImpulseStrongMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForUnitMutSet =
        new SortedDictionary<int, List<IUnitMutSetEffectObserver>>();
    foreach (var entry in observersForUnitMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForUnitMutSet.Add(
          objectId,
          new List<IUnitMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForSimplePresenceTriggerTTCMutSet =
        new SortedDictionary<int, List<ISimplePresenceTriggerTTCMutSetEffectObserver>>();
    foreach (var entry in observersForSimplePresenceTriggerTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForSimplePresenceTriggerTTCMutSet.Add(
          objectId,
          new List<ISimplePresenceTriggerTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForItemTTCMutSet =
        new SortedDictionary<int, List<IItemTTCMutSetEffectObserver>>();
    foreach (var entry in observersForItemTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForItemTTCMutSet.Add(
          objectId,
          new List<IItemTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForKamikazeTargetTTCMutSet =
        new SortedDictionary<int, List<IKamikazeTargetTTCMutSetEffectObserver>>();
    foreach (var entry in observersForKamikazeTargetTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForKamikazeTargetTTCMutSet.Add(
          objectId,
          new List<IKamikazeTargetTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForWarperTTCMutSet =
        new SortedDictionary<int, List<IWarperTTCMutSetEffectObserver>>();
    foreach (var entry in observersForWarperTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForWarperTTCMutSet.Add(
          objectId,
          new List<IWarperTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForTimeAnchorTTCMutSet =
        new SortedDictionary<int, List<ITimeAnchorTTCMutSetEffectObserver>>();
    foreach (var entry in observersForTimeAnchorTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForTimeAnchorTTCMutSet.Add(
          objectId,
          new List<ITimeAnchorTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForFireBombTTCMutSet =
        new SortedDictionary<int, List<IFireBombTTCMutSetEffectObserver>>();
    foreach (var entry in observersForFireBombTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForFireBombTTCMutSet.Add(
          objectId,
          new List<IFireBombTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForMarkerTTCMutSet =
        new SortedDictionary<int, List<IMarkerTTCMutSetEffectObserver>>();
    foreach (var entry in observersForMarkerTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForMarkerTTCMutSet.Add(
          objectId,
          new List<IMarkerTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForLevelLinkTTCMutSet =
        new SortedDictionary<int, List<ILevelLinkTTCMutSetEffectObserver>>();
    foreach (var entry in observersForLevelLinkTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForLevelLinkTTCMutSet.Add(
          objectId,
          new List<ILevelLinkTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForMudTTCMutSet =
        new SortedDictionary<int, List<IMudTTCMutSetEffectObserver>>();
    foreach (var entry in observersForMudTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForMudTTCMutSet.Add(
          objectId,
          new List<IMudTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForDirtTTCMutSet =
        new SortedDictionary<int, List<IDirtTTCMutSetEffectObserver>>();
    foreach (var entry in observersForDirtTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForDirtTTCMutSet.Add(
          objectId,
          new List<IDirtTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForObsidianTTCMutSet =
        new SortedDictionary<int, List<IObsidianTTCMutSetEffectObserver>>();
    foreach (var entry in observersForObsidianTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForObsidianTTCMutSet.Add(
          objectId,
          new List<IObsidianTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForDownStairsTTCMutSet =
        new SortedDictionary<int, List<IDownStairsTTCMutSetEffectObserver>>();
    foreach (var entry in observersForDownStairsTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForDownStairsTTCMutSet.Add(
          objectId,
          new List<IDownStairsTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForUpStairsTTCMutSet =
        new SortedDictionary<int, List<IUpStairsTTCMutSetEffectObserver>>();
    foreach (var entry in observersForUpStairsTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForUpStairsTTCMutSet.Add(
          objectId,
          new List<IUpStairsTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForWallTTCMutSet =
        new SortedDictionary<int, List<IWallTTCMutSetEffectObserver>>();
    foreach (var entry in observersForWallTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForWallTTCMutSet.Add(
          objectId,
          new List<IWallTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForBloodTTCMutSet =
        new SortedDictionary<int, List<IBloodTTCMutSetEffectObserver>>();
    foreach (var entry in observersForBloodTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForBloodTTCMutSet.Add(
          objectId,
          new List<IBloodTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForRocksTTCMutSet =
        new SortedDictionary<int, List<IRocksTTCMutSetEffectObserver>>();
    foreach (var entry in observersForRocksTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForRocksTTCMutSet.Add(
          objectId,
          new List<IRocksTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForTreeTTCMutSet =
        new SortedDictionary<int, List<ITreeTTCMutSetEffectObserver>>();
    foreach (var entry in observersForTreeTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForTreeTTCMutSet.Add(
          objectId,
          new List<ITreeTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForWaterTTCMutSet =
        new SortedDictionary<int, List<IWaterTTCMutSetEffectObserver>>();
    foreach (var entry in observersForWaterTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForWaterTTCMutSet.Add(
          objectId,
          new List<IWaterTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForFloorTTCMutSet =
        new SortedDictionary<int, List<IFloorTTCMutSetEffectObserver>>();
    foreach (var entry in observersForFloorTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForFloorTTCMutSet.Add(
          objectId,
          new List<IFloorTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForCaveWallTTCMutSet =
        new SortedDictionary<int, List<ICaveWallTTCMutSetEffectObserver>>();
    foreach (var entry in observersForCaveWallTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForCaveWallTTCMutSet.Add(
          objectId,
          new List<ICaveWallTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForCaveTTCMutSet =
        new SortedDictionary<int, List<ICaveTTCMutSetEffectObserver>>();
    foreach (var entry in observersForCaveTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForCaveTTCMutSet.Add(
          objectId,
          new List<ICaveTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForFallsTTCMutSet =
        new SortedDictionary<int, List<IFallsTTCMutSetEffectObserver>>();
    foreach (var entry in observersForFallsTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForFallsTTCMutSet.Add(
          objectId,
          new List<IFallsTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForFireTTCMutSet =
        new SortedDictionary<int, List<IFireTTCMutSetEffectObserver>>();
    foreach (var entry in observersForFireTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForFireTTCMutSet.Add(
          objectId,
          new List<IFireTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForObsidianFloorTTCMutSet =
        new SortedDictionary<int, List<IObsidianFloorTTCMutSetEffectObserver>>();
    foreach (var entry in observersForObsidianFloorTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForObsidianFloorTTCMutSet.Add(
          objectId,
          new List<IObsidianFloorTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForMagmaTTCMutSet =
        new SortedDictionary<int, List<IMagmaTTCMutSetEffectObserver>>();
    foreach (var entry in observersForMagmaTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForMagmaTTCMutSet.Add(
          objectId,
          new List<IMagmaTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForCliffTTCMutSet =
        new SortedDictionary<int, List<ICliffTTCMutSetEffectObserver>>();
    foreach (var entry in observersForCliffTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForCliffTTCMutSet.Add(
          objectId,
          new List<ICliffTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForRavaNestTTCMutSet =
        new SortedDictionary<int, List<IRavaNestTTCMutSetEffectObserver>>();
    foreach (var entry in observersForRavaNestTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForRavaNestTTCMutSet.Add(
          objectId,
          new List<IRavaNestTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForCliffLandingTTCMutSet =
        new SortedDictionary<int, List<ICliffLandingTTCMutSetEffectObserver>>();
    foreach (var entry in observersForCliffLandingTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForCliffLandingTTCMutSet.Add(
          objectId,
          new List<ICliffLandingTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForStoneTTCMutSet =
        new SortedDictionary<int, List<IStoneTTCMutSetEffectObserver>>();
    foreach (var entry in observersForStoneTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForStoneTTCMutSet.Add(
          objectId,
          new List<IStoneTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForGrassTTCMutSet =
        new SortedDictionary<int, List<IGrassTTCMutSetEffectObserver>>();
    foreach (var entry in observersForGrassTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForGrassTTCMutSet.Add(
          objectId,
          new List<IGrassTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForIncendianFallsLevelLinkerTTCMutSet =
        new SortedDictionary<int, List<IIncendianFallsLevelLinkerTTCMutSetEffectObserver>>();
    foreach (var entry in observersForIncendianFallsLevelLinkerTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForIncendianFallsLevelLinkerTTCMutSet.Add(
          objectId,
          new List<IIncendianFallsLevelLinkerTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForEmberDeepLevelLinkerTTCMutSet =
        new SortedDictionary<int, List<IEmberDeepLevelLinkerTTCMutSetEffectObserver>>();
    foreach (var entry in observersForEmberDeepLevelLinkerTTCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForEmberDeepLevelLinkerTTCMutSet.Add(
          objectId,
          new List<IEmberDeepLevelLinkerTTCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForTutorialDefyCounterUCMutSet =
        new SortedDictionary<int, List<ITutorialDefyCounterUCMutSetEffectObserver>>();
    foreach (var entry in observersForTutorialDefyCounterUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForTutorialDefyCounterUCMutSet.Add(
          objectId,
          new List<ITutorialDefyCounterUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForLightningChargingUCMutSet =
        new SortedDictionary<int, List<ILightningChargingUCMutSetEffectObserver>>();
    foreach (var entry in observersForLightningChargingUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForLightningChargingUCMutSet.Add(
          objectId,
          new List<ILightningChargingUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForWanderAICapabilityUCMutSet =
        new SortedDictionary<int, List<IWanderAICapabilityUCMutSetEffectObserver>>();
    foreach (var entry in observersForWanderAICapabilityUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForWanderAICapabilityUCMutSet.Add(
          objectId,
          new List<IWanderAICapabilityUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForTemporaryCloneAICapabilityUCMutSet =
        new SortedDictionary<int, List<ITemporaryCloneAICapabilityUCMutSetEffectObserver>>();
    foreach (var entry in observersForTemporaryCloneAICapabilityUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForTemporaryCloneAICapabilityUCMutSet.Add(
          objectId,
          new List<ITemporaryCloneAICapabilityUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForSummonAICapabilityUCMutSet =
        new SortedDictionary<int, List<ISummonAICapabilityUCMutSetEffectObserver>>();
    foreach (var entry in observersForSummonAICapabilityUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForSummonAICapabilityUCMutSet.Add(
          objectId,
          new List<ISummonAICapabilityUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForKamikazeAICapabilityUCMutSet =
        new SortedDictionary<int, List<IKamikazeAICapabilityUCMutSetEffectObserver>>();
    foreach (var entry in observersForKamikazeAICapabilityUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForKamikazeAICapabilityUCMutSet.Add(
          objectId,
          new List<IKamikazeAICapabilityUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForGuardAICapabilityUCMutSet =
        new SortedDictionary<int, List<IGuardAICapabilityUCMutSetEffectObserver>>();
    foreach (var entry in observersForGuardAICapabilityUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForGuardAICapabilityUCMutSet.Add(
          objectId,
          new List<IGuardAICapabilityUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForTimeCloneAICapabilityUCMutSet =
        new SortedDictionary<int, List<ITimeCloneAICapabilityUCMutSetEffectObserver>>();
    foreach (var entry in observersForTimeCloneAICapabilityUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForTimeCloneAICapabilityUCMutSet.Add(
          objectId,
          new List<ITimeCloneAICapabilityUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForDoomedUCMutSet =
        new SortedDictionary<int, List<IDoomedUCMutSetEffectObserver>>();
    foreach (var entry in observersForDoomedUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForDoomedUCMutSet.Add(
          objectId,
          new List<IDoomedUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForMiredUCMutSet =
        new SortedDictionary<int, List<IMiredUCMutSetEffectObserver>>();
    foreach (var entry in observersForMiredUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForMiredUCMutSet.Add(
          objectId,
          new List<IMiredUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForAttackAICapabilityUCMutSet =
        new SortedDictionary<int, List<IAttackAICapabilityUCMutSetEffectObserver>>();
    foreach (var entry in observersForAttackAICapabilityUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForAttackAICapabilityUCMutSet.Add(
          objectId,
          new List<IAttackAICapabilityUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForCounteringUCMutSet =
        new SortedDictionary<int, List<ICounteringUCMutSetEffectObserver>>();
    foreach (var entry in observersForCounteringUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForCounteringUCMutSet.Add(
          objectId,
          new List<ICounteringUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForLightningChargedUCMutSet =
        new SortedDictionary<int, List<ILightningChargedUCMutSetEffectObserver>>();
    foreach (var entry in observersForLightningChargedUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForLightningChargedUCMutSet.Add(
          objectId,
          new List<ILightningChargedUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForInvincibilityUCMutSet =
        new SortedDictionary<int, List<IInvincibilityUCMutSetEffectObserver>>();
    foreach (var entry in observersForInvincibilityUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForInvincibilityUCMutSet.Add(
          objectId,
          new List<IInvincibilityUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForDefyingUCMutSet =
        new SortedDictionary<int, List<IDefyingUCMutSetEffectObserver>>();
    foreach (var entry in observersForDefyingUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForDefyingUCMutSet.Add(
          objectId,
          new List<IDefyingUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForBideAICapabilityUCMutSet =
        new SortedDictionary<int, List<IBideAICapabilityUCMutSetEffectObserver>>();
    foreach (var entry in observersForBideAICapabilityUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForBideAICapabilityUCMutSet.Add(
          objectId,
          new List<IBideAICapabilityUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForBaseMovementTimeUCMutSet =
        new SortedDictionary<int, List<IBaseMovementTimeUCMutSetEffectObserver>>();
    foreach (var entry in observersForBaseMovementTimeUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForBaseMovementTimeUCMutSet.Add(
          objectId,
          new List<IBaseMovementTimeUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForBaseCombatTimeUCMutSet =
        new SortedDictionary<int, List<IBaseCombatTimeUCMutSetEffectObserver>>();
    foreach (var entry in observersForBaseCombatTimeUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForBaseCombatTimeUCMutSet.Add(
          objectId,
          new List<IBaseCombatTimeUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForManaPotionMutSet =
        new SortedDictionary<int, List<IManaPotionMutSetEffectObserver>>();
    foreach (var entry in observersForManaPotionMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForManaPotionMutSet.Add(
          objectId,
          new List<IManaPotionMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForHealthPotionMutSet =
        new SortedDictionary<int, List<IHealthPotionMutSetEffectObserver>>();
    foreach (var entry in observersForHealthPotionMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForHealthPotionMutSet.Add(
          objectId,
          new List<IHealthPotionMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForSpeedRingMutSet =
        new SortedDictionary<int, List<ISpeedRingMutSetEffectObserver>>();
    foreach (var entry in observersForSpeedRingMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForSpeedRingMutSet.Add(
          objectId,
          new List<ISpeedRingMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForGlaiveMutSet =
        new SortedDictionary<int, List<IGlaiveMutSetEffectObserver>>();
    foreach (var entry in observersForGlaiveMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForGlaiveMutSet.Add(
          objectId,
          new List<IGlaiveMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForSlowRodMutSet =
        new SortedDictionary<int, List<ISlowRodMutSetEffectObserver>>();
    foreach (var entry in observersForSlowRodMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForSlowRodMutSet.Add(
          objectId,
          new List<ISlowRodMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForBlastRodMutSet =
        new SortedDictionary<int, List<IBlastRodMutSetEffectObserver>>();
    foreach (var entry in observersForBlastRodMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForBlastRodMutSet.Add(
          objectId,
          new List<IBlastRodMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForArmorMutSet =
        new SortedDictionary<int, List<IArmorMutSetEffectObserver>>();
    foreach (var entry in observersForArmorMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForArmorMutSet.Add(
          objectId,
          new List<IArmorMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForSorcerousUCMutSet =
        new SortedDictionary<int, List<ISorcerousUCMutSetEffectObserver>>();
    foreach (var entry in observersForSorcerousUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForSorcerousUCMutSet.Add(
          objectId,
          new List<ISorcerousUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForBaseOffenseUCMutSet =
        new SortedDictionary<int, List<IBaseOffenseUCMutSetEffectObserver>>();
    foreach (var entry in observersForBaseOffenseUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForBaseOffenseUCMutSet.Add(
          objectId,
          new List<IBaseOffenseUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForBaseDefenseUCMutSet =
        new SortedDictionary<int, List<IBaseDefenseUCMutSetEffectObserver>>();
    foreach (var entry in observersForBaseDefenseUCMutSet) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForBaseDefenseUCMutSet.Add(
          objectId,
          new List<IBaseDefenseUCMutSetEffectObserver>(
              observers));
    }

    var copyOfObserversForTerrainTileByLocationMutMap =
        new SortedDictionary<int, List<ITerrainTileByLocationMutMapEffectObserver>>();
    foreach (var entry in observersForTerrainTileByLocationMutMap) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForTerrainTileByLocationMutMap.Add(
          objectId,
          new List<ITerrainTileByLocationMutMapEffectObserver>(
              observers));
    }

    var copyOfObserversForKamikazeTargetTTCStrongByLocationMutMap =
        new SortedDictionary<int, List<IKamikazeTargetTTCStrongByLocationMutMapEffectObserver>>();
    foreach (var entry in observersForKamikazeTargetTTCStrongByLocationMutMap) {
      var objectId = entry.Key;
      var observers = entry.Value;
      copyOfObserversForKamikazeTargetTTCStrongByLocationMutMap.Add(
          objectId,
          new List<IKamikazeTargetTTCStrongByLocationMutMapEffectObserver>(
              observers));
    }

    BroadcastRandEffects(
        copyOfObserversForRand);
           
    BroadcastHoldPositionImpulseEffects(
        copyOfObserversForHoldPositionImpulse);
           
    BroadcastWanderAICapabilityUCEffects(
        copyOfObserversForWanderAICapabilityUC);
           
    BroadcastTutorialDefyCounterUCEffects(
        copyOfObserversForTutorialDefyCounterUC);
           
    BroadcastUnitEffects(
        copyOfObserversForUnit);
           
    BroadcastIUnitComponentMutBunchEffects(
        copyOfObserversForIUnitComponentMutBunch);
           
    BroadcastLightningChargedUCEffects(
        copyOfObserversForLightningChargedUC);
           
    BroadcastLightningChargingUCEffects(
        copyOfObserversForLightningChargingUC);
           
    BroadcastDoomedUCEffects(
        copyOfObserversForDoomedUC);
           
    BroadcastTemporaryCloneImpulseEffects(
        copyOfObserversForTemporaryCloneImpulse);
           
    BroadcastTemporaryCloneAICapabilityUCEffects(
        copyOfObserversForTemporaryCloneAICapabilityUC);
           
    BroadcastSummonImpulseEffects(
        copyOfObserversForSummonImpulse);
           
    BroadcastSummonAICapabilityUCEffects(
        copyOfObserversForSummonAICapabilityUC);
           
    BroadcastSorcerousUCEffects(
        copyOfObserversForSorcerousUC);
           
    BroadcastBaseOffenseUCEffects(
        copyOfObserversForBaseOffenseUC);
           
    BroadcastBaseMovementTimeUCEffects(
        copyOfObserversForBaseMovementTimeUC);
           
    BroadcastBaseDefenseUCEffects(
        copyOfObserversForBaseDefenseUC);
           
    BroadcastBaseCombatTimeUCEffects(
        copyOfObserversForBaseCombatTimeUC);
           
    BroadcastMiredUCEffects(
        copyOfObserversForMiredUC);
           
    BroadcastMireImpulseEffects(
        copyOfObserversForMireImpulse);
           
    BroadcastEvaporateImpulseEffects(
        copyOfObserversForEvaporateImpulse);
           
    BroadcastTimeCloneAICapabilityUCEffects(
        copyOfObserversForTimeCloneAICapabilityUC);
           
    BroadcastMoveImpulseEffects(
        copyOfObserversForMoveImpulse);
           
    BroadcastKamikazeTargetTTCEffects(
        copyOfObserversForKamikazeTargetTTC);
           
    BroadcastKamikazeJumpImpulseEffects(
        copyOfObserversForKamikazeJumpImpulse);
           
    BroadcastKamikazeTargetImpulseEffects(
        copyOfObserversForKamikazeTargetImpulse);
           
    BroadcastKamikazeAICapabilityUCEffects(
        copyOfObserversForKamikazeAICapabilityUC);
           
    BroadcastInvincibilityUCEffects(
        copyOfObserversForInvincibilityUC);
           
    BroadcastGuardAICapabilityUCEffects(
        copyOfObserversForGuardAICapabilityUC);
           
    BroadcastNoImpulseEffects(
        copyOfObserversForNoImpulse);
           
    BroadcastFireImpulseEffects(
        copyOfObserversForFireImpulse);
           
    BroadcastDefyingUCEffects(
        copyOfObserversForDefyingUC);
           
    BroadcastDefyImpulseEffects(
        copyOfObserversForDefyImpulse);
           
    BroadcastCounteringUCEffects(
        copyOfObserversForCounteringUC);
           
    BroadcastCounterImpulseEffects(
        copyOfObserversForCounterImpulse);
           
    BroadcastUnleashBideImpulseEffects(
        copyOfObserversForUnleashBideImpulse);
           
    BroadcastContinueBidingImpulseEffects(
        copyOfObserversForContinueBidingImpulse);
           
    BroadcastStartBidingImpulseEffects(
        copyOfObserversForStartBidingImpulse);
           
    BroadcastBideAICapabilityUCEffects(
        copyOfObserversForBideAICapabilityUC);
           
    BroadcastAttackImpulseEffects(
        copyOfObserversForAttackImpulse);
           
    BroadcastPursueImpulseEffects(
        copyOfObserversForPursueImpulse);
           
    BroadcastKillDirectiveEffects(
        copyOfObserversForKillDirective);
           
    BroadcastAttackAICapabilityUCEffects(
        copyOfObserversForAttackAICapabilityUC);
           
    BroadcastWarperTTCEffects(
        copyOfObserversForWarperTTC);
           
    BroadcastTimeAnchorTTCEffects(
        copyOfObserversForTimeAnchorTTC);
           
    BroadcastTerrainTileEffects(
        copyOfObserversForTerrainTile);
           
    BroadcastITerrainTileComponentMutBunchEffects(
        copyOfObserversForITerrainTileComponentMutBunch);
           
    BroadcastTerrainEffects(
        copyOfObserversForTerrain);
           
    BroadcastSimplePresenceTriggerTTCEffects(
        copyOfObserversForSimplePresenceTriggerTTC);
           
    BroadcastFireBombImpulseEffects(
        copyOfObserversForFireBombImpulse);
           
    BroadcastFireBombTTCEffects(
        copyOfObserversForFireBombTTC);
           
    BroadcastMarkerTTCEffects(
        copyOfObserversForMarkerTTC);
           
    BroadcastLevelLinkTTCEffects(
        copyOfObserversForLevelLinkTTC);
           
    BroadcastMudTTCEffects(
        copyOfObserversForMudTTC);
           
    BroadcastDirtTTCEffects(
        copyOfObserversForDirtTTC);
           
    BroadcastObsidianTTCEffects(
        copyOfObserversForObsidianTTC);
           
    BroadcastDownStairsTTCEffects(
        copyOfObserversForDownStairsTTC);
           
    BroadcastUpStairsTTCEffects(
        copyOfObserversForUpStairsTTC);
           
    BroadcastWallTTCEffects(
        copyOfObserversForWallTTC);
           
    BroadcastBloodTTCEffects(
        copyOfObserversForBloodTTC);
           
    BroadcastRocksTTCEffects(
        copyOfObserversForRocksTTC);
           
    BroadcastTreeTTCEffects(
        copyOfObserversForTreeTTC);
           
    BroadcastWaterTTCEffects(
        copyOfObserversForWaterTTC);
           
    BroadcastFloorTTCEffects(
        copyOfObserversForFloorTTC);
           
    BroadcastCaveWallTTCEffects(
        copyOfObserversForCaveWallTTC);
           
    BroadcastCaveTTCEffects(
        copyOfObserversForCaveTTC);
           
    BroadcastFallsTTCEffects(
        copyOfObserversForFallsTTC);
           
    BroadcastFireTTCEffects(
        copyOfObserversForFireTTC);
           
    BroadcastObsidianFloorTTCEffects(
        copyOfObserversForObsidianFloorTTC);
           
    BroadcastMagmaTTCEffects(
        copyOfObserversForMagmaTTC);
           
    BroadcastCliffTTCEffects(
        copyOfObserversForCliffTTC);
           
    BroadcastRavaNestTTCEffects(
        copyOfObserversForRavaNestTTC);
           
    BroadcastCliffLandingTTCEffects(
        copyOfObserversForCliffLandingTTC);
           
    BroadcastStoneTTCEffects(
        copyOfObserversForStoneTTC);
           
    BroadcastGrassTTCEffects(
        copyOfObserversForGrassTTC);
           
    BroadcastLevelEffects(
        copyOfObserversForLevel);
           
    BroadcastSpeedRingEffects(
        copyOfObserversForSpeedRing);
           
    BroadcastManaPotionEffects(
        copyOfObserversForManaPotion);
           
    BroadcastWatEffects(
        copyOfObserversForWat);
           
    BroadcastIImpulseStrongMutBunchEffects(
        copyOfObserversForIImpulseStrongMutBunch);
           
    BroadcastIItemStrongMutBunchEffects(
        copyOfObserversForIItemStrongMutBunch);
           
    BroadcastItemTTCEffects(
        copyOfObserversForItemTTC);
           
    BroadcastHealthPotionEffects(
        copyOfObserversForHealthPotion);
           
    BroadcastGlaiveEffects(
        copyOfObserversForGlaive);
           
    BroadcastSlowRodEffects(
        copyOfObserversForSlowRod);
           
    BroadcastBlastRodEffects(
        copyOfObserversForBlastRod);
           
    BroadcastArmorEffects(
        copyOfObserversForArmor);
           
    BroadcastSquareCaveLevelControllerEffects(
        copyOfObserversForSquareCaveLevelController);
           
    BroadcastRavashrikeLevelControllerEffects(
        copyOfObserversForRavashrikeLevelController);
           
    BroadcastPentagonalCaveLevelControllerEffects(
        copyOfObserversForPentagonalCaveLevelController);
           
    BroadcastIncendianFallsLevelLinkerTTCEffects(
        copyOfObserversForIncendianFallsLevelLinkerTTC);
           
    BroadcastCliffLevelControllerEffects(
        copyOfObserversForCliffLevelController);
           
    BroadcastPreGauntletLevelControllerEffects(
        copyOfObserversForPreGauntletLevelController);
           
    BroadcastGauntletLevelControllerEffects(
        copyOfObserversForGauntletLevelController);
           
    BroadcastExecutionStateEffects(
        copyOfObserversForExecutionState);
           
    BroadcastIPostActingUCWeakMutBunchEffects(
        copyOfObserversForIPostActingUCWeakMutBunch);
           
    BroadcastIPreActingUCWeakMutBunchEffects(
        copyOfObserversForIPreActingUCWeakMutBunch);
           
    BroadcastGameEffects(
        copyOfObserversForGame);
           
    BroadcastVolcaetusLevelControllerEffects(
        copyOfObserversForVolcaetusLevelController);
           
    BroadcastTutorial2LevelControllerEffects(
        copyOfObserversForTutorial2LevelController);
           
    BroadcastTutorial1LevelControllerEffects(
        copyOfObserversForTutorial1LevelController);
           
    BroadcastRetreatLevelControllerEffects(
        copyOfObserversForRetreatLevelController);
           
    BroadcastSotaventoLevelControllerEffects(
        copyOfObserversForSotaventoLevelController);
           
    BroadcastNestLevelControllerEffects(
        copyOfObserversForNestLevelController);
           
    BroadcastLakeLevelControllerEffects(
        copyOfObserversForLakeLevelController);
           
    BroadcastEmberDeepLevelLinkerTTCEffects(
        copyOfObserversForEmberDeepLevelLinkerTTC);
           
    BroadcastDirtRoadLevelControllerEffects(
        copyOfObserversForDirtRoadLevelController);
           
    BroadcastCaveLevelControllerEffects(
        copyOfObserversForCaveLevelController);
           
    BroadcastBridgesLevelControllerEffects(
        copyOfObserversForBridgesLevelController);
           
    BroadcastAncientTownLevelControllerEffects(
        copyOfObserversForAncientTownLevelController);
           
    BroadcastIGameEventMutListEffects(
        copyOfObserversForIGameEventMutList);
           
    BroadcastLocationMutListEffects(
        copyOfObserversForLocationMutList);
           
    BroadcastIRequestMutListEffects(
        copyOfObserversForIRequestMutList);
           
    BroadcastIUnitEventMutListEffects(
        copyOfObserversForIUnitEventMutList);
           
    BroadcastLevelMutSetEffects(
        copyOfObserversForLevelMutSet);
           
    BroadcastDoomedUCWeakMutSetEffects(
        copyOfObserversForDoomedUCWeakMutSet);
           
    BroadcastMiredUCWeakMutSetEffects(
        copyOfObserversForMiredUCWeakMutSet);
           
    BroadcastInvincibilityUCWeakMutSetEffects(
        copyOfObserversForInvincibilityUCWeakMutSet);
           
    BroadcastDefyingUCWeakMutSetEffects(
        copyOfObserversForDefyingUCWeakMutSet);
           
    BroadcastCounteringUCWeakMutSetEffects(
        copyOfObserversForCounteringUCWeakMutSet);
           
    BroadcastAttackAICapabilityUCWeakMutSetEffects(
        copyOfObserversForAttackAICapabilityUCWeakMutSet);
           
    BroadcastLightningChargedUCWeakMutSetEffects(
        copyOfObserversForLightningChargedUCWeakMutSet);
           
    BroadcastTimeCloneAICapabilityUCWeakMutSetEffects(
        copyOfObserversForTimeCloneAICapabilityUCWeakMutSet);
           
    BroadcastManaPotionStrongMutSetEffects(
        copyOfObserversForManaPotionStrongMutSet);
           
    BroadcastHealthPotionStrongMutSetEffects(
        copyOfObserversForHealthPotionStrongMutSet);
           
    BroadcastSpeedRingStrongMutSetEffects(
        copyOfObserversForSpeedRingStrongMutSet);
           
    BroadcastGlaiveStrongMutSetEffects(
        copyOfObserversForGlaiveStrongMutSet);
           
    BroadcastSlowRodStrongMutSetEffects(
        copyOfObserversForSlowRodStrongMutSet);
           
    BroadcastBlastRodStrongMutSetEffects(
        copyOfObserversForBlastRodStrongMutSet);
           
    BroadcastArmorStrongMutSetEffects(
        copyOfObserversForArmorStrongMutSet);
           
    BroadcastHoldPositionImpulseStrongMutSetEffects(
        copyOfObserversForHoldPositionImpulseStrongMutSet);
           
    BroadcastTemporaryCloneImpulseStrongMutSetEffects(
        copyOfObserversForTemporaryCloneImpulseStrongMutSet);
           
    BroadcastSummonImpulseStrongMutSetEffects(
        copyOfObserversForSummonImpulseStrongMutSet);
           
    BroadcastMireImpulseStrongMutSetEffects(
        copyOfObserversForMireImpulseStrongMutSet);
           
    BroadcastEvaporateImpulseStrongMutSetEffects(
        copyOfObserversForEvaporateImpulseStrongMutSet);
           
    BroadcastMoveImpulseStrongMutSetEffects(
        copyOfObserversForMoveImpulseStrongMutSet);
           
    BroadcastKamikazeJumpImpulseStrongMutSetEffects(
        copyOfObserversForKamikazeJumpImpulseStrongMutSet);
           
    BroadcastKamikazeTargetImpulseStrongMutSetEffects(
        copyOfObserversForKamikazeTargetImpulseStrongMutSet);
           
    BroadcastNoImpulseStrongMutSetEffects(
        copyOfObserversForNoImpulseStrongMutSet);
           
    BroadcastFireImpulseStrongMutSetEffects(
        copyOfObserversForFireImpulseStrongMutSet);
           
    BroadcastDefyImpulseStrongMutSetEffects(
        copyOfObserversForDefyImpulseStrongMutSet);
           
    BroadcastCounterImpulseStrongMutSetEffects(
        copyOfObserversForCounterImpulseStrongMutSet);
           
    BroadcastUnleashBideImpulseStrongMutSetEffects(
        copyOfObserversForUnleashBideImpulseStrongMutSet);
           
    BroadcastContinueBidingImpulseStrongMutSetEffects(
        copyOfObserversForContinueBidingImpulseStrongMutSet);
           
    BroadcastStartBidingImpulseStrongMutSetEffects(
        copyOfObserversForStartBidingImpulseStrongMutSet);
           
    BroadcastAttackImpulseStrongMutSetEffects(
        copyOfObserversForAttackImpulseStrongMutSet);
           
    BroadcastPursueImpulseStrongMutSetEffects(
        copyOfObserversForPursueImpulseStrongMutSet);
           
    BroadcastFireBombImpulseStrongMutSetEffects(
        copyOfObserversForFireBombImpulseStrongMutSet);
           
    BroadcastUnitMutSetEffects(
        copyOfObserversForUnitMutSet);
           
    BroadcastSimplePresenceTriggerTTCMutSetEffects(
        copyOfObserversForSimplePresenceTriggerTTCMutSet);
           
    BroadcastItemTTCMutSetEffects(
        copyOfObserversForItemTTCMutSet);
           
    BroadcastKamikazeTargetTTCMutSetEffects(
        copyOfObserversForKamikazeTargetTTCMutSet);
           
    BroadcastWarperTTCMutSetEffects(
        copyOfObserversForWarperTTCMutSet);
           
    BroadcastTimeAnchorTTCMutSetEffects(
        copyOfObserversForTimeAnchorTTCMutSet);
           
    BroadcastFireBombTTCMutSetEffects(
        copyOfObserversForFireBombTTCMutSet);
           
    BroadcastMarkerTTCMutSetEffects(
        copyOfObserversForMarkerTTCMutSet);
           
    BroadcastLevelLinkTTCMutSetEffects(
        copyOfObserversForLevelLinkTTCMutSet);
           
    BroadcastMudTTCMutSetEffects(
        copyOfObserversForMudTTCMutSet);
           
    BroadcastDirtTTCMutSetEffects(
        copyOfObserversForDirtTTCMutSet);
           
    BroadcastObsidianTTCMutSetEffects(
        copyOfObserversForObsidianTTCMutSet);
           
    BroadcastDownStairsTTCMutSetEffects(
        copyOfObserversForDownStairsTTCMutSet);
           
    BroadcastUpStairsTTCMutSetEffects(
        copyOfObserversForUpStairsTTCMutSet);
           
    BroadcastWallTTCMutSetEffects(
        copyOfObserversForWallTTCMutSet);
           
    BroadcastBloodTTCMutSetEffects(
        copyOfObserversForBloodTTCMutSet);
           
    BroadcastRocksTTCMutSetEffects(
        copyOfObserversForRocksTTCMutSet);
           
    BroadcastTreeTTCMutSetEffects(
        copyOfObserversForTreeTTCMutSet);
           
    BroadcastWaterTTCMutSetEffects(
        copyOfObserversForWaterTTCMutSet);
           
    BroadcastFloorTTCMutSetEffects(
        copyOfObserversForFloorTTCMutSet);
           
    BroadcastCaveWallTTCMutSetEffects(
        copyOfObserversForCaveWallTTCMutSet);
           
    BroadcastCaveTTCMutSetEffects(
        copyOfObserversForCaveTTCMutSet);
           
    BroadcastFallsTTCMutSetEffects(
        copyOfObserversForFallsTTCMutSet);
           
    BroadcastFireTTCMutSetEffects(
        copyOfObserversForFireTTCMutSet);
           
    BroadcastObsidianFloorTTCMutSetEffects(
        copyOfObserversForObsidianFloorTTCMutSet);
           
    BroadcastMagmaTTCMutSetEffects(
        copyOfObserversForMagmaTTCMutSet);
           
    BroadcastCliffTTCMutSetEffects(
        copyOfObserversForCliffTTCMutSet);
           
    BroadcastRavaNestTTCMutSetEffects(
        copyOfObserversForRavaNestTTCMutSet);
           
    BroadcastCliffLandingTTCMutSetEffects(
        copyOfObserversForCliffLandingTTCMutSet);
           
    BroadcastStoneTTCMutSetEffects(
        copyOfObserversForStoneTTCMutSet);
           
    BroadcastGrassTTCMutSetEffects(
        copyOfObserversForGrassTTCMutSet);
           
    BroadcastIncendianFallsLevelLinkerTTCMutSetEffects(
        copyOfObserversForIncendianFallsLevelLinkerTTCMutSet);
           
    BroadcastEmberDeepLevelLinkerTTCMutSetEffects(
        copyOfObserversForEmberDeepLevelLinkerTTCMutSet);
           
    BroadcastTutorialDefyCounterUCMutSetEffects(
        copyOfObserversForTutorialDefyCounterUCMutSet);
           
    BroadcastLightningChargingUCMutSetEffects(
        copyOfObserversForLightningChargingUCMutSet);
           
    BroadcastWanderAICapabilityUCMutSetEffects(
        copyOfObserversForWanderAICapabilityUCMutSet);
           
    BroadcastTemporaryCloneAICapabilityUCMutSetEffects(
        copyOfObserversForTemporaryCloneAICapabilityUCMutSet);
           
    BroadcastSummonAICapabilityUCMutSetEffects(
        copyOfObserversForSummonAICapabilityUCMutSet);
           
    BroadcastKamikazeAICapabilityUCMutSetEffects(
        copyOfObserversForKamikazeAICapabilityUCMutSet);
           
    BroadcastGuardAICapabilityUCMutSetEffects(
        copyOfObserversForGuardAICapabilityUCMutSet);
           
    BroadcastTimeCloneAICapabilityUCMutSetEffects(
        copyOfObserversForTimeCloneAICapabilityUCMutSet);
           
    BroadcastDoomedUCMutSetEffects(
        copyOfObserversForDoomedUCMutSet);
           
    BroadcastMiredUCMutSetEffects(
        copyOfObserversForMiredUCMutSet);
           
    BroadcastAttackAICapabilityUCMutSetEffects(
        copyOfObserversForAttackAICapabilityUCMutSet);
           
    BroadcastCounteringUCMutSetEffects(
        copyOfObserversForCounteringUCMutSet);
           
    BroadcastLightningChargedUCMutSetEffects(
        copyOfObserversForLightningChargedUCMutSet);
           
    BroadcastInvincibilityUCMutSetEffects(
        copyOfObserversForInvincibilityUCMutSet);
           
    BroadcastDefyingUCMutSetEffects(
        copyOfObserversForDefyingUCMutSet);
           
    BroadcastBideAICapabilityUCMutSetEffects(
        copyOfObserversForBideAICapabilityUCMutSet);
           
    BroadcastBaseMovementTimeUCMutSetEffects(
        copyOfObserversForBaseMovementTimeUCMutSet);
           
    BroadcastBaseCombatTimeUCMutSetEffects(
        copyOfObserversForBaseCombatTimeUCMutSet);
           
    BroadcastManaPotionMutSetEffects(
        copyOfObserversForManaPotionMutSet);
           
    BroadcastHealthPotionMutSetEffects(
        copyOfObserversForHealthPotionMutSet);
           
    BroadcastSpeedRingMutSetEffects(
        copyOfObserversForSpeedRingMutSet);
           
    BroadcastGlaiveMutSetEffects(
        copyOfObserversForGlaiveMutSet);
           
    BroadcastSlowRodMutSetEffects(
        copyOfObserversForSlowRodMutSet);
           
    BroadcastBlastRodMutSetEffects(
        copyOfObserversForBlastRodMutSet);
           
    BroadcastArmorMutSetEffects(
        copyOfObserversForArmorMutSet);
           
    BroadcastSorcerousUCMutSetEffects(
        copyOfObserversForSorcerousUCMutSet);
           
    BroadcastBaseOffenseUCMutSetEffects(
        copyOfObserversForBaseOffenseUCMutSet);
           
    BroadcastBaseDefenseUCMutSetEffects(
        copyOfObserversForBaseDefenseUCMutSet);
           
    BroadcastTerrainTileByLocationMutMapEffects(
        copyOfObserversForTerrainTileByLocationMutMap);
           
    BroadcastKamikazeTargetTTCStrongByLocationMutMapEffects(
        copyOfObserversForKamikazeTargetTTCStrongByLocationMutMap);
           
  }

  public int GetDeterministicHashCode() {
    // int doubleCheckHash = RecalculateEntireHash();
    // Asserts.Assert(doubleCheckHash == this.rootIncarnation.hash);
    return this.rootIncarnation.hash;
  }

  public void Revert(RootIncarnation sourceIncarnation) {
    CheckUnlocked();
    // We do all the adds first so that we don't violate any strong borrows.
    // Then we do all the changes, because those might be flipping things to point
    // at things that were just made.
    // Then we do all the removes.


    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsRand) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsRand.ContainsKey(sourceObjId)) {
        EffectInternalCreateRand(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsHoldPositionImpulse) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsHoldPositionImpulse.ContainsKey(sourceObjId)) {
        EffectInternalCreateHoldPositionImpulse(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsWanderAICapabilityUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsWanderAICapabilityUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateWanderAICapabilityUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTutorialDefyCounterUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsTutorialDefyCounterUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateTutorialDefyCounterUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsUnit) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsUnit.ContainsKey(sourceObjId)) {
        EffectInternalCreateUnit(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIUnitComponentMutBunch) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsIUnitComponentMutBunch.ContainsKey(sourceObjId)) {
        EffectInternalCreateIUnitComponentMutBunch(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLightningChargedUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsLightningChargedUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateLightningChargedUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLightningChargingUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsLightningChargingUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateLightningChargingUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDoomedUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsDoomedUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateDoomedUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTemporaryCloneImpulse) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsTemporaryCloneImpulse.ContainsKey(sourceObjId)) {
        EffectInternalCreateTemporaryCloneImpulse(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTemporaryCloneAICapabilityUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsTemporaryCloneAICapabilityUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateTemporaryCloneAICapabilityUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSummonImpulse) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsSummonImpulse.ContainsKey(sourceObjId)) {
        EffectInternalCreateSummonImpulse(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSummonAICapabilityUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsSummonAICapabilityUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateSummonAICapabilityUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSorcerousUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsSorcerousUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateSorcerousUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBaseOffenseUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsBaseOffenseUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateBaseOffenseUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBaseMovementTimeUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsBaseMovementTimeUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateBaseMovementTimeUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBaseDefenseUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsBaseDefenseUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateBaseDefenseUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBaseCombatTimeUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsBaseCombatTimeUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateBaseCombatTimeUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMiredUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsMiredUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateMiredUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMireImpulse) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsMireImpulse.ContainsKey(sourceObjId)) {
        EffectInternalCreateMireImpulse(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsEvaporateImpulse) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsEvaporateImpulse.ContainsKey(sourceObjId)) {
        EffectInternalCreateEvaporateImpulse(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTimeCloneAICapabilityUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsTimeCloneAICapabilityUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateTimeCloneAICapabilityUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMoveImpulse) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsMoveImpulse.ContainsKey(sourceObjId)) {
        EffectInternalCreateMoveImpulse(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKamikazeTargetTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsKamikazeTargetTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateKamikazeTargetTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKamikazeJumpImpulse) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsKamikazeJumpImpulse.ContainsKey(sourceObjId)) {
        EffectInternalCreateKamikazeJumpImpulse(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKamikazeTargetImpulse) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsKamikazeTargetImpulse.ContainsKey(sourceObjId)) {
        EffectInternalCreateKamikazeTargetImpulse(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKamikazeAICapabilityUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsKamikazeAICapabilityUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateKamikazeAICapabilityUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsInvincibilityUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsInvincibilityUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateInvincibilityUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsGuardAICapabilityUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsGuardAICapabilityUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateGuardAICapabilityUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsNoImpulse) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsNoImpulse.ContainsKey(sourceObjId)) {
        EffectInternalCreateNoImpulse(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFireImpulse) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsFireImpulse.ContainsKey(sourceObjId)) {
        EffectInternalCreateFireImpulse(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDefyingUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsDefyingUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateDefyingUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDefyImpulse) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsDefyImpulse.ContainsKey(sourceObjId)) {
        EffectInternalCreateDefyImpulse(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCounteringUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsCounteringUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateCounteringUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCounterImpulse) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsCounterImpulse.ContainsKey(sourceObjId)) {
        EffectInternalCreateCounterImpulse(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsUnleashBideImpulse) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsUnleashBideImpulse.ContainsKey(sourceObjId)) {
        EffectInternalCreateUnleashBideImpulse(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsContinueBidingImpulse) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsContinueBidingImpulse.ContainsKey(sourceObjId)) {
        EffectInternalCreateContinueBidingImpulse(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsStartBidingImpulse) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsStartBidingImpulse.ContainsKey(sourceObjId)) {
        EffectInternalCreateStartBidingImpulse(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBideAICapabilityUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsBideAICapabilityUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateBideAICapabilityUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsAttackImpulse) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsAttackImpulse.ContainsKey(sourceObjId)) {
        EffectInternalCreateAttackImpulse(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsPursueImpulse) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsPursueImpulse.ContainsKey(sourceObjId)) {
        EffectInternalCreatePursueImpulse(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKillDirective) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsKillDirective.ContainsKey(sourceObjId)) {
        EffectInternalCreateKillDirective(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsAttackAICapabilityUC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsAttackAICapabilityUC.ContainsKey(sourceObjId)) {
        EffectInternalCreateAttackAICapabilityUC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsWarperTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsWarperTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateWarperTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTimeAnchorTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsTimeAnchorTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateTimeAnchorTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTerrainTile) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsTerrainTile.ContainsKey(sourceObjId)) {
        EffectInternalCreateTerrainTile(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsITerrainTileComponentMutBunch) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsITerrainTileComponentMutBunch.ContainsKey(sourceObjId)) {
        EffectInternalCreateITerrainTileComponentMutBunch(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTerrain) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsTerrain.ContainsKey(sourceObjId)) {
        EffectInternalCreateTerrain(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSimplePresenceTriggerTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsSimplePresenceTriggerTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateSimplePresenceTriggerTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFireBombImpulse) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsFireBombImpulse.ContainsKey(sourceObjId)) {
        EffectInternalCreateFireBombImpulse(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFireBombTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsFireBombTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateFireBombTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMarkerTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsMarkerTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateMarkerTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLevelLinkTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsLevelLinkTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateLevelLinkTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMudTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsMudTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateMudTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDirtTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsDirtTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateDirtTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsObsidianTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsObsidianTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateObsidianTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDownStairsTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsDownStairsTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateDownStairsTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsUpStairsTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsUpStairsTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateUpStairsTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsWallTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsWallTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateWallTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBloodTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsBloodTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateBloodTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsRocksTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsRocksTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateRocksTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTreeTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsTreeTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateTreeTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsWaterTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsWaterTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateWaterTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFloorTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsFloorTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateFloorTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCaveWallTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsCaveWallTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateCaveWallTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCaveTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsCaveTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateCaveTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFallsTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsFallsTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateFallsTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFireTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsFireTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateFireTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsObsidianFloorTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsObsidianFloorTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateObsidianFloorTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMagmaTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsMagmaTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateMagmaTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCliffTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsCliffTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateCliffTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsRavaNestTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsRavaNestTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateRavaNestTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCliffLandingTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsCliffLandingTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateCliffLandingTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsStoneTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsStoneTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateStoneTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsGrassTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsGrassTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateGrassTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLevel) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsLevel.ContainsKey(sourceObjId)) {
        EffectInternalCreateLevel(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSpeedRing) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsSpeedRing.ContainsKey(sourceObjId)) {
        EffectInternalCreateSpeedRing(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsManaPotion) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsManaPotion.ContainsKey(sourceObjId)) {
        EffectInternalCreateManaPotion(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsWat) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsWat.ContainsKey(sourceObjId)) {
        EffectInternalCreateWat(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIImpulseStrongMutBunch) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsIImpulseStrongMutBunch.ContainsKey(sourceObjId)) {
        EffectInternalCreateIImpulseStrongMutBunch(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIItemStrongMutBunch) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsIItemStrongMutBunch.ContainsKey(sourceObjId)) {
        EffectInternalCreateIItemStrongMutBunch(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsItemTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsItemTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateItemTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsHealthPotion) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsHealthPotion.ContainsKey(sourceObjId)) {
        EffectInternalCreateHealthPotion(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsGlaive) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsGlaive.ContainsKey(sourceObjId)) {
        EffectInternalCreateGlaive(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSlowRod) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsSlowRod.ContainsKey(sourceObjId)) {
        EffectInternalCreateSlowRod(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBlastRod) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsBlastRod.ContainsKey(sourceObjId)) {
        EffectInternalCreateBlastRod(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsArmor) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsArmor.ContainsKey(sourceObjId)) {
        EffectInternalCreateArmor(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSquareCaveLevelController) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsSquareCaveLevelController.ContainsKey(sourceObjId)) {
        EffectInternalCreateSquareCaveLevelController(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsRavashrikeLevelController) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsRavashrikeLevelController.ContainsKey(sourceObjId)) {
        EffectInternalCreateRavashrikeLevelController(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsPentagonalCaveLevelController) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsPentagonalCaveLevelController.ContainsKey(sourceObjId)) {
        EffectInternalCreatePentagonalCaveLevelController(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIncendianFallsLevelLinkerTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateIncendianFallsLevelLinkerTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCliffLevelController) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsCliffLevelController.ContainsKey(sourceObjId)) {
        EffectInternalCreateCliffLevelController(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsPreGauntletLevelController) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsPreGauntletLevelController.ContainsKey(sourceObjId)) {
        EffectInternalCreatePreGauntletLevelController(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsGauntletLevelController) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsGauntletLevelController.ContainsKey(sourceObjId)) {
        EffectInternalCreateGauntletLevelController(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsExecutionState) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsExecutionState.ContainsKey(sourceObjId)) {
        EffectInternalCreateExecutionState(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIPostActingUCWeakMutBunch) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsIPostActingUCWeakMutBunch.ContainsKey(sourceObjId)) {
        EffectInternalCreateIPostActingUCWeakMutBunch(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIPreActingUCWeakMutBunch) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsIPreActingUCWeakMutBunch.ContainsKey(sourceObjId)) {
        EffectInternalCreateIPreActingUCWeakMutBunch(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsGame) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsGame.ContainsKey(sourceObjId)) {
        EffectInternalCreateGame(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsVolcaetusLevelController) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsVolcaetusLevelController.ContainsKey(sourceObjId)) {
        EffectInternalCreateVolcaetusLevelController(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTutorial2LevelController) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsTutorial2LevelController.ContainsKey(sourceObjId)) {
        EffectInternalCreateTutorial2LevelController(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTutorial1LevelController) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsTutorial1LevelController.ContainsKey(sourceObjId)) {
        EffectInternalCreateTutorial1LevelController(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsRetreatLevelController) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsRetreatLevelController.ContainsKey(sourceObjId)) {
        EffectInternalCreateRetreatLevelController(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSotaventoLevelController) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsSotaventoLevelController.ContainsKey(sourceObjId)) {
        EffectInternalCreateSotaventoLevelController(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsNestLevelController) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsNestLevelController.ContainsKey(sourceObjId)) {
        EffectInternalCreateNestLevelController(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLakeLevelController) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsLakeLevelController.ContainsKey(sourceObjId)) {
        EffectInternalCreateLakeLevelController(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsEmberDeepLevelLinkerTTC) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsEmberDeepLevelLinkerTTC.ContainsKey(sourceObjId)) {
        EffectInternalCreateEmberDeepLevelLinkerTTC(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDirtRoadLevelController) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsDirtRoadLevelController.ContainsKey(sourceObjId)) {
        EffectInternalCreateDirtRoadLevelController(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCaveLevelController) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsCaveLevelController.ContainsKey(sourceObjId)) {
        EffectInternalCreateCaveLevelController(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBridgesLevelController) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsBridgesLevelController.ContainsKey(sourceObjId)) {
        EffectInternalCreateBridgesLevelController(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsAncientTownLevelController) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsAncientTownLevelController.ContainsKey(sourceObjId)) {
        EffectInternalCreateAncientTownLevelController(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIGameEventMutList) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsIGameEventMutList.ContainsKey(sourceObjId)) {
        EffectInternalCreateIGameEventMutList(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLocationMutList) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsLocationMutList.ContainsKey(sourceObjId)) {
        EffectInternalCreateLocationMutList(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIRequestMutList) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsIRequestMutList.ContainsKey(sourceObjId)) {
        EffectInternalCreateIRequestMutList(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIUnitEventMutList) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsIUnitEventMutList.ContainsKey(sourceObjId)) {
        EffectInternalCreateIUnitEventMutList(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLevelMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsLevelMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateLevelMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDoomedUCWeakMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsDoomedUCWeakMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateDoomedUCWeakMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMiredUCWeakMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsMiredUCWeakMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateMiredUCWeakMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsInvincibilityUCWeakMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsInvincibilityUCWeakMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateInvincibilityUCWeakMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDefyingUCWeakMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsDefyingUCWeakMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateDefyingUCWeakMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCounteringUCWeakMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsCounteringUCWeakMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateCounteringUCWeakMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsAttackAICapabilityUCWeakMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsAttackAICapabilityUCWeakMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateAttackAICapabilityUCWeakMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLightningChargedUCWeakMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsLightningChargedUCWeakMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateLightningChargedUCWeakMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateTimeCloneAICapabilityUCWeakMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsManaPotionStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsManaPotionStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateManaPotionStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsHealthPotionStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsHealthPotionStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateHealthPotionStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSpeedRingStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsSpeedRingStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateSpeedRingStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsGlaiveStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsGlaiveStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateGlaiveStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSlowRodStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsSlowRodStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateSlowRodStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBlastRodStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsBlastRodStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateBlastRodStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsArmorStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsArmorStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateArmorStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsHoldPositionImpulseStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsHoldPositionImpulseStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateHoldPositionImpulseStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateTemporaryCloneImpulseStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSummonImpulseStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsSummonImpulseStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateSummonImpulseStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMireImpulseStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsMireImpulseStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateMireImpulseStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsEvaporateImpulseStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsEvaporateImpulseStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateEvaporateImpulseStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMoveImpulseStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsMoveImpulseStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateMoveImpulseStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateKamikazeJumpImpulseStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateKamikazeTargetImpulseStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsNoImpulseStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsNoImpulseStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateNoImpulseStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFireImpulseStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsFireImpulseStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateFireImpulseStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDefyImpulseStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsDefyImpulseStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateDefyImpulseStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCounterImpulseStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsCounterImpulseStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateCounterImpulseStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsUnleashBideImpulseStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsUnleashBideImpulseStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateUnleashBideImpulseStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsContinueBidingImpulseStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsContinueBidingImpulseStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateContinueBidingImpulseStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsStartBidingImpulseStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsStartBidingImpulseStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateStartBidingImpulseStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsAttackImpulseStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsAttackImpulseStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateAttackImpulseStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsPursueImpulseStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsPursueImpulseStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreatePursueImpulseStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFireBombImpulseStrongMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsFireBombImpulseStrongMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateFireBombImpulseStrongMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsUnitMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsUnitMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateUnitMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSimplePresenceTriggerTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsSimplePresenceTriggerTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateSimplePresenceTriggerTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsItemTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsItemTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateItemTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKamikazeTargetTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsKamikazeTargetTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateKamikazeTargetTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsWarperTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsWarperTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateWarperTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTimeAnchorTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsTimeAnchorTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateTimeAnchorTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFireBombTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsFireBombTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateFireBombTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMarkerTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsMarkerTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateMarkerTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLevelLinkTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsLevelLinkTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateLevelLinkTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMudTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsMudTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateMudTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDirtTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsDirtTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateDirtTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsObsidianTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsObsidianTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateObsidianTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDownStairsTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsDownStairsTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateDownStairsTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsUpStairsTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsUpStairsTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateUpStairsTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsWallTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsWallTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateWallTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBloodTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsBloodTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateBloodTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsRocksTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsRocksTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateRocksTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTreeTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsTreeTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateTreeTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsWaterTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsWaterTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateWaterTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFloorTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsFloorTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateFloorTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCaveWallTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsCaveWallTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateCaveWallTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCaveTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsCaveTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateCaveTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFallsTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsFallsTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateFallsTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFireTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsFireTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateFireTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsObsidianFloorTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsObsidianFloorTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateObsidianFloorTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMagmaTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsMagmaTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateMagmaTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCliffTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsCliffTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateCliffTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsRavaNestTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsRavaNestTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateRavaNestTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCliffLandingTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsCliffLandingTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateCliffLandingTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsStoneTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsStoneTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateStoneTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsGrassTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsGrassTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateGrassTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateIncendianFallsLevelLinkerTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateEmberDeepLevelLinkerTTCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTutorialDefyCounterUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsTutorialDefyCounterUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateTutorialDefyCounterUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLightningChargingUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsLightningChargingUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateLightningChargingUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsWanderAICapabilityUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsWanderAICapabilityUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateWanderAICapabilityUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateTemporaryCloneAICapabilityUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSummonAICapabilityUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsSummonAICapabilityUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateSummonAICapabilityUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKamikazeAICapabilityUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsKamikazeAICapabilityUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateKamikazeAICapabilityUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsGuardAICapabilityUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsGuardAICapabilityUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateGuardAICapabilityUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTimeCloneAICapabilityUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsTimeCloneAICapabilityUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateTimeCloneAICapabilityUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDoomedUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsDoomedUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateDoomedUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMiredUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsMiredUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateMiredUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsAttackAICapabilityUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsAttackAICapabilityUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateAttackAICapabilityUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCounteringUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsCounteringUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateCounteringUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLightningChargedUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsLightningChargedUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateLightningChargedUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsInvincibilityUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsInvincibilityUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateInvincibilityUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDefyingUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsDefyingUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateDefyingUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBideAICapabilityUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsBideAICapabilityUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateBideAICapabilityUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBaseMovementTimeUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsBaseMovementTimeUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateBaseMovementTimeUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBaseCombatTimeUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsBaseCombatTimeUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateBaseCombatTimeUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsManaPotionMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsManaPotionMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateManaPotionMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsHealthPotionMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsHealthPotionMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateHealthPotionMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSpeedRingMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsSpeedRingMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateSpeedRingMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsGlaiveMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsGlaiveMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateGlaiveMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSlowRodMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsSlowRodMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateSlowRodMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBlastRodMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsBlastRodMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateBlastRodMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsArmorMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsArmorMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateArmorMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSorcerousUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsSorcerousUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateSorcerousUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBaseOffenseUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsBaseOffenseUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateBaseOffenseUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBaseDefenseUCMutSet) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsBaseDefenseUCMutSet.ContainsKey(sourceObjId)) {
        EffectInternalCreateBaseDefenseUCMutSet(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTerrainTileByLocationMutMap) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsTerrainTileByLocationMutMap.ContainsKey(sourceObjId)) {
        EffectInternalCreateTerrainTileByLocationMutMap(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap) {
      var sourceObjId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (!rootIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap.ContainsKey(sourceObjId)) {
        EffectInternalCreateKamikazeTargetTTCStrongByLocationMutMap(sourceObjId, sourceVersionAndObjIncarnation.version, sourceObjIncarnation);
      }
    }
         
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIGameEventMutList) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsIGameEventMutList.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsIGameEventMutList[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            for (int i = currentObjIncarnation.list.Count - 1; i >= 0; i--) {
              EffectIGameEventMutListRemoveAt(objId, i);
            }
            foreach (var objIdInSourceObjIncarnation in sourceObjIncarnation.list) {
              EffectIGameEventMutListAdd(objId, objIdInSourceObjIncarnation);
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
                  rootIncarnation.incarnationsIGameEventMutList[objId] = sourceVersionAndObjIncarnation;

          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLocationMutList) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsLocationMutList.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsLocationMutList[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            for (int i = currentObjIncarnation.list.Count - 1; i >= 0; i--) {
              EffectLocationMutListRemoveAt(objId, i);
            }
            foreach (var objIdInSourceObjIncarnation in sourceObjIncarnation.list) {
              EffectLocationMutListAdd(objId, objIdInSourceObjIncarnation);
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
                  rootIncarnation.incarnationsLocationMutList[objId] = sourceVersionAndObjIncarnation;

          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIRequestMutList) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsIRequestMutList.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsIRequestMutList[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            for (int i = currentObjIncarnation.list.Count - 1; i >= 0; i--) {
              EffectIRequestMutListRemoveAt(objId, i);
            }
            foreach (var objIdInSourceObjIncarnation in sourceObjIncarnation.list) {
              EffectIRequestMutListAdd(objId, objIdInSourceObjIncarnation);
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
                  rootIncarnation.incarnationsIRequestMutList[objId] = sourceVersionAndObjIncarnation;

          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIUnitEventMutList) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsIUnitEventMutList.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsIUnitEventMutList[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            for (int i = currentObjIncarnation.list.Count - 1; i >= 0; i--) {
              EffectIUnitEventMutListRemoveAt(objId, i);
            }
            foreach (var objIdInSourceObjIncarnation in sourceObjIncarnation.list) {
              EffectIUnitEventMutListAdd(objId, objIdInSourceObjIncarnation);
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
                  rootIncarnation.incarnationsIUnitEventMutList[objId] = sourceVersionAndObjIncarnation;

          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLevelMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsLevelMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsLevelMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectLevelMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectLevelMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsLevelMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDoomedUCWeakMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsDoomedUCWeakMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsDoomedUCWeakMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectDoomedUCWeakMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectDoomedUCWeakMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsDoomedUCWeakMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMiredUCWeakMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsMiredUCWeakMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsMiredUCWeakMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectMiredUCWeakMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectMiredUCWeakMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsMiredUCWeakMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsInvincibilityUCWeakMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsInvincibilityUCWeakMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsInvincibilityUCWeakMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectInvincibilityUCWeakMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectInvincibilityUCWeakMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsInvincibilityUCWeakMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDefyingUCWeakMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsDefyingUCWeakMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsDefyingUCWeakMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectDefyingUCWeakMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectDefyingUCWeakMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsDefyingUCWeakMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCounteringUCWeakMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsCounteringUCWeakMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsCounteringUCWeakMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectCounteringUCWeakMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectCounteringUCWeakMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsCounteringUCWeakMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsAttackAICapabilityUCWeakMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsAttackAICapabilityUCWeakMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsAttackAICapabilityUCWeakMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectAttackAICapabilityUCWeakMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectAttackAICapabilityUCWeakMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsAttackAICapabilityUCWeakMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLightningChargedUCWeakMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsLightningChargedUCWeakMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsLightningChargedUCWeakMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectLightningChargedUCWeakMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectLightningChargedUCWeakMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsLightningChargedUCWeakMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectTimeCloneAICapabilityUCWeakMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectTimeCloneAICapabilityUCWeakMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsManaPotionStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsManaPotionStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsManaPotionStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectManaPotionStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectManaPotionStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsManaPotionStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsHealthPotionStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsHealthPotionStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsHealthPotionStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectHealthPotionStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectHealthPotionStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsHealthPotionStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSpeedRingStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsSpeedRingStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsSpeedRingStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectSpeedRingStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectSpeedRingStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsSpeedRingStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsGlaiveStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsGlaiveStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsGlaiveStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectGlaiveStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectGlaiveStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsGlaiveStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSlowRodStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsSlowRodStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsSlowRodStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectSlowRodStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectSlowRodStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsSlowRodStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBlastRodStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsBlastRodStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsBlastRodStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectBlastRodStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectBlastRodStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsBlastRodStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsArmorStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsArmorStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsArmorStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectArmorStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectArmorStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsArmorStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsHoldPositionImpulseStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsHoldPositionImpulseStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsHoldPositionImpulseStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectHoldPositionImpulseStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectHoldPositionImpulseStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsHoldPositionImpulseStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectTemporaryCloneImpulseStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectTemporaryCloneImpulseStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSummonImpulseStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsSummonImpulseStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsSummonImpulseStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectSummonImpulseStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectSummonImpulseStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsSummonImpulseStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMireImpulseStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsMireImpulseStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsMireImpulseStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectMireImpulseStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectMireImpulseStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsMireImpulseStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsEvaporateImpulseStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsEvaporateImpulseStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsEvaporateImpulseStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectEvaporateImpulseStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectEvaporateImpulseStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsEvaporateImpulseStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMoveImpulseStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsMoveImpulseStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsMoveImpulseStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectMoveImpulseStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectMoveImpulseStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsMoveImpulseStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectKamikazeJumpImpulseStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectKamikazeJumpImpulseStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectKamikazeTargetImpulseStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectKamikazeTargetImpulseStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsNoImpulseStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsNoImpulseStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsNoImpulseStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectNoImpulseStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectNoImpulseStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsNoImpulseStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFireImpulseStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsFireImpulseStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsFireImpulseStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectFireImpulseStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectFireImpulseStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsFireImpulseStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDefyImpulseStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsDefyImpulseStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsDefyImpulseStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectDefyImpulseStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectDefyImpulseStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsDefyImpulseStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCounterImpulseStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsCounterImpulseStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsCounterImpulseStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectCounterImpulseStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectCounterImpulseStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsCounterImpulseStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsUnleashBideImpulseStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsUnleashBideImpulseStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsUnleashBideImpulseStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectUnleashBideImpulseStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectUnleashBideImpulseStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsUnleashBideImpulseStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsContinueBidingImpulseStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsContinueBidingImpulseStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsContinueBidingImpulseStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectContinueBidingImpulseStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectContinueBidingImpulseStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsContinueBidingImpulseStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsStartBidingImpulseStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsStartBidingImpulseStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsStartBidingImpulseStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectStartBidingImpulseStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectStartBidingImpulseStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsStartBidingImpulseStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsAttackImpulseStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsAttackImpulseStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsAttackImpulseStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectAttackImpulseStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectAttackImpulseStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsAttackImpulseStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsPursueImpulseStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsPursueImpulseStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsPursueImpulseStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectPursueImpulseStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectPursueImpulseStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsPursueImpulseStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFireBombImpulseStrongMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsFireBombImpulseStrongMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsFireBombImpulseStrongMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectFireBombImpulseStrongMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectFireBombImpulseStrongMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsFireBombImpulseStrongMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsUnitMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsUnitMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsUnitMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectUnitMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectUnitMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsUnitMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSimplePresenceTriggerTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsSimplePresenceTriggerTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsSimplePresenceTriggerTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectSimplePresenceTriggerTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectSimplePresenceTriggerTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsSimplePresenceTriggerTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsItemTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsItemTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsItemTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectItemTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectItemTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsItemTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKamikazeTargetTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsKamikazeTargetTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsKamikazeTargetTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectKamikazeTargetTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectKamikazeTargetTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsKamikazeTargetTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsWarperTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsWarperTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsWarperTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectWarperTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectWarperTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsWarperTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTimeAnchorTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsTimeAnchorTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsTimeAnchorTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectTimeAnchorTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectTimeAnchorTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsTimeAnchorTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFireBombTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsFireBombTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsFireBombTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectFireBombTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectFireBombTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsFireBombTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMarkerTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsMarkerTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsMarkerTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectMarkerTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectMarkerTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsMarkerTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLevelLinkTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsLevelLinkTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsLevelLinkTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectLevelLinkTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectLevelLinkTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsLevelLinkTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMudTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsMudTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsMudTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectMudTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectMudTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsMudTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDirtTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsDirtTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsDirtTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectDirtTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectDirtTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsDirtTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsObsidianTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsObsidianTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsObsidianTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectObsidianTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectObsidianTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsObsidianTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDownStairsTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsDownStairsTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsDownStairsTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectDownStairsTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectDownStairsTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsDownStairsTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsUpStairsTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsUpStairsTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsUpStairsTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectUpStairsTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectUpStairsTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsUpStairsTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsWallTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsWallTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsWallTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectWallTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectWallTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsWallTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBloodTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsBloodTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsBloodTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectBloodTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectBloodTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsBloodTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsRocksTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsRocksTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsRocksTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectRocksTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectRocksTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsRocksTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTreeTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsTreeTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsTreeTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectTreeTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectTreeTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsTreeTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsWaterTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsWaterTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsWaterTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectWaterTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectWaterTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsWaterTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFloorTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsFloorTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsFloorTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectFloorTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectFloorTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsFloorTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCaveWallTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsCaveWallTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsCaveWallTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectCaveWallTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectCaveWallTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsCaveWallTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCaveTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsCaveTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsCaveTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectCaveTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectCaveTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsCaveTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFallsTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsFallsTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsFallsTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectFallsTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectFallsTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsFallsTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFireTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsFireTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsFireTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectFireTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectFireTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsFireTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsObsidianFloorTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsObsidianFloorTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsObsidianFloorTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectObsidianFloorTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectObsidianFloorTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsObsidianFloorTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMagmaTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsMagmaTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsMagmaTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectMagmaTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectMagmaTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsMagmaTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCliffTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsCliffTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsCliffTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectCliffTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectCliffTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsCliffTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsRavaNestTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsRavaNestTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsRavaNestTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectRavaNestTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectRavaNestTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsRavaNestTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCliffLandingTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsCliffLandingTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsCliffLandingTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectCliffLandingTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectCliffLandingTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsCliffLandingTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsStoneTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsStoneTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsStoneTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectStoneTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectStoneTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsStoneTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsGrassTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsGrassTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsGrassTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectGrassTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectGrassTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsGrassTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectIncendianFallsLevelLinkerTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectIncendianFallsLevelLinkerTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectEmberDeepLevelLinkerTTCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectEmberDeepLevelLinkerTTCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTutorialDefyCounterUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsTutorialDefyCounterUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsTutorialDefyCounterUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectTutorialDefyCounterUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectTutorialDefyCounterUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsTutorialDefyCounterUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLightningChargingUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsLightningChargingUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsLightningChargingUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectLightningChargingUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectLightningChargingUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsLightningChargingUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsWanderAICapabilityUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsWanderAICapabilityUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsWanderAICapabilityUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectWanderAICapabilityUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectWanderAICapabilityUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsWanderAICapabilityUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectTemporaryCloneAICapabilityUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectTemporaryCloneAICapabilityUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSummonAICapabilityUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsSummonAICapabilityUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsSummonAICapabilityUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectSummonAICapabilityUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectSummonAICapabilityUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsSummonAICapabilityUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKamikazeAICapabilityUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsKamikazeAICapabilityUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsKamikazeAICapabilityUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectKamikazeAICapabilityUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectKamikazeAICapabilityUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsKamikazeAICapabilityUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsGuardAICapabilityUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsGuardAICapabilityUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsGuardAICapabilityUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectGuardAICapabilityUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectGuardAICapabilityUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsGuardAICapabilityUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTimeCloneAICapabilityUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsTimeCloneAICapabilityUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsTimeCloneAICapabilityUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectTimeCloneAICapabilityUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectTimeCloneAICapabilityUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsTimeCloneAICapabilityUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDoomedUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsDoomedUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsDoomedUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectDoomedUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectDoomedUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsDoomedUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMiredUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsMiredUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsMiredUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectMiredUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectMiredUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsMiredUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsAttackAICapabilityUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsAttackAICapabilityUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsAttackAICapabilityUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectAttackAICapabilityUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectAttackAICapabilityUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsAttackAICapabilityUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCounteringUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsCounteringUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsCounteringUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectCounteringUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectCounteringUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsCounteringUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLightningChargedUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsLightningChargedUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsLightningChargedUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectLightningChargedUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectLightningChargedUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsLightningChargedUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsInvincibilityUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsInvincibilityUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsInvincibilityUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectInvincibilityUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectInvincibilityUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsInvincibilityUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDefyingUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsDefyingUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsDefyingUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectDefyingUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectDefyingUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsDefyingUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBideAICapabilityUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsBideAICapabilityUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsBideAICapabilityUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectBideAICapabilityUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectBideAICapabilityUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsBideAICapabilityUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBaseMovementTimeUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsBaseMovementTimeUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsBaseMovementTimeUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectBaseMovementTimeUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectBaseMovementTimeUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsBaseMovementTimeUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBaseCombatTimeUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsBaseCombatTimeUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsBaseCombatTimeUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectBaseCombatTimeUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectBaseCombatTimeUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsBaseCombatTimeUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsManaPotionMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsManaPotionMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsManaPotionMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectManaPotionMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectManaPotionMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsManaPotionMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsHealthPotionMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsHealthPotionMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsHealthPotionMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectHealthPotionMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectHealthPotionMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsHealthPotionMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSpeedRingMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsSpeedRingMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsSpeedRingMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectSpeedRingMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectSpeedRingMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsSpeedRingMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsGlaiveMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsGlaiveMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsGlaiveMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectGlaiveMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectGlaiveMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsGlaiveMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSlowRodMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsSlowRodMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsSlowRodMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectSlowRodMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectSlowRodMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsSlowRodMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBlastRodMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsBlastRodMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsBlastRodMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectBlastRodMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectBlastRodMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsBlastRodMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsArmorMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsArmorMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsArmorMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectArmorMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectArmorMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsArmorMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSorcerousUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsSorcerousUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsSorcerousUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectSorcerousUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectSorcerousUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsSorcerousUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBaseOffenseUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsBaseOffenseUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsBaseOffenseUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectBaseOffenseUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectBaseOffenseUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsBaseOffenseUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBaseDefenseUCMutSet) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsBaseDefenseUCMutSet.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsBaseDefenseUCMutSet[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var objIdInCurrentObjIncarnation in new SortedSet<int>(currentObjIncarnation.set)) {
              if (!sourceObjIncarnation.set.Contains(objIdInCurrentObjIncarnation)) {
                EffectBaseDefenseUCMutSetRemove(objId, objIdInCurrentObjIncarnation);
              }
            }
            foreach (var unitIdInSourceObjIncarnation in sourceObjIncarnation.set) {
              if (!currentObjIncarnation.set.Contains(unitIdInSourceObjIncarnation)) {
                EffectBaseDefenseUCMutSetAdd(objId, unitIdInSourceObjIncarnation);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsBaseDefenseUCMutSet[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTerrainTileByLocationMutMap) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsTerrainTileByLocationMutMap.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsTerrainTileByLocationMutMap[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var entryInCurrentObjIncarnation in new SortedDictionary<Location, int>(currentObjIncarnation.map)) {
              var key = entryInCurrentObjIncarnation.Key;
              if (!sourceObjIncarnation.map.ContainsKey(key)) {
                EffectTerrainTileByLocationMutMapRemove(objId, key);
              }
            }
            foreach (var entryInSourceObjIncarnation in sourceObjIncarnation.map) {
              var key = entryInSourceObjIncarnation.Key;
              var element = entryInSourceObjIncarnation.Value;
              if (!currentObjIncarnation.map.ContainsKey(key)) {
                EffectTerrainTileByLocationMutMapAdd(objId, key, element);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsTerrainTileByLocationMutMap[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
      foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap) {
        var objId = sourceIdAndVersionAndObjIncarnation.Key;
        var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
        var sourceVersion = sourceVersionAndObjIncarnation.version;
        var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
        if (rootIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap.ContainsKey(objId)) {
          // Compare everything that could possibly have changed.
          var currentVersionAndObjIncarnation = rootIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap[objId];
          var currentVersion = currentVersionAndObjIncarnation.version;
          var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
          if (currentVersion != sourceVersion) {
            foreach (var entryInCurrentObjIncarnation in new SortedDictionary<Location, int>(currentObjIncarnation.map)) {
              var key = entryInCurrentObjIncarnation.Key;
              if (!sourceObjIncarnation.map.ContainsKey(key)) {
                EffectKamikazeTargetTTCStrongByLocationMutMapRemove(objId, key);
              }
            }
            foreach (var entryInSourceObjIncarnation in sourceObjIncarnation.map) {
              var key = entryInSourceObjIncarnation.Key;
              var element = entryInSourceObjIncarnation.Value;
              if (!currentObjIncarnation.map.ContainsKey(key)) {
                EffectKamikazeTargetTTCStrongByLocationMutMapAdd(objId, key, element);
              }
            }
            // Swap out the underlying incarnation. The only visible effect this has is
            // changing the version number.
            rootIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap[objId] = sourceVersionAndObjIncarnation;
          }
        }
      }
             
    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsRand) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsRand.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsRand[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          if (sourceObjIncarnation.rand != currentObjIncarnation.rand) {
            EffectRandSetRand(objId, sourceObjIncarnation.rand);
          }

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsRand[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsHoldPositionImpulse) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsHoldPositionImpulse.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsHoldPositionImpulse[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsHoldPositionImpulse[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsWanderAICapabilityUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsWanderAICapabilityUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsWanderAICapabilityUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsWanderAICapabilityUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTutorialDefyCounterUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsTutorialDefyCounterUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsTutorialDefyCounterUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          if (sourceObjIncarnation.numDefiesRemaining != currentObjIncarnation.numDefiesRemaining) {
            EffectTutorialDefyCounterUCSetNumDefiesRemaining(objId, sourceObjIncarnation.numDefiesRemaining);
          }

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsTutorialDefyCounterUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsUnit) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsUnit.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsUnit[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          if (sourceObjIncarnation.alive != currentObjIncarnation.alive) {
            EffectUnitSetAlive(objId, sourceObjIncarnation.alive);
          }

          if (sourceObjIncarnation.lifeEndTime != currentObjIncarnation.lifeEndTime) {
            EffectUnitSetLifeEndTime(objId, sourceObjIncarnation.lifeEndTime);
          }

          if (sourceObjIncarnation.location != currentObjIncarnation.location) {
            EffectUnitSetLocation(objId, sourceObjIncarnation.location);
          }

          if (sourceObjIncarnation.nextActionTime != currentObjIncarnation.nextActionTime) {
            EffectUnitSetNextActionTime(objId, sourceObjIncarnation.nextActionTime);
          }

          if (sourceObjIncarnation.hp != currentObjIncarnation.hp) {
            EffectUnitSetHp(objId, sourceObjIncarnation.hp);
          }

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsUnit[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIUnitComponentMutBunch) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsIUnitComponentMutBunch.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsIUnitComponentMutBunch[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsIUnitComponentMutBunch[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLightningChargedUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsLightningChargedUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsLightningChargedUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsLightningChargedUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLightningChargingUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsLightningChargingUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsLightningChargingUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsLightningChargingUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDoomedUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsDoomedUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsDoomedUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsDoomedUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTemporaryCloneImpulse) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsTemporaryCloneImpulse.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsTemporaryCloneImpulse[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsTemporaryCloneImpulse[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTemporaryCloneAICapabilityUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsTemporaryCloneAICapabilityUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsTemporaryCloneAICapabilityUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          if (sourceObjIncarnation.charges != currentObjIncarnation.charges) {
            EffectTemporaryCloneAICapabilityUCSetCharges(objId, sourceObjIncarnation.charges);
          }

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsTemporaryCloneAICapabilityUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSummonImpulse) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsSummonImpulse.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsSummonImpulse[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsSummonImpulse[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSummonAICapabilityUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsSummonAICapabilityUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsSummonAICapabilityUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          if (sourceObjIncarnation.charges != currentObjIncarnation.charges) {
            EffectSummonAICapabilityUCSetCharges(objId, sourceObjIncarnation.charges);
          }

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsSummonAICapabilityUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSorcerousUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsSorcerousUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsSorcerousUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          if (sourceObjIncarnation.mp != currentObjIncarnation.mp) {
            EffectSorcerousUCSetMp(objId, sourceObjIncarnation.mp);
          }

          if (sourceObjIncarnation.maxMp != currentObjIncarnation.maxMp) {
            EffectSorcerousUCSetMaxMp(objId, sourceObjIncarnation.maxMp);
          }

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsSorcerousUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBaseOffenseUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsBaseOffenseUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsBaseOffenseUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsBaseOffenseUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBaseMovementTimeUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsBaseMovementTimeUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsBaseMovementTimeUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsBaseMovementTimeUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBaseDefenseUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsBaseDefenseUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsBaseDefenseUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsBaseDefenseUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBaseCombatTimeUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsBaseCombatTimeUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsBaseCombatTimeUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsBaseCombatTimeUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMiredUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsMiredUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsMiredUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsMiredUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMireImpulse) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsMireImpulse.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsMireImpulse[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsMireImpulse[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsEvaporateImpulse) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsEvaporateImpulse.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsEvaporateImpulse[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsEvaporateImpulse[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTimeCloneAICapabilityUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsTimeCloneAICapabilityUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsTimeCloneAICapabilityUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsTimeCloneAICapabilityUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMoveImpulse) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsMoveImpulse.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsMoveImpulse[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsMoveImpulse[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKamikazeTargetTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsKamikazeTargetTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsKamikazeTargetTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsKamikazeTargetTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKamikazeJumpImpulse) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsKamikazeJumpImpulse.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsKamikazeJumpImpulse[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsKamikazeJumpImpulse[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKamikazeTargetImpulse) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsKamikazeTargetImpulse.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsKamikazeTargetImpulse[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsKamikazeTargetImpulse[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKamikazeAICapabilityUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsKamikazeAICapabilityUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsKamikazeAICapabilityUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          if (sourceObjIncarnation.targetByLocation != currentObjIncarnation.targetByLocation) {
            EffectKamikazeAICapabilityUCSetTargetByLocation(objId, new KamikazeTargetTTCStrongByLocationMutMap(this, sourceObjIncarnation.targetByLocation));
          }

          if (sourceObjIncarnation.targetLocationCenter != currentObjIncarnation.targetLocationCenter) {
            EffectKamikazeAICapabilityUCSetTargetLocationCenter(objId, sourceObjIncarnation.targetLocationCenter);
          }

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsKamikazeAICapabilityUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsInvincibilityUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsInvincibilityUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsInvincibilityUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsInvincibilityUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsGuardAICapabilityUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsGuardAICapabilityUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsGuardAICapabilityUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsGuardAICapabilityUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsNoImpulse) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsNoImpulse.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsNoImpulse[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsNoImpulse[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFireImpulse) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsFireImpulse.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsFireImpulse[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsFireImpulse[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDefyingUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsDefyingUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsDefyingUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsDefyingUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDefyImpulse) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsDefyImpulse.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsDefyImpulse[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsDefyImpulse[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCounteringUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsCounteringUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsCounteringUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsCounteringUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCounterImpulse) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsCounterImpulse.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsCounterImpulse[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsCounterImpulse[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsUnleashBideImpulse) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsUnleashBideImpulse.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsUnleashBideImpulse[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsUnleashBideImpulse[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsContinueBidingImpulse) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsContinueBidingImpulse.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsContinueBidingImpulse[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsContinueBidingImpulse[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsStartBidingImpulse) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsStartBidingImpulse.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsStartBidingImpulse[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsStartBidingImpulse[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBideAICapabilityUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsBideAICapabilityUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsBideAICapabilityUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          if (sourceObjIncarnation.charge != currentObjIncarnation.charge) {
            EffectBideAICapabilityUCSetCharge(objId, sourceObjIncarnation.charge);
          }

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsBideAICapabilityUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsAttackImpulse) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsAttackImpulse.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsAttackImpulse[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsAttackImpulse[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsPursueImpulse) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsPursueImpulse.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsPursueImpulse[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsPursueImpulse[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsKillDirective) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsKillDirective.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsKillDirective[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsKillDirective[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsAttackAICapabilityUC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsAttackAICapabilityUC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsAttackAICapabilityUC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          if (sourceObjIncarnation.killDirective != currentObjIncarnation.killDirective) {
            EffectAttackAICapabilityUCSetKillDirective(objId, new KillDirective(this, sourceObjIncarnation.killDirective));
          }

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsAttackAICapabilityUC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsWarperTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsWarperTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsWarperTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsWarperTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTimeAnchorTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsTimeAnchorTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsTimeAnchorTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsTimeAnchorTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTerrainTile) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsTerrainTile.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsTerrainTile[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          if (sourceObjIncarnation.elevation != currentObjIncarnation.elevation) {
            EffectTerrainTileSetElevation(objId, sourceObjIncarnation.elevation);
          }

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsTerrainTile[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsITerrainTileComponentMutBunch) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsITerrainTileComponentMutBunch.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsITerrainTileComponentMutBunch[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsITerrainTileComponentMutBunch[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTerrain) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsTerrain.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsTerrain[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          if (sourceObjIncarnation.pattern != currentObjIncarnation.pattern) {
            EffectTerrainSetPattern(objId, sourceObjIncarnation.pattern);
          }

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsTerrain[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSimplePresenceTriggerTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsSimplePresenceTriggerTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsSimplePresenceTriggerTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsSimplePresenceTriggerTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFireBombImpulse) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsFireBombImpulse.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsFireBombImpulse[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsFireBombImpulse[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFireBombTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsFireBombTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsFireBombTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          if (sourceObjIncarnation.turnsUntilExplosion != currentObjIncarnation.turnsUntilExplosion) {
            EffectFireBombTTCSetTurnsUntilExplosion(objId, sourceObjIncarnation.turnsUntilExplosion);
          }

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsFireBombTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMarkerTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsMarkerTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsMarkerTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsMarkerTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLevelLinkTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsLevelLinkTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsLevelLinkTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsLevelLinkTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMudTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsMudTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsMudTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsMudTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDirtTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsDirtTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsDirtTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsDirtTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsObsidianTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsObsidianTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsObsidianTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsObsidianTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDownStairsTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsDownStairsTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsDownStairsTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsDownStairsTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsUpStairsTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsUpStairsTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsUpStairsTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsUpStairsTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsWallTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsWallTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsWallTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsWallTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBloodTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsBloodTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsBloodTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsBloodTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsRocksTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsRocksTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsRocksTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsRocksTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTreeTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsTreeTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsTreeTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsTreeTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsWaterTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsWaterTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsWaterTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsWaterTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFloorTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsFloorTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsFloorTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsFloorTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCaveWallTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsCaveWallTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsCaveWallTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsCaveWallTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCaveTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsCaveTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsCaveTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsCaveTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFallsTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsFallsTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsFallsTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsFallsTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsFireTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsFireTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsFireTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsFireTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsObsidianFloorTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsObsidianFloorTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsObsidianFloorTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsObsidianFloorTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsMagmaTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsMagmaTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsMagmaTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsMagmaTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCliffTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsCliffTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsCliffTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsCliffTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsRavaNestTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsRavaNestTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsRavaNestTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsRavaNestTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCliffLandingTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsCliffLandingTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsCliffLandingTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsCliffLandingTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsStoneTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsStoneTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsStoneTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsStoneTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsGrassTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsGrassTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsGrassTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsGrassTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLevel) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsLevel.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsLevel[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          if (sourceObjIncarnation.controller != currentObjIncarnation.controller) {
            EffectLevelSetController(objId, GetILevelController(sourceObjIncarnation.controller));
          }

          if (sourceObjIncarnation.time != currentObjIncarnation.time) {
            EffectLevelSetTime(objId, sourceObjIncarnation.time);
          }

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsLevel[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSpeedRing) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsSpeedRing.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsSpeedRing[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsSpeedRing[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsManaPotion) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsManaPotion.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsManaPotion[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsManaPotion[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsWat) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsWat.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsWat[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsWat[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIImpulseStrongMutBunch) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsIImpulseStrongMutBunch.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsIImpulseStrongMutBunch[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsIImpulseStrongMutBunch[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIItemStrongMutBunch) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsIItemStrongMutBunch.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsIItemStrongMutBunch[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsIItemStrongMutBunch[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsItemTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsItemTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsItemTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsItemTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsHealthPotion) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsHealthPotion.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsHealthPotion[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsHealthPotion[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsGlaive) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsGlaive.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsGlaive[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsGlaive[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSlowRod) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsSlowRod.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsSlowRod[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsSlowRod[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBlastRod) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsBlastRod.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsBlastRod[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsBlastRod[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsArmor) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsArmor.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsArmor[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsArmor[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSquareCaveLevelController) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsSquareCaveLevelController.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsSquareCaveLevelController[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsSquareCaveLevelController[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsRavashrikeLevelController) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsRavashrikeLevelController.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsRavashrikeLevelController[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsRavashrikeLevelController[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsPentagonalCaveLevelController) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsPentagonalCaveLevelController.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsPentagonalCaveLevelController[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsPentagonalCaveLevelController[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIncendianFallsLevelLinkerTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCliffLevelController) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsCliffLevelController.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsCliffLevelController[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsCliffLevelController[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsPreGauntletLevelController) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsPreGauntletLevelController.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsPreGauntletLevelController[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsPreGauntletLevelController[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsGauntletLevelController) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsGauntletLevelController.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsGauntletLevelController[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsGauntletLevelController[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsExecutionState) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsExecutionState.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsExecutionState[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          if (sourceObjIncarnation.actingUnit != currentObjIncarnation.actingUnit) {
            EffectExecutionStateSetActingUnit(objId, new Unit(this, sourceObjIncarnation.actingUnit));
          }

          if (sourceObjIncarnation.actingUnitDidAction != currentObjIncarnation.actingUnitDidAction) {
            EffectExecutionStateSetActingUnitDidAction(objId, sourceObjIncarnation.actingUnitDidAction);
          }

          if (sourceObjIncarnation.remainingPreActingUnitComponents != currentObjIncarnation.remainingPreActingUnitComponents) {
            EffectExecutionStateSetRemainingPreActingUnitComponents(objId, new IPreActingUCWeakMutBunch(this, sourceObjIncarnation.remainingPreActingUnitComponents));
          }

          if (sourceObjIncarnation.remainingPostActingUnitComponents != currentObjIncarnation.remainingPostActingUnitComponents) {
            EffectExecutionStateSetRemainingPostActingUnitComponents(objId, new IPostActingUCWeakMutBunch(this, sourceObjIncarnation.remainingPostActingUnitComponents));
          }

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsExecutionState[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIPostActingUCWeakMutBunch) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsIPostActingUCWeakMutBunch.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsIPostActingUCWeakMutBunch[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsIPostActingUCWeakMutBunch[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsIPreActingUCWeakMutBunch) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsIPreActingUCWeakMutBunch.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsIPreActingUCWeakMutBunch[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsIPreActingUCWeakMutBunch[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsGame) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsGame.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsGame[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          if (sourceObjIncarnation.player != currentObjIncarnation.player) {
            EffectGameSetPlayer(objId, new Unit(this, sourceObjIncarnation.player));
          }

          if (sourceObjIncarnation.level != currentObjIncarnation.level) {
            EffectGameSetLevel(objId, new Level(this, sourceObjIncarnation.level));
          }

          if (sourceObjIncarnation.time != currentObjIncarnation.time) {
            EffectGameSetTime(objId, sourceObjIncarnation.time);
          }

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsGame[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsVolcaetusLevelController) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsVolcaetusLevelController.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsVolcaetusLevelController[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsVolcaetusLevelController[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTutorial2LevelController) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsTutorial2LevelController.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsTutorial2LevelController[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsTutorial2LevelController[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsTutorial1LevelController) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsTutorial1LevelController.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsTutorial1LevelController[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsTutorial1LevelController[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsRetreatLevelController) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsRetreatLevelController.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsRetreatLevelController[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsRetreatLevelController[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsSotaventoLevelController) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsSotaventoLevelController.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsSotaventoLevelController[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsSotaventoLevelController[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsNestLevelController) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsNestLevelController.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsNestLevelController[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsNestLevelController[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsLakeLevelController) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsLakeLevelController.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsLakeLevelController[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsLakeLevelController[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsEmberDeepLevelLinkerTTC) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsEmberDeepLevelLinkerTTC.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsEmberDeepLevelLinkerTTC[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsEmberDeepLevelLinkerTTC[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsDirtRoadLevelController) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsDirtRoadLevelController.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsDirtRoadLevelController[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsDirtRoadLevelController[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsCaveLevelController) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsCaveLevelController.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsCaveLevelController[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsCaveLevelController[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsBridgesLevelController) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsBridgesLevelController.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsBridgesLevelController[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsBridgesLevelController[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var sourceIdAndVersionAndObjIncarnation in sourceIncarnation.incarnationsAncientTownLevelController) {
      var objId = sourceIdAndVersionAndObjIncarnation.Key;
      var sourceVersionAndObjIncarnation = sourceIdAndVersionAndObjIncarnation.Value;
      var sourceVersion = sourceVersionAndObjIncarnation.version;
      var sourceObjIncarnation = sourceVersionAndObjIncarnation.incarnation;
      if (rootIncarnation.incarnationsAncientTownLevelController.ContainsKey(objId)) {
        // Compare everything that could possibly have changed.
        var currentVersionAndObjIncarnation = rootIncarnation.incarnationsAncientTownLevelController[objId];
        var currentVersion = currentVersionAndObjIncarnation.version;
        var currentObjIncarnation = currentVersionAndObjIncarnation.incarnation;
        if (currentVersion != sourceVersion) {

          // Swap out the underlying incarnation. The only visible effect this has is
          // changing the version number.
          
          rootIncarnation.incarnationsAncientTownLevelController[objId] = sourceVersionAndObjIncarnation;
          
        }
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<RandIncarnation>>(rootIncarnation.incarnationsRand)) {
      if (!sourceIncarnation.incarnationsRand.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectRandDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<HoldPositionImpulseIncarnation>>(rootIncarnation.incarnationsHoldPositionImpulse)) {
      if (!sourceIncarnation.incarnationsHoldPositionImpulse.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectHoldPositionImpulseDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<WanderAICapabilityUCIncarnation>>(rootIncarnation.incarnationsWanderAICapabilityUC)) {
      if (!sourceIncarnation.incarnationsWanderAICapabilityUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectWanderAICapabilityUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<TutorialDefyCounterUCIncarnation>>(rootIncarnation.incarnationsTutorialDefyCounterUC)) {
      if (!sourceIncarnation.incarnationsTutorialDefyCounterUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectTutorialDefyCounterUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<UnitIncarnation>>(rootIncarnation.incarnationsUnit)) {
      if (!sourceIncarnation.incarnationsUnit.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectUnitDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<IUnitComponentMutBunchIncarnation>>(rootIncarnation.incarnationsIUnitComponentMutBunch)) {
      if (!sourceIncarnation.incarnationsIUnitComponentMutBunch.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectIUnitComponentMutBunchDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<LightningChargedUCIncarnation>>(rootIncarnation.incarnationsLightningChargedUC)) {
      if (!sourceIncarnation.incarnationsLightningChargedUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectLightningChargedUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<LightningChargingUCIncarnation>>(rootIncarnation.incarnationsLightningChargingUC)) {
      if (!sourceIncarnation.incarnationsLightningChargingUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectLightningChargingUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<DoomedUCIncarnation>>(rootIncarnation.incarnationsDoomedUC)) {
      if (!sourceIncarnation.incarnationsDoomedUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectDoomedUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<TemporaryCloneImpulseIncarnation>>(rootIncarnation.incarnationsTemporaryCloneImpulse)) {
      if (!sourceIncarnation.incarnationsTemporaryCloneImpulse.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectTemporaryCloneImpulseDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<TemporaryCloneAICapabilityUCIncarnation>>(rootIncarnation.incarnationsTemporaryCloneAICapabilityUC)) {
      if (!sourceIncarnation.incarnationsTemporaryCloneAICapabilityUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectTemporaryCloneAICapabilityUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<SummonImpulseIncarnation>>(rootIncarnation.incarnationsSummonImpulse)) {
      if (!sourceIncarnation.incarnationsSummonImpulse.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectSummonImpulseDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<SummonAICapabilityUCIncarnation>>(rootIncarnation.incarnationsSummonAICapabilityUC)) {
      if (!sourceIncarnation.incarnationsSummonAICapabilityUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectSummonAICapabilityUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<SorcerousUCIncarnation>>(rootIncarnation.incarnationsSorcerousUC)) {
      if (!sourceIncarnation.incarnationsSorcerousUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectSorcerousUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<BaseOffenseUCIncarnation>>(rootIncarnation.incarnationsBaseOffenseUC)) {
      if (!sourceIncarnation.incarnationsBaseOffenseUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectBaseOffenseUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<BaseMovementTimeUCIncarnation>>(rootIncarnation.incarnationsBaseMovementTimeUC)) {
      if (!sourceIncarnation.incarnationsBaseMovementTimeUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectBaseMovementTimeUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<BaseDefenseUCIncarnation>>(rootIncarnation.incarnationsBaseDefenseUC)) {
      if (!sourceIncarnation.incarnationsBaseDefenseUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectBaseDefenseUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<BaseCombatTimeUCIncarnation>>(rootIncarnation.incarnationsBaseCombatTimeUC)) {
      if (!sourceIncarnation.incarnationsBaseCombatTimeUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectBaseCombatTimeUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<MiredUCIncarnation>>(rootIncarnation.incarnationsMiredUC)) {
      if (!sourceIncarnation.incarnationsMiredUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectMiredUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<MireImpulseIncarnation>>(rootIncarnation.incarnationsMireImpulse)) {
      if (!sourceIncarnation.incarnationsMireImpulse.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectMireImpulseDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<EvaporateImpulseIncarnation>>(rootIncarnation.incarnationsEvaporateImpulse)) {
      if (!sourceIncarnation.incarnationsEvaporateImpulse.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectEvaporateImpulseDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<TimeCloneAICapabilityUCIncarnation>>(rootIncarnation.incarnationsTimeCloneAICapabilityUC)) {
      if (!sourceIncarnation.incarnationsTimeCloneAICapabilityUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectTimeCloneAICapabilityUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<MoveImpulseIncarnation>>(rootIncarnation.incarnationsMoveImpulse)) {
      if (!sourceIncarnation.incarnationsMoveImpulse.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectMoveImpulseDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<KamikazeTargetTTCIncarnation>>(rootIncarnation.incarnationsKamikazeTargetTTC)) {
      if (!sourceIncarnation.incarnationsKamikazeTargetTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectKamikazeTargetTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<KamikazeJumpImpulseIncarnation>>(rootIncarnation.incarnationsKamikazeJumpImpulse)) {
      if (!sourceIncarnation.incarnationsKamikazeJumpImpulse.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectKamikazeJumpImpulseDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<KamikazeTargetImpulseIncarnation>>(rootIncarnation.incarnationsKamikazeTargetImpulse)) {
      if (!sourceIncarnation.incarnationsKamikazeTargetImpulse.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectKamikazeTargetImpulseDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<KamikazeAICapabilityUCIncarnation>>(rootIncarnation.incarnationsKamikazeAICapabilityUC)) {
      if (!sourceIncarnation.incarnationsKamikazeAICapabilityUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectKamikazeAICapabilityUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<InvincibilityUCIncarnation>>(rootIncarnation.incarnationsInvincibilityUC)) {
      if (!sourceIncarnation.incarnationsInvincibilityUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectInvincibilityUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<GuardAICapabilityUCIncarnation>>(rootIncarnation.incarnationsGuardAICapabilityUC)) {
      if (!sourceIncarnation.incarnationsGuardAICapabilityUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectGuardAICapabilityUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<NoImpulseIncarnation>>(rootIncarnation.incarnationsNoImpulse)) {
      if (!sourceIncarnation.incarnationsNoImpulse.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectNoImpulseDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<FireImpulseIncarnation>>(rootIncarnation.incarnationsFireImpulse)) {
      if (!sourceIncarnation.incarnationsFireImpulse.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectFireImpulseDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<DefyingUCIncarnation>>(rootIncarnation.incarnationsDefyingUC)) {
      if (!sourceIncarnation.incarnationsDefyingUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectDefyingUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<DefyImpulseIncarnation>>(rootIncarnation.incarnationsDefyImpulse)) {
      if (!sourceIncarnation.incarnationsDefyImpulse.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectDefyImpulseDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<CounteringUCIncarnation>>(rootIncarnation.incarnationsCounteringUC)) {
      if (!sourceIncarnation.incarnationsCounteringUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectCounteringUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<CounterImpulseIncarnation>>(rootIncarnation.incarnationsCounterImpulse)) {
      if (!sourceIncarnation.incarnationsCounterImpulse.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectCounterImpulseDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<UnleashBideImpulseIncarnation>>(rootIncarnation.incarnationsUnleashBideImpulse)) {
      if (!sourceIncarnation.incarnationsUnleashBideImpulse.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectUnleashBideImpulseDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<ContinueBidingImpulseIncarnation>>(rootIncarnation.incarnationsContinueBidingImpulse)) {
      if (!sourceIncarnation.incarnationsContinueBidingImpulse.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectContinueBidingImpulseDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<StartBidingImpulseIncarnation>>(rootIncarnation.incarnationsStartBidingImpulse)) {
      if (!sourceIncarnation.incarnationsStartBidingImpulse.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectStartBidingImpulseDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<BideAICapabilityUCIncarnation>>(rootIncarnation.incarnationsBideAICapabilityUC)) {
      if (!sourceIncarnation.incarnationsBideAICapabilityUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectBideAICapabilityUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<AttackImpulseIncarnation>>(rootIncarnation.incarnationsAttackImpulse)) {
      if (!sourceIncarnation.incarnationsAttackImpulse.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectAttackImpulseDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<PursueImpulseIncarnation>>(rootIncarnation.incarnationsPursueImpulse)) {
      if (!sourceIncarnation.incarnationsPursueImpulse.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectPursueImpulseDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<KillDirectiveIncarnation>>(rootIncarnation.incarnationsKillDirective)) {
      if (!sourceIncarnation.incarnationsKillDirective.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectKillDirectiveDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<AttackAICapabilityUCIncarnation>>(rootIncarnation.incarnationsAttackAICapabilityUC)) {
      if (!sourceIncarnation.incarnationsAttackAICapabilityUC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectAttackAICapabilityUCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<WarperTTCIncarnation>>(rootIncarnation.incarnationsWarperTTC)) {
      if (!sourceIncarnation.incarnationsWarperTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectWarperTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<TimeAnchorTTCIncarnation>>(rootIncarnation.incarnationsTimeAnchorTTC)) {
      if (!sourceIncarnation.incarnationsTimeAnchorTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectTimeAnchorTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<TerrainTileIncarnation>>(rootIncarnation.incarnationsTerrainTile)) {
      if (!sourceIncarnation.incarnationsTerrainTile.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectTerrainTileDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<ITerrainTileComponentMutBunchIncarnation>>(rootIncarnation.incarnationsITerrainTileComponentMutBunch)) {
      if (!sourceIncarnation.incarnationsITerrainTileComponentMutBunch.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectITerrainTileComponentMutBunchDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<TerrainIncarnation>>(rootIncarnation.incarnationsTerrain)) {
      if (!sourceIncarnation.incarnationsTerrain.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectTerrainDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<SimplePresenceTriggerTTCIncarnation>>(rootIncarnation.incarnationsSimplePresenceTriggerTTC)) {
      if (!sourceIncarnation.incarnationsSimplePresenceTriggerTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectSimplePresenceTriggerTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<FireBombImpulseIncarnation>>(rootIncarnation.incarnationsFireBombImpulse)) {
      if (!sourceIncarnation.incarnationsFireBombImpulse.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectFireBombImpulseDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<FireBombTTCIncarnation>>(rootIncarnation.incarnationsFireBombTTC)) {
      if (!sourceIncarnation.incarnationsFireBombTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectFireBombTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<MarkerTTCIncarnation>>(rootIncarnation.incarnationsMarkerTTC)) {
      if (!sourceIncarnation.incarnationsMarkerTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectMarkerTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<LevelLinkTTCIncarnation>>(rootIncarnation.incarnationsLevelLinkTTC)) {
      if (!sourceIncarnation.incarnationsLevelLinkTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectLevelLinkTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<MudTTCIncarnation>>(rootIncarnation.incarnationsMudTTC)) {
      if (!sourceIncarnation.incarnationsMudTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectMudTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<DirtTTCIncarnation>>(rootIncarnation.incarnationsDirtTTC)) {
      if (!sourceIncarnation.incarnationsDirtTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectDirtTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<ObsidianTTCIncarnation>>(rootIncarnation.incarnationsObsidianTTC)) {
      if (!sourceIncarnation.incarnationsObsidianTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectObsidianTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<DownStairsTTCIncarnation>>(rootIncarnation.incarnationsDownStairsTTC)) {
      if (!sourceIncarnation.incarnationsDownStairsTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectDownStairsTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<UpStairsTTCIncarnation>>(rootIncarnation.incarnationsUpStairsTTC)) {
      if (!sourceIncarnation.incarnationsUpStairsTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectUpStairsTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<WallTTCIncarnation>>(rootIncarnation.incarnationsWallTTC)) {
      if (!sourceIncarnation.incarnationsWallTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectWallTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<BloodTTCIncarnation>>(rootIncarnation.incarnationsBloodTTC)) {
      if (!sourceIncarnation.incarnationsBloodTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectBloodTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<RocksTTCIncarnation>>(rootIncarnation.incarnationsRocksTTC)) {
      if (!sourceIncarnation.incarnationsRocksTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectRocksTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<TreeTTCIncarnation>>(rootIncarnation.incarnationsTreeTTC)) {
      if (!sourceIncarnation.incarnationsTreeTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectTreeTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<WaterTTCIncarnation>>(rootIncarnation.incarnationsWaterTTC)) {
      if (!sourceIncarnation.incarnationsWaterTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectWaterTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<FloorTTCIncarnation>>(rootIncarnation.incarnationsFloorTTC)) {
      if (!sourceIncarnation.incarnationsFloorTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectFloorTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<CaveWallTTCIncarnation>>(rootIncarnation.incarnationsCaveWallTTC)) {
      if (!sourceIncarnation.incarnationsCaveWallTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectCaveWallTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<CaveTTCIncarnation>>(rootIncarnation.incarnationsCaveTTC)) {
      if (!sourceIncarnation.incarnationsCaveTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectCaveTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<FallsTTCIncarnation>>(rootIncarnation.incarnationsFallsTTC)) {
      if (!sourceIncarnation.incarnationsFallsTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectFallsTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<FireTTCIncarnation>>(rootIncarnation.incarnationsFireTTC)) {
      if (!sourceIncarnation.incarnationsFireTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectFireTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<ObsidianFloorTTCIncarnation>>(rootIncarnation.incarnationsObsidianFloorTTC)) {
      if (!sourceIncarnation.incarnationsObsidianFloorTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectObsidianFloorTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<MagmaTTCIncarnation>>(rootIncarnation.incarnationsMagmaTTC)) {
      if (!sourceIncarnation.incarnationsMagmaTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectMagmaTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<CliffTTCIncarnation>>(rootIncarnation.incarnationsCliffTTC)) {
      if (!sourceIncarnation.incarnationsCliffTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectCliffTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<RavaNestTTCIncarnation>>(rootIncarnation.incarnationsRavaNestTTC)) {
      if (!sourceIncarnation.incarnationsRavaNestTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectRavaNestTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<CliffLandingTTCIncarnation>>(rootIncarnation.incarnationsCliffLandingTTC)) {
      if (!sourceIncarnation.incarnationsCliffLandingTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectCliffLandingTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<StoneTTCIncarnation>>(rootIncarnation.incarnationsStoneTTC)) {
      if (!sourceIncarnation.incarnationsStoneTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectStoneTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<GrassTTCIncarnation>>(rootIncarnation.incarnationsGrassTTC)) {
      if (!sourceIncarnation.incarnationsGrassTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectGrassTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<LevelIncarnation>>(rootIncarnation.incarnationsLevel)) {
      if (!sourceIncarnation.incarnationsLevel.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectLevelDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<SpeedRingIncarnation>>(rootIncarnation.incarnationsSpeedRing)) {
      if (!sourceIncarnation.incarnationsSpeedRing.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectSpeedRingDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<ManaPotionIncarnation>>(rootIncarnation.incarnationsManaPotion)) {
      if (!sourceIncarnation.incarnationsManaPotion.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectManaPotionDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<WatIncarnation>>(rootIncarnation.incarnationsWat)) {
      if (!sourceIncarnation.incarnationsWat.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectWatDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<IImpulseStrongMutBunchIncarnation>>(rootIncarnation.incarnationsIImpulseStrongMutBunch)) {
      if (!sourceIncarnation.incarnationsIImpulseStrongMutBunch.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectIImpulseStrongMutBunchDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<IItemStrongMutBunchIncarnation>>(rootIncarnation.incarnationsIItemStrongMutBunch)) {
      if (!sourceIncarnation.incarnationsIItemStrongMutBunch.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectIItemStrongMutBunchDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<ItemTTCIncarnation>>(rootIncarnation.incarnationsItemTTC)) {
      if (!sourceIncarnation.incarnationsItemTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectItemTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<HealthPotionIncarnation>>(rootIncarnation.incarnationsHealthPotion)) {
      if (!sourceIncarnation.incarnationsHealthPotion.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectHealthPotionDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<GlaiveIncarnation>>(rootIncarnation.incarnationsGlaive)) {
      if (!sourceIncarnation.incarnationsGlaive.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectGlaiveDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<SlowRodIncarnation>>(rootIncarnation.incarnationsSlowRod)) {
      if (!sourceIncarnation.incarnationsSlowRod.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectSlowRodDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<BlastRodIncarnation>>(rootIncarnation.incarnationsBlastRod)) {
      if (!sourceIncarnation.incarnationsBlastRod.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectBlastRodDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<ArmorIncarnation>>(rootIncarnation.incarnationsArmor)) {
      if (!sourceIncarnation.incarnationsArmor.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectArmorDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<SquareCaveLevelControllerIncarnation>>(rootIncarnation.incarnationsSquareCaveLevelController)) {
      if (!sourceIncarnation.incarnationsSquareCaveLevelController.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectSquareCaveLevelControllerDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<RavashrikeLevelControllerIncarnation>>(rootIncarnation.incarnationsRavashrikeLevelController)) {
      if (!sourceIncarnation.incarnationsRavashrikeLevelController.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectRavashrikeLevelControllerDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<PentagonalCaveLevelControllerIncarnation>>(rootIncarnation.incarnationsPentagonalCaveLevelController)) {
      if (!sourceIncarnation.incarnationsPentagonalCaveLevelController.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectPentagonalCaveLevelControllerDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<IncendianFallsLevelLinkerTTCIncarnation>>(rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC)) {
      if (!sourceIncarnation.incarnationsIncendianFallsLevelLinkerTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectIncendianFallsLevelLinkerTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<CliffLevelControllerIncarnation>>(rootIncarnation.incarnationsCliffLevelController)) {
      if (!sourceIncarnation.incarnationsCliffLevelController.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectCliffLevelControllerDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<PreGauntletLevelControllerIncarnation>>(rootIncarnation.incarnationsPreGauntletLevelController)) {
      if (!sourceIncarnation.incarnationsPreGauntletLevelController.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectPreGauntletLevelControllerDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<GauntletLevelControllerIncarnation>>(rootIncarnation.incarnationsGauntletLevelController)) {
      if (!sourceIncarnation.incarnationsGauntletLevelController.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectGauntletLevelControllerDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<ExecutionStateIncarnation>>(rootIncarnation.incarnationsExecutionState)) {
      if (!sourceIncarnation.incarnationsExecutionState.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectExecutionStateDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<IPostActingUCWeakMutBunchIncarnation>>(rootIncarnation.incarnationsIPostActingUCWeakMutBunch)) {
      if (!sourceIncarnation.incarnationsIPostActingUCWeakMutBunch.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectIPostActingUCWeakMutBunchDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<IPreActingUCWeakMutBunchIncarnation>>(rootIncarnation.incarnationsIPreActingUCWeakMutBunch)) {
      if (!sourceIncarnation.incarnationsIPreActingUCWeakMutBunch.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectIPreActingUCWeakMutBunchDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<GameIncarnation>>(rootIncarnation.incarnationsGame)) {
      if (!sourceIncarnation.incarnationsGame.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectGameDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<VolcaetusLevelControllerIncarnation>>(rootIncarnation.incarnationsVolcaetusLevelController)) {
      if (!sourceIncarnation.incarnationsVolcaetusLevelController.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectVolcaetusLevelControllerDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<Tutorial2LevelControllerIncarnation>>(rootIncarnation.incarnationsTutorial2LevelController)) {
      if (!sourceIncarnation.incarnationsTutorial2LevelController.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectTutorial2LevelControllerDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<Tutorial1LevelControllerIncarnation>>(rootIncarnation.incarnationsTutorial1LevelController)) {
      if (!sourceIncarnation.incarnationsTutorial1LevelController.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectTutorial1LevelControllerDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<RetreatLevelControllerIncarnation>>(rootIncarnation.incarnationsRetreatLevelController)) {
      if (!sourceIncarnation.incarnationsRetreatLevelController.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectRetreatLevelControllerDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<SotaventoLevelControllerIncarnation>>(rootIncarnation.incarnationsSotaventoLevelController)) {
      if (!sourceIncarnation.incarnationsSotaventoLevelController.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectSotaventoLevelControllerDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<NestLevelControllerIncarnation>>(rootIncarnation.incarnationsNestLevelController)) {
      if (!sourceIncarnation.incarnationsNestLevelController.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectNestLevelControllerDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<LakeLevelControllerIncarnation>>(rootIncarnation.incarnationsLakeLevelController)) {
      if (!sourceIncarnation.incarnationsLakeLevelController.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectLakeLevelControllerDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<EmberDeepLevelLinkerTTCIncarnation>>(rootIncarnation.incarnationsEmberDeepLevelLinkerTTC)) {
      if (!sourceIncarnation.incarnationsEmberDeepLevelLinkerTTC.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectEmberDeepLevelLinkerTTCDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<DirtRoadLevelControllerIncarnation>>(rootIncarnation.incarnationsDirtRoadLevelController)) {
      if (!sourceIncarnation.incarnationsDirtRoadLevelController.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectDirtRoadLevelControllerDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<CaveLevelControllerIncarnation>>(rootIncarnation.incarnationsCaveLevelController)) {
      if (!sourceIncarnation.incarnationsCaveLevelController.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectCaveLevelControllerDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<BridgesLevelControllerIncarnation>>(rootIncarnation.incarnationsBridgesLevelController)) {
      if (!sourceIncarnation.incarnationsBridgesLevelController.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectBridgesLevelControllerDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<AncientTownLevelControllerIncarnation>>(rootIncarnation.incarnationsAncientTownLevelController)) {
      if (!sourceIncarnation.incarnationsAncientTownLevelController.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectAncientTownLevelControllerDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<IGameEventMutListIncarnation>>(rootIncarnation.incarnationsIGameEventMutList)) {
      if (!sourceIncarnation.incarnationsIGameEventMutList.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectIGameEventMutListDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<LocationMutListIncarnation>>(rootIncarnation.incarnationsLocationMutList)) {
      if (!sourceIncarnation.incarnationsLocationMutList.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectLocationMutListDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<IRequestMutListIncarnation>>(rootIncarnation.incarnationsIRequestMutList)) {
      if (!sourceIncarnation.incarnationsIRequestMutList.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectIRequestMutListDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<IUnitEventMutListIncarnation>>(rootIncarnation.incarnationsIUnitEventMutList)) {
      if (!sourceIncarnation.incarnationsIUnitEventMutList.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectIUnitEventMutListDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<LevelMutSetIncarnation>>(rootIncarnation.incarnationsLevelMutSet)) {
      if (!sourceIncarnation.incarnationsLevelMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectLevelMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<DoomedUCWeakMutSetIncarnation>>(rootIncarnation.incarnationsDoomedUCWeakMutSet)) {
      if (!sourceIncarnation.incarnationsDoomedUCWeakMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectDoomedUCWeakMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<MiredUCWeakMutSetIncarnation>>(rootIncarnation.incarnationsMiredUCWeakMutSet)) {
      if (!sourceIncarnation.incarnationsMiredUCWeakMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectMiredUCWeakMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<InvincibilityUCWeakMutSetIncarnation>>(rootIncarnation.incarnationsInvincibilityUCWeakMutSet)) {
      if (!sourceIncarnation.incarnationsInvincibilityUCWeakMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectInvincibilityUCWeakMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<DefyingUCWeakMutSetIncarnation>>(rootIncarnation.incarnationsDefyingUCWeakMutSet)) {
      if (!sourceIncarnation.incarnationsDefyingUCWeakMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectDefyingUCWeakMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<CounteringUCWeakMutSetIncarnation>>(rootIncarnation.incarnationsCounteringUCWeakMutSet)) {
      if (!sourceIncarnation.incarnationsCounteringUCWeakMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectCounteringUCWeakMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<AttackAICapabilityUCWeakMutSetIncarnation>>(rootIncarnation.incarnationsAttackAICapabilityUCWeakMutSet)) {
      if (!sourceIncarnation.incarnationsAttackAICapabilityUCWeakMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectAttackAICapabilityUCWeakMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<LightningChargedUCWeakMutSetIncarnation>>(rootIncarnation.incarnationsLightningChargedUCWeakMutSet)) {
      if (!sourceIncarnation.incarnationsLightningChargedUCWeakMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectLightningChargedUCWeakMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<TimeCloneAICapabilityUCWeakMutSetIncarnation>>(rootIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet)) {
      if (!sourceIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectTimeCloneAICapabilityUCWeakMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<ManaPotionStrongMutSetIncarnation>>(rootIncarnation.incarnationsManaPotionStrongMutSet)) {
      if (!sourceIncarnation.incarnationsManaPotionStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectManaPotionStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<HealthPotionStrongMutSetIncarnation>>(rootIncarnation.incarnationsHealthPotionStrongMutSet)) {
      if (!sourceIncarnation.incarnationsHealthPotionStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectHealthPotionStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<SpeedRingStrongMutSetIncarnation>>(rootIncarnation.incarnationsSpeedRingStrongMutSet)) {
      if (!sourceIncarnation.incarnationsSpeedRingStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectSpeedRingStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<GlaiveStrongMutSetIncarnation>>(rootIncarnation.incarnationsGlaiveStrongMutSet)) {
      if (!sourceIncarnation.incarnationsGlaiveStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectGlaiveStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<SlowRodStrongMutSetIncarnation>>(rootIncarnation.incarnationsSlowRodStrongMutSet)) {
      if (!sourceIncarnation.incarnationsSlowRodStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectSlowRodStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<BlastRodStrongMutSetIncarnation>>(rootIncarnation.incarnationsBlastRodStrongMutSet)) {
      if (!sourceIncarnation.incarnationsBlastRodStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectBlastRodStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<ArmorStrongMutSetIncarnation>>(rootIncarnation.incarnationsArmorStrongMutSet)) {
      if (!sourceIncarnation.incarnationsArmorStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectArmorStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<HoldPositionImpulseStrongMutSetIncarnation>>(rootIncarnation.incarnationsHoldPositionImpulseStrongMutSet)) {
      if (!sourceIncarnation.incarnationsHoldPositionImpulseStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectHoldPositionImpulseStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<TemporaryCloneImpulseStrongMutSetIncarnation>>(rootIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet)) {
      if (!sourceIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectTemporaryCloneImpulseStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<SummonImpulseStrongMutSetIncarnation>>(rootIncarnation.incarnationsSummonImpulseStrongMutSet)) {
      if (!sourceIncarnation.incarnationsSummonImpulseStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectSummonImpulseStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<MireImpulseStrongMutSetIncarnation>>(rootIncarnation.incarnationsMireImpulseStrongMutSet)) {
      if (!sourceIncarnation.incarnationsMireImpulseStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectMireImpulseStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<EvaporateImpulseStrongMutSetIncarnation>>(rootIncarnation.incarnationsEvaporateImpulseStrongMutSet)) {
      if (!sourceIncarnation.incarnationsEvaporateImpulseStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectEvaporateImpulseStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<MoveImpulseStrongMutSetIncarnation>>(rootIncarnation.incarnationsMoveImpulseStrongMutSet)) {
      if (!sourceIncarnation.incarnationsMoveImpulseStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectMoveImpulseStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<KamikazeJumpImpulseStrongMutSetIncarnation>>(rootIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet)) {
      if (!sourceIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectKamikazeJumpImpulseStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<KamikazeTargetImpulseStrongMutSetIncarnation>>(rootIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet)) {
      if (!sourceIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectKamikazeTargetImpulseStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<NoImpulseStrongMutSetIncarnation>>(rootIncarnation.incarnationsNoImpulseStrongMutSet)) {
      if (!sourceIncarnation.incarnationsNoImpulseStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectNoImpulseStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<FireImpulseStrongMutSetIncarnation>>(rootIncarnation.incarnationsFireImpulseStrongMutSet)) {
      if (!sourceIncarnation.incarnationsFireImpulseStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectFireImpulseStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<DefyImpulseStrongMutSetIncarnation>>(rootIncarnation.incarnationsDefyImpulseStrongMutSet)) {
      if (!sourceIncarnation.incarnationsDefyImpulseStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectDefyImpulseStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<CounterImpulseStrongMutSetIncarnation>>(rootIncarnation.incarnationsCounterImpulseStrongMutSet)) {
      if (!sourceIncarnation.incarnationsCounterImpulseStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectCounterImpulseStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<UnleashBideImpulseStrongMutSetIncarnation>>(rootIncarnation.incarnationsUnleashBideImpulseStrongMutSet)) {
      if (!sourceIncarnation.incarnationsUnleashBideImpulseStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectUnleashBideImpulseStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<ContinueBidingImpulseStrongMutSetIncarnation>>(rootIncarnation.incarnationsContinueBidingImpulseStrongMutSet)) {
      if (!sourceIncarnation.incarnationsContinueBidingImpulseStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectContinueBidingImpulseStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<StartBidingImpulseStrongMutSetIncarnation>>(rootIncarnation.incarnationsStartBidingImpulseStrongMutSet)) {
      if (!sourceIncarnation.incarnationsStartBidingImpulseStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectStartBidingImpulseStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<AttackImpulseStrongMutSetIncarnation>>(rootIncarnation.incarnationsAttackImpulseStrongMutSet)) {
      if (!sourceIncarnation.incarnationsAttackImpulseStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectAttackImpulseStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<PursueImpulseStrongMutSetIncarnation>>(rootIncarnation.incarnationsPursueImpulseStrongMutSet)) {
      if (!sourceIncarnation.incarnationsPursueImpulseStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectPursueImpulseStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<FireBombImpulseStrongMutSetIncarnation>>(rootIncarnation.incarnationsFireBombImpulseStrongMutSet)) {
      if (!sourceIncarnation.incarnationsFireBombImpulseStrongMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectFireBombImpulseStrongMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<UnitMutSetIncarnation>>(rootIncarnation.incarnationsUnitMutSet)) {
      if (!sourceIncarnation.incarnationsUnitMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectUnitMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<SimplePresenceTriggerTTCMutSetIncarnation>>(rootIncarnation.incarnationsSimplePresenceTriggerTTCMutSet)) {
      if (!sourceIncarnation.incarnationsSimplePresenceTriggerTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectSimplePresenceTriggerTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<ItemTTCMutSetIncarnation>>(rootIncarnation.incarnationsItemTTCMutSet)) {
      if (!sourceIncarnation.incarnationsItemTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectItemTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<KamikazeTargetTTCMutSetIncarnation>>(rootIncarnation.incarnationsKamikazeTargetTTCMutSet)) {
      if (!sourceIncarnation.incarnationsKamikazeTargetTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectKamikazeTargetTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<WarperTTCMutSetIncarnation>>(rootIncarnation.incarnationsWarperTTCMutSet)) {
      if (!sourceIncarnation.incarnationsWarperTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectWarperTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<TimeAnchorTTCMutSetIncarnation>>(rootIncarnation.incarnationsTimeAnchorTTCMutSet)) {
      if (!sourceIncarnation.incarnationsTimeAnchorTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectTimeAnchorTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<FireBombTTCMutSetIncarnation>>(rootIncarnation.incarnationsFireBombTTCMutSet)) {
      if (!sourceIncarnation.incarnationsFireBombTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectFireBombTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<MarkerTTCMutSetIncarnation>>(rootIncarnation.incarnationsMarkerTTCMutSet)) {
      if (!sourceIncarnation.incarnationsMarkerTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectMarkerTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<LevelLinkTTCMutSetIncarnation>>(rootIncarnation.incarnationsLevelLinkTTCMutSet)) {
      if (!sourceIncarnation.incarnationsLevelLinkTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectLevelLinkTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<MudTTCMutSetIncarnation>>(rootIncarnation.incarnationsMudTTCMutSet)) {
      if (!sourceIncarnation.incarnationsMudTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectMudTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<DirtTTCMutSetIncarnation>>(rootIncarnation.incarnationsDirtTTCMutSet)) {
      if (!sourceIncarnation.incarnationsDirtTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectDirtTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<ObsidianTTCMutSetIncarnation>>(rootIncarnation.incarnationsObsidianTTCMutSet)) {
      if (!sourceIncarnation.incarnationsObsidianTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectObsidianTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<DownStairsTTCMutSetIncarnation>>(rootIncarnation.incarnationsDownStairsTTCMutSet)) {
      if (!sourceIncarnation.incarnationsDownStairsTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectDownStairsTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<UpStairsTTCMutSetIncarnation>>(rootIncarnation.incarnationsUpStairsTTCMutSet)) {
      if (!sourceIncarnation.incarnationsUpStairsTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectUpStairsTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<WallTTCMutSetIncarnation>>(rootIncarnation.incarnationsWallTTCMutSet)) {
      if (!sourceIncarnation.incarnationsWallTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectWallTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<BloodTTCMutSetIncarnation>>(rootIncarnation.incarnationsBloodTTCMutSet)) {
      if (!sourceIncarnation.incarnationsBloodTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectBloodTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<RocksTTCMutSetIncarnation>>(rootIncarnation.incarnationsRocksTTCMutSet)) {
      if (!sourceIncarnation.incarnationsRocksTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectRocksTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<TreeTTCMutSetIncarnation>>(rootIncarnation.incarnationsTreeTTCMutSet)) {
      if (!sourceIncarnation.incarnationsTreeTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectTreeTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<WaterTTCMutSetIncarnation>>(rootIncarnation.incarnationsWaterTTCMutSet)) {
      if (!sourceIncarnation.incarnationsWaterTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectWaterTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<FloorTTCMutSetIncarnation>>(rootIncarnation.incarnationsFloorTTCMutSet)) {
      if (!sourceIncarnation.incarnationsFloorTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectFloorTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<CaveWallTTCMutSetIncarnation>>(rootIncarnation.incarnationsCaveWallTTCMutSet)) {
      if (!sourceIncarnation.incarnationsCaveWallTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectCaveWallTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<CaveTTCMutSetIncarnation>>(rootIncarnation.incarnationsCaveTTCMutSet)) {
      if (!sourceIncarnation.incarnationsCaveTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectCaveTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<FallsTTCMutSetIncarnation>>(rootIncarnation.incarnationsFallsTTCMutSet)) {
      if (!sourceIncarnation.incarnationsFallsTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectFallsTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<FireTTCMutSetIncarnation>>(rootIncarnation.incarnationsFireTTCMutSet)) {
      if (!sourceIncarnation.incarnationsFireTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectFireTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<ObsidianFloorTTCMutSetIncarnation>>(rootIncarnation.incarnationsObsidianFloorTTCMutSet)) {
      if (!sourceIncarnation.incarnationsObsidianFloorTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectObsidianFloorTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<MagmaTTCMutSetIncarnation>>(rootIncarnation.incarnationsMagmaTTCMutSet)) {
      if (!sourceIncarnation.incarnationsMagmaTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectMagmaTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<CliffTTCMutSetIncarnation>>(rootIncarnation.incarnationsCliffTTCMutSet)) {
      if (!sourceIncarnation.incarnationsCliffTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectCliffTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<RavaNestTTCMutSetIncarnation>>(rootIncarnation.incarnationsRavaNestTTCMutSet)) {
      if (!sourceIncarnation.incarnationsRavaNestTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectRavaNestTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<CliffLandingTTCMutSetIncarnation>>(rootIncarnation.incarnationsCliffLandingTTCMutSet)) {
      if (!sourceIncarnation.incarnationsCliffLandingTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectCliffLandingTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<StoneTTCMutSetIncarnation>>(rootIncarnation.incarnationsStoneTTCMutSet)) {
      if (!sourceIncarnation.incarnationsStoneTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectStoneTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<GrassTTCMutSetIncarnation>>(rootIncarnation.incarnationsGrassTTCMutSet)) {
      if (!sourceIncarnation.incarnationsGrassTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectGrassTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<IncendianFallsLevelLinkerTTCMutSetIncarnation>>(rootIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet)) {
      if (!sourceIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectIncendianFallsLevelLinkerTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<EmberDeepLevelLinkerTTCMutSetIncarnation>>(rootIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet)) {
      if (!sourceIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectEmberDeepLevelLinkerTTCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<TutorialDefyCounterUCMutSetIncarnation>>(rootIncarnation.incarnationsTutorialDefyCounterUCMutSet)) {
      if (!sourceIncarnation.incarnationsTutorialDefyCounterUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectTutorialDefyCounterUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<LightningChargingUCMutSetIncarnation>>(rootIncarnation.incarnationsLightningChargingUCMutSet)) {
      if (!sourceIncarnation.incarnationsLightningChargingUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectLightningChargingUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<WanderAICapabilityUCMutSetIncarnation>>(rootIncarnation.incarnationsWanderAICapabilityUCMutSet)) {
      if (!sourceIncarnation.incarnationsWanderAICapabilityUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectWanderAICapabilityUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<TemporaryCloneAICapabilityUCMutSetIncarnation>>(rootIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet)) {
      if (!sourceIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectTemporaryCloneAICapabilityUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<SummonAICapabilityUCMutSetIncarnation>>(rootIncarnation.incarnationsSummonAICapabilityUCMutSet)) {
      if (!sourceIncarnation.incarnationsSummonAICapabilityUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectSummonAICapabilityUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<KamikazeAICapabilityUCMutSetIncarnation>>(rootIncarnation.incarnationsKamikazeAICapabilityUCMutSet)) {
      if (!sourceIncarnation.incarnationsKamikazeAICapabilityUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectKamikazeAICapabilityUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<GuardAICapabilityUCMutSetIncarnation>>(rootIncarnation.incarnationsGuardAICapabilityUCMutSet)) {
      if (!sourceIncarnation.incarnationsGuardAICapabilityUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectGuardAICapabilityUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<TimeCloneAICapabilityUCMutSetIncarnation>>(rootIncarnation.incarnationsTimeCloneAICapabilityUCMutSet)) {
      if (!sourceIncarnation.incarnationsTimeCloneAICapabilityUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectTimeCloneAICapabilityUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<DoomedUCMutSetIncarnation>>(rootIncarnation.incarnationsDoomedUCMutSet)) {
      if (!sourceIncarnation.incarnationsDoomedUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectDoomedUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<MiredUCMutSetIncarnation>>(rootIncarnation.incarnationsMiredUCMutSet)) {
      if (!sourceIncarnation.incarnationsMiredUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectMiredUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<AttackAICapabilityUCMutSetIncarnation>>(rootIncarnation.incarnationsAttackAICapabilityUCMutSet)) {
      if (!sourceIncarnation.incarnationsAttackAICapabilityUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectAttackAICapabilityUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<CounteringUCMutSetIncarnation>>(rootIncarnation.incarnationsCounteringUCMutSet)) {
      if (!sourceIncarnation.incarnationsCounteringUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectCounteringUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<LightningChargedUCMutSetIncarnation>>(rootIncarnation.incarnationsLightningChargedUCMutSet)) {
      if (!sourceIncarnation.incarnationsLightningChargedUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectLightningChargedUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<InvincibilityUCMutSetIncarnation>>(rootIncarnation.incarnationsInvincibilityUCMutSet)) {
      if (!sourceIncarnation.incarnationsInvincibilityUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectInvincibilityUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<DefyingUCMutSetIncarnation>>(rootIncarnation.incarnationsDefyingUCMutSet)) {
      if (!sourceIncarnation.incarnationsDefyingUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectDefyingUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<BideAICapabilityUCMutSetIncarnation>>(rootIncarnation.incarnationsBideAICapabilityUCMutSet)) {
      if (!sourceIncarnation.incarnationsBideAICapabilityUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectBideAICapabilityUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<BaseMovementTimeUCMutSetIncarnation>>(rootIncarnation.incarnationsBaseMovementTimeUCMutSet)) {
      if (!sourceIncarnation.incarnationsBaseMovementTimeUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectBaseMovementTimeUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<BaseCombatTimeUCMutSetIncarnation>>(rootIncarnation.incarnationsBaseCombatTimeUCMutSet)) {
      if (!sourceIncarnation.incarnationsBaseCombatTimeUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectBaseCombatTimeUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<ManaPotionMutSetIncarnation>>(rootIncarnation.incarnationsManaPotionMutSet)) {
      if (!sourceIncarnation.incarnationsManaPotionMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectManaPotionMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<HealthPotionMutSetIncarnation>>(rootIncarnation.incarnationsHealthPotionMutSet)) {
      if (!sourceIncarnation.incarnationsHealthPotionMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectHealthPotionMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<SpeedRingMutSetIncarnation>>(rootIncarnation.incarnationsSpeedRingMutSet)) {
      if (!sourceIncarnation.incarnationsSpeedRingMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectSpeedRingMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<GlaiveMutSetIncarnation>>(rootIncarnation.incarnationsGlaiveMutSet)) {
      if (!sourceIncarnation.incarnationsGlaiveMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectGlaiveMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<SlowRodMutSetIncarnation>>(rootIncarnation.incarnationsSlowRodMutSet)) {
      if (!sourceIncarnation.incarnationsSlowRodMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectSlowRodMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<BlastRodMutSetIncarnation>>(rootIncarnation.incarnationsBlastRodMutSet)) {
      if (!sourceIncarnation.incarnationsBlastRodMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectBlastRodMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<ArmorMutSetIncarnation>>(rootIncarnation.incarnationsArmorMutSet)) {
      if (!sourceIncarnation.incarnationsArmorMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectArmorMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<SorcerousUCMutSetIncarnation>>(rootIncarnation.incarnationsSorcerousUCMutSet)) {
      if (!sourceIncarnation.incarnationsSorcerousUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectSorcerousUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<BaseOffenseUCMutSetIncarnation>>(rootIncarnation.incarnationsBaseOffenseUCMutSet)) {
      if (!sourceIncarnation.incarnationsBaseOffenseUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectBaseOffenseUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<BaseDefenseUCMutSetIncarnation>>(rootIncarnation.incarnationsBaseDefenseUCMutSet)) {
      if (!sourceIncarnation.incarnationsBaseDefenseUCMutSet.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectBaseDefenseUCMutSetDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<TerrainTileByLocationMutMapIncarnation>>(rootIncarnation.incarnationsTerrainTileByLocationMutMap)) {
      if (!sourceIncarnation.incarnationsTerrainTileByLocationMutMap.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectTerrainTileByLocationMutMapDelete(id);
      }
    }

    foreach (var currentIdAndVersionAndObjIncarnation in new SortedDictionary<int, VersionAndIncarnation<KamikazeTargetTTCStrongByLocationMutMapIncarnation>>(rootIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap)) {
      if (!sourceIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap.ContainsKey(currentIdAndVersionAndObjIncarnation.Key)) {
        var id = currentIdAndVersionAndObjIncarnation.Key;
        EffectKamikazeTargetTTCStrongByLocationMutMapDelete(id);
      }
    }

  }
       public RandIncarnation GetRandIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsRand[id].incarnation;
  }
  public bool RandExists(int id) {
    return rootIncarnation.incarnationsRand.ContainsKey(id);
  }
  public Rand GetRand(int id) {
    return new Rand(this, id);
  }
  public List<Rand> AllRand() {
    List<Rand> result = new List<Rand>(rootIncarnation.incarnationsRand.Count);
    foreach (var id in rootIncarnation.incarnationsRand.Keys) {
      result.Add(new Rand(this, id));
    }
    return result;
  }
  public IEnumerator<Rand> EnumAllRand() {
    foreach (var id in rootIncarnation.incarnationsRand.Keys) {
      yield return GetRand(id);
    }
  }
  public void CheckHasRand(Rand thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasRand(thing.id);
  }
  public void CheckHasRand(int id) {
    if (!rootIncarnation.incarnationsRand.ContainsKey(id)) {
      throw new System.Exception("Invalid Rand: " + id);
    }
  }
  public void AddRandObserver(int id, IRandEffectObserver observer) {
    List<IRandEffectObserver> obsies;
    if (!observersForRand.TryGetValue(id, out obsies)) {
      obsies = new List<IRandEffectObserver>();
    }
    obsies.Add(observer);
    observersForRand[id] = obsies;
  }

  public void RemoveRandObserver(int id, IRandEffectObserver observer) {
    if (observersForRand.ContainsKey(id)) {
      var list = observersForRand[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForRand.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public Rand EffectRandCreate(
      int rand) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new RandIncarnation(
            rand
            );
    EffectInternalCreateRand(id, rootIncarnation.version, incarnation);
    return new Rand(this, id);
  }
  public void EffectInternalCreateRand(
      int id,
      int incarnationVersion,
      RandIncarnation incarnation) {
    CheckUnlocked();
    var effect = new RandCreateEffect(id);
    rootIncarnation.incarnationsRand.Add(
        id,
        new VersionAndIncarnation<RandIncarnation>(
            incarnationVersion,
            incarnation));
    effectsRandCreateEffect.Add(effect);
  }

  public void EffectRandDelete(int id) {
    CheckUnlocked();
    var effect = new RandDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsRand[id];

    rootIncarnation.incarnationsRand.Remove(id);
    effectsRandDeleteEffect.Add(effect);
  }

     
  public int GetRandHash(int id, int version, RandIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.rand.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastRandEffects(
      SortedDictionary<int, List<IRandEffectObserver>> observers) {
    foreach (var effect in effectsRandDeleteEffect) {
      if (observers.TryGetValue(0, out List<IRandEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRandEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRandEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRandEffect(effect);
        }
        observersForRand.Remove(effect.id);
      }
    }
    effectsRandDeleteEffect.Clear();


    foreach (var effect in effectsRandSetRandEffect) {
      if (observers.TryGetValue(0, out List<IRandEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRandEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRandEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRandEffect(effect);
        }
      }
    }
    effectsRandSetRandEffect.Clear();

    foreach (var effect in effectsRandCreateEffect) {
      if (observers.TryGetValue(0, out List<IRandEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRandEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRandEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRandEffect(effect);
        }
      }
    }
    effectsRandCreateEffect.Clear();
  }

  public void EffectRandSetRand(int id, int newValue) {
    CheckUnlocked();
    CheckHasRand(id);
    var effect = new RandSetRandEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsRand[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.rand;
      oldIncarnationAndVersion.incarnation.rand = newValue;

    } else {
      var newIncarnation =
          new RandIncarnation(
              newValue);
      rootIncarnation.incarnationsRand[id] =
          new VersionAndIncarnation<RandIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsRandSetRandEffect.Add(effect);
  }
  public HoldPositionImpulseIncarnation GetHoldPositionImpulseIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsHoldPositionImpulse[id].incarnation;
  }
  public bool HoldPositionImpulseExists(int id) {
    return rootIncarnation.incarnationsHoldPositionImpulse.ContainsKey(id);
  }
  public HoldPositionImpulse GetHoldPositionImpulse(int id) {
    return new HoldPositionImpulse(this, id);
  }
  public List<HoldPositionImpulse> AllHoldPositionImpulse() {
    List<HoldPositionImpulse> result = new List<HoldPositionImpulse>(rootIncarnation.incarnationsHoldPositionImpulse.Count);
    foreach (var id in rootIncarnation.incarnationsHoldPositionImpulse.Keys) {
      result.Add(new HoldPositionImpulse(this, id));
    }
    return result;
  }
  public IEnumerator<HoldPositionImpulse> EnumAllHoldPositionImpulse() {
    foreach (var id in rootIncarnation.incarnationsHoldPositionImpulse.Keys) {
      yield return GetHoldPositionImpulse(id);
    }
  }
  public void CheckHasHoldPositionImpulse(HoldPositionImpulse thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasHoldPositionImpulse(thing.id);
  }
  public void CheckHasHoldPositionImpulse(int id) {
    if (!rootIncarnation.incarnationsHoldPositionImpulse.ContainsKey(id)) {
      throw new System.Exception("Invalid HoldPositionImpulse: " + id);
    }
  }
  public void AddHoldPositionImpulseObserver(int id, IHoldPositionImpulseEffectObserver observer) {
    List<IHoldPositionImpulseEffectObserver> obsies;
    if (!observersForHoldPositionImpulse.TryGetValue(id, out obsies)) {
      obsies = new List<IHoldPositionImpulseEffectObserver>();
    }
    obsies.Add(observer);
    observersForHoldPositionImpulse[id] = obsies;
  }

  public void RemoveHoldPositionImpulseObserver(int id, IHoldPositionImpulseEffectObserver observer) {
    if (observersForHoldPositionImpulse.ContainsKey(id)) {
      var list = observersForHoldPositionImpulse[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForHoldPositionImpulse.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public HoldPositionImpulse EffectHoldPositionImpulseCreate(
      int weight,
      int duration) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new HoldPositionImpulseIncarnation(
            weight,
            duration
            );
    EffectInternalCreateHoldPositionImpulse(id, rootIncarnation.version, incarnation);
    return new HoldPositionImpulse(this, id);
  }
  public void EffectInternalCreateHoldPositionImpulse(
      int id,
      int incarnationVersion,
      HoldPositionImpulseIncarnation incarnation) {
    CheckUnlocked();
    var effect = new HoldPositionImpulseCreateEffect(id);
    rootIncarnation.incarnationsHoldPositionImpulse.Add(
        id,
        new VersionAndIncarnation<HoldPositionImpulseIncarnation>(
            incarnationVersion,
            incarnation));
    effectsHoldPositionImpulseCreateEffect.Add(effect);
  }

  public void EffectHoldPositionImpulseDelete(int id) {
    CheckUnlocked();
    var effect = new HoldPositionImpulseDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsHoldPositionImpulse[id];

    rootIncarnation.incarnationsHoldPositionImpulse.Remove(id);
    effectsHoldPositionImpulseDeleteEffect.Add(effect);
  }

     
  public int GetHoldPositionImpulseHash(int id, int version, HoldPositionImpulseIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.weight.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.duration.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastHoldPositionImpulseEffects(
      SortedDictionary<int, List<IHoldPositionImpulseEffectObserver>> observers) {
    foreach (var effect in effectsHoldPositionImpulseDeleteEffect) {
      if (observers.TryGetValue(0, out List<IHoldPositionImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnHoldPositionImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IHoldPositionImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnHoldPositionImpulseEffect(effect);
        }
        observersForHoldPositionImpulse.Remove(effect.id);
      }
    }
    effectsHoldPositionImpulseDeleteEffect.Clear();


    foreach (var effect in effectsHoldPositionImpulseCreateEffect) {
      if (observers.TryGetValue(0, out List<IHoldPositionImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnHoldPositionImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IHoldPositionImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnHoldPositionImpulseEffect(effect);
        }
      }
    }
    effectsHoldPositionImpulseCreateEffect.Clear();
  }
  public WanderAICapabilityUCIncarnation GetWanderAICapabilityUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsWanderAICapabilityUC[id].incarnation;
  }
  public bool WanderAICapabilityUCExists(int id) {
    return rootIncarnation.incarnationsWanderAICapabilityUC.ContainsKey(id);
  }
  public WanderAICapabilityUC GetWanderAICapabilityUC(int id) {
    return new WanderAICapabilityUC(this, id);
  }
  public List<WanderAICapabilityUC> AllWanderAICapabilityUC() {
    List<WanderAICapabilityUC> result = new List<WanderAICapabilityUC>(rootIncarnation.incarnationsWanderAICapabilityUC.Count);
    foreach (var id in rootIncarnation.incarnationsWanderAICapabilityUC.Keys) {
      result.Add(new WanderAICapabilityUC(this, id));
    }
    return result;
  }
  public IEnumerator<WanderAICapabilityUC> EnumAllWanderAICapabilityUC() {
    foreach (var id in rootIncarnation.incarnationsWanderAICapabilityUC.Keys) {
      yield return GetWanderAICapabilityUC(id);
    }
  }
  public void CheckHasWanderAICapabilityUC(WanderAICapabilityUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasWanderAICapabilityUC(thing.id);
  }
  public void CheckHasWanderAICapabilityUC(int id) {
    if (!rootIncarnation.incarnationsWanderAICapabilityUC.ContainsKey(id)) {
      throw new System.Exception("Invalid WanderAICapabilityUC: " + id);
    }
  }
  public void AddWanderAICapabilityUCObserver(int id, IWanderAICapabilityUCEffectObserver observer) {
    List<IWanderAICapabilityUCEffectObserver> obsies;
    if (!observersForWanderAICapabilityUC.TryGetValue(id, out obsies)) {
      obsies = new List<IWanderAICapabilityUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForWanderAICapabilityUC[id] = obsies;
  }

  public void RemoveWanderAICapabilityUCObserver(int id, IWanderAICapabilityUCEffectObserver observer) {
    if (observersForWanderAICapabilityUC.ContainsKey(id)) {
      var list = observersForWanderAICapabilityUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForWanderAICapabilityUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public WanderAICapabilityUC EffectWanderAICapabilityUCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new WanderAICapabilityUCIncarnation(

            );
    EffectInternalCreateWanderAICapabilityUC(id, rootIncarnation.version, incarnation);
    return new WanderAICapabilityUC(this, id);
  }
  public void EffectInternalCreateWanderAICapabilityUC(
      int id,
      int incarnationVersion,
      WanderAICapabilityUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new WanderAICapabilityUCCreateEffect(id);
    rootIncarnation.incarnationsWanderAICapabilityUC.Add(
        id,
        new VersionAndIncarnation<WanderAICapabilityUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsWanderAICapabilityUCCreateEffect.Add(effect);
  }

  public void EffectWanderAICapabilityUCDelete(int id) {
    CheckUnlocked();
    var effect = new WanderAICapabilityUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsWanderAICapabilityUC[id];

    rootIncarnation.incarnationsWanderAICapabilityUC.Remove(id);
    effectsWanderAICapabilityUCDeleteEffect.Add(effect);
  }

     
  public int GetWanderAICapabilityUCHash(int id, int version, WanderAICapabilityUCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastWanderAICapabilityUCEffects(
      SortedDictionary<int, List<IWanderAICapabilityUCEffectObserver>> observers) {
    foreach (var effect in effectsWanderAICapabilityUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IWanderAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWanderAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWanderAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWanderAICapabilityUCEffect(effect);
        }
        observersForWanderAICapabilityUC.Remove(effect.id);
      }
    }
    effectsWanderAICapabilityUCDeleteEffect.Clear();


    foreach (var effect in effectsWanderAICapabilityUCCreateEffect) {
      if (observers.TryGetValue(0, out List<IWanderAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWanderAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWanderAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWanderAICapabilityUCEffect(effect);
        }
      }
    }
    effectsWanderAICapabilityUCCreateEffect.Clear();
  }
  public TutorialDefyCounterUCIncarnation GetTutorialDefyCounterUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsTutorialDefyCounterUC[id].incarnation;
  }
  public bool TutorialDefyCounterUCExists(int id) {
    return rootIncarnation.incarnationsTutorialDefyCounterUC.ContainsKey(id);
  }
  public TutorialDefyCounterUC GetTutorialDefyCounterUC(int id) {
    return new TutorialDefyCounterUC(this, id);
  }
  public List<TutorialDefyCounterUC> AllTutorialDefyCounterUC() {
    List<TutorialDefyCounterUC> result = new List<TutorialDefyCounterUC>(rootIncarnation.incarnationsTutorialDefyCounterUC.Count);
    foreach (var id in rootIncarnation.incarnationsTutorialDefyCounterUC.Keys) {
      result.Add(new TutorialDefyCounterUC(this, id));
    }
    return result;
  }
  public IEnumerator<TutorialDefyCounterUC> EnumAllTutorialDefyCounterUC() {
    foreach (var id in rootIncarnation.incarnationsTutorialDefyCounterUC.Keys) {
      yield return GetTutorialDefyCounterUC(id);
    }
  }
  public void CheckHasTutorialDefyCounterUC(TutorialDefyCounterUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasTutorialDefyCounterUC(thing.id);
  }
  public void CheckHasTutorialDefyCounterUC(int id) {
    if (!rootIncarnation.incarnationsTutorialDefyCounterUC.ContainsKey(id)) {
      throw new System.Exception("Invalid TutorialDefyCounterUC: " + id);
    }
  }
  public void AddTutorialDefyCounterUCObserver(int id, ITutorialDefyCounterUCEffectObserver observer) {
    List<ITutorialDefyCounterUCEffectObserver> obsies;
    if (!observersForTutorialDefyCounterUC.TryGetValue(id, out obsies)) {
      obsies = new List<ITutorialDefyCounterUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForTutorialDefyCounterUC[id] = obsies;
  }

  public void RemoveTutorialDefyCounterUCObserver(int id, ITutorialDefyCounterUCEffectObserver observer) {
    if (observersForTutorialDefyCounterUC.ContainsKey(id)) {
      var list = observersForTutorialDefyCounterUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForTutorialDefyCounterUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public TutorialDefyCounterUC EffectTutorialDefyCounterUCCreate(
      int numDefiesRemaining,
      string onChangeTriggerName) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new TutorialDefyCounterUCIncarnation(
            numDefiesRemaining,
            onChangeTriggerName
            );
    EffectInternalCreateTutorialDefyCounterUC(id, rootIncarnation.version, incarnation);
    return new TutorialDefyCounterUC(this, id);
  }
  public void EffectInternalCreateTutorialDefyCounterUC(
      int id,
      int incarnationVersion,
      TutorialDefyCounterUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new TutorialDefyCounterUCCreateEffect(id);
    rootIncarnation.incarnationsTutorialDefyCounterUC.Add(
        id,
        new VersionAndIncarnation<TutorialDefyCounterUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsTutorialDefyCounterUCCreateEffect.Add(effect);
  }

  public void EffectTutorialDefyCounterUCDelete(int id) {
    CheckUnlocked();
    var effect = new TutorialDefyCounterUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsTutorialDefyCounterUC[id];

    rootIncarnation.incarnationsTutorialDefyCounterUC.Remove(id);
    effectsTutorialDefyCounterUCDeleteEffect.Add(effect);
  }

     
  public int GetTutorialDefyCounterUCHash(int id, int version, TutorialDefyCounterUCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.numDefiesRemaining.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.onChangeTriggerName.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastTutorialDefyCounterUCEffects(
      SortedDictionary<int, List<ITutorialDefyCounterUCEffectObserver>> observers) {
    foreach (var effect in effectsTutorialDefyCounterUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<ITutorialDefyCounterUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTutorialDefyCounterUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITutorialDefyCounterUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTutorialDefyCounterUCEffect(effect);
        }
        observersForTutorialDefyCounterUC.Remove(effect.id);
      }
    }
    effectsTutorialDefyCounterUCDeleteEffect.Clear();


    foreach (var effect in effectsTutorialDefyCounterUCSetNumDefiesRemainingEffect) {
      if (observers.TryGetValue(0, out List<ITutorialDefyCounterUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTutorialDefyCounterUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITutorialDefyCounterUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTutorialDefyCounterUCEffect(effect);
        }
      }
    }
    effectsTutorialDefyCounterUCSetNumDefiesRemainingEffect.Clear();

    foreach (var effect in effectsTutorialDefyCounterUCCreateEffect) {
      if (observers.TryGetValue(0, out List<ITutorialDefyCounterUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTutorialDefyCounterUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITutorialDefyCounterUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTutorialDefyCounterUCEffect(effect);
        }
      }
    }
    effectsTutorialDefyCounterUCCreateEffect.Clear();
  }

  public void EffectTutorialDefyCounterUCSetNumDefiesRemaining(int id, int newValue) {
    CheckUnlocked();
    CheckHasTutorialDefyCounterUC(id);
    var effect = new TutorialDefyCounterUCSetNumDefiesRemainingEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsTutorialDefyCounterUC[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.numDefiesRemaining;
      oldIncarnationAndVersion.incarnation.numDefiesRemaining = newValue;

    } else {
      var newIncarnation =
          new TutorialDefyCounterUCIncarnation(
              newValue,
              oldIncarnationAndVersion.incarnation.onChangeTriggerName);
      rootIncarnation.incarnationsTutorialDefyCounterUC[id] =
          new VersionAndIncarnation<TutorialDefyCounterUCIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsTutorialDefyCounterUCSetNumDefiesRemainingEffect.Add(effect);
  }
  public UnitIncarnation GetUnitIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsUnit[id].incarnation;
  }
  public bool UnitExists(int id) {
    return rootIncarnation.incarnationsUnit.ContainsKey(id);
  }
  public Unit GetUnit(int id) {
    return new Unit(this, id);
  }
  public List<Unit> AllUnit() {
    List<Unit> result = new List<Unit>(rootIncarnation.incarnationsUnit.Count);
    foreach (var id in rootIncarnation.incarnationsUnit.Keys) {
      result.Add(new Unit(this, id));
    }
    return result;
  }
  public IEnumerator<Unit> EnumAllUnit() {
    foreach (var id in rootIncarnation.incarnationsUnit.Keys) {
      yield return GetUnit(id);
    }
  }
  public void CheckHasUnit(Unit thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasUnit(thing.id);
  }
  public void CheckHasUnit(int id) {
    if (!rootIncarnation.incarnationsUnit.ContainsKey(id)) {
      throw new System.Exception("Invalid Unit: " + id);
    }
  }
  public void AddUnitObserver(int id, IUnitEffectObserver observer) {
    List<IUnitEffectObserver> obsies;
    if (!observersForUnit.TryGetValue(id, out obsies)) {
      obsies = new List<IUnitEffectObserver>();
    }
    obsies.Add(observer);
    observersForUnit[id] = obsies;
  }

  public void RemoveUnitObserver(int id, IUnitEffectObserver observer) {
    if (observersForUnit.ContainsKey(id)) {
      var list = observersForUnit[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForUnit.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public Unit EffectUnitCreate(
      IUnitEventMutList events,
      bool alive,
      int lifeEndTime,
      Location location,
      string classId,
      int nextActionTime,
      int hp,
      int maxHp,
      IUnitComponentMutBunch components,
      bool good) {
    CheckUnlocked();
    CheckHasIUnitEventMutList(events);
    CheckHasIUnitComponentMutBunch(components);

    var id = NewId();
    var incarnation =
        new UnitIncarnation(
            events.id,
            alive,
            lifeEndTime,
            location,
            classId,
            nextActionTime,
            hp,
            maxHp,
            components.id,
            good
            );
    EffectInternalCreateUnit(id, rootIncarnation.version, incarnation);
    return new Unit(this, id);
  }
  public void EffectInternalCreateUnit(
      int id,
      int incarnationVersion,
      UnitIncarnation incarnation) {
    CheckUnlocked();
    var effect = new UnitCreateEffect(id);
    rootIncarnation.incarnationsUnit.Add(
        id,
        new VersionAndIncarnation<UnitIncarnation>(
            incarnationVersion,
            incarnation));
    effectsUnitCreateEffect.Add(effect);
  }

  public void EffectUnitDelete(int id) {
    CheckUnlocked();
    var effect = new UnitDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsUnit[id];

    rootIncarnation.incarnationsUnit.Remove(id);
    effectsUnitDeleteEffect.Add(effect);
  }

     
  public int GetUnitHash(int id, int version, UnitIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.events.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.alive.GetDeterministicHashCode();
    result += id * version * 3 * incarnation.lifeEndTime.GetDeterministicHashCode();
    result += id * version * 4 * incarnation.location.GetDeterministicHashCode();
    result += id * version * 5 * incarnation.classId.GetDeterministicHashCode();
    result += id * version * 6 * incarnation.nextActionTime.GetDeterministicHashCode();
    result += id * version * 7 * incarnation.hp.GetDeterministicHashCode();
    result += id * version * 8 * incarnation.maxHp.GetDeterministicHashCode();
    result += id * version * 9 * incarnation.components.GetDeterministicHashCode();
    result += id * version * 10 * incarnation.good.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastUnitEffects(
      SortedDictionary<int, List<IUnitEffectObserver>> observers) {
    foreach (var effect in effectsUnitDeleteEffect) {
      if (observers.TryGetValue(0, out List<IUnitEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUnitEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUnitEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUnitEffect(effect);
        }
        observersForUnit.Remove(effect.id);
      }
    }
    effectsUnitDeleteEffect.Clear();


    foreach (var effect in effectsUnitSetAliveEffect) {
      if (observers.TryGetValue(0, out List<IUnitEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUnitEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUnitEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUnitEffect(effect);
        }
      }
    }
    effectsUnitSetAliveEffect.Clear();

    foreach (var effect in effectsUnitSetLifeEndTimeEffect) {
      if (observers.TryGetValue(0, out List<IUnitEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUnitEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUnitEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUnitEffect(effect);
        }
      }
    }
    effectsUnitSetLifeEndTimeEffect.Clear();

    foreach (var effect in effectsUnitSetLocationEffect) {
      if (observers.TryGetValue(0, out List<IUnitEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUnitEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUnitEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUnitEffect(effect);
        }
      }
    }
    effectsUnitSetLocationEffect.Clear();

    foreach (var effect in effectsUnitSetNextActionTimeEffect) {
      if (observers.TryGetValue(0, out List<IUnitEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUnitEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUnitEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUnitEffect(effect);
        }
      }
    }
    effectsUnitSetNextActionTimeEffect.Clear();

    foreach (var effect in effectsUnitSetHpEffect) {
      if (observers.TryGetValue(0, out List<IUnitEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUnitEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUnitEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUnitEffect(effect);
        }
      }
    }
    effectsUnitSetHpEffect.Clear();

    foreach (var effect in effectsUnitCreateEffect) {
      if (observers.TryGetValue(0, out List<IUnitEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUnitEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUnitEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUnitEffect(effect);
        }
      }
    }
    effectsUnitCreateEffect.Clear();
  }

  public void EffectUnitSetAlive(int id, bool newValue) {
    CheckUnlocked();
    CheckHasUnit(id);
    var effect = new UnitSetAliveEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsUnit[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.alive;
      oldIncarnationAndVersion.incarnation.alive = newValue;

    } else {
      var newIncarnation =
          new UnitIncarnation(
              oldIncarnationAndVersion.incarnation.events,
              newValue,
              oldIncarnationAndVersion.incarnation.lifeEndTime,
              oldIncarnationAndVersion.incarnation.location,
              oldIncarnationAndVersion.incarnation.classId,
              oldIncarnationAndVersion.incarnation.nextActionTime,
              oldIncarnationAndVersion.incarnation.hp,
              oldIncarnationAndVersion.incarnation.maxHp,
              oldIncarnationAndVersion.incarnation.components,
              oldIncarnationAndVersion.incarnation.good);
      rootIncarnation.incarnationsUnit[id] =
          new VersionAndIncarnation<UnitIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsUnitSetAliveEffect.Add(effect);
  }

  public void EffectUnitSetLifeEndTime(int id, int newValue) {
    CheckUnlocked();
    CheckHasUnit(id);
    var effect = new UnitSetLifeEndTimeEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsUnit[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.lifeEndTime;
      oldIncarnationAndVersion.incarnation.lifeEndTime = newValue;

    } else {
      var newIncarnation =
          new UnitIncarnation(
              oldIncarnationAndVersion.incarnation.events,
              oldIncarnationAndVersion.incarnation.alive,
              newValue,
              oldIncarnationAndVersion.incarnation.location,
              oldIncarnationAndVersion.incarnation.classId,
              oldIncarnationAndVersion.incarnation.nextActionTime,
              oldIncarnationAndVersion.incarnation.hp,
              oldIncarnationAndVersion.incarnation.maxHp,
              oldIncarnationAndVersion.incarnation.components,
              oldIncarnationAndVersion.incarnation.good);
      rootIncarnation.incarnationsUnit[id] =
          new VersionAndIncarnation<UnitIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsUnitSetLifeEndTimeEffect.Add(effect);
  }

  public void EffectUnitSetLocation(int id, Location newValue) {
    CheckUnlocked();
    CheckHasUnit(id);
    var effect = new UnitSetLocationEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsUnit[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.location;
      oldIncarnationAndVersion.incarnation.location = newValue;

    } else {
      var newIncarnation =
          new UnitIncarnation(
              oldIncarnationAndVersion.incarnation.events,
              oldIncarnationAndVersion.incarnation.alive,
              oldIncarnationAndVersion.incarnation.lifeEndTime,
              newValue,
              oldIncarnationAndVersion.incarnation.classId,
              oldIncarnationAndVersion.incarnation.nextActionTime,
              oldIncarnationAndVersion.incarnation.hp,
              oldIncarnationAndVersion.incarnation.maxHp,
              oldIncarnationAndVersion.incarnation.components,
              oldIncarnationAndVersion.incarnation.good);
      rootIncarnation.incarnationsUnit[id] =
          new VersionAndIncarnation<UnitIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsUnitSetLocationEffect.Add(effect);
  }

  public void EffectUnitSetNextActionTime(int id, int newValue) {
    CheckUnlocked();
    CheckHasUnit(id);
    var effect = new UnitSetNextActionTimeEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsUnit[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.nextActionTime;
      oldIncarnationAndVersion.incarnation.nextActionTime = newValue;

    } else {
      var newIncarnation =
          new UnitIncarnation(
              oldIncarnationAndVersion.incarnation.events,
              oldIncarnationAndVersion.incarnation.alive,
              oldIncarnationAndVersion.incarnation.lifeEndTime,
              oldIncarnationAndVersion.incarnation.location,
              oldIncarnationAndVersion.incarnation.classId,
              newValue,
              oldIncarnationAndVersion.incarnation.hp,
              oldIncarnationAndVersion.incarnation.maxHp,
              oldIncarnationAndVersion.incarnation.components,
              oldIncarnationAndVersion.incarnation.good);
      rootIncarnation.incarnationsUnit[id] =
          new VersionAndIncarnation<UnitIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsUnitSetNextActionTimeEffect.Add(effect);
  }

  public void EffectUnitSetHp(int id, int newValue) {
    CheckUnlocked();
    CheckHasUnit(id);
    var effect = new UnitSetHpEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsUnit[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.hp;
      oldIncarnationAndVersion.incarnation.hp = newValue;

    } else {
      var newIncarnation =
          new UnitIncarnation(
              oldIncarnationAndVersion.incarnation.events,
              oldIncarnationAndVersion.incarnation.alive,
              oldIncarnationAndVersion.incarnation.lifeEndTime,
              oldIncarnationAndVersion.incarnation.location,
              oldIncarnationAndVersion.incarnation.classId,
              oldIncarnationAndVersion.incarnation.nextActionTime,
              newValue,
              oldIncarnationAndVersion.incarnation.maxHp,
              oldIncarnationAndVersion.incarnation.components,
              oldIncarnationAndVersion.incarnation.good);
      rootIncarnation.incarnationsUnit[id] =
          new VersionAndIncarnation<UnitIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsUnitSetHpEffect.Add(effect);
  }
  public IUnitComponentMutBunchIncarnation GetIUnitComponentMutBunchIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsIUnitComponentMutBunch[id].incarnation;
  }
  public bool IUnitComponentMutBunchExists(int id) {
    return rootIncarnation.incarnationsIUnitComponentMutBunch.ContainsKey(id);
  }
  public IUnitComponentMutBunch GetIUnitComponentMutBunch(int id) {
    return new IUnitComponentMutBunch(this, id);
  }
  public List<IUnitComponentMutBunch> AllIUnitComponentMutBunch() {
    List<IUnitComponentMutBunch> result = new List<IUnitComponentMutBunch>(rootIncarnation.incarnationsIUnitComponentMutBunch.Count);
    foreach (var id in rootIncarnation.incarnationsIUnitComponentMutBunch.Keys) {
      result.Add(new IUnitComponentMutBunch(this, id));
    }
    return result;
  }
  public IEnumerator<IUnitComponentMutBunch> EnumAllIUnitComponentMutBunch() {
    foreach (var id in rootIncarnation.incarnationsIUnitComponentMutBunch.Keys) {
      yield return GetIUnitComponentMutBunch(id);
    }
  }
  public void CheckHasIUnitComponentMutBunch(IUnitComponentMutBunch thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasIUnitComponentMutBunch(thing.id);
  }
  public void CheckHasIUnitComponentMutBunch(int id) {
    if (!rootIncarnation.incarnationsIUnitComponentMutBunch.ContainsKey(id)) {
      throw new System.Exception("Invalid IUnitComponentMutBunch: " + id);
    }
  }
  public void AddIUnitComponentMutBunchObserver(int id, IIUnitComponentMutBunchEffectObserver observer) {
    List<IIUnitComponentMutBunchEffectObserver> obsies;
    if (!observersForIUnitComponentMutBunch.TryGetValue(id, out obsies)) {
      obsies = new List<IIUnitComponentMutBunchEffectObserver>();
    }
    obsies.Add(observer);
    observersForIUnitComponentMutBunch[id] = obsies;
  }

  public void RemoveIUnitComponentMutBunchObserver(int id, IIUnitComponentMutBunchEffectObserver observer) {
    if (observersForIUnitComponentMutBunch.ContainsKey(id)) {
      var list = observersForIUnitComponentMutBunch[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForIUnitComponentMutBunch.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public IUnitComponentMutBunch EffectIUnitComponentMutBunchCreate(
      TutorialDefyCounterUCMutSet membersTutorialDefyCounterUCMutSet,
      LightningChargingUCMutSet membersLightningChargingUCMutSet,
      WanderAICapabilityUCMutSet membersWanderAICapabilityUCMutSet,
      TemporaryCloneAICapabilityUCMutSet membersTemporaryCloneAICapabilityUCMutSet,
      SummonAICapabilityUCMutSet membersSummonAICapabilityUCMutSet,
      KamikazeAICapabilityUCMutSet membersKamikazeAICapabilityUCMutSet,
      GuardAICapabilityUCMutSet membersGuardAICapabilityUCMutSet,
      TimeCloneAICapabilityUCMutSet membersTimeCloneAICapabilityUCMutSet,
      DoomedUCMutSet membersDoomedUCMutSet,
      MiredUCMutSet membersMiredUCMutSet,
      AttackAICapabilityUCMutSet membersAttackAICapabilityUCMutSet,
      CounteringUCMutSet membersCounteringUCMutSet,
      LightningChargedUCMutSet membersLightningChargedUCMutSet,
      InvincibilityUCMutSet membersInvincibilityUCMutSet,
      DefyingUCMutSet membersDefyingUCMutSet,
      BideAICapabilityUCMutSet membersBideAICapabilityUCMutSet,
      BaseMovementTimeUCMutSet membersBaseMovementTimeUCMutSet,
      BaseCombatTimeUCMutSet membersBaseCombatTimeUCMutSet,
      ManaPotionMutSet membersManaPotionMutSet,
      HealthPotionMutSet membersHealthPotionMutSet,
      SpeedRingMutSet membersSpeedRingMutSet,
      GlaiveMutSet membersGlaiveMutSet,
      SlowRodMutSet membersSlowRodMutSet,
      BlastRodMutSet membersBlastRodMutSet,
      ArmorMutSet membersArmorMutSet,
      SorcerousUCMutSet membersSorcerousUCMutSet,
      BaseOffenseUCMutSet membersBaseOffenseUCMutSet,
      BaseDefenseUCMutSet membersBaseDefenseUCMutSet) {
    CheckUnlocked();
    CheckHasTutorialDefyCounterUCMutSet(membersTutorialDefyCounterUCMutSet);
    CheckHasLightningChargingUCMutSet(membersLightningChargingUCMutSet);
    CheckHasWanderAICapabilityUCMutSet(membersWanderAICapabilityUCMutSet);
    CheckHasTemporaryCloneAICapabilityUCMutSet(membersTemporaryCloneAICapabilityUCMutSet);
    CheckHasSummonAICapabilityUCMutSet(membersSummonAICapabilityUCMutSet);
    CheckHasKamikazeAICapabilityUCMutSet(membersKamikazeAICapabilityUCMutSet);
    CheckHasGuardAICapabilityUCMutSet(membersGuardAICapabilityUCMutSet);
    CheckHasTimeCloneAICapabilityUCMutSet(membersTimeCloneAICapabilityUCMutSet);
    CheckHasDoomedUCMutSet(membersDoomedUCMutSet);
    CheckHasMiredUCMutSet(membersMiredUCMutSet);
    CheckHasAttackAICapabilityUCMutSet(membersAttackAICapabilityUCMutSet);
    CheckHasCounteringUCMutSet(membersCounteringUCMutSet);
    CheckHasLightningChargedUCMutSet(membersLightningChargedUCMutSet);
    CheckHasInvincibilityUCMutSet(membersInvincibilityUCMutSet);
    CheckHasDefyingUCMutSet(membersDefyingUCMutSet);
    CheckHasBideAICapabilityUCMutSet(membersBideAICapabilityUCMutSet);
    CheckHasBaseMovementTimeUCMutSet(membersBaseMovementTimeUCMutSet);
    CheckHasBaseCombatTimeUCMutSet(membersBaseCombatTimeUCMutSet);
    CheckHasManaPotionMutSet(membersManaPotionMutSet);
    CheckHasHealthPotionMutSet(membersHealthPotionMutSet);
    CheckHasSpeedRingMutSet(membersSpeedRingMutSet);
    CheckHasGlaiveMutSet(membersGlaiveMutSet);
    CheckHasSlowRodMutSet(membersSlowRodMutSet);
    CheckHasBlastRodMutSet(membersBlastRodMutSet);
    CheckHasArmorMutSet(membersArmorMutSet);
    CheckHasSorcerousUCMutSet(membersSorcerousUCMutSet);
    CheckHasBaseOffenseUCMutSet(membersBaseOffenseUCMutSet);
    CheckHasBaseDefenseUCMutSet(membersBaseDefenseUCMutSet);

    var id = NewId();
    var incarnation =
        new IUnitComponentMutBunchIncarnation(
            membersTutorialDefyCounterUCMutSet.id,
            membersLightningChargingUCMutSet.id,
            membersWanderAICapabilityUCMutSet.id,
            membersTemporaryCloneAICapabilityUCMutSet.id,
            membersSummonAICapabilityUCMutSet.id,
            membersKamikazeAICapabilityUCMutSet.id,
            membersGuardAICapabilityUCMutSet.id,
            membersTimeCloneAICapabilityUCMutSet.id,
            membersDoomedUCMutSet.id,
            membersMiredUCMutSet.id,
            membersAttackAICapabilityUCMutSet.id,
            membersCounteringUCMutSet.id,
            membersLightningChargedUCMutSet.id,
            membersInvincibilityUCMutSet.id,
            membersDefyingUCMutSet.id,
            membersBideAICapabilityUCMutSet.id,
            membersBaseMovementTimeUCMutSet.id,
            membersBaseCombatTimeUCMutSet.id,
            membersManaPotionMutSet.id,
            membersHealthPotionMutSet.id,
            membersSpeedRingMutSet.id,
            membersGlaiveMutSet.id,
            membersSlowRodMutSet.id,
            membersBlastRodMutSet.id,
            membersArmorMutSet.id,
            membersSorcerousUCMutSet.id,
            membersBaseOffenseUCMutSet.id,
            membersBaseDefenseUCMutSet.id
            );
    EffectInternalCreateIUnitComponentMutBunch(id, rootIncarnation.version, incarnation);
    return new IUnitComponentMutBunch(this, id);
  }
  public void EffectInternalCreateIUnitComponentMutBunch(
      int id,
      int incarnationVersion,
      IUnitComponentMutBunchIncarnation incarnation) {
    CheckUnlocked();
    var effect = new IUnitComponentMutBunchCreateEffect(id);
    rootIncarnation.incarnationsIUnitComponentMutBunch.Add(
        id,
        new VersionAndIncarnation<IUnitComponentMutBunchIncarnation>(
            incarnationVersion,
            incarnation));
    effectsIUnitComponentMutBunchCreateEffect.Add(effect);
  }

  public void EffectIUnitComponentMutBunchDelete(int id) {
    CheckUnlocked();
    var effect = new IUnitComponentMutBunchDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsIUnitComponentMutBunch[id];

    rootIncarnation.incarnationsIUnitComponentMutBunch.Remove(id);
    effectsIUnitComponentMutBunchDeleteEffect.Add(effect);
  }

     
  public int GetIUnitComponentMutBunchHash(int id, int version, IUnitComponentMutBunchIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.membersTutorialDefyCounterUCMutSet.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.membersLightningChargingUCMutSet.GetDeterministicHashCode();
    result += id * version * 3 * incarnation.membersWanderAICapabilityUCMutSet.GetDeterministicHashCode();
    result += id * version * 4 * incarnation.membersTemporaryCloneAICapabilityUCMutSet.GetDeterministicHashCode();
    result += id * version * 5 * incarnation.membersSummonAICapabilityUCMutSet.GetDeterministicHashCode();
    result += id * version * 6 * incarnation.membersKamikazeAICapabilityUCMutSet.GetDeterministicHashCode();
    result += id * version * 7 * incarnation.membersGuardAICapabilityUCMutSet.GetDeterministicHashCode();
    result += id * version * 8 * incarnation.membersTimeCloneAICapabilityUCMutSet.GetDeterministicHashCode();
    result += id * version * 9 * incarnation.membersDoomedUCMutSet.GetDeterministicHashCode();
    result += id * version * 10 * incarnation.membersMiredUCMutSet.GetDeterministicHashCode();
    result += id * version * 11 * incarnation.membersAttackAICapabilityUCMutSet.GetDeterministicHashCode();
    result += id * version * 12 * incarnation.membersCounteringUCMutSet.GetDeterministicHashCode();
    result += id * version * 13 * incarnation.membersLightningChargedUCMutSet.GetDeterministicHashCode();
    result += id * version * 14 * incarnation.membersInvincibilityUCMutSet.GetDeterministicHashCode();
    result += id * version * 15 * incarnation.membersDefyingUCMutSet.GetDeterministicHashCode();
    result += id * version * 16 * incarnation.membersBideAICapabilityUCMutSet.GetDeterministicHashCode();
    result += id * version * 17 * incarnation.membersBaseMovementTimeUCMutSet.GetDeterministicHashCode();
    result += id * version * 18 * incarnation.membersBaseCombatTimeUCMutSet.GetDeterministicHashCode();
    result += id * version * 19 * incarnation.membersManaPotionMutSet.GetDeterministicHashCode();
    result += id * version * 20 * incarnation.membersHealthPotionMutSet.GetDeterministicHashCode();
    result += id * version * 21 * incarnation.membersSpeedRingMutSet.GetDeterministicHashCode();
    result += id * version * 22 * incarnation.membersGlaiveMutSet.GetDeterministicHashCode();
    result += id * version * 23 * incarnation.membersSlowRodMutSet.GetDeterministicHashCode();
    result += id * version * 24 * incarnation.membersBlastRodMutSet.GetDeterministicHashCode();
    result += id * version * 25 * incarnation.membersArmorMutSet.GetDeterministicHashCode();
    result += id * version * 26 * incarnation.membersSorcerousUCMutSet.GetDeterministicHashCode();
    result += id * version * 27 * incarnation.membersBaseOffenseUCMutSet.GetDeterministicHashCode();
    result += id * version * 28 * incarnation.membersBaseDefenseUCMutSet.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastIUnitComponentMutBunchEffects(
      SortedDictionary<int, List<IIUnitComponentMutBunchEffectObserver>> observers) {
    foreach (var effect in effectsIUnitComponentMutBunchDeleteEffect) {
      if (observers.TryGetValue(0, out List<IIUnitComponentMutBunchEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIUnitComponentMutBunchEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIUnitComponentMutBunchEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIUnitComponentMutBunchEffect(effect);
        }
        observersForIUnitComponentMutBunch.Remove(effect.id);
      }
    }
    effectsIUnitComponentMutBunchDeleteEffect.Clear();


    foreach (var effect in effectsIUnitComponentMutBunchCreateEffect) {
      if (observers.TryGetValue(0, out List<IIUnitComponentMutBunchEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIUnitComponentMutBunchEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIUnitComponentMutBunchEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIUnitComponentMutBunchEffect(effect);
        }
      }
    }
    effectsIUnitComponentMutBunchCreateEffect.Clear();
  }
  public LightningChargedUCIncarnation GetLightningChargedUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsLightningChargedUC[id].incarnation;
  }
  public bool LightningChargedUCExists(int id) {
    return rootIncarnation.incarnationsLightningChargedUC.ContainsKey(id);
  }
  public LightningChargedUC GetLightningChargedUC(int id) {
    return new LightningChargedUC(this, id);
  }
  public List<LightningChargedUC> AllLightningChargedUC() {
    List<LightningChargedUC> result = new List<LightningChargedUC>(rootIncarnation.incarnationsLightningChargedUC.Count);
    foreach (var id in rootIncarnation.incarnationsLightningChargedUC.Keys) {
      result.Add(new LightningChargedUC(this, id));
    }
    return result;
  }
  public IEnumerator<LightningChargedUC> EnumAllLightningChargedUC() {
    foreach (var id in rootIncarnation.incarnationsLightningChargedUC.Keys) {
      yield return GetLightningChargedUC(id);
    }
  }
  public void CheckHasLightningChargedUC(LightningChargedUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasLightningChargedUC(thing.id);
  }
  public void CheckHasLightningChargedUC(int id) {
    if (!rootIncarnation.incarnationsLightningChargedUC.ContainsKey(id)) {
      throw new System.Exception("Invalid LightningChargedUC: " + id);
    }
  }
  public void AddLightningChargedUCObserver(int id, ILightningChargedUCEffectObserver observer) {
    List<ILightningChargedUCEffectObserver> obsies;
    if (!observersForLightningChargedUC.TryGetValue(id, out obsies)) {
      obsies = new List<ILightningChargedUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForLightningChargedUC[id] = obsies;
  }

  public void RemoveLightningChargedUCObserver(int id, ILightningChargedUCEffectObserver observer) {
    if (observersForLightningChargedUC.ContainsKey(id)) {
      var list = observersForLightningChargedUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForLightningChargedUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public LightningChargedUC EffectLightningChargedUCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new LightningChargedUCIncarnation(

            );
    EffectInternalCreateLightningChargedUC(id, rootIncarnation.version, incarnation);
    return new LightningChargedUC(this, id);
  }
  public void EffectInternalCreateLightningChargedUC(
      int id,
      int incarnationVersion,
      LightningChargedUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new LightningChargedUCCreateEffect(id);
    rootIncarnation.incarnationsLightningChargedUC.Add(
        id,
        new VersionAndIncarnation<LightningChargedUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsLightningChargedUCCreateEffect.Add(effect);
  }

  public void EffectLightningChargedUCDelete(int id) {
    CheckUnlocked();
    var effect = new LightningChargedUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsLightningChargedUC[id];

    rootIncarnation.incarnationsLightningChargedUC.Remove(id);
    effectsLightningChargedUCDeleteEffect.Add(effect);
  }

     
  public int GetLightningChargedUCHash(int id, int version, LightningChargedUCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastLightningChargedUCEffects(
      SortedDictionary<int, List<ILightningChargedUCEffectObserver>> observers) {
    foreach (var effect in effectsLightningChargedUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<ILightningChargedUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLightningChargedUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILightningChargedUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLightningChargedUCEffect(effect);
        }
        observersForLightningChargedUC.Remove(effect.id);
      }
    }
    effectsLightningChargedUCDeleteEffect.Clear();


    foreach (var effect in effectsLightningChargedUCCreateEffect) {
      if (observers.TryGetValue(0, out List<ILightningChargedUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLightningChargedUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILightningChargedUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLightningChargedUCEffect(effect);
        }
      }
    }
    effectsLightningChargedUCCreateEffect.Clear();
  }
  public LightningChargingUCIncarnation GetLightningChargingUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsLightningChargingUC[id].incarnation;
  }
  public bool LightningChargingUCExists(int id) {
    return rootIncarnation.incarnationsLightningChargingUC.ContainsKey(id);
  }
  public LightningChargingUC GetLightningChargingUC(int id) {
    return new LightningChargingUC(this, id);
  }
  public List<LightningChargingUC> AllLightningChargingUC() {
    List<LightningChargingUC> result = new List<LightningChargingUC>(rootIncarnation.incarnationsLightningChargingUC.Count);
    foreach (var id in rootIncarnation.incarnationsLightningChargingUC.Keys) {
      result.Add(new LightningChargingUC(this, id));
    }
    return result;
  }
  public IEnumerator<LightningChargingUC> EnumAllLightningChargingUC() {
    foreach (var id in rootIncarnation.incarnationsLightningChargingUC.Keys) {
      yield return GetLightningChargingUC(id);
    }
  }
  public void CheckHasLightningChargingUC(LightningChargingUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasLightningChargingUC(thing.id);
  }
  public void CheckHasLightningChargingUC(int id) {
    if (!rootIncarnation.incarnationsLightningChargingUC.ContainsKey(id)) {
      throw new System.Exception("Invalid LightningChargingUC: " + id);
    }
  }
  public void AddLightningChargingUCObserver(int id, ILightningChargingUCEffectObserver observer) {
    List<ILightningChargingUCEffectObserver> obsies;
    if (!observersForLightningChargingUC.TryGetValue(id, out obsies)) {
      obsies = new List<ILightningChargingUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForLightningChargingUC[id] = obsies;
  }

  public void RemoveLightningChargingUCObserver(int id, ILightningChargingUCEffectObserver observer) {
    if (observersForLightningChargingUC.ContainsKey(id)) {
      var list = observersForLightningChargingUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForLightningChargingUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public LightningChargingUC EffectLightningChargingUCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new LightningChargingUCIncarnation(

            );
    EffectInternalCreateLightningChargingUC(id, rootIncarnation.version, incarnation);
    return new LightningChargingUC(this, id);
  }
  public void EffectInternalCreateLightningChargingUC(
      int id,
      int incarnationVersion,
      LightningChargingUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new LightningChargingUCCreateEffect(id);
    rootIncarnation.incarnationsLightningChargingUC.Add(
        id,
        new VersionAndIncarnation<LightningChargingUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsLightningChargingUCCreateEffect.Add(effect);
  }

  public void EffectLightningChargingUCDelete(int id) {
    CheckUnlocked();
    var effect = new LightningChargingUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsLightningChargingUC[id];

    rootIncarnation.incarnationsLightningChargingUC.Remove(id);
    effectsLightningChargingUCDeleteEffect.Add(effect);
  }

     
  public int GetLightningChargingUCHash(int id, int version, LightningChargingUCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastLightningChargingUCEffects(
      SortedDictionary<int, List<ILightningChargingUCEffectObserver>> observers) {
    foreach (var effect in effectsLightningChargingUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<ILightningChargingUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLightningChargingUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILightningChargingUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLightningChargingUCEffect(effect);
        }
        observersForLightningChargingUC.Remove(effect.id);
      }
    }
    effectsLightningChargingUCDeleteEffect.Clear();


    foreach (var effect in effectsLightningChargingUCCreateEffect) {
      if (observers.TryGetValue(0, out List<ILightningChargingUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLightningChargingUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILightningChargingUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLightningChargingUCEffect(effect);
        }
      }
    }
    effectsLightningChargingUCCreateEffect.Clear();
  }
  public DoomedUCIncarnation GetDoomedUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsDoomedUC[id].incarnation;
  }
  public bool DoomedUCExists(int id) {
    return rootIncarnation.incarnationsDoomedUC.ContainsKey(id);
  }
  public DoomedUC GetDoomedUC(int id) {
    return new DoomedUC(this, id);
  }
  public List<DoomedUC> AllDoomedUC() {
    List<DoomedUC> result = new List<DoomedUC>(rootIncarnation.incarnationsDoomedUC.Count);
    foreach (var id in rootIncarnation.incarnationsDoomedUC.Keys) {
      result.Add(new DoomedUC(this, id));
    }
    return result;
  }
  public IEnumerator<DoomedUC> EnumAllDoomedUC() {
    foreach (var id in rootIncarnation.incarnationsDoomedUC.Keys) {
      yield return GetDoomedUC(id);
    }
  }
  public void CheckHasDoomedUC(DoomedUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasDoomedUC(thing.id);
  }
  public void CheckHasDoomedUC(int id) {
    if (!rootIncarnation.incarnationsDoomedUC.ContainsKey(id)) {
      throw new System.Exception("Invalid DoomedUC: " + id);
    }
  }
  public void AddDoomedUCObserver(int id, IDoomedUCEffectObserver observer) {
    List<IDoomedUCEffectObserver> obsies;
    if (!observersForDoomedUC.TryGetValue(id, out obsies)) {
      obsies = new List<IDoomedUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForDoomedUC[id] = obsies;
  }

  public void RemoveDoomedUCObserver(int id, IDoomedUCEffectObserver observer) {
    if (observersForDoomedUC.ContainsKey(id)) {
      var list = observersForDoomedUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForDoomedUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public DoomedUC EffectDoomedUCCreate(
      int deathTime) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new DoomedUCIncarnation(
            deathTime
            );
    EffectInternalCreateDoomedUC(id, rootIncarnation.version, incarnation);
    return new DoomedUC(this, id);
  }
  public void EffectInternalCreateDoomedUC(
      int id,
      int incarnationVersion,
      DoomedUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new DoomedUCCreateEffect(id);
    rootIncarnation.incarnationsDoomedUC.Add(
        id,
        new VersionAndIncarnation<DoomedUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsDoomedUCCreateEffect.Add(effect);
  }

  public void EffectDoomedUCDelete(int id) {
    CheckUnlocked();
    var effect = new DoomedUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsDoomedUC[id];

    rootIncarnation.incarnationsDoomedUC.Remove(id);
    effectsDoomedUCDeleteEffect.Add(effect);
  }

     
  public int GetDoomedUCHash(int id, int version, DoomedUCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.deathTime.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastDoomedUCEffects(
      SortedDictionary<int, List<IDoomedUCEffectObserver>> observers) {
    foreach (var effect in effectsDoomedUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IDoomedUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDoomedUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDoomedUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDoomedUCEffect(effect);
        }
        observersForDoomedUC.Remove(effect.id);
      }
    }
    effectsDoomedUCDeleteEffect.Clear();


    foreach (var effect in effectsDoomedUCCreateEffect) {
      if (observers.TryGetValue(0, out List<IDoomedUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDoomedUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDoomedUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDoomedUCEffect(effect);
        }
      }
    }
    effectsDoomedUCCreateEffect.Clear();
  }
  public TemporaryCloneImpulseIncarnation GetTemporaryCloneImpulseIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsTemporaryCloneImpulse[id].incarnation;
  }
  public bool TemporaryCloneImpulseExists(int id) {
    return rootIncarnation.incarnationsTemporaryCloneImpulse.ContainsKey(id);
  }
  public TemporaryCloneImpulse GetTemporaryCloneImpulse(int id) {
    return new TemporaryCloneImpulse(this, id);
  }
  public List<TemporaryCloneImpulse> AllTemporaryCloneImpulse() {
    List<TemporaryCloneImpulse> result = new List<TemporaryCloneImpulse>(rootIncarnation.incarnationsTemporaryCloneImpulse.Count);
    foreach (var id in rootIncarnation.incarnationsTemporaryCloneImpulse.Keys) {
      result.Add(new TemporaryCloneImpulse(this, id));
    }
    return result;
  }
  public IEnumerator<TemporaryCloneImpulse> EnumAllTemporaryCloneImpulse() {
    foreach (var id in rootIncarnation.incarnationsTemporaryCloneImpulse.Keys) {
      yield return GetTemporaryCloneImpulse(id);
    }
  }
  public void CheckHasTemporaryCloneImpulse(TemporaryCloneImpulse thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasTemporaryCloneImpulse(thing.id);
  }
  public void CheckHasTemporaryCloneImpulse(int id) {
    if (!rootIncarnation.incarnationsTemporaryCloneImpulse.ContainsKey(id)) {
      throw new System.Exception("Invalid TemporaryCloneImpulse: " + id);
    }
  }
  public void AddTemporaryCloneImpulseObserver(int id, ITemporaryCloneImpulseEffectObserver observer) {
    List<ITemporaryCloneImpulseEffectObserver> obsies;
    if (!observersForTemporaryCloneImpulse.TryGetValue(id, out obsies)) {
      obsies = new List<ITemporaryCloneImpulseEffectObserver>();
    }
    obsies.Add(observer);
    observersForTemporaryCloneImpulse[id] = obsies;
  }

  public void RemoveTemporaryCloneImpulseObserver(int id, ITemporaryCloneImpulseEffectObserver observer) {
    if (observersForTemporaryCloneImpulse.ContainsKey(id)) {
      var list = observersForTemporaryCloneImpulse[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForTemporaryCloneImpulse.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public TemporaryCloneImpulse EffectTemporaryCloneImpulseCreate(
      int weight,
      string blueprintName,
      Location location,
      int hp) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new TemporaryCloneImpulseIncarnation(
            weight,
            blueprintName,
            location,
            hp
            );
    EffectInternalCreateTemporaryCloneImpulse(id, rootIncarnation.version, incarnation);
    return new TemporaryCloneImpulse(this, id);
  }
  public void EffectInternalCreateTemporaryCloneImpulse(
      int id,
      int incarnationVersion,
      TemporaryCloneImpulseIncarnation incarnation) {
    CheckUnlocked();
    var effect = new TemporaryCloneImpulseCreateEffect(id);
    rootIncarnation.incarnationsTemporaryCloneImpulse.Add(
        id,
        new VersionAndIncarnation<TemporaryCloneImpulseIncarnation>(
            incarnationVersion,
            incarnation));
    effectsTemporaryCloneImpulseCreateEffect.Add(effect);
  }

  public void EffectTemporaryCloneImpulseDelete(int id) {
    CheckUnlocked();
    var effect = new TemporaryCloneImpulseDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsTemporaryCloneImpulse[id];

    rootIncarnation.incarnationsTemporaryCloneImpulse.Remove(id);
    effectsTemporaryCloneImpulseDeleteEffect.Add(effect);
  }

     
  public int GetTemporaryCloneImpulseHash(int id, int version, TemporaryCloneImpulseIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.weight.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.blueprintName.GetDeterministicHashCode();
    result += id * version * 3 * incarnation.location.GetDeterministicHashCode();
    result += id * version * 4 * incarnation.hp.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastTemporaryCloneImpulseEffects(
      SortedDictionary<int, List<ITemporaryCloneImpulseEffectObserver>> observers) {
    foreach (var effect in effectsTemporaryCloneImpulseDeleteEffect) {
      if (observers.TryGetValue(0, out List<ITemporaryCloneImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTemporaryCloneImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITemporaryCloneImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTemporaryCloneImpulseEffect(effect);
        }
        observersForTemporaryCloneImpulse.Remove(effect.id);
      }
    }
    effectsTemporaryCloneImpulseDeleteEffect.Clear();


    foreach (var effect in effectsTemporaryCloneImpulseCreateEffect) {
      if (observers.TryGetValue(0, out List<ITemporaryCloneImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTemporaryCloneImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITemporaryCloneImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTemporaryCloneImpulseEffect(effect);
        }
      }
    }
    effectsTemporaryCloneImpulseCreateEffect.Clear();
  }
  public TemporaryCloneAICapabilityUCIncarnation GetTemporaryCloneAICapabilityUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsTemporaryCloneAICapabilityUC[id].incarnation;
  }
  public bool TemporaryCloneAICapabilityUCExists(int id) {
    return rootIncarnation.incarnationsTemporaryCloneAICapabilityUC.ContainsKey(id);
  }
  public TemporaryCloneAICapabilityUC GetTemporaryCloneAICapabilityUC(int id) {
    return new TemporaryCloneAICapabilityUC(this, id);
  }
  public List<TemporaryCloneAICapabilityUC> AllTemporaryCloneAICapabilityUC() {
    List<TemporaryCloneAICapabilityUC> result = new List<TemporaryCloneAICapabilityUC>(rootIncarnation.incarnationsTemporaryCloneAICapabilityUC.Count);
    foreach (var id in rootIncarnation.incarnationsTemporaryCloneAICapabilityUC.Keys) {
      result.Add(new TemporaryCloneAICapabilityUC(this, id));
    }
    return result;
  }
  public IEnumerator<TemporaryCloneAICapabilityUC> EnumAllTemporaryCloneAICapabilityUC() {
    foreach (var id in rootIncarnation.incarnationsTemporaryCloneAICapabilityUC.Keys) {
      yield return GetTemporaryCloneAICapabilityUC(id);
    }
  }
  public void CheckHasTemporaryCloneAICapabilityUC(TemporaryCloneAICapabilityUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasTemporaryCloneAICapabilityUC(thing.id);
  }
  public void CheckHasTemporaryCloneAICapabilityUC(int id) {
    if (!rootIncarnation.incarnationsTemporaryCloneAICapabilityUC.ContainsKey(id)) {
      throw new System.Exception("Invalid TemporaryCloneAICapabilityUC: " + id);
    }
  }
  public void AddTemporaryCloneAICapabilityUCObserver(int id, ITemporaryCloneAICapabilityUCEffectObserver observer) {
    List<ITemporaryCloneAICapabilityUCEffectObserver> obsies;
    if (!observersForTemporaryCloneAICapabilityUC.TryGetValue(id, out obsies)) {
      obsies = new List<ITemporaryCloneAICapabilityUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForTemporaryCloneAICapabilityUC[id] = obsies;
  }

  public void RemoveTemporaryCloneAICapabilityUCObserver(int id, ITemporaryCloneAICapabilityUCEffectObserver observer) {
    if (observersForTemporaryCloneAICapabilityUC.ContainsKey(id)) {
      var list = observersForTemporaryCloneAICapabilityUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForTemporaryCloneAICapabilityUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public TemporaryCloneAICapabilityUC EffectTemporaryCloneAICapabilityUCCreate(
      string blueprintName,
      int charges) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new TemporaryCloneAICapabilityUCIncarnation(
            blueprintName,
            charges
            );
    EffectInternalCreateTemporaryCloneAICapabilityUC(id, rootIncarnation.version, incarnation);
    return new TemporaryCloneAICapabilityUC(this, id);
  }
  public void EffectInternalCreateTemporaryCloneAICapabilityUC(
      int id,
      int incarnationVersion,
      TemporaryCloneAICapabilityUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new TemporaryCloneAICapabilityUCCreateEffect(id);
    rootIncarnation.incarnationsTemporaryCloneAICapabilityUC.Add(
        id,
        new VersionAndIncarnation<TemporaryCloneAICapabilityUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsTemporaryCloneAICapabilityUCCreateEffect.Add(effect);
  }

  public void EffectTemporaryCloneAICapabilityUCDelete(int id) {
    CheckUnlocked();
    var effect = new TemporaryCloneAICapabilityUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsTemporaryCloneAICapabilityUC[id];

    rootIncarnation.incarnationsTemporaryCloneAICapabilityUC.Remove(id);
    effectsTemporaryCloneAICapabilityUCDeleteEffect.Add(effect);
  }

     
  public int GetTemporaryCloneAICapabilityUCHash(int id, int version, TemporaryCloneAICapabilityUCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.blueprintName.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.charges.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastTemporaryCloneAICapabilityUCEffects(
      SortedDictionary<int, List<ITemporaryCloneAICapabilityUCEffectObserver>> observers) {
    foreach (var effect in effectsTemporaryCloneAICapabilityUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<ITemporaryCloneAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTemporaryCloneAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITemporaryCloneAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTemporaryCloneAICapabilityUCEffect(effect);
        }
        observersForTemporaryCloneAICapabilityUC.Remove(effect.id);
      }
    }
    effectsTemporaryCloneAICapabilityUCDeleteEffect.Clear();


    foreach (var effect in effectsTemporaryCloneAICapabilityUCSetChargesEffect) {
      if (observers.TryGetValue(0, out List<ITemporaryCloneAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTemporaryCloneAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITemporaryCloneAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTemporaryCloneAICapabilityUCEffect(effect);
        }
      }
    }
    effectsTemporaryCloneAICapabilityUCSetChargesEffect.Clear();

    foreach (var effect in effectsTemporaryCloneAICapabilityUCCreateEffect) {
      if (observers.TryGetValue(0, out List<ITemporaryCloneAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTemporaryCloneAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITemporaryCloneAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTemporaryCloneAICapabilityUCEffect(effect);
        }
      }
    }
    effectsTemporaryCloneAICapabilityUCCreateEffect.Clear();
  }

  public void EffectTemporaryCloneAICapabilityUCSetCharges(int id, int newValue) {
    CheckUnlocked();
    CheckHasTemporaryCloneAICapabilityUC(id);
    var effect = new TemporaryCloneAICapabilityUCSetChargesEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsTemporaryCloneAICapabilityUC[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.charges;
      oldIncarnationAndVersion.incarnation.charges = newValue;

    } else {
      var newIncarnation =
          new TemporaryCloneAICapabilityUCIncarnation(
              oldIncarnationAndVersion.incarnation.blueprintName,
              newValue);
      rootIncarnation.incarnationsTemporaryCloneAICapabilityUC[id] =
          new VersionAndIncarnation<TemporaryCloneAICapabilityUCIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsTemporaryCloneAICapabilityUCSetChargesEffect.Add(effect);
  }
  public SummonImpulseIncarnation GetSummonImpulseIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsSummonImpulse[id].incarnation;
  }
  public bool SummonImpulseExists(int id) {
    return rootIncarnation.incarnationsSummonImpulse.ContainsKey(id);
  }
  public SummonImpulse GetSummonImpulse(int id) {
    return new SummonImpulse(this, id);
  }
  public List<SummonImpulse> AllSummonImpulse() {
    List<SummonImpulse> result = new List<SummonImpulse>(rootIncarnation.incarnationsSummonImpulse.Count);
    foreach (var id in rootIncarnation.incarnationsSummonImpulse.Keys) {
      result.Add(new SummonImpulse(this, id));
    }
    return result;
  }
  public IEnumerator<SummonImpulse> EnumAllSummonImpulse() {
    foreach (var id in rootIncarnation.incarnationsSummonImpulse.Keys) {
      yield return GetSummonImpulse(id);
    }
  }
  public void CheckHasSummonImpulse(SummonImpulse thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasSummonImpulse(thing.id);
  }
  public void CheckHasSummonImpulse(int id) {
    if (!rootIncarnation.incarnationsSummonImpulse.ContainsKey(id)) {
      throw new System.Exception("Invalid SummonImpulse: " + id);
    }
  }
  public void AddSummonImpulseObserver(int id, ISummonImpulseEffectObserver observer) {
    List<ISummonImpulseEffectObserver> obsies;
    if (!observersForSummonImpulse.TryGetValue(id, out obsies)) {
      obsies = new List<ISummonImpulseEffectObserver>();
    }
    obsies.Add(observer);
    observersForSummonImpulse[id] = obsies;
  }

  public void RemoveSummonImpulseObserver(int id, ISummonImpulseEffectObserver observer) {
    if (observersForSummonImpulse.ContainsKey(id)) {
      var list = observersForSummonImpulse[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForSummonImpulse.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public SummonImpulse EffectSummonImpulseCreate(
      int weight,
      string blueprintName,
      Location location) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new SummonImpulseIncarnation(
            weight,
            blueprintName,
            location
            );
    EffectInternalCreateSummonImpulse(id, rootIncarnation.version, incarnation);
    return new SummonImpulse(this, id);
  }
  public void EffectInternalCreateSummonImpulse(
      int id,
      int incarnationVersion,
      SummonImpulseIncarnation incarnation) {
    CheckUnlocked();
    var effect = new SummonImpulseCreateEffect(id);
    rootIncarnation.incarnationsSummonImpulse.Add(
        id,
        new VersionAndIncarnation<SummonImpulseIncarnation>(
            incarnationVersion,
            incarnation));
    effectsSummonImpulseCreateEffect.Add(effect);
  }

  public void EffectSummonImpulseDelete(int id) {
    CheckUnlocked();
    var effect = new SummonImpulseDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsSummonImpulse[id];

    rootIncarnation.incarnationsSummonImpulse.Remove(id);
    effectsSummonImpulseDeleteEffect.Add(effect);
  }

     
  public int GetSummonImpulseHash(int id, int version, SummonImpulseIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.weight.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.blueprintName.GetDeterministicHashCode();
    result += id * version * 3 * incarnation.location.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastSummonImpulseEffects(
      SortedDictionary<int, List<ISummonImpulseEffectObserver>> observers) {
    foreach (var effect in effectsSummonImpulseDeleteEffect) {
      if (observers.TryGetValue(0, out List<ISummonImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSummonImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISummonImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSummonImpulseEffect(effect);
        }
        observersForSummonImpulse.Remove(effect.id);
      }
    }
    effectsSummonImpulseDeleteEffect.Clear();


    foreach (var effect in effectsSummonImpulseCreateEffect) {
      if (observers.TryGetValue(0, out List<ISummonImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSummonImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISummonImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSummonImpulseEffect(effect);
        }
      }
    }
    effectsSummonImpulseCreateEffect.Clear();
  }
  public SummonAICapabilityUCIncarnation GetSummonAICapabilityUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsSummonAICapabilityUC[id].incarnation;
  }
  public bool SummonAICapabilityUCExists(int id) {
    return rootIncarnation.incarnationsSummonAICapabilityUC.ContainsKey(id);
  }
  public SummonAICapabilityUC GetSummonAICapabilityUC(int id) {
    return new SummonAICapabilityUC(this, id);
  }
  public List<SummonAICapabilityUC> AllSummonAICapabilityUC() {
    List<SummonAICapabilityUC> result = new List<SummonAICapabilityUC>(rootIncarnation.incarnationsSummonAICapabilityUC.Count);
    foreach (var id in rootIncarnation.incarnationsSummonAICapabilityUC.Keys) {
      result.Add(new SummonAICapabilityUC(this, id));
    }
    return result;
  }
  public IEnumerator<SummonAICapabilityUC> EnumAllSummonAICapabilityUC() {
    foreach (var id in rootIncarnation.incarnationsSummonAICapabilityUC.Keys) {
      yield return GetSummonAICapabilityUC(id);
    }
  }
  public void CheckHasSummonAICapabilityUC(SummonAICapabilityUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasSummonAICapabilityUC(thing.id);
  }
  public void CheckHasSummonAICapabilityUC(int id) {
    if (!rootIncarnation.incarnationsSummonAICapabilityUC.ContainsKey(id)) {
      throw new System.Exception("Invalid SummonAICapabilityUC: " + id);
    }
  }
  public void AddSummonAICapabilityUCObserver(int id, ISummonAICapabilityUCEffectObserver observer) {
    List<ISummonAICapabilityUCEffectObserver> obsies;
    if (!observersForSummonAICapabilityUC.TryGetValue(id, out obsies)) {
      obsies = new List<ISummonAICapabilityUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForSummonAICapabilityUC[id] = obsies;
  }

  public void RemoveSummonAICapabilityUCObserver(int id, ISummonAICapabilityUCEffectObserver observer) {
    if (observersForSummonAICapabilityUC.ContainsKey(id)) {
      var list = observersForSummonAICapabilityUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForSummonAICapabilityUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public SummonAICapabilityUC EffectSummonAICapabilityUCCreate(
      string blueprintName,
      int charges) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new SummonAICapabilityUCIncarnation(
            blueprintName,
            charges
            );
    EffectInternalCreateSummonAICapabilityUC(id, rootIncarnation.version, incarnation);
    return new SummonAICapabilityUC(this, id);
  }
  public void EffectInternalCreateSummonAICapabilityUC(
      int id,
      int incarnationVersion,
      SummonAICapabilityUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new SummonAICapabilityUCCreateEffect(id);
    rootIncarnation.incarnationsSummonAICapabilityUC.Add(
        id,
        new VersionAndIncarnation<SummonAICapabilityUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsSummonAICapabilityUCCreateEffect.Add(effect);
  }

  public void EffectSummonAICapabilityUCDelete(int id) {
    CheckUnlocked();
    var effect = new SummonAICapabilityUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsSummonAICapabilityUC[id];

    rootIncarnation.incarnationsSummonAICapabilityUC.Remove(id);
    effectsSummonAICapabilityUCDeleteEffect.Add(effect);
  }

     
  public int GetSummonAICapabilityUCHash(int id, int version, SummonAICapabilityUCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.blueprintName.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.charges.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastSummonAICapabilityUCEffects(
      SortedDictionary<int, List<ISummonAICapabilityUCEffectObserver>> observers) {
    foreach (var effect in effectsSummonAICapabilityUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<ISummonAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSummonAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISummonAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSummonAICapabilityUCEffect(effect);
        }
        observersForSummonAICapabilityUC.Remove(effect.id);
      }
    }
    effectsSummonAICapabilityUCDeleteEffect.Clear();


    foreach (var effect in effectsSummonAICapabilityUCSetChargesEffect) {
      if (observers.TryGetValue(0, out List<ISummonAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSummonAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISummonAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSummonAICapabilityUCEffect(effect);
        }
      }
    }
    effectsSummonAICapabilityUCSetChargesEffect.Clear();

    foreach (var effect in effectsSummonAICapabilityUCCreateEffect) {
      if (observers.TryGetValue(0, out List<ISummonAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSummonAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISummonAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSummonAICapabilityUCEffect(effect);
        }
      }
    }
    effectsSummonAICapabilityUCCreateEffect.Clear();
  }

  public void EffectSummonAICapabilityUCSetCharges(int id, int newValue) {
    CheckUnlocked();
    CheckHasSummonAICapabilityUC(id);
    var effect = new SummonAICapabilityUCSetChargesEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsSummonAICapabilityUC[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.charges;
      oldIncarnationAndVersion.incarnation.charges = newValue;

    } else {
      var newIncarnation =
          new SummonAICapabilityUCIncarnation(
              oldIncarnationAndVersion.incarnation.blueprintName,
              newValue);
      rootIncarnation.incarnationsSummonAICapabilityUC[id] =
          new VersionAndIncarnation<SummonAICapabilityUCIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsSummonAICapabilityUCSetChargesEffect.Add(effect);
  }
  public SorcerousUCIncarnation GetSorcerousUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsSorcerousUC[id].incarnation;
  }
  public bool SorcerousUCExists(int id) {
    return rootIncarnation.incarnationsSorcerousUC.ContainsKey(id);
  }
  public SorcerousUC GetSorcerousUC(int id) {
    return new SorcerousUC(this, id);
  }
  public List<SorcerousUC> AllSorcerousUC() {
    List<SorcerousUC> result = new List<SorcerousUC>(rootIncarnation.incarnationsSorcerousUC.Count);
    foreach (var id in rootIncarnation.incarnationsSorcerousUC.Keys) {
      result.Add(new SorcerousUC(this, id));
    }
    return result;
  }
  public IEnumerator<SorcerousUC> EnumAllSorcerousUC() {
    foreach (var id in rootIncarnation.incarnationsSorcerousUC.Keys) {
      yield return GetSorcerousUC(id);
    }
  }
  public void CheckHasSorcerousUC(SorcerousUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasSorcerousUC(thing.id);
  }
  public void CheckHasSorcerousUC(int id) {
    if (!rootIncarnation.incarnationsSorcerousUC.ContainsKey(id)) {
      throw new System.Exception("Invalid SorcerousUC: " + id);
    }
  }
  public void AddSorcerousUCObserver(int id, ISorcerousUCEffectObserver observer) {
    List<ISorcerousUCEffectObserver> obsies;
    if (!observersForSorcerousUC.TryGetValue(id, out obsies)) {
      obsies = new List<ISorcerousUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForSorcerousUC[id] = obsies;
  }

  public void RemoveSorcerousUCObserver(int id, ISorcerousUCEffectObserver observer) {
    if (observersForSorcerousUC.ContainsKey(id)) {
      var list = observersForSorcerousUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForSorcerousUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public SorcerousUC EffectSorcerousUCCreate(
      int mp,
      int maxMp) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new SorcerousUCIncarnation(
            mp,
            maxMp
            );
    EffectInternalCreateSorcerousUC(id, rootIncarnation.version, incarnation);
    return new SorcerousUC(this, id);
  }
  public void EffectInternalCreateSorcerousUC(
      int id,
      int incarnationVersion,
      SorcerousUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new SorcerousUCCreateEffect(id);
    rootIncarnation.incarnationsSorcerousUC.Add(
        id,
        new VersionAndIncarnation<SorcerousUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsSorcerousUCCreateEffect.Add(effect);
  }

  public void EffectSorcerousUCDelete(int id) {
    CheckUnlocked();
    var effect = new SorcerousUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsSorcerousUC[id];

    rootIncarnation.incarnationsSorcerousUC.Remove(id);
    effectsSorcerousUCDeleteEffect.Add(effect);
  }

     
  public int GetSorcerousUCHash(int id, int version, SorcerousUCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.mp.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.maxMp.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastSorcerousUCEffects(
      SortedDictionary<int, List<ISorcerousUCEffectObserver>> observers) {
    foreach (var effect in effectsSorcerousUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<ISorcerousUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSorcerousUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISorcerousUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSorcerousUCEffect(effect);
        }
        observersForSorcerousUC.Remove(effect.id);
      }
    }
    effectsSorcerousUCDeleteEffect.Clear();


    foreach (var effect in effectsSorcerousUCSetMpEffect) {
      if (observers.TryGetValue(0, out List<ISorcerousUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSorcerousUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISorcerousUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSorcerousUCEffect(effect);
        }
      }
    }
    effectsSorcerousUCSetMpEffect.Clear();

    foreach (var effect in effectsSorcerousUCSetMaxMpEffect) {
      if (observers.TryGetValue(0, out List<ISorcerousUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSorcerousUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISorcerousUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSorcerousUCEffect(effect);
        }
      }
    }
    effectsSorcerousUCSetMaxMpEffect.Clear();

    foreach (var effect in effectsSorcerousUCCreateEffect) {
      if (observers.TryGetValue(0, out List<ISorcerousUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSorcerousUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISorcerousUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSorcerousUCEffect(effect);
        }
      }
    }
    effectsSorcerousUCCreateEffect.Clear();
  }

  public void EffectSorcerousUCSetMp(int id, int newValue) {
    CheckUnlocked();
    CheckHasSorcerousUC(id);
    var effect = new SorcerousUCSetMpEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsSorcerousUC[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.mp;
      oldIncarnationAndVersion.incarnation.mp = newValue;

    } else {
      var newIncarnation =
          new SorcerousUCIncarnation(
              newValue,
              oldIncarnationAndVersion.incarnation.maxMp);
      rootIncarnation.incarnationsSorcerousUC[id] =
          new VersionAndIncarnation<SorcerousUCIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsSorcerousUCSetMpEffect.Add(effect);
  }

  public void EffectSorcerousUCSetMaxMp(int id, int newValue) {
    CheckUnlocked();
    CheckHasSorcerousUC(id);
    var effect = new SorcerousUCSetMaxMpEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsSorcerousUC[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.maxMp;
      oldIncarnationAndVersion.incarnation.maxMp = newValue;

    } else {
      var newIncarnation =
          new SorcerousUCIncarnation(
              oldIncarnationAndVersion.incarnation.mp,
              newValue);
      rootIncarnation.incarnationsSorcerousUC[id] =
          new VersionAndIncarnation<SorcerousUCIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsSorcerousUCSetMaxMpEffect.Add(effect);
  }
  public BaseOffenseUCIncarnation GetBaseOffenseUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsBaseOffenseUC[id].incarnation;
  }
  public bool BaseOffenseUCExists(int id) {
    return rootIncarnation.incarnationsBaseOffenseUC.ContainsKey(id);
  }
  public BaseOffenseUC GetBaseOffenseUC(int id) {
    return new BaseOffenseUC(this, id);
  }
  public List<BaseOffenseUC> AllBaseOffenseUC() {
    List<BaseOffenseUC> result = new List<BaseOffenseUC>(rootIncarnation.incarnationsBaseOffenseUC.Count);
    foreach (var id in rootIncarnation.incarnationsBaseOffenseUC.Keys) {
      result.Add(new BaseOffenseUC(this, id));
    }
    return result;
  }
  public IEnumerator<BaseOffenseUC> EnumAllBaseOffenseUC() {
    foreach (var id in rootIncarnation.incarnationsBaseOffenseUC.Keys) {
      yield return GetBaseOffenseUC(id);
    }
  }
  public void CheckHasBaseOffenseUC(BaseOffenseUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasBaseOffenseUC(thing.id);
  }
  public void CheckHasBaseOffenseUC(int id) {
    if (!rootIncarnation.incarnationsBaseOffenseUC.ContainsKey(id)) {
      throw new System.Exception("Invalid BaseOffenseUC: " + id);
    }
  }
  public void AddBaseOffenseUCObserver(int id, IBaseOffenseUCEffectObserver observer) {
    List<IBaseOffenseUCEffectObserver> obsies;
    if (!observersForBaseOffenseUC.TryGetValue(id, out obsies)) {
      obsies = new List<IBaseOffenseUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForBaseOffenseUC[id] = obsies;
  }

  public void RemoveBaseOffenseUCObserver(int id, IBaseOffenseUCEffectObserver observer) {
    if (observersForBaseOffenseUC.ContainsKey(id)) {
      var list = observersForBaseOffenseUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForBaseOffenseUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public BaseOffenseUC EffectBaseOffenseUCCreate(
      int outgoingDamageAddConstant,
      int outgoingDamageMultiplierPercent) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new BaseOffenseUCIncarnation(
            outgoingDamageAddConstant,
            outgoingDamageMultiplierPercent
            );
    EffectInternalCreateBaseOffenseUC(id, rootIncarnation.version, incarnation);
    return new BaseOffenseUC(this, id);
  }
  public void EffectInternalCreateBaseOffenseUC(
      int id,
      int incarnationVersion,
      BaseOffenseUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new BaseOffenseUCCreateEffect(id);
    rootIncarnation.incarnationsBaseOffenseUC.Add(
        id,
        new VersionAndIncarnation<BaseOffenseUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsBaseOffenseUCCreateEffect.Add(effect);
  }

  public void EffectBaseOffenseUCDelete(int id) {
    CheckUnlocked();
    var effect = new BaseOffenseUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsBaseOffenseUC[id];

    rootIncarnation.incarnationsBaseOffenseUC.Remove(id);
    effectsBaseOffenseUCDeleteEffect.Add(effect);
  }

     
  public int GetBaseOffenseUCHash(int id, int version, BaseOffenseUCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.outgoingDamageAddConstant.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.outgoingDamageMultiplierPercent.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastBaseOffenseUCEffects(
      SortedDictionary<int, List<IBaseOffenseUCEffectObserver>> observers) {
    foreach (var effect in effectsBaseOffenseUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IBaseOffenseUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseOffenseUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseOffenseUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseOffenseUCEffect(effect);
        }
        observersForBaseOffenseUC.Remove(effect.id);
      }
    }
    effectsBaseOffenseUCDeleteEffect.Clear();


    foreach (var effect in effectsBaseOffenseUCCreateEffect) {
      if (observers.TryGetValue(0, out List<IBaseOffenseUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseOffenseUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseOffenseUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseOffenseUCEffect(effect);
        }
      }
    }
    effectsBaseOffenseUCCreateEffect.Clear();
  }
  public BaseMovementTimeUCIncarnation GetBaseMovementTimeUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsBaseMovementTimeUC[id].incarnation;
  }
  public bool BaseMovementTimeUCExists(int id) {
    return rootIncarnation.incarnationsBaseMovementTimeUC.ContainsKey(id);
  }
  public BaseMovementTimeUC GetBaseMovementTimeUC(int id) {
    return new BaseMovementTimeUC(this, id);
  }
  public List<BaseMovementTimeUC> AllBaseMovementTimeUC() {
    List<BaseMovementTimeUC> result = new List<BaseMovementTimeUC>(rootIncarnation.incarnationsBaseMovementTimeUC.Count);
    foreach (var id in rootIncarnation.incarnationsBaseMovementTimeUC.Keys) {
      result.Add(new BaseMovementTimeUC(this, id));
    }
    return result;
  }
  public IEnumerator<BaseMovementTimeUC> EnumAllBaseMovementTimeUC() {
    foreach (var id in rootIncarnation.incarnationsBaseMovementTimeUC.Keys) {
      yield return GetBaseMovementTimeUC(id);
    }
  }
  public void CheckHasBaseMovementTimeUC(BaseMovementTimeUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasBaseMovementTimeUC(thing.id);
  }
  public void CheckHasBaseMovementTimeUC(int id) {
    if (!rootIncarnation.incarnationsBaseMovementTimeUC.ContainsKey(id)) {
      throw new System.Exception("Invalid BaseMovementTimeUC: " + id);
    }
  }
  public void AddBaseMovementTimeUCObserver(int id, IBaseMovementTimeUCEffectObserver observer) {
    List<IBaseMovementTimeUCEffectObserver> obsies;
    if (!observersForBaseMovementTimeUC.TryGetValue(id, out obsies)) {
      obsies = new List<IBaseMovementTimeUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForBaseMovementTimeUC[id] = obsies;
  }

  public void RemoveBaseMovementTimeUCObserver(int id, IBaseMovementTimeUCEffectObserver observer) {
    if (observersForBaseMovementTimeUC.ContainsKey(id)) {
      var list = observersForBaseMovementTimeUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForBaseMovementTimeUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public BaseMovementTimeUC EffectBaseMovementTimeUCCreate(
      int movementTimeAddConstant,
      int movementTimeMultiplierPercent) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new BaseMovementTimeUCIncarnation(
            movementTimeAddConstant,
            movementTimeMultiplierPercent
            );
    EffectInternalCreateBaseMovementTimeUC(id, rootIncarnation.version, incarnation);
    return new BaseMovementTimeUC(this, id);
  }
  public void EffectInternalCreateBaseMovementTimeUC(
      int id,
      int incarnationVersion,
      BaseMovementTimeUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new BaseMovementTimeUCCreateEffect(id);
    rootIncarnation.incarnationsBaseMovementTimeUC.Add(
        id,
        new VersionAndIncarnation<BaseMovementTimeUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsBaseMovementTimeUCCreateEffect.Add(effect);
  }

  public void EffectBaseMovementTimeUCDelete(int id) {
    CheckUnlocked();
    var effect = new BaseMovementTimeUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsBaseMovementTimeUC[id];

    rootIncarnation.incarnationsBaseMovementTimeUC.Remove(id);
    effectsBaseMovementTimeUCDeleteEffect.Add(effect);
  }

     
  public int GetBaseMovementTimeUCHash(int id, int version, BaseMovementTimeUCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.movementTimeAddConstant.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.movementTimeMultiplierPercent.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastBaseMovementTimeUCEffects(
      SortedDictionary<int, List<IBaseMovementTimeUCEffectObserver>> observers) {
    foreach (var effect in effectsBaseMovementTimeUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IBaseMovementTimeUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseMovementTimeUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseMovementTimeUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseMovementTimeUCEffect(effect);
        }
        observersForBaseMovementTimeUC.Remove(effect.id);
      }
    }
    effectsBaseMovementTimeUCDeleteEffect.Clear();


    foreach (var effect in effectsBaseMovementTimeUCCreateEffect) {
      if (observers.TryGetValue(0, out List<IBaseMovementTimeUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseMovementTimeUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseMovementTimeUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseMovementTimeUCEffect(effect);
        }
      }
    }
    effectsBaseMovementTimeUCCreateEffect.Clear();
  }
  public BaseDefenseUCIncarnation GetBaseDefenseUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsBaseDefenseUC[id].incarnation;
  }
  public bool BaseDefenseUCExists(int id) {
    return rootIncarnation.incarnationsBaseDefenseUC.ContainsKey(id);
  }
  public BaseDefenseUC GetBaseDefenseUC(int id) {
    return new BaseDefenseUC(this, id);
  }
  public List<BaseDefenseUC> AllBaseDefenseUC() {
    List<BaseDefenseUC> result = new List<BaseDefenseUC>(rootIncarnation.incarnationsBaseDefenseUC.Count);
    foreach (var id in rootIncarnation.incarnationsBaseDefenseUC.Keys) {
      result.Add(new BaseDefenseUC(this, id));
    }
    return result;
  }
  public IEnumerator<BaseDefenseUC> EnumAllBaseDefenseUC() {
    foreach (var id in rootIncarnation.incarnationsBaseDefenseUC.Keys) {
      yield return GetBaseDefenseUC(id);
    }
  }
  public void CheckHasBaseDefenseUC(BaseDefenseUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasBaseDefenseUC(thing.id);
  }
  public void CheckHasBaseDefenseUC(int id) {
    if (!rootIncarnation.incarnationsBaseDefenseUC.ContainsKey(id)) {
      throw new System.Exception("Invalid BaseDefenseUC: " + id);
    }
  }
  public void AddBaseDefenseUCObserver(int id, IBaseDefenseUCEffectObserver observer) {
    List<IBaseDefenseUCEffectObserver> obsies;
    if (!observersForBaseDefenseUC.TryGetValue(id, out obsies)) {
      obsies = new List<IBaseDefenseUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForBaseDefenseUC[id] = obsies;
  }

  public void RemoveBaseDefenseUCObserver(int id, IBaseDefenseUCEffectObserver observer) {
    if (observersForBaseDefenseUC.ContainsKey(id)) {
      var list = observersForBaseDefenseUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForBaseDefenseUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public BaseDefenseUC EffectBaseDefenseUCCreate(
      int incomingDamageAddConstant,
      int incomingDamageMultiplierPercent) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new BaseDefenseUCIncarnation(
            incomingDamageAddConstant,
            incomingDamageMultiplierPercent
            );
    EffectInternalCreateBaseDefenseUC(id, rootIncarnation.version, incarnation);
    return new BaseDefenseUC(this, id);
  }
  public void EffectInternalCreateBaseDefenseUC(
      int id,
      int incarnationVersion,
      BaseDefenseUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new BaseDefenseUCCreateEffect(id);
    rootIncarnation.incarnationsBaseDefenseUC.Add(
        id,
        new VersionAndIncarnation<BaseDefenseUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsBaseDefenseUCCreateEffect.Add(effect);
  }

  public void EffectBaseDefenseUCDelete(int id) {
    CheckUnlocked();
    var effect = new BaseDefenseUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsBaseDefenseUC[id];

    rootIncarnation.incarnationsBaseDefenseUC.Remove(id);
    effectsBaseDefenseUCDeleteEffect.Add(effect);
  }

     
  public int GetBaseDefenseUCHash(int id, int version, BaseDefenseUCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.incomingDamageAddConstant.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.incomingDamageMultiplierPercent.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastBaseDefenseUCEffects(
      SortedDictionary<int, List<IBaseDefenseUCEffectObserver>> observers) {
    foreach (var effect in effectsBaseDefenseUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IBaseDefenseUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseDefenseUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseDefenseUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseDefenseUCEffect(effect);
        }
        observersForBaseDefenseUC.Remove(effect.id);
      }
    }
    effectsBaseDefenseUCDeleteEffect.Clear();


    foreach (var effect in effectsBaseDefenseUCCreateEffect) {
      if (observers.TryGetValue(0, out List<IBaseDefenseUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseDefenseUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseDefenseUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseDefenseUCEffect(effect);
        }
      }
    }
    effectsBaseDefenseUCCreateEffect.Clear();
  }
  public BaseCombatTimeUCIncarnation GetBaseCombatTimeUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsBaseCombatTimeUC[id].incarnation;
  }
  public bool BaseCombatTimeUCExists(int id) {
    return rootIncarnation.incarnationsBaseCombatTimeUC.ContainsKey(id);
  }
  public BaseCombatTimeUC GetBaseCombatTimeUC(int id) {
    return new BaseCombatTimeUC(this, id);
  }
  public List<BaseCombatTimeUC> AllBaseCombatTimeUC() {
    List<BaseCombatTimeUC> result = new List<BaseCombatTimeUC>(rootIncarnation.incarnationsBaseCombatTimeUC.Count);
    foreach (var id in rootIncarnation.incarnationsBaseCombatTimeUC.Keys) {
      result.Add(new BaseCombatTimeUC(this, id));
    }
    return result;
  }
  public IEnumerator<BaseCombatTimeUC> EnumAllBaseCombatTimeUC() {
    foreach (var id in rootIncarnation.incarnationsBaseCombatTimeUC.Keys) {
      yield return GetBaseCombatTimeUC(id);
    }
  }
  public void CheckHasBaseCombatTimeUC(BaseCombatTimeUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasBaseCombatTimeUC(thing.id);
  }
  public void CheckHasBaseCombatTimeUC(int id) {
    if (!rootIncarnation.incarnationsBaseCombatTimeUC.ContainsKey(id)) {
      throw new System.Exception("Invalid BaseCombatTimeUC: " + id);
    }
  }
  public void AddBaseCombatTimeUCObserver(int id, IBaseCombatTimeUCEffectObserver observer) {
    List<IBaseCombatTimeUCEffectObserver> obsies;
    if (!observersForBaseCombatTimeUC.TryGetValue(id, out obsies)) {
      obsies = new List<IBaseCombatTimeUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForBaseCombatTimeUC[id] = obsies;
  }

  public void RemoveBaseCombatTimeUCObserver(int id, IBaseCombatTimeUCEffectObserver observer) {
    if (observersForBaseCombatTimeUC.ContainsKey(id)) {
      var list = observersForBaseCombatTimeUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForBaseCombatTimeUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public BaseCombatTimeUC EffectBaseCombatTimeUCCreate(
      int combatTimeAddConstant,
      int combatTimeMultiplierPercent) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new BaseCombatTimeUCIncarnation(
            combatTimeAddConstant,
            combatTimeMultiplierPercent
            );
    EffectInternalCreateBaseCombatTimeUC(id, rootIncarnation.version, incarnation);
    return new BaseCombatTimeUC(this, id);
  }
  public void EffectInternalCreateBaseCombatTimeUC(
      int id,
      int incarnationVersion,
      BaseCombatTimeUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new BaseCombatTimeUCCreateEffect(id);
    rootIncarnation.incarnationsBaseCombatTimeUC.Add(
        id,
        new VersionAndIncarnation<BaseCombatTimeUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsBaseCombatTimeUCCreateEffect.Add(effect);
  }

  public void EffectBaseCombatTimeUCDelete(int id) {
    CheckUnlocked();
    var effect = new BaseCombatTimeUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsBaseCombatTimeUC[id];

    rootIncarnation.incarnationsBaseCombatTimeUC.Remove(id);
    effectsBaseCombatTimeUCDeleteEffect.Add(effect);
  }

     
  public int GetBaseCombatTimeUCHash(int id, int version, BaseCombatTimeUCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.combatTimeAddConstant.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.combatTimeMultiplierPercent.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastBaseCombatTimeUCEffects(
      SortedDictionary<int, List<IBaseCombatTimeUCEffectObserver>> observers) {
    foreach (var effect in effectsBaseCombatTimeUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IBaseCombatTimeUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseCombatTimeUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseCombatTimeUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseCombatTimeUCEffect(effect);
        }
        observersForBaseCombatTimeUC.Remove(effect.id);
      }
    }
    effectsBaseCombatTimeUCDeleteEffect.Clear();


    foreach (var effect in effectsBaseCombatTimeUCCreateEffect) {
      if (observers.TryGetValue(0, out List<IBaseCombatTimeUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseCombatTimeUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseCombatTimeUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseCombatTimeUCEffect(effect);
        }
      }
    }
    effectsBaseCombatTimeUCCreateEffect.Clear();
  }
  public MiredUCIncarnation GetMiredUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsMiredUC[id].incarnation;
  }
  public bool MiredUCExists(int id) {
    return rootIncarnation.incarnationsMiredUC.ContainsKey(id);
  }
  public MiredUC GetMiredUC(int id) {
    return new MiredUC(this, id);
  }
  public List<MiredUC> AllMiredUC() {
    List<MiredUC> result = new List<MiredUC>(rootIncarnation.incarnationsMiredUC.Count);
    foreach (var id in rootIncarnation.incarnationsMiredUC.Keys) {
      result.Add(new MiredUC(this, id));
    }
    return result;
  }
  public IEnumerator<MiredUC> EnumAllMiredUC() {
    foreach (var id in rootIncarnation.incarnationsMiredUC.Keys) {
      yield return GetMiredUC(id);
    }
  }
  public void CheckHasMiredUC(MiredUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasMiredUC(thing.id);
  }
  public void CheckHasMiredUC(int id) {
    if (!rootIncarnation.incarnationsMiredUC.ContainsKey(id)) {
      throw new System.Exception("Invalid MiredUC: " + id);
    }
  }
  public void AddMiredUCObserver(int id, IMiredUCEffectObserver observer) {
    List<IMiredUCEffectObserver> obsies;
    if (!observersForMiredUC.TryGetValue(id, out obsies)) {
      obsies = new List<IMiredUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForMiredUC[id] = obsies;
  }

  public void RemoveMiredUCObserver(int id, IMiredUCEffectObserver observer) {
    if (observersForMiredUC.ContainsKey(id)) {
      var list = observersForMiredUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForMiredUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public MiredUC EffectMiredUCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new MiredUCIncarnation(

            );
    EffectInternalCreateMiredUC(id, rootIncarnation.version, incarnation);
    return new MiredUC(this, id);
  }
  public void EffectInternalCreateMiredUC(
      int id,
      int incarnationVersion,
      MiredUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new MiredUCCreateEffect(id);
    rootIncarnation.incarnationsMiredUC.Add(
        id,
        new VersionAndIncarnation<MiredUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsMiredUCCreateEffect.Add(effect);
  }

  public void EffectMiredUCDelete(int id) {
    CheckUnlocked();
    var effect = new MiredUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsMiredUC[id];

    rootIncarnation.incarnationsMiredUC.Remove(id);
    effectsMiredUCDeleteEffect.Add(effect);
  }

     
  public int GetMiredUCHash(int id, int version, MiredUCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastMiredUCEffects(
      SortedDictionary<int, List<IMiredUCEffectObserver>> observers) {
    foreach (var effect in effectsMiredUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IMiredUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMiredUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMiredUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMiredUCEffect(effect);
        }
        observersForMiredUC.Remove(effect.id);
      }
    }
    effectsMiredUCDeleteEffect.Clear();


    foreach (var effect in effectsMiredUCCreateEffect) {
      if (observers.TryGetValue(0, out List<IMiredUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMiredUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMiredUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMiredUCEffect(effect);
        }
      }
    }
    effectsMiredUCCreateEffect.Clear();
  }
  public MireImpulseIncarnation GetMireImpulseIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsMireImpulse[id].incarnation;
  }
  public bool MireImpulseExists(int id) {
    return rootIncarnation.incarnationsMireImpulse.ContainsKey(id);
  }
  public MireImpulse GetMireImpulse(int id) {
    return new MireImpulse(this, id);
  }
  public List<MireImpulse> AllMireImpulse() {
    List<MireImpulse> result = new List<MireImpulse>(rootIncarnation.incarnationsMireImpulse.Count);
    foreach (var id in rootIncarnation.incarnationsMireImpulse.Keys) {
      result.Add(new MireImpulse(this, id));
    }
    return result;
  }
  public IEnumerator<MireImpulse> EnumAllMireImpulse() {
    foreach (var id in rootIncarnation.incarnationsMireImpulse.Keys) {
      yield return GetMireImpulse(id);
    }
  }
  public void CheckHasMireImpulse(MireImpulse thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasMireImpulse(thing.id);
  }
  public void CheckHasMireImpulse(int id) {
    if (!rootIncarnation.incarnationsMireImpulse.ContainsKey(id)) {
      throw new System.Exception("Invalid MireImpulse: " + id);
    }
  }
  public void AddMireImpulseObserver(int id, IMireImpulseEffectObserver observer) {
    List<IMireImpulseEffectObserver> obsies;
    if (!observersForMireImpulse.TryGetValue(id, out obsies)) {
      obsies = new List<IMireImpulseEffectObserver>();
    }
    obsies.Add(observer);
    observersForMireImpulse[id] = obsies;
  }

  public void RemoveMireImpulseObserver(int id, IMireImpulseEffectObserver observer) {
    if (observersForMireImpulse.ContainsKey(id)) {
      var list = observersForMireImpulse[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForMireImpulse.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public MireImpulse EffectMireImpulseCreate(
      int weight,
      Unit targetUnit) {
    CheckUnlocked();
    CheckHasUnit(targetUnit);

    var id = NewId();
    var incarnation =
        new MireImpulseIncarnation(
            weight,
            targetUnit.id
            );
    EffectInternalCreateMireImpulse(id, rootIncarnation.version, incarnation);
    return new MireImpulse(this, id);
  }
  public void EffectInternalCreateMireImpulse(
      int id,
      int incarnationVersion,
      MireImpulseIncarnation incarnation) {
    CheckUnlocked();
    var effect = new MireImpulseCreateEffect(id);
    rootIncarnation.incarnationsMireImpulse.Add(
        id,
        new VersionAndIncarnation<MireImpulseIncarnation>(
            incarnationVersion,
            incarnation));
    effectsMireImpulseCreateEffect.Add(effect);
  }

  public void EffectMireImpulseDelete(int id) {
    CheckUnlocked();
    var effect = new MireImpulseDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsMireImpulse[id];

    rootIncarnation.incarnationsMireImpulse.Remove(id);
    effectsMireImpulseDeleteEffect.Add(effect);
  }

     
  public int GetMireImpulseHash(int id, int version, MireImpulseIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.weight.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.targetUnit.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastMireImpulseEffects(
      SortedDictionary<int, List<IMireImpulseEffectObserver>> observers) {
    foreach (var effect in effectsMireImpulseDeleteEffect) {
      if (observers.TryGetValue(0, out List<IMireImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMireImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMireImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMireImpulseEffect(effect);
        }
        observersForMireImpulse.Remove(effect.id);
      }
    }
    effectsMireImpulseDeleteEffect.Clear();


    foreach (var effect in effectsMireImpulseCreateEffect) {
      if (observers.TryGetValue(0, out List<IMireImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMireImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMireImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMireImpulseEffect(effect);
        }
      }
    }
    effectsMireImpulseCreateEffect.Clear();
  }
  public EvaporateImpulseIncarnation GetEvaporateImpulseIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsEvaporateImpulse[id].incarnation;
  }
  public bool EvaporateImpulseExists(int id) {
    return rootIncarnation.incarnationsEvaporateImpulse.ContainsKey(id);
  }
  public EvaporateImpulse GetEvaporateImpulse(int id) {
    return new EvaporateImpulse(this, id);
  }
  public List<EvaporateImpulse> AllEvaporateImpulse() {
    List<EvaporateImpulse> result = new List<EvaporateImpulse>(rootIncarnation.incarnationsEvaporateImpulse.Count);
    foreach (var id in rootIncarnation.incarnationsEvaporateImpulse.Keys) {
      result.Add(new EvaporateImpulse(this, id));
    }
    return result;
  }
  public IEnumerator<EvaporateImpulse> EnumAllEvaporateImpulse() {
    foreach (var id in rootIncarnation.incarnationsEvaporateImpulse.Keys) {
      yield return GetEvaporateImpulse(id);
    }
  }
  public void CheckHasEvaporateImpulse(EvaporateImpulse thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasEvaporateImpulse(thing.id);
  }
  public void CheckHasEvaporateImpulse(int id) {
    if (!rootIncarnation.incarnationsEvaporateImpulse.ContainsKey(id)) {
      throw new System.Exception("Invalid EvaporateImpulse: " + id);
    }
  }
  public void AddEvaporateImpulseObserver(int id, IEvaporateImpulseEffectObserver observer) {
    List<IEvaporateImpulseEffectObserver> obsies;
    if (!observersForEvaporateImpulse.TryGetValue(id, out obsies)) {
      obsies = new List<IEvaporateImpulseEffectObserver>();
    }
    obsies.Add(observer);
    observersForEvaporateImpulse[id] = obsies;
  }

  public void RemoveEvaporateImpulseObserver(int id, IEvaporateImpulseEffectObserver observer) {
    if (observersForEvaporateImpulse.ContainsKey(id)) {
      var list = observersForEvaporateImpulse[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForEvaporateImpulse.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public EvaporateImpulse EffectEvaporateImpulseCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new EvaporateImpulseIncarnation(

            );
    EffectInternalCreateEvaporateImpulse(id, rootIncarnation.version, incarnation);
    return new EvaporateImpulse(this, id);
  }
  public void EffectInternalCreateEvaporateImpulse(
      int id,
      int incarnationVersion,
      EvaporateImpulseIncarnation incarnation) {
    CheckUnlocked();
    var effect = new EvaporateImpulseCreateEffect(id);
    rootIncarnation.incarnationsEvaporateImpulse.Add(
        id,
        new VersionAndIncarnation<EvaporateImpulseIncarnation>(
            incarnationVersion,
            incarnation));
    effectsEvaporateImpulseCreateEffect.Add(effect);
  }

  public void EffectEvaporateImpulseDelete(int id) {
    CheckUnlocked();
    var effect = new EvaporateImpulseDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsEvaporateImpulse[id];

    rootIncarnation.incarnationsEvaporateImpulse.Remove(id);
    effectsEvaporateImpulseDeleteEffect.Add(effect);
  }

     
  public int GetEvaporateImpulseHash(int id, int version, EvaporateImpulseIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastEvaporateImpulseEffects(
      SortedDictionary<int, List<IEvaporateImpulseEffectObserver>> observers) {
    foreach (var effect in effectsEvaporateImpulseDeleteEffect) {
      if (observers.TryGetValue(0, out List<IEvaporateImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnEvaporateImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IEvaporateImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnEvaporateImpulseEffect(effect);
        }
        observersForEvaporateImpulse.Remove(effect.id);
      }
    }
    effectsEvaporateImpulseDeleteEffect.Clear();


    foreach (var effect in effectsEvaporateImpulseCreateEffect) {
      if (observers.TryGetValue(0, out List<IEvaporateImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnEvaporateImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IEvaporateImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnEvaporateImpulseEffect(effect);
        }
      }
    }
    effectsEvaporateImpulseCreateEffect.Clear();
  }
  public TimeCloneAICapabilityUCIncarnation GetTimeCloneAICapabilityUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsTimeCloneAICapabilityUC[id].incarnation;
  }
  public bool TimeCloneAICapabilityUCExists(int id) {
    return rootIncarnation.incarnationsTimeCloneAICapabilityUC.ContainsKey(id);
  }
  public TimeCloneAICapabilityUC GetTimeCloneAICapabilityUC(int id) {
    return new TimeCloneAICapabilityUC(this, id);
  }
  public List<TimeCloneAICapabilityUC> AllTimeCloneAICapabilityUC() {
    List<TimeCloneAICapabilityUC> result = new List<TimeCloneAICapabilityUC>(rootIncarnation.incarnationsTimeCloneAICapabilityUC.Count);
    foreach (var id in rootIncarnation.incarnationsTimeCloneAICapabilityUC.Keys) {
      result.Add(new TimeCloneAICapabilityUC(this, id));
    }
    return result;
  }
  public IEnumerator<TimeCloneAICapabilityUC> EnumAllTimeCloneAICapabilityUC() {
    foreach (var id in rootIncarnation.incarnationsTimeCloneAICapabilityUC.Keys) {
      yield return GetTimeCloneAICapabilityUC(id);
    }
  }
  public void CheckHasTimeCloneAICapabilityUC(TimeCloneAICapabilityUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasTimeCloneAICapabilityUC(thing.id);
  }
  public void CheckHasTimeCloneAICapabilityUC(int id) {
    if (!rootIncarnation.incarnationsTimeCloneAICapabilityUC.ContainsKey(id)) {
      throw new System.Exception("Invalid TimeCloneAICapabilityUC: " + id);
    }
  }
  public void AddTimeCloneAICapabilityUCObserver(int id, ITimeCloneAICapabilityUCEffectObserver observer) {
    List<ITimeCloneAICapabilityUCEffectObserver> obsies;
    if (!observersForTimeCloneAICapabilityUC.TryGetValue(id, out obsies)) {
      obsies = new List<ITimeCloneAICapabilityUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForTimeCloneAICapabilityUC[id] = obsies;
  }

  public void RemoveTimeCloneAICapabilityUCObserver(int id, ITimeCloneAICapabilityUCEffectObserver observer) {
    if (observersForTimeCloneAICapabilityUC.ContainsKey(id)) {
      var list = observersForTimeCloneAICapabilityUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForTimeCloneAICapabilityUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public TimeCloneAICapabilityUC EffectTimeCloneAICapabilityUCCreate(
      IRequestMutList script) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new TimeCloneAICapabilityUCIncarnation(
            script.id
            );
    EffectInternalCreateTimeCloneAICapabilityUC(id, rootIncarnation.version, incarnation);
    return new TimeCloneAICapabilityUC(this, id);
  }
  public void EffectInternalCreateTimeCloneAICapabilityUC(
      int id,
      int incarnationVersion,
      TimeCloneAICapabilityUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new TimeCloneAICapabilityUCCreateEffect(id);
    rootIncarnation.incarnationsTimeCloneAICapabilityUC.Add(
        id,
        new VersionAndIncarnation<TimeCloneAICapabilityUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsTimeCloneAICapabilityUCCreateEffect.Add(effect);
  }

  public void EffectTimeCloneAICapabilityUCDelete(int id) {
    CheckUnlocked();
    var effect = new TimeCloneAICapabilityUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsTimeCloneAICapabilityUC[id];

    rootIncarnation.incarnationsTimeCloneAICapabilityUC.Remove(id);
    effectsTimeCloneAICapabilityUCDeleteEffect.Add(effect);
  }

     
  public int GetTimeCloneAICapabilityUCHash(int id, int version, TimeCloneAICapabilityUCIncarnation incarnation) {
    int result = id * version;
    if (!object.ReferenceEquals(incarnation.script, null)) {
      result += id * version * 1 * incarnation.script.GetDeterministicHashCode();
    }
    return result;
  }
     
  public void BroadcastTimeCloneAICapabilityUCEffects(
      SortedDictionary<int, List<ITimeCloneAICapabilityUCEffectObserver>> observers) {
    foreach (var effect in effectsTimeCloneAICapabilityUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<ITimeCloneAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTimeCloneAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITimeCloneAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTimeCloneAICapabilityUCEffect(effect);
        }
        observersForTimeCloneAICapabilityUC.Remove(effect.id);
      }
    }
    effectsTimeCloneAICapabilityUCDeleteEffect.Clear();


    foreach (var effect in effectsTimeCloneAICapabilityUCCreateEffect) {
      if (observers.TryGetValue(0, out List<ITimeCloneAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTimeCloneAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITimeCloneAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTimeCloneAICapabilityUCEffect(effect);
        }
      }
    }
    effectsTimeCloneAICapabilityUCCreateEffect.Clear();
  }
  public MoveImpulseIncarnation GetMoveImpulseIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsMoveImpulse[id].incarnation;
  }
  public bool MoveImpulseExists(int id) {
    return rootIncarnation.incarnationsMoveImpulse.ContainsKey(id);
  }
  public MoveImpulse GetMoveImpulse(int id) {
    return new MoveImpulse(this, id);
  }
  public List<MoveImpulse> AllMoveImpulse() {
    List<MoveImpulse> result = new List<MoveImpulse>(rootIncarnation.incarnationsMoveImpulse.Count);
    foreach (var id in rootIncarnation.incarnationsMoveImpulse.Keys) {
      result.Add(new MoveImpulse(this, id));
    }
    return result;
  }
  public IEnumerator<MoveImpulse> EnumAllMoveImpulse() {
    foreach (var id in rootIncarnation.incarnationsMoveImpulse.Keys) {
      yield return GetMoveImpulse(id);
    }
  }
  public void CheckHasMoveImpulse(MoveImpulse thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasMoveImpulse(thing.id);
  }
  public void CheckHasMoveImpulse(int id) {
    if (!rootIncarnation.incarnationsMoveImpulse.ContainsKey(id)) {
      throw new System.Exception("Invalid MoveImpulse: " + id);
    }
  }
  public void AddMoveImpulseObserver(int id, IMoveImpulseEffectObserver observer) {
    List<IMoveImpulseEffectObserver> obsies;
    if (!observersForMoveImpulse.TryGetValue(id, out obsies)) {
      obsies = new List<IMoveImpulseEffectObserver>();
    }
    obsies.Add(observer);
    observersForMoveImpulse[id] = obsies;
  }

  public void RemoveMoveImpulseObserver(int id, IMoveImpulseEffectObserver observer) {
    if (observersForMoveImpulse.ContainsKey(id)) {
      var list = observersForMoveImpulse[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForMoveImpulse.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public MoveImpulse EffectMoveImpulseCreate(
      int weight,
      Location stepLocation) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new MoveImpulseIncarnation(
            weight,
            stepLocation
            );
    EffectInternalCreateMoveImpulse(id, rootIncarnation.version, incarnation);
    return new MoveImpulse(this, id);
  }
  public void EffectInternalCreateMoveImpulse(
      int id,
      int incarnationVersion,
      MoveImpulseIncarnation incarnation) {
    CheckUnlocked();
    var effect = new MoveImpulseCreateEffect(id);
    rootIncarnation.incarnationsMoveImpulse.Add(
        id,
        new VersionAndIncarnation<MoveImpulseIncarnation>(
            incarnationVersion,
            incarnation));
    effectsMoveImpulseCreateEffect.Add(effect);
  }

  public void EffectMoveImpulseDelete(int id) {
    CheckUnlocked();
    var effect = new MoveImpulseDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsMoveImpulse[id];

    rootIncarnation.incarnationsMoveImpulse.Remove(id);
    effectsMoveImpulseDeleteEffect.Add(effect);
  }

     
  public int GetMoveImpulseHash(int id, int version, MoveImpulseIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.weight.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.stepLocation.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastMoveImpulseEffects(
      SortedDictionary<int, List<IMoveImpulseEffectObserver>> observers) {
    foreach (var effect in effectsMoveImpulseDeleteEffect) {
      if (observers.TryGetValue(0, out List<IMoveImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMoveImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMoveImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMoveImpulseEffect(effect);
        }
        observersForMoveImpulse.Remove(effect.id);
      }
    }
    effectsMoveImpulseDeleteEffect.Clear();


    foreach (var effect in effectsMoveImpulseCreateEffect) {
      if (observers.TryGetValue(0, out List<IMoveImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMoveImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMoveImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMoveImpulseEffect(effect);
        }
      }
    }
    effectsMoveImpulseCreateEffect.Clear();
  }
  public KamikazeTargetTTCIncarnation GetKamikazeTargetTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsKamikazeTargetTTC[id].incarnation;
  }
  public bool KamikazeTargetTTCExists(int id) {
    return rootIncarnation.incarnationsKamikazeTargetTTC.ContainsKey(id);
  }
  public KamikazeTargetTTC GetKamikazeTargetTTC(int id) {
    return new KamikazeTargetTTC(this, id);
  }
  public List<KamikazeTargetTTC> AllKamikazeTargetTTC() {
    List<KamikazeTargetTTC> result = new List<KamikazeTargetTTC>(rootIncarnation.incarnationsKamikazeTargetTTC.Count);
    foreach (var id in rootIncarnation.incarnationsKamikazeTargetTTC.Keys) {
      result.Add(new KamikazeTargetTTC(this, id));
    }
    return result;
  }
  public IEnumerator<KamikazeTargetTTC> EnumAllKamikazeTargetTTC() {
    foreach (var id in rootIncarnation.incarnationsKamikazeTargetTTC.Keys) {
      yield return GetKamikazeTargetTTC(id);
    }
  }
  public void CheckHasKamikazeTargetTTC(KamikazeTargetTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasKamikazeTargetTTC(thing.id);
  }
  public void CheckHasKamikazeTargetTTC(int id) {
    if (!rootIncarnation.incarnationsKamikazeTargetTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid KamikazeTargetTTC: " + id);
    }
  }
  public void AddKamikazeTargetTTCObserver(int id, IKamikazeTargetTTCEffectObserver observer) {
    List<IKamikazeTargetTTCEffectObserver> obsies;
    if (!observersForKamikazeTargetTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IKamikazeTargetTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForKamikazeTargetTTC[id] = obsies;
  }

  public void RemoveKamikazeTargetTTCObserver(int id, IKamikazeTargetTTCEffectObserver observer) {
    if (observersForKamikazeTargetTTC.ContainsKey(id)) {
      var list = observersForKamikazeTargetTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForKamikazeTargetTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public KamikazeTargetTTC EffectKamikazeTargetTTCCreate(
      KamikazeAICapabilityUC capability) {
    CheckUnlocked();
    CheckHasKamikazeAICapabilityUC(capability);

    var id = NewId();
    var incarnation =
        new KamikazeTargetTTCIncarnation(
            capability.id
            );
    EffectInternalCreateKamikazeTargetTTC(id, rootIncarnation.version, incarnation);
    return new KamikazeTargetTTC(this, id);
  }
  public void EffectInternalCreateKamikazeTargetTTC(
      int id,
      int incarnationVersion,
      KamikazeTargetTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new KamikazeTargetTTCCreateEffect(id);
    rootIncarnation.incarnationsKamikazeTargetTTC.Add(
        id,
        new VersionAndIncarnation<KamikazeTargetTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsKamikazeTargetTTCCreateEffect.Add(effect);
  }

  public void EffectKamikazeTargetTTCDelete(int id) {
    CheckUnlocked();
    var effect = new KamikazeTargetTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsKamikazeTargetTTC[id];

    rootIncarnation.incarnationsKamikazeTargetTTC.Remove(id);
    effectsKamikazeTargetTTCDeleteEffect.Add(effect);
  }

     
  public int GetKamikazeTargetTTCHash(int id, int version, KamikazeTargetTTCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.capability.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastKamikazeTargetTTCEffects(
      SortedDictionary<int, List<IKamikazeTargetTTCEffectObserver>> observers) {
    foreach (var effect in effectsKamikazeTargetTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeTargetTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeTargetTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeTargetTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeTargetTTCEffect(effect);
        }
        observersForKamikazeTargetTTC.Remove(effect.id);
      }
    }
    effectsKamikazeTargetTTCDeleteEffect.Clear();


    foreach (var effect in effectsKamikazeTargetTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeTargetTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeTargetTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeTargetTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeTargetTTCEffect(effect);
        }
      }
    }
    effectsKamikazeTargetTTCCreateEffect.Clear();
  }
  public KamikazeJumpImpulseIncarnation GetKamikazeJumpImpulseIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsKamikazeJumpImpulse[id].incarnation;
  }
  public bool KamikazeJumpImpulseExists(int id) {
    return rootIncarnation.incarnationsKamikazeJumpImpulse.ContainsKey(id);
  }
  public KamikazeJumpImpulse GetKamikazeJumpImpulse(int id) {
    return new KamikazeJumpImpulse(this, id);
  }
  public List<KamikazeJumpImpulse> AllKamikazeJumpImpulse() {
    List<KamikazeJumpImpulse> result = new List<KamikazeJumpImpulse>(rootIncarnation.incarnationsKamikazeJumpImpulse.Count);
    foreach (var id in rootIncarnation.incarnationsKamikazeJumpImpulse.Keys) {
      result.Add(new KamikazeJumpImpulse(this, id));
    }
    return result;
  }
  public IEnumerator<KamikazeJumpImpulse> EnumAllKamikazeJumpImpulse() {
    foreach (var id in rootIncarnation.incarnationsKamikazeJumpImpulse.Keys) {
      yield return GetKamikazeJumpImpulse(id);
    }
  }
  public void CheckHasKamikazeJumpImpulse(KamikazeJumpImpulse thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasKamikazeJumpImpulse(thing.id);
  }
  public void CheckHasKamikazeJumpImpulse(int id) {
    if (!rootIncarnation.incarnationsKamikazeJumpImpulse.ContainsKey(id)) {
      throw new System.Exception("Invalid KamikazeJumpImpulse: " + id);
    }
  }
  public void AddKamikazeJumpImpulseObserver(int id, IKamikazeJumpImpulseEffectObserver observer) {
    List<IKamikazeJumpImpulseEffectObserver> obsies;
    if (!observersForKamikazeJumpImpulse.TryGetValue(id, out obsies)) {
      obsies = new List<IKamikazeJumpImpulseEffectObserver>();
    }
    obsies.Add(observer);
    observersForKamikazeJumpImpulse[id] = obsies;
  }

  public void RemoveKamikazeJumpImpulseObserver(int id, IKamikazeJumpImpulseEffectObserver observer) {
    if (observersForKamikazeJumpImpulse.ContainsKey(id)) {
      var list = observersForKamikazeJumpImpulse[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForKamikazeJumpImpulse.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public KamikazeJumpImpulse EffectKamikazeJumpImpulseCreate(
      int weight,
      KamikazeAICapabilityUC capability,
      Location jumpTarget) {
    CheckUnlocked();
    CheckHasKamikazeAICapabilityUC(capability);

    var id = NewId();
    var incarnation =
        new KamikazeJumpImpulseIncarnation(
            weight,
            capability.id,
            jumpTarget
            );
    EffectInternalCreateKamikazeJumpImpulse(id, rootIncarnation.version, incarnation);
    return new KamikazeJumpImpulse(this, id);
  }
  public void EffectInternalCreateKamikazeJumpImpulse(
      int id,
      int incarnationVersion,
      KamikazeJumpImpulseIncarnation incarnation) {
    CheckUnlocked();
    var effect = new KamikazeJumpImpulseCreateEffect(id);
    rootIncarnation.incarnationsKamikazeJumpImpulse.Add(
        id,
        new VersionAndIncarnation<KamikazeJumpImpulseIncarnation>(
            incarnationVersion,
            incarnation));
    effectsKamikazeJumpImpulseCreateEffect.Add(effect);
  }

  public void EffectKamikazeJumpImpulseDelete(int id) {
    CheckUnlocked();
    var effect = new KamikazeJumpImpulseDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsKamikazeJumpImpulse[id];

    rootIncarnation.incarnationsKamikazeJumpImpulse.Remove(id);
    effectsKamikazeJumpImpulseDeleteEffect.Add(effect);
  }

     
  public int GetKamikazeJumpImpulseHash(int id, int version, KamikazeJumpImpulseIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.weight.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.capability.GetDeterministicHashCode();
    result += id * version * 3 * incarnation.jumpTarget.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastKamikazeJumpImpulseEffects(
      SortedDictionary<int, List<IKamikazeJumpImpulseEffectObserver>> observers) {
    foreach (var effect in effectsKamikazeJumpImpulseDeleteEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeJumpImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeJumpImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeJumpImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeJumpImpulseEffect(effect);
        }
        observersForKamikazeJumpImpulse.Remove(effect.id);
      }
    }
    effectsKamikazeJumpImpulseDeleteEffect.Clear();


    foreach (var effect in effectsKamikazeJumpImpulseCreateEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeJumpImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeJumpImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeJumpImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeJumpImpulseEffect(effect);
        }
      }
    }
    effectsKamikazeJumpImpulseCreateEffect.Clear();
  }
  public KamikazeTargetImpulseIncarnation GetKamikazeTargetImpulseIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsKamikazeTargetImpulse[id].incarnation;
  }
  public bool KamikazeTargetImpulseExists(int id) {
    return rootIncarnation.incarnationsKamikazeTargetImpulse.ContainsKey(id);
  }
  public KamikazeTargetImpulse GetKamikazeTargetImpulse(int id) {
    return new KamikazeTargetImpulse(this, id);
  }
  public List<KamikazeTargetImpulse> AllKamikazeTargetImpulse() {
    List<KamikazeTargetImpulse> result = new List<KamikazeTargetImpulse>(rootIncarnation.incarnationsKamikazeTargetImpulse.Count);
    foreach (var id in rootIncarnation.incarnationsKamikazeTargetImpulse.Keys) {
      result.Add(new KamikazeTargetImpulse(this, id));
    }
    return result;
  }
  public IEnumerator<KamikazeTargetImpulse> EnumAllKamikazeTargetImpulse() {
    foreach (var id in rootIncarnation.incarnationsKamikazeTargetImpulse.Keys) {
      yield return GetKamikazeTargetImpulse(id);
    }
  }
  public void CheckHasKamikazeTargetImpulse(KamikazeTargetImpulse thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasKamikazeTargetImpulse(thing.id);
  }
  public void CheckHasKamikazeTargetImpulse(int id) {
    if (!rootIncarnation.incarnationsKamikazeTargetImpulse.ContainsKey(id)) {
      throw new System.Exception("Invalid KamikazeTargetImpulse: " + id);
    }
  }
  public void AddKamikazeTargetImpulseObserver(int id, IKamikazeTargetImpulseEffectObserver observer) {
    List<IKamikazeTargetImpulseEffectObserver> obsies;
    if (!observersForKamikazeTargetImpulse.TryGetValue(id, out obsies)) {
      obsies = new List<IKamikazeTargetImpulseEffectObserver>();
    }
    obsies.Add(observer);
    observersForKamikazeTargetImpulse[id] = obsies;
  }

  public void RemoveKamikazeTargetImpulseObserver(int id, IKamikazeTargetImpulseEffectObserver observer) {
    if (observersForKamikazeTargetImpulse.ContainsKey(id)) {
      var list = observersForKamikazeTargetImpulse[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForKamikazeTargetImpulse.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public KamikazeTargetImpulse EffectKamikazeTargetImpulseCreate(
      int weight,
      KamikazeAICapabilityUC capability,
      Location targetLocationCenter,
      LocationImmList targetLocations) {
    CheckUnlocked();
    CheckHasKamikazeAICapabilityUC(capability);

    var id = NewId();
    var incarnation =
        new KamikazeTargetImpulseIncarnation(
            weight,
            capability.id,
            targetLocationCenter,
            targetLocations
            );
    EffectInternalCreateKamikazeTargetImpulse(id, rootIncarnation.version, incarnation);
    return new KamikazeTargetImpulse(this, id);
  }
  public void EffectInternalCreateKamikazeTargetImpulse(
      int id,
      int incarnationVersion,
      KamikazeTargetImpulseIncarnation incarnation) {
    CheckUnlocked();
    var effect = new KamikazeTargetImpulseCreateEffect(id);
    rootIncarnation.incarnationsKamikazeTargetImpulse.Add(
        id,
        new VersionAndIncarnation<KamikazeTargetImpulseIncarnation>(
            incarnationVersion,
            incarnation));
    effectsKamikazeTargetImpulseCreateEffect.Add(effect);
  }

  public void EffectKamikazeTargetImpulseDelete(int id) {
    CheckUnlocked();
    var effect = new KamikazeTargetImpulseDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsKamikazeTargetImpulse[id];

    rootIncarnation.incarnationsKamikazeTargetImpulse.Remove(id);
    effectsKamikazeTargetImpulseDeleteEffect.Add(effect);
  }

     
  public int GetKamikazeTargetImpulseHash(int id, int version, KamikazeTargetImpulseIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.weight.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.capability.GetDeterministicHashCode();
    result += id * version * 3 * incarnation.targetLocationCenter.GetDeterministicHashCode();
    result += id * version * 4 * incarnation.targetLocations.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastKamikazeTargetImpulseEffects(
      SortedDictionary<int, List<IKamikazeTargetImpulseEffectObserver>> observers) {
    foreach (var effect in effectsKamikazeTargetImpulseDeleteEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeTargetImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeTargetImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeTargetImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeTargetImpulseEffect(effect);
        }
        observersForKamikazeTargetImpulse.Remove(effect.id);
      }
    }
    effectsKamikazeTargetImpulseDeleteEffect.Clear();


    foreach (var effect in effectsKamikazeTargetImpulseCreateEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeTargetImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeTargetImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeTargetImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeTargetImpulseEffect(effect);
        }
      }
    }
    effectsKamikazeTargetImpulseCreateEffect.Clear();
  }
  public KamikazeAICapabilityUCIncarnation GetKamikazeAICapabilityUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsKamikazeAICapabilityUC[id].incarnation;
  }
  public bool KamikazeAICapabilityUCExists(int id) {
    return rootIncarnation.incarnationsKamikazeAICapabilityUC.ContainsKey(id);
  }
  public KamikazeAICapabilityUC GetKamikazeAICapabilityUC(int id) {
    return new KamikazeAICapabilityUC(this, id);
  }
  public List<KamikazeAICapabilityUC> AllKamikazeAICapabilityUC() {
    List<KamikazeAICapabilityUC> result = new List<KamikazeAICapabilityUC>(rootIncarnation.incarnationsKamikazeAICapabilityUC.Count);
    foreach (var id in rootIncarnation.incarnationsKamikazeAICapabilityUC.Keys) {
      result.Add(new KamikazeAICapabilityUC(this, id));
    }
    return result;
  }
  public IEnumerator<KamikazeAICapabilityUC> EnumAllKamikazeAICapabilityUC() {
    foreach (var id in rootIncarnation.incarnationsKamikazeAICapabilityUC.Keys) {
      yield return GetKamikazeAICapabilityUC(id);
    }
  }
  public void CheckHasKamikazeAICapabilityUC(KamikazeAICapabilityUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasKamikazeAICapabilityUC(thing.id);
  }
  public void CheckHasKamikazeAICapabilityUC(int id) {
    if (!rootIncarnation.incarnationsKamikazeAICapabilityUC.ContainsKey(id)) {
      throw new System.Exception("Invalid KamikazeAICapabilityUC: " + id);
    }
  }
  public void AddKamikazeAICapabilityUCObserver(int id, IKamikazeAICapabilityUCEffectObserver observer) {
    List<IKamikazeAICapabilityUCEffectObserver> obsies;
    if (!observersForKamikazeAICapabilityUC.TryGetValue(id, out obsies)) {
      obsies = new List<IKamikazeAICapabilityUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForKamikazeAICapabilityUC[id] = obsies;
  }

  public void RemoveKamikazeAICapabilityUCObserver(int id, IKamikazeAICapabilityUCEffectObserver observer) {
    if (observersForKamikazeAICapabilityUC.ContainsKey(id)) {
      var list = observersForKamikazeAICapabilityUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForKamikazeAICapabilityUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public KamikazeAICapabilityUC EffectKamikazeAICapabilityUCCreate(
      KamikazeTargetTTCStrongByLocationMutMap targetByLocation,
      Location targetLocationCenter) {
    CheckUnlocked();
    CheckHasKamikazeTargetTTCStrongByLocationMutMap(targetByLocation);

    var id = NewId();
    var incarnation =
        new KamikazeAICapabilityUCIncarnation(
            targetByLocation.id,
            targetLocationCenter
            );
    EffectInternalCreateKamikazeAICapabilityUC(id, rootIncarnation.version, incarnation);
    return new KamikazeAICapabilityUC(this, id);
  }
  public void EffectInternalCreateKamikazeAICapabilityUC(
      int id,
      int incarnationVersion,
      KamikazeAICapabilityUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new KamikazeAICapabilityUCCreateEffect(id);
    rootIncarnation.incarnationsKamikazeAICapabilityUC.Add(
        id,
        new VersionAndIncarnation<KamikazeAICapabilityUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsKamikazeAICapabilityUCCreateEffect.Add(effect);
  }

  public void EffectKamikazeAICapabilityUCDelete(int id) {
    CheckUnlocked();
    var effect = new KamikazeAICapabilityUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsKamikazeAICapabilityUC[id];

    rootIncarnation.incarnationsKamikazeAICapabilityUC.Remove(id);
    effectsKamikazeAICapabilityUCDeleteEffect.Add(effect);
  }

     
  public int GetKamikazeAICapabilityUCHash(int id, int version, KamikazeAICapabilityUCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.targetByLocation.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.targetLocationCenter.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastKamikazeAICapabilityUCEffects(
      SortedDictionary<int, List<IKamikazeAICapabilityUCEffectObserver>> observers) {
    foreach (var effect in effectsKamikazeAICapabilityUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeAICapabilityUCEffect(effect);
        }
        observersForKamikazeAICapabilityUC.Remove(effect.id);
      }
    }
    effectsKamikazeAICapabilityUCDeleteEffect.Clear();


    foreach (var effect in effectsKamikazeAICapabilityUCSetTargetByLocationEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeAICapabilityUCEffect(effect);
        }
      }
    }
    effectsKamikazeAICapabilityUCSetTargetByLocationEffect.Clear();

    foreach (var effect in effectsKamikazeAICapabilityUCSetTargetLocationCenterEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeAICapabilityUCEffect(effect);
        }
      }
    }
    effectsKamikazeAICapabilityUCSetTargetLocationCenterEffect.Clear();

    foreach (var effect in effectsKamikazeAICapabilityUCCreateEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeAICapabilityUCEffect(effect);
        }
      }
    }
    effectsKamikazeAICapabilityUCCreateEffect.Clear();
  }

  public void EffectKamikazeAICapabilityUCSetTargetByLocation(int id, KamikazeTargetTTCStrongByLocationMutMap newValue) {
    CheckUnlocked();
    CheckHasKamikazeAICapabilityUC(id);
    var effect = new KamikazeAICapabilityUCSetTargetByLocationEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsKamikazeAICapabilityUC[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldId = oldIncarnationAndVersion.incarnation.targetByLocation;
      oldIncarnationAndVersion.incarnation.targetByLocation = newValue.id;

    } else {
      var newIncarnation =
          new KamikazeAICapabilityUCIncarnation(
              newValue.id,
              oldIncarnationAndVersion.incarnation.targetLocationCenter);
      rootIncarnation.incarnationsKamikazeAICapabilityUC[id] =
          new VersionAndIncarnation<KamikazeAICapabilityUCIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsKamikazeAICapabilityUCSetTargetByLocationEffect.Add(effect);
  }

  public void EffectKamikazeAICapabilityUCSetTargetLocationCenter(int id, Location newValue) {
    CheckUnlocked();
    CheckHasKamikazeAICapabilityUC(id);
    var effect = new KamikazeAICapabilityUCSetTargetLocationCenterEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsKamikazeAICapabilityUC[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.targetLocationCenter;
      oldIncarnationAndVersion.incarnation.targetLocationCenter = newValue;

    } else {
      var newIncarnation =
          new KamikazeAICapabilityUCIncarnation(
              oldIncarnationAndVersion.incarnation.targetByLocation,
              newValue);
      rootIncarnation.incarnationsKamikazeAICapabilityUC[id] =
          new VersionAndIncarnation<KamikazeAICapabilityUCIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsKamikazeAICapabilityUCSetTargetLocationCenterEffect.Add(effect);
  }
  public InvincibilityUCIncarnation GetInvincibilityUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsInvincibilityUC[id].incarnation;
  }
  public bool InvincibilityUCExists(int id) {
    return rootIncarnation.incarnationsInvincibilityUC.ContainsKey(id);
  }
  public InvincibilityUC GetInvincibilityUC(int id) {
    return new InvincibilityUC(this, id);
  }
  public List<InvincibilityUC> AllInvincibilityUC() {
    List<InvincibilityUC> result = new List<InvincibilityUC>(rootIncarnation.incarnationsInvincibilityUC.Count);
    foreach (var id in rootIncarnation.incarnationsInvincibilityUC.Keys) {
      result.Add(new InvincibilityUC(this, id));
    }
    return result;
  }
  public IEnumerator<InvincibilityUC> EnumAllInvincibilityUC() {
    foreach (var id in rootIncarnation.incarnationsInvincibilityUC.Keys) {
      yield return GetInvincibilityUC(id);
    }
  }
  public void CheckHasInvincibilityUC(InvincibilityUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasInvincibilityUC(thing.id);
  }
  public void CheckHasInvincibilityUC(int id) {
    if (!rootIncarnation.incarnationsInvincibilityUC.ContainsKey(id)) {
      throw new System.Exception("Invalid InvincibilityUC: " + id);
    }
  }
  public void AddInvincibilityUCObserver(int id, IInvincibilityUCEffectObserver observer) {
    List<IInvincibilityUCEffectObserver> obsies;
    if (!observersForInvincibilityUC.TryGetValue(id, out obsies)) {
      obsies = new List<IInvincibilityUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForInvincibilityUC[id] = obsies;
  }

  public void RemoveInvincibilityUCObserver(int id, IInvincibilityUCEffectObserver observer) {
    if (observersForInvincibilityUC.ContainsKey(id)) {
      var list = observersForInvincibilityUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForInvincibilityUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public InvincibilityUC EffectInvincibilityUCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new InvincibilityUCIncarnation(

            );
    EffectInternalCreateInvincibilityUC(id, rootIncarnation.version, incarnation);
    return new InvincibilityUC(this, id);
  }
  public void EffectInternalCreateInvincibilityUC(
      int id,
      int incarnationVersion,
      InvincibilityUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new InvincibilityUCCreateEffect(id);
    rootIncarnation.incarnationsInvincibilityUC.Add(
        id,
        new VersionAndIncarnation<InvincibilityUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsInvincibilityUCCreateEffect.Add(effect);
  }

  public void EffectInvincibilityUCDelete(int id) {
    CheckUnlocked();
    var effect = new InvincibilityUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsInvincibilityUC[id];

    rootIncarnation.incarnationsInvincibilityUC.Remove(id);
    effectsInvincibilityUCDeleteEffect.Add(effect);
  }

     
  public int GetInvincibilityUCHash(int id, int version, InvincibilityUCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastInvincibilityUCEffects(
      SortedDictionary<int, List<IInvincibilityUCEffectObserver>> observers) {
    foreach (var effect in effectsInvincibilityUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IInvincibilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnInvincibilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IInvincibilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnInvincibilityUCEffect(effect);
        }
        observersForInvincibilityUC.Remove(effect.id);
      }
    }
    effectsInvincibilityUCDeleteEffect.Clear();


    foreach (var effect in effectsInvincibilityUCCreateEffect) {
      if (observers.TryGetValue(0, out List<IInvincibilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnInvincibilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IInvincibilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnInvincibilityUCEffect(effect);
        }
      }
    }
    effectsInvincibilityUCCreateEffect.Clear();
  }
  public GuardAICapabilityUCIncarnation GetGuardAICapabilityUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsGuardAICapabilityUC[id].incarnation;
  }
  public bool GuardAICapabilityUCExists(int id) {
    return rootIncarnation.incarnationsGuardAICapabilityUC.ContainsKey(id);
  }
  public GuardAICapabilityUC GetGuardAICapabilityUC(int id) {
    return new GuardAICapabilityUC(this, id);
  }
  public List<GuardAICapabilityUC> AllGuardAICapabilityUC() {
    List<GuardAICapabilityUC> result = new List<GuardAICapabilityUC>(rootIncarnation.incarnationsGuardAICapabilityUC.Count);
    foreach (var id in rootIncarnation.incarnationsGuardAICapabilityUC.Keys) {
      result.Add(new GuardAICapabilityUC(this, id));
    }
    return result;
  }
  public IEnumerator<GuardAICapabilityUC> EnumAllGuardAICapabilityUC() {
    foreach (var id in rootIncarnation.incarnationsGuardAICapabilityUC.Keys) {
      yield return GetGuardAICapabilityUC(id);
    }
  }
  public void CheckHasGuardAICapabilityUC(GuardAICapabilityUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasGuardAICapabilityUC(thing.id);
  }
  public void CheckHasGuardAICapabilityUC(int id) {
    if (!rootIncarnation.incarnationsGuardAICapabilityUC.ContainsKey(id)) {
      throw new System.Exception("Invalid GuardAICapabilityUC: " + id);
    }
  }
  public void AddGuardAICapabilityUCObserver(int id, IGuardAICapabilityUCEffectObserver observer) {
    List<IGuardAICapabilityUCEffectObserver> obsies;
    if (!observersForGuardAICapabilityUC.TryGetValue(id, out obsies)) {
      obsies = new List<IGuardAICapabilityUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForGuardAICapabilityUC[id] = obsies;
  }

  public void RemoveGuardAICapabilityUCObserver(int id, IGuardAICapabilityUCEffectObserver observer) {
    if (observersForGuardAICapabilityUC.ContainsKey(id)) {
      var list = observersForGuardAICapabilityUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForGuardAICapabilityUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public GuardAICapabilityUC EffectGuardAICapabilityUCCreate(
      Location guardCenterLocation,
      int guardRadius) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new GuardAICapabilityUCIncarnation(
            guardCenterLocation,
            guardRadius
            );
    EffectInternalCreateGuardAICapabilityUC(id, rootIncarnation.version, incarnation);
    return new GuardAICapabilityUC(this, id);
  }
  public void EffectInternalCreateGuardAICapabilityUC(
      int id,
      int incarnationVersion,
      GuardAICapabilityUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new GuardAICapabilityUCCreateEffect(id);
    rootIncarnation.incarnationsGuardAICapabilityUC.Add(
        id,
        new VersionAndIncarnation<GuardAICapabilityUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsGuardAICapabilityUCCreateEffect.Add(effect);
  }

  public void EffectGuardAICapabilityUCDelete(int id) {
    CheckUnlocked();
    var effect = new GuardAICapabilityUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsGuardAICapabilityUC[id];

    rootIncarnation.incarnationsGuardAICapabilityUC.Remove(id);
    effectsGuardAICapabilityUCDeleteEffect.Add(effect);
  }

     
  public int GetGuardAICapabilityUCHash(int id, int version, GuardAICapabilityUCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.guardCenterLocation.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.guardRadius.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastGuardAICapabilityUCEffects(
      SortedDictionary<int, List<IGuardAICapabilityUCEffectObserver>> observers) {
    foreach (var effect in effectsGuardAICapabilityUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IGuardAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGuardAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGuardAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGuardAICapabilityUCEffect(effect);
        }
        observersForGuardAICapabilityUC.Remove(effect.id);
      }
    }
    effectsGuardAICapabilityUCDeleteEffect.Clear();


    foreach (var effect in effectsGuardAICapabilityUCCreateEffect) {
      if (observers.TryGetValue(0, out List<IGuardAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGuardAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGuardAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGuardAICapabilityUCEffect(effect);
        }
      }
    }
    effectsGuardAICapabilityUCCreateEffect.Clear();
  }
  public NoImpulseIncarnation GetNoImpulseIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsNoImpulse[id].incarnation;
  }
  public bool NoImpulseExists(int id) {
    return rootIncarnation.incarnationsNoImpulse.ContainsKey(id);
  }
  public NoImpulse GetNoImpulse(int id) {
    return new NoImpulse(this, id);
  }
  public List<NoImpulse> AllNoImpulse() {
    List<NoImpulse> result = new List<NoImpulse>(rootIncarnation.incarnationsNoImpulse.Count);
    foreach (var id in rootIncarnation.incarnationsNoImpulse.Keys) {
      result.Add(new NoImpulse(this, id));
    }
    return result;
  }
  public IEnumerator<NoImpulse> EnumAllNoImpulse() {
    foreach (var id in rootIncarnation.incarnationsNoImpulse.Keys) {
      yield return GetNoImpulse(id);
    }
  }
  public void CheckHasNoImpulse(NoImpulse thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasNoImpulse(thing.id);
  }
  public void CheckHasNoImpulse(int id) {
    if (!rootIncarnation.incarnationsNoImpulse.ContainsKey(id)) {
      throw new System.Exception("Invalid NoImpulse: " + id);
    }
  }
  public void AddNoImpulseObserver(int id, INoImpulseEffectObserver observer) {
    List<INoImpulseEffectObserver> obsies;
    if (!observersForNoImpulse.TryGetValue(id, out obsies)) {
      obsies = new List<INoImpulseEffectObserver>();
    }
    obsies.Add(observer);
    observersForNoImpulse[id] = obsies;
  }

  public void RemoveNoImpulseObserver(int id, INoImpulseEffectObserver observer) {
    if (observersForNoImpulse.ContainsKey(id)) {
      var list = observersForNoImpulse[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForNoImpulse.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public NoImpulse EffectNoImpulseCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new NoImpulseIncarnation(

            );
    EffectInternalCreateNoImpulse(id, rootIncarnation.version, incarnation);
    return new NoImpulse(this, id);
  }
  public void EffectInternalCreateNoImpulse(
      int id,
      int incarnationVersion,
      NoImpulseIncarnation incarnation) {
    CheckUnlocked();
    var effect = new NoImpulseCreateEffect(id);
    rootIncarnation.incarnationsNoImpulse.Add(
        id,
        new VersionAndIncarnation<NoImpulseIncarnation>(
            incarnationVersion,
            incarnation));
    effectsNoImpulseCreateEffect.Add(effect);
  }

  public void EffectNoImpulseDelete(int id) {
    CheckUnlocked();
    var effect = new NoImpulseDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsNoImpulse[id];

    rootIncarnation.incarnationsNoImpulse.Remove(id);
    effectsNoImpulseDeleteEffect.Add(effect);
  }

     
  public int GetNoImpulseHash(int id, int version, NoImpulseIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastNoImpulseEffects(
      SortedDictionary<int, List<INoImpulseEffectObserver>> observers) {
    foreach (var effect in effectsNoImpulseDeleteEffect) {
      if (observers.TryGetValue(0, out List<INoImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnNoImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<INoImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnNoImpulseEffect(effect);
        }
        observersForNoImpulse.Remove(effect.id);
      }
    }
    effectsNoImpulseDeleteEffect.Clear();


    foreach (var effect in effectsNoImpulseCreateEffect) {
      if (observers.TryGetValue(0, out List<INoImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnNoImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<INoImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnNoImpulseEffect(effect);
        }
      }
    }
    effectsNoImpulseCreateEffect.Clear();
  }
  public FireImpulseIncarnation GetFireImpulseIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsFireImpulse[id].incarnation;
  }
  public bool FireImpulseExists(int id) {
    return rootIncarnation.incarnationsFireImpulse.ContainsKey(id);
  }
  public FireImpulse GetFireImpulse(int id) {
    return new FireImpulse(this, id);
  }
  public List<FireImpulse> AllFireImpulse() {
    List<FireImpulse> result = new List<FireImpulse>(rootIncarnation.incarnationsFireImpulse.Count);
    foreach (var id in rootIncarnation.incarnationsFireImpulse.Keys) {
      result.Add(new FireImpulse(this, id));
    }
    return result;
  }
  public IEnumerator<FireImpulse> EnumAllFireImpulse() {
    foreach (var id in rootIncarnation.incarnationsFireImpulse.Keys) {
      yield return GetFireImpulse(id);
    }
  }
  public void CheckHasFireImpulse(FireImpulse thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasFireImpulse(thing.id);
  }
  public void CheckHasFireImpulse(int id) {
    if (!rootIncarnation.incarnationsFireImpulse.ContainsKey(id)) {
      throw new System.Exception("Invalid FireImpulse: " + id);
    }
  }
  public void AddFireImpulseObserver(int id, IFireImpulseEffectObserver observer) {
    List<IFireImpulseEffectObserver> obsies;
    if (!observersForFireImpulse.TryGetValue(id, out obsies)) {
      obsies = new List<IFireImpulseEffectObserver>();
    }
    obsies.Add(observer);
    observersForFireImpulse[id] = obsies;
  }

  public void RemoveFireImpulseObserver(int id, IFireImpulseEffectObserver observer) {
    if (observersForFireImpulse.ContainsKey(id)) {
      var list = observersForFireImpulse[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForFireImpulse.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public FireImpulse EffectFireImpulseCreate(
      int weight,
      Unit targetUnit) {
    CheckUnlocked();
    CheckHasUnit(targetUnit);

    var id = NewId();
    var incarnation =
        new FireImpulseIncarnation(
            weight,
            targetUnit.id
            );
    EffectInternalCreateFireImpulse(id, rootIncarnation.version, incarnation);
    return new FireImpulse(this, id);
  }
  public void EffectInternalCreateFireImpulse(
      int id,
      int incarnationVersion,
      FireImpulseIncarnation incarnation) {
    CheckUnlocked();
    var effect = new FireImpulseCreateEffect(id);
    rootIncarnation.incarnationsFireImpulse.Add(
        id,
        new VersionAndIncarnation<FireImpulseIncarnation>(
            incarnationVersion,
            incarnation));
    effectsFireImpulseCreateEffect.Add(effect);
  }

  public void EffectFireImpulseDelete(int id) {
    CheckUnlocked();
    var effect = new FireImpulseDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsFireImpulse[id];

    rootIncarnation.incarnationsFireImpulse.Remove(id);
    effectsFireImpulseDeleteEffect.Add(effect);
  }

     
  public int GetFireImpulseHash(int id, int version, FireImpulseIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.weight.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.targetUnit.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastFireImpulseEffects(
      SortedDictionary<int, List<IFireImpulseEffectObserver>> observers) {
    foreach (var effect in effectsFireImpulseDeleteEffect) {
      if (observers.TryGetValue(0, out List<IFireImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireImpulseEffect(effect);
        }
        observersForFireImpulse.Remove(effect.id);
      }
    }
    effectsFireImpulseDeleteEffect.Clear();


    foreach (var effect in effectsFireImpulseCreateEffect) {
      if (observers.TryGetValue(0, out List<IFireImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireImpulseEffect(effect);
        }
      }
    }
    effectsFireImpulseCreateEffect.Clear();
  }
  public DefyingUCIncarnation GetDefyingUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsDefyingUC[id].incarnation;
  }
  public bool DefyingUCExists(int id) {
    return rootIncarnation.incarnationsDefyingUC.ContainsKey(id);
  }
  public DefyingUC GetDefyingUC(int id) {
    return new DefyingUC(this, id);
  }
  public List<DefyingUC> AllDefyingUC() {
    List<DefyingUC> result = new List<DefyingUC>(rootIncarnation.incarnationsDefyingUC.Count);
    foreach (var id in rootIncarnation.incarnationsDefyingUC.Keys) {
      result.Add(new DefyingUC(this, id));
    }
    return result;
  }
  public IEnumerator<DefyingUC> EnumAllDefyingUC() {
    foreach (var id in rootIncarnation.incarnationsDefyingUC.Keys) {
      yield return GetDefyingUC(id);
    }
  }
  public void CheckHasDefyingUC(DefyingUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasDefyingUC(thing.id);
  }
  public void CheckHasDefyingUC(int id) {
    if (!rootIncarnation.incarnationsDefyingUC.ContainsKey(id)) {
      throw new System.Exception("Invalid DefyingUC: " + id);
    }
  }
  public void AddDefyingUCObserver(int id, IDefyingUCEffectObserver observer) {
    List<IDefyingUCEffectObserver> obsies;
    if (!observersForDefyingUC.TryGetValue(id, out obsies)) {
      obsies = new List<IDefyingUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForDefyingUC[id] = obsies;
  }

  public void RemoveDefyingUCObserver(int id, IDefyingUCEffectObserver observer) {
    if (observersForDefyingUC.ContainsKey(id)) {
      var list = observersForDefyingUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForDefyingUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public DefyingUC EffectDefyingUCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new DefyingUCIncarnation(

            );
    EffectInternalCreateDefyingUC(id, rootIncarnation.version, incarnation);
    return new DefyingUC(this, id);
  }
  public void EffectInternalCreateDefyingUC(
      int id,
      int incarnationVersion,
      DefyingUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new DefyingUCCreateEffect(id);
    rootIncarnation.incarnationsDefyingUC.Add(
        id,
        new VersionAndIncarnation<DefyingUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsDefyingUCCreateEffect.Add(effect);
  }

  public void EffectDefyingUCDelete(int id) {
    CheckUnlocked();
    var effect = new DefyingUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsDefyingUC[id];

    rootIncarnation.incarnationsDefyingUC.Remove(id);
    effectsDefyingUCDeleteEffect.Add(effect);
  }

     
  public int GetDefyingUCHash(int id, int version, DefyingUCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastDefyingUCEffects(
      SortedDictionary<int, List<IDefyingUCEffectObserver>> observers) {
    foreach (var effect in effectsDefyingUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IDefyingUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDefyingUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDefyingUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDefyingUCEffect(effect);
        }
        observersForDefyingUC.Remove(effect.id);
      }
    }
    effectsDefyingUCDeleteEffect.Clear();


    foreach (var effect in effectsDefyingUCCreateEffect) {
      if (observers.TryGetValue(0, out List<IDefyingUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDefyingUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDefyingUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDefyingUCEffect(effect);
        }
      }
    }
    effectsDefyingUCCreateEffect.Clear();
  }
  public DefyImpulseIncarnation GetDefyImpulseIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsDefyImpulse[id].incarnation;
  }
  public bool DefyImpulseExists(int id) {
    return rootIncarnation.incarnationsDefyImpulse.ContainsKey(id);
  }
  public DefyImpulse GetDefyImpulse(int id) {
    return new DefyImpulse(this, id);
  }
  public List<DefyImpulse> AllDefyImpulse() {
    List<DefyImpulse> result = new List<DefyImpulse>(rootIncarnation.incarnationsDefyImpulse.Count);
    foreach (var id in rootIncarnation.incarnationsDefyImpulse.Keys) {
      result.Add(new DefyImpulse(this, id));
    }
    return result;
  }
  public IEnumerator<DefyImpulse> EnumAllDefyImpulse() {
    foreach (var id in rootIncarnation.incarnationsDefyImpulse.Keys) {
      yield return GetDefyImpulse(id);
    }
  }
  public void CheckHasDefyImpulse(DefyImpulse thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasDefyImpulse(thing.id);
  }
  public void CheckHasDefyImpulse(int id) {
    if (!rootIncarnation.incarnationsDefyImpulse.ContainsKey(id)) {
      throw new System.Exception("Invalid DefyImpulse: " + id);
    }
  }
  public void AddDefyImpulseObserver(int id, IDefyImpulseEffectObserver observer) {
    List<IDefyImpulseEffectObserver> obsies;
    if (!observersForDefyImpulse.TryGetValue(id, out obsies)) {
      obsies = new List<IDefyImpulseEffectObserver>();
    }
    obsies.Add(observer);
    observersForDefyImpulse[id] = obsies;
  }

  public void RemoveDefyImpulseObserver(int id, IDefyImpulseEffectObserver observer) {
    if (observersForDefyImpulse.ContainsKey(id)) {
      var list = observersForDefyImpulse[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForDefyImpulse.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public DefyImpulse EffectDefyImpulseCreate(
      int weight) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new DefyImpulseIncarnation(
            weight
            );
    EffectInternalCreateDefyImpulse(id, rootIncarnation.version, incarnation);
    return new DefyImpulse(this, id);
  }
  public void EffectInternalCreateDefyImpulse(
      int id,
      int incarnationVersion,
      DefyImpulseIncarnation incarnation) {
    CheckUnlocked();
    var effect = new DefyImpulseCreateEffect(id);
    rootIncarnation.incarnationsDefyImpulse.Add(
        id,
        new VersionAndIncarnation<DefyImpulseIncarnation>(
            incarnationVersion,
            incarnation));
    effectsDefyImpulseCreateEffect.Add(effect);
  }

  public void EffectDefyImpulseDelete(int id) {
    CheckUnlocked();
    var effect = new DefyImpulseDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsDefyImpulse[id];

    rootIncarnation.incarnationsDefyImpulse.Remove(id);
    effectsDefyImpulseDeleteEffect.Add(effect);
  }

     
  public int GetDefyImpulseHash(int id, int version, DefyImpulseIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.weight.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastDefyImpulseEffects(
      SortedDictionary<int, List<IDefyImpulseEffectObserver>> observers) {
    foreach (var effect in effectsDefyImpulseDeleteEffect) {
      if (observers.TryGetValue(0, out List<IDefyImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDefyImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDefyImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDefyImpulseEffect(effect);
        }
        observersForDefyImpulse.Remove(effect.id);
      }
    }
    effectsDefyImpulseDeleteEffect.Clear();


    foreach (var effect in effectsDefyImpulseCreateEffect) {
      if (observers.TryGetValue(0, out List<IDefyImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDefyImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDefyImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDefyImpulseEffect(effect);
        }
      }
    }
    effectsDefyImpulseCreateEffect.Clear();
  }
  public CounteringUCIncarnation GetCounteringUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsCounteringUC[id].incarnation;
  }
  public bool CounteringUCExists(int id) {
    return rootIncarnation.incarnationsCounteringUC.ContainsKey(id);
  }
  public CounteringUC GetCounteringUC(int id) {
    return new CounteringUC(this, id);
  }
  public List<CounteringUC> AllCounteringUC() {
    List<CounteringUC> result = new List<CounteringUC>(rootIncarnation.incarnationsCounteringUC.Count);
    foreach (var id in rootIncarnation.incarnationsCounteringUC.Keys) {
      result.Add(new CounteringUC(this, id));
    }
    return result;
  }
  public IEnumerator<CounteringUC> EnumAllCounteringUC() {
    foreach (var id in rootIncarnation.incarnationsCounteringUC.Keys) {
      yield return GetCounteringUC(id);
    }
  }
  public void CheckHasCounteringUC(CounteringUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasCounteringUC(thing.id);
  }
  public void CheckHasCounteringUC(int id) {
    if (!rootIncarnation.incarnationsCounteringUC.ContainsKey(id)) {
      throw new System.Exception("Invalid CounteringUC: " + id);
    }
  }
  public void AddCounteringUCObserver(int id, ICounteringUCEffectObserver observer) {
    List<ICounteringUCEffectObserver> obsies;
    if (!observersForCounteringUC.TryGetValue(id, out obsies)) {
      obsies = new List<ICounteringUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForCounteringUC[id] = obsies;
  }

  public void RemoveCounteringUCObserver(int id, ICounteringUCEffectObserver observer) {
    if (observersForCounteringUC.ContainsKey(id)) {
      var list = observersForCounteringUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForCounteringUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public CounteringUC EffectCounteringUCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new CounteringUCIncarnation(

            );
    EffectInternalCreateCounteringUC(id, rootIncarnation.version, incarnation);
    return new CounteringUC(this, id);
  }
  public void EffectInternalCreateCounteringUC(
      int id,
      int incarnationVersion,
      CounteringUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new CounteringUCCreateEffect(id);
    rootIncarnation.incarnationsCounteringUC.Add(
        id,
        new VersionAndIncarnation<CounteringUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsCounteringUCCreateEffect.Add(effect);
  }

  public void EffectCounteringUCDelete(int id) {
    CheckUnlocked();
    var effect = new CounteringUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsCounteringUC[id];

    rootIncarnation.incarnationsCounteringUC.Remove(id);
    effectsCounteringUCDeleteEffect.Add(effect);
  }

     
  public int GetCounteringUCHash(int id, int version, CounteringUCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastCounteringUCEffects(
      SortedDictionary<int, List<ICounteringUCEffectObserver>> observers) {
    foreach (var effect in effectsCounteringUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<ICounteringUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCounteringUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICounteringUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCounteringUCEffect(effect);
        }
        observersForCounteringUC.Remove(effect.id);
      }
    }
    effectsCounteringUCDeleteEffect.Clear();


    foreach (var effect in effectsCounteringUCCreateEffect) {
      if (observers.TryGetValue(0, out List<ICounteringUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCounteringUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICounteringUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCounteringUCEffect(effect);
        }
      }
    }
    effectsCounteringUCCreateEffect.Clear();
  }
  public CounterImpulseIncarnation GetCounterImpulseIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsCounterImpulse[id].incarnation;
  }
  public bool CounterImpulseExists(int id) {
    return rootIncarnation.incarnationsCounterImpulse.ContainsKey(id);
  }
  public CounterImpulse GetCounterImpulse(int id) {
    return new CounterImpulse(this, id);
  }
  public List<CounterImpulse> AllCounterImpulse() {
    List<CounterImpulse> result = new List<CounterImpulse>(rootIncarnation.incarnationsCounterImpulse.Count);
    foreach (var id in rootIncarnation.incarnationsCounterImpulse.Keys) {
      result.Add(new CounterImpulse(this, id));
    }
    return result;
  }
  public IEnumerator<CounterImpulse> EnumAllCounterImpulse() {
    foreach (var id in rootIncarnation.incarnationsCounterImpulse.Keys) {
      yield return GetCounterImpulse(id);
    }
  }
  public void CheckHasCounterImpulse(CounterImpulse thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasCounterImpulse(thing.id);
  }
  public void CheckHasCounterImpulse(int id) {
    if (!rootIncarnation.incarnationsCounterImpulse.ContainsKey(id)) {
      throw new System.Exception("Invalid CounterImpulse: " + id);
    }
  }
  public void AddCounterImpulseObserver(int id, ICounterImpulseEffectObserver observer) {
    List<ICounterImpulseEffectObserver> obsies;
    if (!observersForCounterImpulse.TryGetValue(id, out obsies)) {
      obsies = new List<ICounterImpulseEffectObserver>();
    }
    obsies.Add(observer);
    observersForCounterImpulse[id] = obsies;
  }

  public void RemoveCounterImpulseObserver(int id, ICounterImpulseEffectObserver observer) {
    if (observersForCounterImpulse.ContainsKey(id)) {
      var list = observersForCounterImpulse[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForCounterImpulse.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public CounterImpulse EffectCounterImpulseCreate(
      int weight) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new CounterImpulseIncarnation(
            weight
            );
    EffectInternalCreateCounterImpulse(id, rootIncarnation.version, incarnation);
    return new CounterImpulse(this, id);
  }
  public void EffectInternalCreateCounterImpulse(
      int id,
      int incarnationVersion,
      CounterImpulseIncarnation incarnation) {
    CheckUnlocked();
    var effect = new CounterImpulseCreateEffect(id);
    rootIncarnation.incarnationsCounterImpulse.Add(
        id,
        new VersionAndIncarnation<CounterImpulseIncarnation>(
            incarnationVersion,
            incarnation));
    effectsCounterImpulseCreateEffect.Add(effect);
  }

  public void EffectCounterImpulseDelete(int id) {
    CheckUnlocked();
    var effect = new CounterImpulseDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsCounterImpulse[id];

    rootIncarnation.incarnationsCounterImpulse.Remove(id);
    effectsCounterImpulseDeleteEffect.Add(effect);
  }

     
  public int GetCounterImpulseHash(int id, int version, CounterImpulseIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.weight.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastCounterImpulseEffects(
      SortedDictionary<int, List<ICounterImpulseEffectObserver>> observers) {
    foreach (var effect in effectsCounterImpulseDeleteEffect) {
      if (observers.TryGetValue(0, out List<ICounterImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCounterImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICounterImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCounterImpulseEffect(effect);
        }
        observersForCounterImpulse.Remove(effect.id);
      }
    }
    effectsCounterImpulseDeleteEffect.Clear();


    foreach (var effect in effectsCounterImpulseCreateEffect) {
      if (observers.TryGetValue(0, out List<ICounterImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCounterImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICounterImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCounterImpulseEffect(effect);
        }
      }
    }
    effectsCounterImpulseCreateEffect.Clear();
  }
  public UnleashBideImpulseIncarnation GetUnleashBideImpulseIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsUnleashBideImpulse[id].incarnation;
  }
  public bool UnleashBideImpulseExists(int id) {
    return rootIncarnation.incarnationsUnleashBideImpulse.ContainsKey(id);
  }
  public UnleashBideImpulse GetUnleashBideImpulse(int id) {
    return new UnleashBideImpulse(this, id);
  }
  public List<UnleashBideImpulse> AllUnleashBideImpulse() {
    List<UnleashBideImpulse> result = new List<UnleashBideImpulse>(rootIncarnation.incarnationsUnleashBideImpulse.Count);
    foreach (var id in rootIncarnation.incarnationsUnleashBideImpulse.Keys) {
      result.Add(new UnleashBideImpulse(this, id));
    }
    return result;
  }
  public IEnumerator<UnleashBideImpulse> EnumAllUnleashBideImpulse() {
    foreach (var id in rootIncarnation.incarnationsUnleashBideImpulse.Keys) {
      yield return GetUnleashBideImpulse(id);
    }
  }
  public void CheckHasUnleashBideImpulse(UnleashBideImpulse thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasUnleashBideImpulse(thing.id);
  }
  public void CheckHasUnleashBideImpulse(int id) {
    if (!rootIncarnation.incarnationsUnleashBideImpulse.ContainsKey(id)) {
      throw new System.Exception("Invalid UnleashBideImpulse: " + id);
    }
  }
  public void AddUnleashBideImpulseObserver(int id, IUnleashBideImpulseEffectObserver observer) {
    List<IUnleashBideImpulseEffectObserver> obsies;
    if (!observersForUnleashBideImpulse.TryGetValue(id, out obsies)) {
      obsies = new List<IUnleashBideImpulseEffectObserver>();
    }
    obsies.Add(observer);
    observersForUnleashBideImpulse[id] = obsies;
  }

  public void RemoveUnleashBideImpulseObserver(int id, IUnleashBideImpulseEffectObserver observer) {
    if (observersForUnleashBideImpulse.ContainsKey(id)) {
      var list = observersForUnleashBideImpulse[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForUnleashBideImpulse.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public UnleashBideImpulse EffectUnleashBideImpulseCreate(
      int weight) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new UnleashBideImpulseIncarnation(
            weight
            );
    EffectInternalCreateUnleashBideImpulse(id, rootIncarnation.version, incarnation);
    return new UnleashBideImpulse(this, id);
  }
  public void EffectInternalCreateUnleashBideImpulse(
      int id,
      int incarnationVersion,
      UnleashBideImpulseIncarnation incarnation) {
    CheckUnlocked();
    var effect = new UnleashBideImpulseCreateEffect(id);
    rootIncarnation.incarnationsUnleashBideImpulse.Add(
        id,
        new VersionAndIncarnation<UnleashBideImpulseIncarnation>(
            incarnationVersion,
            incarnation));
    effectsUnleashBideImpulseCreateEffect.Add(effect);
  }

  public void EffectUnleashBideImpulseDelete(int id) {
    CheckUnlocked();
    var effect = new UnleashBideImpulseDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsUnleashBideImpulse[id];

    rootIncarnation.incarnationsUnleashBideImpulse.Remove(id);
    effectsUnleashBideImpulseDeleteEffect.Add(effect);
  }

     
  public int GetUnleashBideImpulseHash(int id, int version, UnleashBideImpulseIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.weight.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastUnleashBideImpulseEffects(
      SortedDictionary<int, List<IUnleashBideImpulseEffectObserver>> observers) {
    foreach (var effect in effectsUnleashBideImpulseDeleteEffect) {
      if (observers.TryGetValue(0, out List<IUnleashBideImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUnleashBideImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUnleashBideImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUnleashBideImpulseEffect(effect);
        }
        observersForUnleashBideImpulse.Remove(effect.id);
      }
    }
    effectsUnleashBideImpulseDeleteEffect.Clear();


    foreach (var effect in effectsUnleashBideImpulseCreateEffect) {
      if (observers.TryGetValue(0, out List<IUnleashBideImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUnleashBideImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUnleashBideImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUnleashBideImpulseEffect(effect);
        }
      }
    }
    effectsUnleashBideImpulseCreateEffect.Clear();
  }
  public ContinueBidingImpulseIncarnation GetContinueBidingImpulseIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsContinueBidingImpulse[id].incarnation;
  }
  public bool ContinueBidingImpulseExists(int id) {
    return rootIncarnation.incarnationsContinueBidingImpulse.ContainsKey(id);
  }
  public ContinueBidingImpulse GetContinueBidingImpulse(int id) {
    return new ContinueBidingImpulse(this, id);
  }
  public List<ContinueBidingImpulse> AllContinueBidingImpulse() {
    List<ContinueBidingImpulse> result = new List<ContinueBidingImpulse>(rootIncarnation.incarnationsContinueBidingImpulse.Count);
    foreach (var id in rootIncarnation.incarnationsContinueBidingImpulse.Keys) {
      result.Add(new ContinueBidingImpulse(this, id));
    }
    return result;
  }
  public IEnumerator<ContinueBidingImpulse> EnumAllContinueBidingImpulse() {
    foreach (var id in rootIncarnation.incarnationsContinueBidingImpulse.Keys) {
      yield return GetContinueBidingImpulse(id);
    }
  }
  public void CheckHasContinueBidingImpulse(ContinueBidingImpulse thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasContinueBidingImpulse(thing.id);
  }
  public void CheckHasContinueBidingImpulse(int id) {
    if (!rootIncarnation.incarnationsContinueBidingImpulse.ContainsKey(id)) {
      throw new System.Exception("Invalid ContinueBidingImpulse: " + id);
    }
  }
  public void AddContinueBidingImpulseObserver(int id, IContinueBidingImpulseEffectObserver observer) {
    List<IContinueBidingImpulseEffectObserver> obsies;
    if (!observersForContinueBidingImpulse.TryGetValue(id, out obsies)) {
      obsies = new List<IContinueBidingImpulseEffectObserver>();
    }
    obsies.Add(observer);
    observersForContinueBidingImpulse[id] = obsies;
  }

  public void RemoveContinueBidingImpulseObserver(int id, IContinueBidingImpulseEffectObserver observer) {
    if (observersForContinueBidingImpulse.ContainsKey(id)) {
      var list = observersForContinueBidingImpulse[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForContinueBidingImpulse.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public ContinueBidingImpulse EffectContinueBidingImpulseCreate(
      int weight) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new ContinueBidingImpulseIncarnation(
            weight
            );
    EffectInternalCreateContinueBidingImpulse(id, rootIncarnation.version, incarnation);
    return new ContinueBidingImpulse(this, id);
  }
  public void EffectInternalCreateContinueBidingImpulse(
      int id,
      int incarnationVersion,
      ContinueBidingImpulseIncarnation incarnation) {
    CheckUnlocked();
    var effect = new ContinueBidingImpulseCreateEffect(id);
    rootIncarnation.incarnationsContinueBidingImpulse.Add(
        id,
        new VersionAndIncarnation<ContinueBidingImpulseIncarnation>(
            incarnationVersion,
            incarnation));
    effectsContinueBidingImpulseCreateEffect.Add(effect);
  }

  public void EffectContinueBidingImpulseDelete(int id) {
    CheckUnlocked();
    var effect = new ContinueBidingImpulseDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsContinueBidingImpulse[id];

    rootIncarnation.incarnationsContinueBidingImpulse.Remove(id);
    effectsContinueBidingImpulseDeleteEffect.Add(effect);
  }

     
  public int GetContinueBidingImpulseHash(int id, int version, ContinueBidingImpulseIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.weight.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastContinueBidingImpulseEffects(
      SortedDictionary<int, List<IContinueBidingImpulseEffectObserver>> observers) {
    foreach (var effect in effectsContinueBidingImpulseDeleteEffect) {
      if (observers.TryGetValue(0, out List<IContinueBidingImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnContinueBidingImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IContinueBidingImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnContinueBidingImpulseEffect(effect);
        }
        observersForContinueBidingImpulse.Remove(effect.id);
      }
    }
    effectsContinueBidingImpulseDeleteEffect.Clear();


    foreach (var effect in effectsContinueBidingImpulseCreateEffect) {
      if (observers.TryGetValue(0, out List<IContinueBidingImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnContinueBidingImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IContinueBidingImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnContinueBidingImpulseEffect(effect);
        }
      }
    }
    effectsContinueBidingImpulseCreateEffect.Clear();
  }
  public StartBidingImpulseIncarnation GetStartBidingImpulseIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsStartBidingImpulse[id].incarnation;
  }
  public bool StartBidingImpulseExists(int id) {
    return rootIncarnation.incarnationsStartBidingImpulse.ContainsKey(id);
  }
  public StartBidingImpulse GetStartBidingImpulse(int id) {
    return new StartBidingImpulse(this, id);
  }
  public List<StartBidingImpulse> AllStartBidingImpulse() {
    List<StartBidingImpulse> result = new List<StartBidingImpulse>(rootIncarnation.incarnationsStartBidingImpulse.Count);
    foreach (var id in rootIncarnation.incarnationsStartBidingImpulse.Keys) {
      result.Add(new StartBidingImpulse(this, id));
    }
    return result;
  }
  public IEnumerator<StartBidingImpulse> EnumAllStartBidingImpulse() {
    foreach (var id in rootIncarnation.incarnationsStartBidingImpulse.Keys) {
      yield return GetStartBidingImpulse(id);
    }
  }
  public void CheckHasStartBidingImpulse(StartBidingImpulse thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasStartBidingImpulse(thing.id);
  }
  public void CheckHasStartBidingImpulse(int id) {
    if (!rootIncarnation.incarnationsStartBidingImpulse.ContainsKey(id)) {
      throw new System.Exception("Invalid StartBidingImpulse: " + id);
    }
  }
  public void AddStartBidingImpulseObserver(int id, IStartBidingImpulseEffectObserver observer) {
    List<IStartBidingImpulseEffectObserver> obsies;
    if (!observersForStartBidingImpulse.TryGetValue(id, out obsies)) {
      obsies = new List<IStartBidingImpulseEffectObserver>();
    }
    obsies.Add(observer);
    observersForStartBidingImpulse[id] = obsies;
  }

  public void RemoveStartBidingImpulseObserver(int id, IStartBidingImpulseEffectObserver observer) {
    if (observersForStartBidingImpulse.ContainsKey(id)) {
      var list = observersForStartBidingImpulse[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForStartBidingImpulse.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public StartBidingImpulse EffectStartBidingImpulseCreate(
      int weight) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new StartBidingImpulseIncarnation(
            weight
            );
    EffectInternalCreateStartBidingImpulse(id, rootIncarnation.version, incarnation);
    return new StartBidingImpulse(this, id);
  }
  public void EffectInternalCreateStartBidingImpulse(
      int id,
      int incarnationVersion,
      StartBidingImpulseIncarnation incarnation) {
    CheckUnlocked();
    var effect = new StartBidingImpulseCreateEffect(id);
    rootIncarnation.incarnationsStartBidingImpulse.Add(
        id,
        new VersionAndIncarnation<StartBidingImpulseIncarnation>(
            incarnationVersion,
            incarnation));
    effectsStartBidingImpulseCreateEffect.Add(effect);
  }

  public void EffectStartBidingImpulseDelete(int id) {
    CheckUnlocked();
    var effect = new StartBidingImpulseDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsStartBidingImpulse[id];

    rootIncarnation.incarnationsStartBidingImpulse.Remove(id);
    effectsStartBidingImpulseDeleteEffect.Add(effect);
  }

     
  public int GetStartBidingImpulseHash(int id, int version, StartBidingImpulseIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.weight.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastStartBidingImpulseEffects(
      SortedDictionary<int, List<IStartBidingImpulseEffectObserver>> observers) {
    foreach (var effect in effectsStartBidingImpulseDeleteEffect) {
      if (observers.TryGetValue(0, out List<IStartBidingImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnStartBidingImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IStartBidingImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnStartBidingImpulseEffect(effect);
        }
        observersForStartBidingImpulse.Remove(effect.id);
      }
    }
    effectsStartBidingImpulseDeleteEffect.Clear();


    foreach (var effect in effectsStartBidingImpulseCreateEffect) {
      if (observers.TryGetValue(0, out List<IStartBidingImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnStartBidingImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IStartBidingImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnStartBidingImpulseEffect(effect);
        }
      }
    }
    effectsStartBidingImpulseCreateEffect.Clear();
  }
  public BideAICapabilityUCIncarnation GetBideAICapabilityUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsBideAICapabilityUC[id].incarnation;
  }
  public bool BideAICapabilityUCExists(int id) {
    return rootIncarnation.incarnationsBideAICapabilityUC.ContainsKey(id);
  }
  public BideAICapabilityUC GetBideAICapabilityUC(int id) {
    return new BideAICapabilityUC(this, id);
  }
  public List<BideAICapabilityUC> AllBideAICapabilityUC() {
    List<BideAICapabilityUC> result = new List<BideAICapabilityUC>(rootIncarnation.incarnationsBideAICapabilityUC.Count);
    foreach (var id in rootIncarnation.incarnationsBideAICapabilityUC.Keys) {
      result.Add(new BideAICapabilityUC(this, id));
    }
    return result;
  }
  public IEnumerator<BideAICapabilityUC> EnumAllBideAICapabilityUC() {
    foreach (var id in rootIncarnation.incarnationsBideAICapabilityUC.Keys) {
      yield return GetBideAICapabilityUC(id);
    }
  }
  public void CheckHasBideAICapabilityUC(BideAICapabilityUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasBideAICapabilityUC(thing.id);
  }
  public void CheckHasBideAICapabilityUC(int id) {
    if (!rootIncarnation.incarnationsBideAICapabilityUC.ContainsKey(id)) {
      throw new System.Exception("Invalid BideAICapabilityUC: " + id);
    }
  }
  public void AddBideAICapabilityUCObserver(int id, IBideAICapabilityUCEffectObserver observer) {
    List<IBideAICapabilityUCEffectObserver> obsies;
    if (!observersForBideAICapabilityUC.TryGetValue(id, out obsies)) {
      obsies = new List<IBideAICapabilityUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForBideAICapabilityUC[id] = obsies;
  }

  public void RemoveBideAICapabilityUCObserver(int id, IBideAICapabilityUCEffectObserver observer) {
    if (observersForBideAICapabilityUC.ContainsKey(id)) {
      var list = observersForBideAICapabilityUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForBideAICapabilityUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public BideAICapabilityUC EffectBideAICapabilityUCCreate(
      int charge) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new BideAICapabilityUCIncarnation(
            charge
            );
    EffectInternalCreateBideAICapabilityUC(id, rootIncarnation.version, incarnation);
    return new BideAICapabilityUC(this, id);
  }
  public void EffectInternalCreateBideAICapabilityUC(
      int id,
      int incarnationVersion,
      BideAICapabilityUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new BideAICapabilityUCCreateEffect(id);
    rootIncarnation.incarnationsBideAICapabilityUC.Add(
        id,
        new VersionAndIncarnation<BideAICapabilityUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsBideAICapabilityUCCreateEffect.Add(effect);
  }

  public void EffectBideAICapabilityUCDelete(int id) {
    CheckUnlocked();
    var effect = new BideAICapabilityUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsBideAICapabilityUC[id];

    rootIncarnation.incarnationsBideAICapabilityUC.Remove(id);
    effectsBideAICapabilityUCDeleteEffect.Add(effect);
  }

     
  public int GetBideAICapabilityUCHash(int id, int version, BideAICapabilityUCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.charge.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastBideAICapabilityUCEffects(
      SortedDictionary<int, List<IBideAICapabilityUCEffectObserver>> observers) {
    foreach (var effect in effectsBideAICapabilityUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IBideAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBideAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBideAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBideAICapabilityUCEffect(effect);
        }
        observersForBideAICapabilityUC.Remove(effect.id);
      }
    }
    effectsBideAICapabilityUCDeleteEffect.Clear();


    foreach (var effect in effectsBideAICapabilityUCSetChargeEffect) {
      if (observers.TryGetValue(0, out List<IBideAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBideAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBideAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBideAICapabilityUCEffect(effect);
        }
      }
    }
    effectsBideAICapabilityUCSetChargeEffect.Clear();

    foreach (var effect in effectsBideAICapabilityUCCreateEffect) {
      if (observers.TryGetValue(0, out List<IBideAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBideAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBideAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBideAICapabilityUCEffect(effect);
        }
      }
    }
    effectsBideAICapabilityUCCreateEffect.Clear();
  }

  public void EffectBideAICapabilityUCSetCharge(int id, int newValue) {
    CheckUnlocked();
    CheckHasBideAICapabilityUC(id);
    var effect = new BideAICapabilityUCSetChargeEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsBideAICapabilityUC[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.charge;
      oldIncarnationAndVersion.incarnation.charge = newValue;

    } else {
      var newIncarnation =
          new BideAICapabilityUCIncarnation(
              newValue);
      rootIncarnation.incarnationsBideAICapabilityUC[id] =
          new VersionAndIncarnation<BideAICapabilityUCIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsBideAICapabilityUCSetChargeEffect.Add(effect);
  }
  public AttackImpulseIncarnation GetAttackImpulseIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsAttackImpulse[id].incarnation;
  }
  public bool AttackImpulseExists(int id) {
    return rootIncarnation.incarnationsAttackImpulse.ContainsKey(id);
  }
  public AttackImpulse GetAttackImpulse(int id) {
    return new AttackImpulse(this, id);
  }
  public List<AttackImpulse> AllAttackImpulse() {
    List<AttackImpulse> result = new List<AttackImpulse>(rootIncarnation.incarnationsAttackImpulse.Count);
    foreach (var id in rootIncarnation.incarnationsAttackImpulse.Keys) {
      result.Add(new AttackImpulse(this, id));
    }
    return result;
  }
  public IEnumerator<AttackImpulse> EnumAllAttackImpulse() {
    foreach (var id in rootIncarnation.incarnationsAttackImpulse.Keys) {
      yield return GetAttackImpulse(id);
    }
  }
  public void CheckHasAttackImpulse(AttackImpulse thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasAttackImpulse(thing.id);
  }
  public void CheckHasAttackImpulse(int id) {
    if (!rootIncarnation.incarnationsAttackImpulse.ContainsKey(id)) {
      throw new System.Exception("Invalid AttackImpulse: " + id);
    }
  }
  public void AddAttackImpulseObserver(int id, IAttackImpulseEffectObserver observer) {
    List<IAttackImpulseEffectObserver> obsies;
    if (!observersForAttackImpulse.TryGetValue(id, out obsies)) {
      obsies = new List<IAttackImpulseEffectObserver>();
    }
    obsies.Add(observer);
    observersForAttackImpulse[id] = obsies;
  }

  public void RemoveAttackImpulseObserver(int id, IAttackImpulseEffectObserver observer) {
    if (observersForAttackImpulse.ContainsKey(id)) {
      var list = observersForAttackImpulse[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForAttackImpulse.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public AttackImpulse EffectAttackImpulseCreate(
      int weight,
      Unit targetUnit) {
    CheckUnlocked();
    CheckHasUnit(targetUnit);

    var id = NewId();
    var incarnation =
        new AttackImpulseIncarnation(
            weight,
            targetUnit.id
            );
    EffectInternalCreateAttackImpulse(id, rootIncarnation.version, incarnation);
    return new AttackImpulse(this, id);
  }
  public void EffectInternalCreateAttackImpulse(
      int id,
      int incarnationVersion,
      AttackImpulseIncarnation incarnation) {
    CheckUnlocked();
    var effect = new AttackImpulseCreateEffect(id);
    rootIncarnation.incarnationsAttackImpulse.Add(
        id,
        new VersionAndIncarnation<AttackImpulseIncarnation>(
            incarnationVersion,
            incarnation));
    effectsAttackImpulseCreateEffect.Add(effect);
  }

  public void EffectAttackImpulseDelete(int id) {
    CheckUnlocked();
    var effect = new AttackImpulseDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsAttackImpulse[id];

    rootIncarnation.incarnationsAttackImpulse.Remove(id);
    effectsAttackImpulseDeleteEffect.Add(effect);
  }

     
  public int GetAttackImpulseHash(int id, int version, AttackImpulseIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.weight.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.targetUnit.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastAttackImpulseEffects(
      SortedDictionary<int, List<IAttackImpulseEffectObserver>> observers) {
    foreach (var effect in effectsAttackImpulseDeleteEffect) {
      if (observers.TryGetValue(0, out List<IAttackImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAttackImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAttackImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAttackImpulseEffect(effect);
        }
        observersForAttackImpulse.Remove(effect.id);
      }
    }
    effectsAttackImpulseDeleteEffect.Clear();


    foreach (var effect in effectsAttackImpulseCreateEffect) {
      if (observers.TryGetValue(0, out List<IAttackImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAttackImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAttackImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAttackImpulseEffect(effect);
        }
      }
    }
    effectsAttackImpulseCreateEffect.Clear();
  }
  public PursueImpulseIncarnation GetPursueImpulseIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsPursueImpulse[id].incarnation;
  }
  public bool PursueImpulseExists(int id) {
    return rootIncarnation.incarnationsPursueImpulse.ContainsKey(id);
  }
  public PursueImpulse GetPursueImpulse(int id) {
    return new PursueImpulse(this, id);
  }
  public List<PursueImpulse> AllPursueImpulse() {
    List<PursueImpulse> result = new List<PursueImpulse>(rootIncarnation.incarnationsPursueImpulse.Count);
    foreach (var id in rootIncarnation.incarnationsPursueImpulse.Keys) {
      result.Add(new PursueImpulse(this, id));
    }
    return result;
  }
  public IEnumerator<PursueImpulse> EnumAllPursueImpulse() {
    foreach (var id in rootIncarnation.incarnationsPursueImpulse.Keys) {
      yield return GetPursueImpulse(id);
    }
  }
  public void CheckHasPursueImpulse(PursueImpulse thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasPursueImpulse(thing.id);
  }
  public void CheckHasPursueImpulse(int id) {
    if (!rootIncarnation.incarnationsPursueImpulse.ContainsKey(id)) {
      throw new System.Exception("Invalid PursueImpulse: " + id);
    }
  }
  public void AddPursueImpulseObserver(int id, IPursueImpulseEffectObserver observer) {
    List<IPursueImpulseEffectObserver> obsies;
    if (!observersForPursueImpulse.TryGetValue(id, out obsies)) {
      obsies = new List<IPursueImpulseEffectObserver>();
    }
    obsies.Add(observer);
    observersForPursueImpulse[id] = obsies;
  }

  public void RemovePursueImpulseObserver(int id, IPursueImpulseEffectObserver observer) {
    if (observersForPursueImpulse.ContainsKey(id)) {
      var list = observersForPursueImpulse[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForPursueImpulse.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public PursueImpulse EffectPursueImpulseCreate(
      int weight,
      bool isClearPath) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new PursueImpulseIncarnation(
            weight,
            isClearPath
            );
    EffectInternalCreatePursueImpulse(id, rootIncarnation.version, incarnation);
    return new PursueImpulse(this, id);
  }
  public void EffectInternalCreatePursueImpulse(
      int id,
      int incarnationVersion,
      PursueImpulseIncarnation incarnation) {
    CheckUnlocked();
    var effect = new PursueImpulseCreateEffect(id);
    rootIncarnation.incarnationsPursueImpulse.Add(
        id,
        new VersionAndIncarnation<PursueImpulseIncarnation>(
            incarnationVersion,
            incarnation));
    effectsPursueImpulseCreateEffect.Add(effect);
  }

  public void EffectPursueImpulseDelete(int id) {
    CheckUnlocked();
    var effect = new PursueImpulseDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsPursueImpulse[id];

    rootIncarnation.incarnationsPursueImpulse.Remove(id);
    effectsPursueImpulseDeleteEffect.Add(effect);
  }

     
  public int GetPursueImpulseHash(int id, int version, PursueImpulseIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.weight.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.isClearPath.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastPursueImpulseEffects(
      SortedDictionary<int, List<IPursueImpulseEffectObserver>> observers) {
    foreach (var effect in effectsPursueImpulseDeleteEffect) {
      if (observers.TryGetValue(0, out List<IPursueImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnPursueImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IPursueImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnPursueImpulseEffect(effect);
        }
        observersForPursueImpulse.Remove(effect.id);
      }
    }
    effectsPursueImpulseDeleteEffect.Clear();


    foreach (var effect in effectsPursueImpulseCreateEffect) {
      if (observers.TryGetValue(0, out List<IPursueImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnPursueImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IPursueImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnPursueImpulseEffect(effect);
        }
      }
    }
    effectsPursueImpulseCreateEffect.Clear();
  }
  public KillDirectiveIncarnation GetKillDirectiveIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsKillDirective[id].incarnation;
  }
  public bool KillDirectiveExists(int id) {
    return rootIncarnation.incarnationsKillDirective.ContainsKey(id);
  }
  public KillDirective GetKillDirective(int id) {
    return new KillDirective(this, id);
  }
  public List<KillDirective> AllKillDirective() {
    List<KillDirective> result = new List<KillDirective>(rootIncarnation.incarnationsKillDirective.Count);
    foreach (var id in rootIncarnation.incarnationsKillDirective.Keys) {
      result.Add(new KillDirective(this, id));
    }
    return result;
  }
  public IEnumerator<KillDirective> EnumAllKillDirective() {
    foreach (var id in rootIncarnation.incarnationsKillDirective.Keys) {
      yield return GetKillDirective(id);
    }
  }
  public void CheckHasKillDirective(KillDirective thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasKillDirective(thing.id);
  }
  public void CheckHasKillDirective(int id) {
    if (!rootIncarnation.incarnationsKillDirective.ContainsKey(id)) {
      throw new System.Exception("Invalid KillDirective: " + id);
    }
  }
  public void AddKillDirectiveObserver(int id, IKillDirectiveEffectObserver observer) {
    List<IKillDirectiveEffectObserver> obsies;
    if (!observersForKillDirective.TryGetValue(id, out obsies)) {
      obsies = new List<IKillDirectiveEffectObserver>();
    }
    obsies.Add(observer);
    observersForKillDirective[id] = obsies;
  }

  public void RemoveKillDirectiveObserver(int id, IKillDirectiveEffectObserver observer) {
    if (observersForKillDirective.ContainsKey(id)) {
      var list = observersForKillDirective[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForKillDirective.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public KillDirective EffectKillDirectiveCreate(
      Unit targetUnit,
      LocationMutList pathToLastSeenLocation) {
    CheckUnlocked();
    CheckHasUnit(targetUnit);
    CheckHasLocationMutList(pathToLastSeenLocation);

    var id = NewId();
    var incarnation =
        new KillDirectiveIncarnation(
            targetUnit.id,
            pathToLastSeenLocation.id
            );
    EffectInternalCreateKillDirective(id, rootIncarnation.version, incarnation);
    return new KillDirective(this, id);
  }
  public void EffectInternalCreateKillDirective(
      int id,
      int incarnationVersion,
      KillDirectiveIncarnation incarnation) {
    CheckUnlocked();
    var effect = new KillDirectiveCreateEffect(id);
    rootIncarnation.incarnationsKillDirective.Add(
        id,
        new VersionAndIncarnation<KillDirectiveIncarnation>(
            incarnationVersion,
            incarnation));
    effectsKillDirectiveCreateEffect.Add(effect);
  }

  public void EffectKillDirectiveDelete(int id) {
    CheckUnlocked();
    var effect = new KillDirectiveDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsKillDirective[id];

    rootIncarnation.incarnationsKillDirective.Remove(id);
    effectsKillDirectiveDeleteEffect.Add(effect);
  }

     
  public int GetKillDirectiveHash(int id, int version, KillDirectiveIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.targetUnit.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.pathToLastSeenLocation.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastKillDirectiveEffects(
      SortedDictionary<int, List<IKillDirectiveEffectObserver>> observers) {
    foreach (var effect in effectsKillDirectiveDeleteEffect) {
      if (observers.TryGetValue(0, out List<IKillDirectiveEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKillDirectiveEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKillDirectiveEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKillDirectiveEffect(effect);
        }
        observersForKillDirective.Remove(effect.id);
      }
    }
    effectsKillDirectiveDeleteEffect.Clear();


    foreach (var effect in effectsKillDirectiveCreateEffect) {
      if (observers.TryGetValue(0, out List<IKillDirectiveEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKillDirectiveEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKillDirectiveEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKillDirectiveEffect(effect);
        }
      }
    }
    effectsKillDirectiveCreateEffect.Clear();
  }
  public AttackAICapabilityUCIncarnation GetAttackAICapabilityUCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsAttackAICapabilityUC[id].incarnation;
  }
  public bool AttackAICapabilityUCExists(int id) {
    return rootIncarnation.incarnationsAttackAICapabilityUC.ContainsKey(id);
  }
  public AttackAICapabilityUC GetAttackAICapabilityUC(int id) {
    return new AttackAICapabilityUC(this, id);
  }
  public List<AttackAICapabilityUC> AllAttackAICapabilityUC() {
    List<AttackAICapabilityUC> result = new List<AttackAICapabilityUC>(rootIncarnation.incarnationsAttackAICapabilityUC.Count);
    foreach (var id in rootIncarnation.incarnationsAttackAICapabilityUC.Keys) {
      result.Add(new AttackAICapabilityUC(this, id));
    }
    return result;
  }
  public IEnumerator<AttackAICapabilityUC> EnumAllAttackAICapabilityUC() {
    foreach (var id in rootIncarnation.incarnationsAttackAICapabilityUC.Keys) {
      yield return GetAttackAICapabilityUC(id);
    }
  }
  public void CheckHasAttackAICapabilityUC(AttackAICapabilityUC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasAttackAICapabilityUC(thing.id);
  }
  public void CheckHasAttackAICapabilityUC(int id) {
    if (!rootIncarnation.incarnationsAttackAICapabilityUC.ContainsKey(id)) {
      throw new System.Exception("Invalid AttackAICapabilityUC: " + id);
    }
  }
  public void AddAttackAICapabilityUCObserver(int id, IAttackAICapabilityUCEffectObserver observer) {
    List<IAttackAICapabilityUCEffectObserver> obsies;
    if (!observersForAttackAICapabilityUC.TryGetValue(id, out obsies)) {
      obsies = new List<IAttackAICapabilityUCEffectObserver>();
    }
    obsies.Add(observer);
    observersForAttackAICapabilityUC[id] = obsies;
  }

  public void RemoveAttackAICapabilityUCObserver(int id, IAttackAICapabilityUCEffectObserver observer) {
    if (observersForAttackAICapabilityUC.ContainsKey(id)) {
      var list = observersForAttackAICapabilityUC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForAttackAICapabilityUC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public AttackAICapabilityUC EffectAttackAICapabilityUCCreate(
      KillDirective killDirective) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new AttackAICapabilityUCIncarnation(
            killDirective.id
            );
    EffectInternalCreateAttackAICapabilityUC(id, rootIncarnation.version, incarnation);
    return new AttackAICapabilityUC(this, id);
  }
  public void EffectInternalCreateAttackAICapabilityUC(
      int id,
      int incarnationVersion,
      AttackAICapabilityUCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new AttackAICapabilityUCCreateEffect(id);
    rootIncarnation.incarnationsAttackAICapabilityUC.Add(
        id,
        new VersionAndIncarnation<AttackAICapabilityUCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsAttackAICapabilityUCCreateEffect.Add(effect);
  }

  public void EffectAttackAICapabilityUCDelete(int id) {
    CheckUnlocked();
    var effect = new AttackAICapabilityUCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsAttackAICapabilityUC[id];

    rootIncarnation.incarnationsAttackAICapabilityUC.Remove(id);
    effectsAttackAICapabilityUCDeleteEffect.Add(effect);
  }

     
  public int GetAttackAICapabilityUCHash(int id, int version, AttackAICapabilityUCIncarnation incarnation) {
    int result = id * version;
    if (!object.ReferenceEquals(incarnation.killDirective, null)) {
      result += id * version * 1 * incarnation.killDirective.GetDeterministicHashCode();
    }
    return result;
  }
     
  public void BroadcastAttackAICapabilityUCEffects(
      SortedDictionary<int, List<IAttackAICapabilityUCEffectObserver>> observers) {
    foreach (var effect in effectsAttackAICapabilityUCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IAttackAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAttackAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAttackAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAttackAICapabilityUCEffect(effect);
        }
        observersForAttackAICapabilityUC.Remove(effect.id);
      }
    }
    effectsAttackAICapabilityUCDeleteEffect.Clear();


    foreach (var effect in effectsAttackAICapabilityUCSetKillDirectiveEffect) {
      if (observers.TryGetValue(0, out List<IAttackAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAttackAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAttackAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAttackAICapabilityUCEffect(effect);
        }
      }
    }
    effectsAttackAICapabilityUCSetKillDirectiveEffect.Clear();

    foreach (var effect in effectsAttackAICapabilityUCCreateEffect) {
      if (observers.TryGetValue(0, out List<IAttackAICapabilityUCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAttackAICapabilityUCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAttackAICapabilityUCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAttackAICapabilityUCEffect(effect);
        }
      }
    }
    effectsAttackAICapabilityUCCreateEffect.Clear();
  }

  public void EffectAttackAICapabilityUCSetKillDirective(int id, KillDirective newValue) {
    CheckUnlocked();
    CheckHasAttackAICapabilityUC(id);
    var effect = new AttackAICapabilityUCSetKillDirectiveEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsAttackAICapabilityUC[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldId = oldIncarnationAndVersion.incarnation.killDirective;
      oldIncarnationAndVersion.incarnation.killDirective = newValue.id;

    } else {
      var newIncarnation =
          new AttackAICapabilityUCIncarnation(
              newValue.id);
      rootIncarnation.incarnationsAttackAICapabilityUC[id] =
          new VersionAndIncarnation<AttackAICapabilityUCIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsAttackAICapabilityUCSetKillDirectiveEffect.Add(effect);
  }
  public WarperTTCIncarnation GetWarperTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsWarperTTC[id].incarnation;
  }
  public bool WarperTTCExists(int id) {
    return rootIncarnation.incarnationsWarperTTC.ContainsKey(id);
  }
  public WarperTTC GetWarperTTC(int id) {
    return new WarperTTC(this, id);
  }
  public List<WarperTTC> AllWarperTTC() {
    List<WarperTTC> result = new List<WarperTTC>(rootIncarnation.incarnationsWarperTTC.Count);
    foreach (var id in rootIncarnation.incarnationsWarperTTC.Keys) {
      result.Add(new WarperTTC(this, id));
    }
    return result;
  }
  public IEnumerator<WarperTTC> EnumAllWarperTTC() {
    foreach (var id in rootIncarnation.incarnationsWarperTTC.Keys) {
      yield return GetWarperTTC(id);
    }
  }
  public void CheckHasWarperTTC(WarperTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasWarperTTC(thing.id);
  }
  public void CheckHasWarperTTC(int id) {
    if (!rootIncarnation.incarnationsWarperTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid WarperTTC: " + id);
    }
  }
  public void AddWarperTTCObserver(int id, IWarperTTCEffectObserver observer) {
    List<IWarperTTCEffectObserver> obsies;
    if (!observersForWarperTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IWarperTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForWarperTTC[id] = obsies;
  }

  public void RemoveWarperTTCObserver(int id, IWarperTTCEffectObserver observer) {
    if (observersForWarperTTC.ContainsKey(id)) {
      var list = observersForWarperTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForWarperTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public WarperTTC EffectWarperTTCCreate(
      Location destinationLocation) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new WarperTTCIncarnation(
            destinationLocation
            );
    EffectInternalCreateWarperTTC(id, rootIncarnation.version, incarnation);
    return new WarperTTC(this, id);
  }
  public void EffectInternalCreateWarperTTC(
      int id,
      int incarnationVersion,
      WarperTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new WarperTTCCreateEffect(id);
    rootIncarnation.incarnationsWarperTTC.Add(
        id,
        new VersionAndIncarnation<WarperTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsWarperTTCCreateEffect.Add(effect);
  }

  public void EffectWarperTTCDelete(int id) {
    CheckUnlocked();
    var effect = new WarperTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsWarperTTC[id];

    rootIncarnation.incarnationsWarperTTC.Remove(id);
    effectsWarperTTCDeleteEffect.Add(effect);
  }

     
  public int GetWarperTTCHash(int id, int version, WarperTTCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.destinationLocation.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastWarperTTCEffects(
      SortedDictionary<int, List<IWarperTTCEffectObserver>> observers) {
    foreach (var effect in effectsWarperTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IWarperTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWarperTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWarperTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWarperTTCEffect(effect);
        }
        observersForWarperTTC.Remove(effect.id);
      }
    }
    effectsWarperTTCDeleteEffect.Clear();


    foreach (var effect in effectsWarperTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IWarperTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWarperTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWarperTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWarperTTCEffect(effect);
        }
      }
    }
    effectsWarperTTCCreateEffect.Clear();
  }
  public TimeAnchorTTCIncarnation GetTimeAnchorTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsTimeAnchorTTC[id].incarnation;
  }
  public bool TimeAnchorTTCExists(int id) {
    return rootIncarnation.incarnationsTimeAnchorTTC.ContainsKey(id);
  }
  public TimeAnchorTTC GetTimeAnchorTTC(int id) {
    return new TimeAnchorTTC(this, id);
  }
  public List<TimeAnchorTTC> AllTimeAnchorTTC() {
    List<TimeAnchorTTC> result = new List<TimeAnchorTTC>(rootIncarnation.incarnationsTimeAnchorTTC.Count);
    foreach (var id in rootIncarnation.incarnationsTimeAnchorTTC.Keys) {
      result.Add(new TimeAnchorTTC(this, id));
    }
    return result;
  }
  public IEnumerator<TimeAnchorTTC> EnumAllTimeAnchorTTC() {
    foreach (var id in rootIncarnation.incarnationsTimeAnchorTTC.Keys) {
      yield return GetTimeAnchorTTC(id);
    }
  }
  public void CheckHasTimeAnchorTTC(TimeAnchorTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasTimeAnchorTTC(thing.id);
  }
  public void CheckHasTimeAnchorTTC(int id) {
    if (!rootIncarnation.incarnationsTimeAnchorTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid TimeAnchorTTC: " + id);
    }
  }
  public void AddTimeAnchorTTCObserver(int id, ITimeAnchorTTCEffectObserver observer) {
    List<ITimeAnchorTTCEffectObserver> obsies;
    if (!observersForTimeAnchorTTC.TryGetValue(id, out obsies)) {
      obsies = new List<ITimeAnchorTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForTimeAnchorTTC[id] = obsies;
  }

  public void RemoveTimeAnchorTTCObserver(int id, ITimeAnchorTTCEffectObserver observer) {
    if (observersForTimeAnchorTTC.ContainsKey(id)) {
      var list = observersForTimeAnchorTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForTimeAnchorTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public TimeAnchorTTC EffectTimeAnchorTTCCreate(
      int pastVersion) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new TimeAnchorTTCIncarnation(
            pastVersion
            );
    EffectInternalCreateTimeAnchorTTC(id, rootIncarnation.version, incarnation);
    return new TimeAnchorTTC(this, id);
  }
  public void EffectInternalCreateTimeAnchorTTC(
      int id,
      int incarnationVersion,
      TimeAnchorTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new TimeAnchorTTCCreateEffect(id);
    rootIncarnation.incarnationsTimeAnchorTTC.Add(
        id,
        new VersionAndIncarnation<TimeAnchorTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsTimeAnchorTTCCreateEffect.Add(effect);
  }

  public void EffectTimeAnchorTTCDelete(int id) {
    CheckUnlocked();
    var effect = new TimeAnchorTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsTimeAnchorTTC[id];

    rootIncarnation.incarnationsTimeAnchorTTC.Remove(id);
    effectsTimeAnchorTTCDeleteEffect.Add(effect);
  }

     
  public int GetTimeAnchorTTCHash(int id, int version, TimeAnchorTTCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.pastVersion.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastTimeAnchorTTCEffects(
      SortedDictionary<int, List<ITimeAnchorTTCEffectObserver>> observers) {
    foreach (var effect in effectsTimeAnchorTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<ITimeAnchorTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTimeAnchorTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITimeAnchorTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTimeAnchorTTCEffect(effect);
        }
        observersForTimeAnchorTTC.Remove(effect.id);
      }
    }
    effectsTimeAnchorTTCDeleteEffect.Clear();


    foreach (var effect in effectsTimeAnchorTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<ITimeAnchorTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTimeAnchorTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITimeAnchorTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTimeAnchorTTCEffect(effect);
        }
      }
    }
    effectsTimeAnchorTTCCreateEffect.Clear();
  }
  public TerrainTileIncarnation GetTerrainTileIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsTerrainTile[id].incarnation;
  }
  public bool TerrainTileExists(int id) {
    return rootIncarnation.incarnationsTerrainTile.ContainsKey(id);
  }
  public TerrainTile GetTerrainTile(int id) {
    return new TerrainTile(this, id);
  }
  public List<TerrainTile> AllTerrainTile() {
    List<TerrainTile> result = new List<TerrainTile>(rootIncarnation.incarnationsTerrainTile.Count);
    foreach (var id in rootIncarnation.incarnationsTerrainTile.Keys) {
      result.Add(new TerrainTile(this, id));
    }
    return result;
  }
  public IEnumerator<TerrainTile> EnumAllTerrainTile() {
    foreach (var id in rootIncarnation.incarnationsTerrainTile.Keys) {
      yield return GetTerrainTile(id);
    }
  }
  public void CheckHasTerrainTile(TerrainTile thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasTerrainTile(thing.id);
  }
  public void CheckHasTerrainTile(int id) {
    if (!rootIncarnation.incarnationsTerrainTile.ContainsKey(id)) {
      throw new System.Exception("Invalid TerrainTile: " + id);
    }
  }
  public void AddTerrainTileObserver(int id, ITerrainTileEffectObserver observer) {
    List<ITerrainTileEffectObserver> obsies;
    if (!observersForTerrainTile.TryGetValue(id, out obsies)) {
      obsies = new List<ITerrainTileEffectObserver>();
    }
    obsies.Add(observer);
    observersForTerrainTile[id] = obsies;
  }

  public void RemoveTerrainTileObserver(int id, ITerrainTileEffectObserver observer) {
    if (observersForTerrainTile.ContainsKey(id)) {
      var list = observersForTerrainTile[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForTerrainTile.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public TerrainTile EffectTerrainTileCreate(
      int elevation,
      ITerrainTileComponentMutBunch components) {
    CheckUnlocked();
    CheckHasITerrainTileComponentMutBunch(components);

    var id = NewId();
    var incarnation =
        new TerrainTileIncarnation(
            elevation,
            components.id
            );
    EffectInternalCreateTerrainTile(id, rootIncarnation.version, incarnation);
    return new TerrainTile(this, id);
  }
  public void EffectInternalCreateTerrainTile(
      int id,
      int incarnationVersion,
      TerrainTileIncarnation incarnation) {
    CheckUnlocked();
    var effect = new TerrainTileCreateEffect(id);
    rootIncarnation.incarnationsTerrainTile.Add(
        id,
        new VersionAndIncarnation<TerrainTileIncarnation>(
            incarnationVersion,
            incarnation));
    effectsTerrainTileCreateEffect.Add(effect);
  }

  public void EffectTerrainTileDelete(int id) {
    CheckUnlocked();
    var effect = new TerrainTileDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsTerrainTile[id];

    rootIncarnation.incarnationsTerrainTile.Remove(id);
    effectsTerrainTileDeleteEffect.Add(effect);
  }

     
  public int GetTerrainTileHash(int id, int version, TerrainTileIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.elevation.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.components.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastTerrainTileEffects(
      SortedDictionary<int, List<ITerrainTileEffectObserver>> observers) {
    foreach (var effect in effectsTerrainTileDeleteEffect) {
      if (observers.TryGetValue(0, out List<ITerrainTileEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTerrainTileEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITerrainTileEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTerrainTileEffect(effect);
        }
        observersForTerrainTile.Remove(effect.id);
      }
    }
    effectsTerrainTileDeleteEffect.Clear();


    foreach (var effect in effectsTerrainTileSetElevationEffect) {
      if (observers.TryGetValue(0, out List<ITerrainTileEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTerrainTileEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITerrainTileEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTerrainTileEffect(effect);
        }
      }
    }
    effectsTerrainTileSetElevationEffect.Clear();

    foreach (var effect in effectsTerrainTileCreateEffect) {
      if (observers.TryGetValue(0, out List<ITerrainTileEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTerrainTileEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITerrainTileEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTerrainTileEffect(effect);
        }
      }
    }
    effectsTerrainTileCreateEffect.Clear();
  }

  public void EffectTerrainTileSetElevation(int id, int newValue) {
    CheckUnlocked();
    CheckHasTerrainTile(id);
    var effect = new TerrainTileSetElevationEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsTerrainTile[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.elevation;
      oldIncarnationAndVersion.incarnation.elevation = newValue;

    } else {
      var newIncarnation =
          new TerrainTileIncarnation(
              newValue,
              oldIncarnationAndVersion.incarnation.components);
      rootIncarnation.incarnationsTerrainTile[id] =
          new VersionAndIncarnation<TerrainTileIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsTerrainTileSetElevationEffect.Add(effect);
  }
  public ITerrainTileComponentMutBunchIncarnation GetITerrainTileComponentMutBunchIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsITerrainTileComponentMutBunch[id].incarnation;
  }
  public bool ITerrainTileComponentMutBunchExists(int id) {
    return rootIncarnation.incarnationsITerrainTileComponentMutBunch.ContainsKey(id);
  }
  public ITerrainTileComponentMutBunch GetITerrainTileComponentMutBunch(int id) {
    return new ITerrainTileComponentMutBunch(this, id);
  }
  public List<ITerrainTileComponentMutBunch> AllITerrainTileComponentMutBunch() {
    List<ITerrainTileComponentMutBunch> result = new List<ITerrainTileComponentMutBunch>(rootIncarnation.incarnationsITerrainTileComponentMutBunch.Count);
    foreach (var id in rootIncarnation.incarnationsITerrainTileComponentMutBunch.Keys) {
      result.Add(new ITerrainTileComponentMutBunch(this, id));
    }
    return result;
  }
  public IEnumerator<ITerrainTileComponentMutBunch> EnumAllITerrainTileComponentMutBunch() {
    foreach (var id in rootIncarnation.incarnationsITerrainTileComponentMutBunch.Keys) {
      yield return GetITerrainTileComponentMutBunch(id);
    }
  }
  public void CheckHasITerrainTileComponentMutBunch(ITerrainTileComponentMutBunch thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasITerrainTileComponentMutBunch(thing.id);
  }
  public void CheckHasITerrainTileComponentMutBunch(int id) {
    if (!rootIncarnation.incarnationsITerrainTileComponentMutBunch.ContainsKey(id)) {
      throw new System.Exception("Invalid ITerrainTileComponentMutBunch: " + id);
    }
  }
  public void AddITerrainTileComponentMutBunchObserver(int id, IITerrainTileComponentMutBunchEffectObserver observer) {
    List<IITerrainTileComponentMutBunchEffectObserver> obsies;
    if (!observersForITerrainTileComponentMutBunch.TryGetValue(id, out obsies)) {
      obsies = new List<IITerrainTileComponentMutBunchEffectObserver>();
    }
    obsies.Add(observer);
    observersForITerrainTileComponentMutBunch[id] = obsies;
  }

  public void RemoveITerrainTileComponentMutBunchObserver(int id, IITerrainTileComponentMutBunchEffectObserver observer) {
    if (observersForITerrainTileComponentMutBunch.ContainsKey(id)) {
      var list = observersForITerrainTileComponentMutBunch[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForITerrainTileComponentMutBunch.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public ITerrainTileComponentMutBunch EffectITerrainTileComponentMutBunchCreate(
      SimplePresenceTriggerTTCMutSet membersSimplePresenceTriggerTTCMutSet,
      ItemTTCMutSet membersItemTTCMutSet,
      KamikazeTargetTTCMutSet membersKamikazeTargetTTCMutSet,
      WarperTTCMutSet membersWarperTTCMutSet,
      TimeAnchorTTCMutSet membersTimeAnchorTTCMutSet,
      FireBombTTCMutSet membersFireBombTTCMutSet,
      MarkerTTCMutSet membersMarkerTTCMutSet,
      LevelLinkTTCMutSet membersLevelLinkTTCMutSet,
      MudTTCMutSet membersMudTTCMutSet,
      DirtTTCMutSet membersDirtTTCMutSet,
      ObsidianTTCMutSet membersObsidianTTCMutSet,
      DownStairsTTCMutSet membersDownStairsTTCMutSet,
      UpStairsTTCMutSet membersUpStairsTTCMutSet,
      WallTTCMutSet membersWallTTCMutSet,
      BloodTTCMutSet membersBloodTTCMutSet,
      RocksTTCMutSet membersRocksTTCMutSet,
      TreeTTCMutSet membersTreeTTCMutSet,
      WaterTTCMutSet membersWaterTTCMutSet,
      FloorTTCMutSet membersFloorTTCMutSet,
      CaveWallTTCMutSet membersCaveWallTTCMutSet,
      CaveTTCMutSet membersCaveTTCMutSet,
      FallsTTCMutSet membersFallsTTCMutSet,
      FireTTCMutSet membersFireTTCMutSet,
      ObsidianFloorTTCMutSet membersObsidianFloorTTCMutSet,
      MagmaTTCMutSet membersMagmaTTCMutSet,
      CliffTTCMutSet membersCliffTTCMutSet,
      RavaNestTTCMutSet membersRavaNestTTCMutSet,
      CliffLandingTTCMutSet membersCliffLandingTTCMutSet,
      StoneTTCMutSet membersStoneTTCMutSet,
      GrassTTCMutSet membersGrassTTCMutSet,
      IncendianFallsLevelLinkerTTCMutSet membersIncendianFallsLevelLinkerTTCMutSet,
      EmberDeepLevelLinkerTTCMutSet membersEmberDeepLevelLinkerTTCMutSet) {
    CheckUnlocked();
    CheckHasSimplePresenceTriggerTTCMutSet(membersSimplePresenceTriggerTTCMutSet);
    CheckHasItemTTCMutSet(membersItemTTCMutSet);
    CheckHasKamikazeTargetTTCMutSet(membersKamikazeTargetTTCMutSet);
    CheckHasWarperTTCMutSet(membersWarperTTCMutSet);
    CheckHasTimeAnchorTTCMutSet(membersTimeAnchorTTCMutSet);
    CheckHasFireBombTTCMutSet(membersFireBombTTCMutSet);
    CheckHasMarkerTTCMutSet(membersMarkerTTCMutSet);
    CheckHasLevelLinkTTCMutSet(membersLevelLinkTTCMutSet);
    CheckHasMudTTCMutSet(membersMudTTCMutSet);
    CheckHasDirtTTCMutSet(membersDirtTTCMutSet);
    CheckHasObsidianTTCMutSet(membersObsidianTTCMutSet);
    CheckHasDownStairsTTCMutSet(membersDownStairsTTCMutSet);
    CheckHasUpStairsTTCMutSet(membersUpStairsTTCMutSet);
    CheckHasWallTTCMutSet(membersWallTTCMutSet);
    CheckHasBloodTTCMutSet(membersBloodTTCMutSet);
    CheckHasRocksTTCMutSet(membersRocksTTCMutSet);
    CheckHasTreeTTCMutSet(membersTreeTTCMutSet);
    CheckHasWaterTTCMutSet(membersWaterTTCMutSet);
    CheckHasFloorTTCMutSet(membersFloorTTCMutSet);
    CheckHasCaveWallTTCMutSet(membersCaveWallTTCMutSet);
    CheckHasCaveTTCMutSet(membersCaveTTCMutSet);
    CheckHasFallsTTCMutSet(membersFallsTTCMutSet);
    CheckHasFireTTCMutSet(membersFireTTCMutSet);
    CheckHasObsidianFloorTTCMutSet(membersObsidianFloorTTCMutSet);
    CheckHasMagmaTTCMutSet(membersMagmaTTCMutSet);
    CheckHasCliffTTCMutSet(membersCliffTTCMutSet);
    CheckHasRavaNestTTCMutSet(membersRavaNestTTCMutSet);
    CheckHasCliffLandingTTCMutSet(membersCliffLandingTTCMutSet);
    CheckHasStoneTTCMutSet(membersStoneTTCMutSet);
    CheckHasGrassTTCMutSet(membersGrassTTCMutSet);
    CheckHasIncendianFallsLevelLinkerTTCMutSet(membersIncendianFallsLevelLinkerTTCMutSet);
    CheckHasEmberDeepLevelLinkerTTCMutSet(membersEmberDeepLevelLinkerTTCMutSet);

    var id = NewId();
    var incarnation =
        new ITerrainTileComponentMutBunchIncarnation(
            membersSimplePresenceTriggerTTCMutSet.id,
            membersItemTTCMutSet.id,
            membersKamikazeTargetTTCMutSet.id,
            membersWarperTTCMutSet.id,
            membersTimeAnchorTTCMutSet.id,
            membersFireBombTTCMutSet.id,
            membersMarkerTTCMutSet.id,
            membersLevelLinkTTCMutSet.id,
            membersMudTTCMutSet.id,
            membersDirtTTCMutSet.id,
            membersObsidianTTCMutSet.id,
            membersDownStairsTTCMutSet.id,
            membersUpStairsTTCMutSet.id,
            membersWallTTCMutSet.id,
            membersBloodTTCMutSet.id,
            membersRocksTTCMutSet.id,
            membersTreeTTCMutSet.id,
            membersWaterTTCMutSet.id,
            membersFloorTTCMutSet.id,
            membersCaveWallTTCMutSet.id,
            membersCaveTTCMutSet.id,
            membersFallsTTCMutSet.id,
            membersFireTTCMutSet.id,
            membersObsidianFloorTTCMutSet.id,
            membersMagmaTTCMutSet.id,
            membersCliffTTCMutSet.id,
            membersRavaNestTTCMutSet.id,
            membersCliffLandingTTCMutSet.id,
            membersStoneTTCMutSet.id,
            membersGrassTTCMutSet.id,
            membersIncendianFallsLevelLinkerTTCMutSet.id,
            membersEmberDeepLevelLinkerTTCMutSet.id
            );
    EffectInternalCreateITerrainTileComponentMutBunch(id, rootIncarnation.version, incarnation);
    return new ITerrainTileComponentMutBunch(this, id);
  }
  public void EffectInternalCreateITerrainTileComponentMutBunch(
      int id,
      int incarnationVersion,
      ITerrainTileComponentMutBunchIncarnation incarnation) {
    CheckUnlocked();
    var effect = new ITerrainTileComponentMutBunchCreateEffect(id);
    rootIncarnation.incarnationsITerrainTileComponentMutBunch.Add(
        id,
        new VersionAndIncarnation<ITerrainTileComponentMutBunchIncarnation>(
            incarnationVersion,
            incarnation));
    effectsITerrainTileComponentMutBunchCreateEffect.Add(effect);
  }

  public void EffectITerrainTileComponentMutBunchDelete(int id) {
    CheckUnlocked();
    var effect = new ITerrainTileComponentMutBunchDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsITerrainTileComponentMutBunch[id];

    rootIncarnation.incarnationsITerrainTileComponentMutBunch.Remove(id);
    effectsITerrainTileComponentMutBunchDeleteEffect.Add(effect);
  }

     
  public int GetITerrainTileComponentMutBunchHash(int id, int version, ITerrainTileComponentMutBunchIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.membersSimplePresenceTriggerTTCMutSet.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.membersItemTTCMutSet.GetDeterministicHashCode();
    result += id * version * 3 * incarnation.membersKamikazeTargetTTCMutSet.GetDeterministicHashCode();
    result += id * version * 4 * incarnation.membersWarperTTCMutSet.GetDeterministicHashCode();
    result += id * version * 5 * incarnation.membersTimeAnchorTTCMutSet.GetDeterministicHashCode();
    result += id * version * 6 * incarnation.membersFireBombTTCMutSet.GetDeterministicHashCode();
    result += id * version * 7 * incarnation.membersMarkerTTCMutSet.GetDeterministicHashCode();
    result += id * version * 8 * incarnation.membersLevelLinkTTCMutSet.GetDeterministicHashCode();
    result += id * version * 9 * incarnation.membersMudTTCMutSet.GetDeterministicHashCode();
    result += id * version * 10 * incarnation.membersDirtTTCMutSet.GetDeterministicHashCode();
    result += id * version * 11 * incarnation.membersObsidianTTCMutSet.GetDeterministicHashCode();
    result += id * version * 12 * incarnation.membersDownStairsTTCMutSet.GetDeterministicHashCode();
    result += id * version * 13 * incarnation.membersUpStairsTTCMutSet.GetDeterministicHashCode();
    result += id * version * 14 * incarnation.membersWallTTCMutSet.GetDeterministicHashCode();
    result += id * version * 15 * incarnation.membersBloodTTCMutSet.GetDeterministicHashCode();
    result += id * version * 16 * incarnation.membersRocksTTCMutSet.GetDeterministicHashCode();
    result += id * version * 17 * incarnation.membersTreeTTCMutSet.GetDeterministicHashCode();
    result += id * version * 18 * incarnation.membersWaterTTCMutSet.GetDeterministicHashCode();
    result += id * version * 19 * incarnation.membersFloorTTCMutSet.GetDeterministicHashCode();
    result += id * version * 20 * incarnation.membersCaveWallTTCMutSet.GetDeterministicHashCode();
    result += id * version * 21 * incarnation.membersCaveTTCMutSet.GetDeterministicHashCode();
    result += id * version * 22 * incarnation.membersFallsTTCMutSet.GetDeterministicHashCode();
    result += id * version * 23 * incarnation.membersFireTTCMutSet.GetDeterministicHashCode();
    result += id * version * 24 * incarnation.membersObsidianFloorTTCMutSet.GetDeterministicHashCode();
    result += id * version * 25 * incarnation.membersMagmaTTCMutSet.GetDeterministicHashCode();
    result += id * version * 26 * incarnation.membersCliffTTCMutSet.GetDeterministicHashCode();
    result += id * version * 27 * incarnation.membersRavaNestTTCMutSet.GetDeterministicHashCode();
    result += id * version * 28 * incarnation.membersCliffLandingTTCMutSet.GetDeterministicHashCode();
    result += id * version * 29 * incarnation.membersStoneTTCMutSet.GetDeterministicHashCode();
    result += id * version * 30 * incarnation.membersGrassTTCMutSet.GetDeterministicHashCode();
    result += id * version * 31 * incarnation.membersIncendianFallsLevelLinkerTTCMutSet.GetDeterministicHashCode();
    result += id * version * 32 * incarnation.membersEmberDeepLevelLinkerTTCMutSet.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastITerrainTileComponentMutBunchEffects(
      SortedDictionary<int, List<IITerrainTileComponentMutBunchEffectObserver>> observers) {
    foreach (var effect in effectsITerrainTileComponentMutBunchDeleteEffect) {
      if (observers.TryGetValue(0, out List<IITerrainTileComponentMutBunchEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnITerrainTileComponentMutBunchEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IITerrainTileComponentMutBunchEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnITerrainTileComponentMutBunchEffect(effect);
        }
        observersForITerrainTileComponentMutBunch.Remove(effect.id);
      }
    }
    effectsITerrainTileComponentMutBunchDeleteEffect.Clear();


    foreach (var effect in effectsITerrainTileComponentMutBunchCreateEffect) {
      if (observers.TryGetValue(0, out List<IITerrainTileComponentMutBunchEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnITerrainTileComponentMutBunchEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IITerrainTileComponentMutBunchEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnITerrainTileComponentMutBunchEffect(effect);
        }
      }
    }
    effectsITerrainTileComponentMutBunchCreateEffect.Clear();
  }
  public TerrainIncarnation GetTerrainIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsTerrain[id].incarnation;
  }
  public bool TerrainExists(int id) {
    return rootIncarnation.incarnationsTerrain.ContainsKey(id);
  }
  public Terrain GetTerrain(int id) {
    return new Terrain(this, id);
  }
  public List<Terrain> AllTerrain() {
    List<Terrain> result = new List<Terrain>(rootIncarnation.incarnationsTerrain.Count);
    foreach (var id in rootIncarnation.incarnationsTerrain.Keys) {
      result.Add(new Terrain(this, id));
    }
    return result;
  }
  public IEnumerator<Terrain> EnumAllTerrain() {
    foreach (var id in rootIncarnation.incarnationsTerrain.Keys) {
      yield return GetTerrain(id);
    }
  }
  public void CheckHasTerrain(Terrain thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasTerrain(thing.id);
  }
  public void CheckHasTerrain(int id) {
    if (!rootIncarnation.incarnationsTerrain.ContainsKey(id)) {
      throw new System.Exception("Invalid Terrain: " + id);
    }
  }
  public void AddTerrainObserver(int id, ITerrainEffectObserver observer) {
    List<ITerrainEffectObserver> obsies;
    if (!observersForTerrain.TryGetValue(id, out obsies)) {
      obsies = new List<ITerrainEffectObserver>();
    }
    obsies.Add(observer);
    observersForTerrain[id] = obsies;
  }

  public void RemoveTerrainObserver(int id, ITerrainEffectObserver observer) {
    if (observersForTerrain.ContainsKey(id)) {
      var list = observersForTerrain[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForTerrain.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public Terrain EffectTerrainCreate(
      Pattern pattern,
      float elevationStepHeight,
      TerrainTileByLocationMutMap tiles) {
    CheckUnlocked();
    CheckHasTerrainTileByLocationMutMap(tiles);

    var id = NewId();
    var incarnation =
        new TerrainIncarnation(
            pattern,
            elevationStepHeight,
            tiles.id
            );
    EffectInternalCreateTerrain(id, rootIncarnation.version, incarnation);
    return new Terrain(this, id);
  }
  public void EffectInternalCreateTerrain(
      int id,
      int incarnationVersion,
      TerrainIncarnation incarnation) {
    CheckUnlocked();
    var effect = new TerrainCreateEffect(id);
    rootIncarnation.incarnationsTerrain.Add(
        id,
        new VersionAndIncarnation<TerrainIncarnation>(
            incarnationVersion,
            incarnation));
    effectsTerrainCreateEffect.Add(effect);
  }

  public void EffectTerrainDelete(int id) {
    CheckUnlocked();
    var effect = new TerrainDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsTerrain[id];

    rootIncarnation.incarnationsTerrain.Remove(id);
    effectsTerrainDeleteEffect.Add(effect);
  }

     
  public int GetTerrainHash(int id, int version, TerrainIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.pattern.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.elevationStepHeight.GetDeterministicHashCode();
    result += id * version * 3 * incarnation.tiles.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastTerrainEffects(
      SortedDictionary<int, List<ITerrainEffectObserver>> observers) {
    foreach (var effect in effectsTerrainDeleteEffect) {
      if (observers.TryGetValue(0, out List<ITerrainEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTerrainEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITerrainEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTerrainEffect(effect);
        }
        observersForTerrain.Remove(effect.id);
      }
    }
    effectsTerrainDeleteEffect.Clear();


    foreach (var effect in effectsTerrainSetPatternEffect) {
      if (observers.TryGetValue(0, out List<ITerrainEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTerrainEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITerrainEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTerrainEffect(effect);
        }
      }
    }
    effectsTerrainSetPatternEffect.Clear();

    foreach (var effect in effectsTerrainCreateEffect) {
      if (observers.TryGetValue(0, out List<ITerrainEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTerrainEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITerrainEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTerrainEffect(effect);
        }
      }
    }
    effectsTerrainCreateEffect.Clear();
  }

  public void EffectTerrainSetPattern(int id, Pattern newValue) {
    CheckUnlocked();
    CheckHasTerrain(id);
    var effect = new TerrainSetPatternEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsTerrain[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.pattern;
      oldIncarnationAndVersion.incarnation.pattern = newValue;

    } else {
      var newIncarnation =
          new TerrainIncarnation(
              newValue,
              oldIncarnationAndVersion.incarnation.elevationStepHeight,
              oldIncarnationAndVersion.incarnation.tiles);
      rootIncarnation.incarnationsTerrain[id] =
          new VersionAndIncarnation<TerrainIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsTerrainSetPatternEffect.Add(effect);
  }
  public SimplePresenceTriggerTTCIncarnation GetSimplePresenceTriggerTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsSimplePresenceTriggerTTC[id].incarnation;
  }
  public bool SimplePresenceTriggerTTCExists(int id) {
    return rootIncarnation.incarnationsSimplePresenceTriggerTTC.ContainsKey(id);
  }
  public SimplePresenceTriggerTTC GetSimplePresenceTriggerTTC(int id) {
    return new SimplePresenceTriggerTTC(this, id);
  }
  public List<SimplePresenceTriggerTTC> AllSimplePresenceTriggerTTC() {
    List<SimplePresenceTriggerTTC> result = new List<SimplePresenceTriggerTTC>(rootIncarnation.incarnationsSimplePresenceTriggerTTC.Count);
    foreach (var id in rootIncarnation.incarnationsSimplePresenceTriggerTTC.Keys) {
      result.Add(new SimplePresenceTriggerTTC(this, id));
    }
    return result;
  }
  public IEnumerator<SimplePresenceTriggerTTC> EnumAllSimplePresenceTriggerTTC() {
    foreach (var id in rootIncarnation.incarnationsSimplePresenceTriggerTTC.Keys) {
      yield return GetSimplePresenceTriggerTTC(id);
    }
  }
  public void CheckHasSimplePresenceTriggerTTC(SimplePresenceTriggerTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasSimplePresenceTriggerTTC(thing.id);
  }
  public void CheckHasSimplePresenceTriggerTTC(int id) {
    if (!rootIncarnation.incarnationsSimplePresenceTriggerTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid SimplePresenceTriggerTTC: " + id);
    }
  }
  public void AddSimplePresenceTriggerTTCObserver(int id, ISimplePresenceTriggerTTCEffectObserver observer) {
    List<ISimplePresenceTriggerTTCEffectObserver> obsies;
    if (!observersForSimplePresenceTriggerTTC.TryGetValue(id, out obsies)) {
      obsies = new List<ISimplePresenceTriggerTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForSimplePresenceTriggerTTC[id] = obsies;
  }

  public void RemoveSimplePresenceTriggerTTCObserver(int id, ISimplePresenceTriggerTTCEffectObserver observer) {
    if (observersForSimplePresenceTriggerTTC.ContainsKey(id)) {
      var list = observersForSimplePresenceTriggerTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForSimplePresenceTriggerTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public SimplePresenceTriggerTTC EffectSimplePresenceTriggerTTCCreate(
      string name) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new SimplePresenceTriggerTTCIncarnation(
            name
            );
    EffectInternalCreateSimplePresenceTriggerTTC(id, rootIncarnation.version, incarnation);
    return new SimplePresenceTriggerTTC(this, id);
  }
  public void EffectInternalCreateSimplePresenceTriggerTTC(
      int id,
      int incarnationVersion,
      SimplePresenceTriggerTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new SimplePresenceTriggerTTCCreateEffect(id);
    rootIncarnation.incarnationsSimplePresenceTriggerTTC.Add(
        id,
        new VersionAndIncarnation<SimplePresenceTriggerTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsSimplePresenceTriggerTTCCreateEffect.Add(effect);
  }

  public void EffectSimplePresenceTriggerTTCDelete(int id) {
    CheckUnlocked();
    var effect = new SimplePresenceTriggerTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsSimplePresenceTriggerTTC[id];

    rootIncarnation.incarnationsSimplePresenceTriggerTTC.Remove(id);
    effectsSimplePresenceTriggerTTCDeleteEffect.Add(effect);
  }

     
  public int GetSimplePresenceTriggerTTCHash(int id, int version, SimplePresenceTriggerTTCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.name.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastSimplePresenceTriggerTTCEffects(
      SortedDictionary<int, List<ISimplePresenceTriggerTTCEffectObserver>> observers) {
    foreach (var effect in effectsSimplePresenceTriggerTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<ISimplePresenceTriggerTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSimplePresenceTriggerTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISimplePresenceTriggerTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSimplePresenceTriggerTTCEffect(effect);
        }
        observersForSimplePresenceTriggerTTC.Remove(effect.id);
      }
    }
    effectsSimplePresenceTriggerTTCDeleteEffect.Clear();


    foreach (var effect in effectsSimplePresenceTriggerTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<ISimplePresenceTriggerTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSimplePresenceTriggerTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISimplePresenceTriggerTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSimplePresenceTriggerTTCEffect(effect);
        }
      }
    }
    effectsSimplePresenceTriggerTTCCreateEffect.Clear();
  }
  public FireBombImpulseIncarnation GetFireBombImpulseIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsFireBombImpulse[id].incarnation;
  }
  public bool FireBombImpulseExists(int id) {
    return rootIncarnation.incarnationsFireBombImpulse.ContainsKey(id);
  }
  public FireBombImpulse GetFireBombImpulse(int id) {
    return new FireBombImpulse(this, id);
  }
  public List<FireBombImpulse> AllFireBombImpulse() {
    List<FireBombImpulse> result = new List<FireBombImpulse>(rootIncarnation.incarnationsFireBombImpulse.Count);
    foreach (var id in rootIncarnation.incarnationsFireBombImpulse.Keys) {
      result.Add(new FireBombImpulse(this, id));
    }
    return result;
  }
  public IEnumerator<FireBombImpulse> EnumAllFireBombImpulse() {
    foreach (var id in rootIncarnation.incarnationsFireBombImpulse.Keys) {
      yield return GetFireBombImpulse(id);
    }
  }
  public void CheckHasFireBombImpulse(FireBombImpulse thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasFireBombImpulse(thing.id);
  }
  public void CheckHasFireBombImpulse(int id) {
    if (!rootIncarnation.incarnationsFireBombImpulse.ContainsKey(id)) {
      throw new System.Exception("Invalid FireBombImpulse: " + id);
    }
  }
  public void AddFireBombImpulseObserver(int id, IFireBombImpulseEffectObserver observer) {
    List<IFireBombImpulseEffectObserver> obsies;
    if (!observersForFireBombImpulse.TryGetValue(id, out obsies)) {
      obsies = new List<IFireBombImpulseEffectObserver>();
    }
    obsies.Add(observer);
    observersForFireBombImpulse[id] = obsies;
  }

  public void RemoveFireBombImpulseObserver(int id, IFireBombImpulseEffectObserver observer) {
    if (observersForFireBombImpulse.ContainsKey(id)) {
      var list = observersForFireBombImpulse[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForFireBombImpulse.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public FireBombImpulse EffectFireBombImpulseCreate(
      int weight,
      Location location) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new FireBombImpulseIncarnation(
            weight,
            location
            );
    EffectInternalCreateFireBombImpulse(id, rootIncarnation.version, incarnation);
    return new FireBombImpulse(this, id);
  }
  public void EffectInternalCreateFireBombImpulse(
      int id,
      int incarnationVersion,
      FireBombImpulseIncarnation incarnation) {
    CheckUnlocked();
    var effect = new FireBombImpulseCreateEffect(id);
    rootIncarnation.incarnationsFireBombImpulse.Add(
        id,
        new VersionAndIncarnation<FireBombImpulseIncarnation>(
            incarnationVersion,
            incarnation));
    effectsFireBombImpulseCreateEffect.Add(effect);
  }

  public void EffectFireBombImpulseDelete(int id) {
    CheckUnlocked();
    var effect = new FireBombImpulseDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsFireBombImpulse[id];

    rootIncarnation.incarnationsFireBombImpulse.Remove(id);
    effectsFireBombImpulseDeleteEffect.Add(effect);
  }

     
  public int GetFireBombImpulseHash(int id, int version, FireBombImpulseIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.weight.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.location.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastFireBombImpulseEffects(
      SortedDictionary<int, List<IFireBombImpulseEffectObserver>> observers) {
    foreach (var effect in effectsFireBombImpulseDeleteEffect) {
      if (observers.TryGetValue(0, out List<IFireBombImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireBombImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireBombImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireBombImpulseEffect(effect);
        }
        observersForFireBombImpulse.Remove(effect.id);
      }
    }
    effectsFireBombImpulseDeleteEffect.Clear();


    foreach (var effect in effectsFireBombImpulseCreateEffect) {
      if (observers.TryGetValue(0, out List<IFireBombImpulseEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireBombImpulseEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireBombImpulseEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireBombImpulseEffect(effect);
        }
      }
    }
    effectsFireBombImpulseCreateEffect.Clear();
  }
  public FireBombTTCIncarnation GetFireBombTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsFireBombTTC[id].incarnation;
  }
  public bool FireBombTTCExists(int id) {
    return rootIncarnation.incarnationsFireBombTTC.ContainsKey(id);
  }
  public FireBombTTC GetFireBombTTC(int id) {
    return new FireBombTTC(this, id);
  }
  public List<FireBombTTC> AllFireBombTTC() {
    List<FireBombTTC> result = new List<FireBombTTC>(rootIncarnation.incarnationsFireBombTTC.Count);
    foreach (var id in rootIncarnation.incarnationsFireBombTTC.Keys) {
      result.Add(new FireBombTTC(this, id));
    }
    return result;
  }
  public IEnumerator<FireBombTTC> EnumAllFireBombTTC() {
    foreach (var id in rootIncarnation.incarnationsFireBombTTC.Keys) {
      yield return GetFireBombTTC(id);
    }
  }
  public void CheckHasFireBombTTC(FireBombTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasFireBombTTC(thing.id);
  }
  public void CheckHasFireBombTTC(int id) {
    if (!rootIncarnation.incarnationsFireBombTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid FireBombTTC: " + id);
    }
  }
  public void AddFireBombTTCObserver(int id, IFireBombTTCEffectObserver observer) {
    List<IFireBombTTCEffectObserver> obsies;
    if (!observersForFireBombTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IFireBombTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForFireBombTTC[id] = obsies;
  }

  public void RemoveFireBombTTCObserver(int id, IFireBombTTCEffectObserver observer) {
    if (observersForFireBombTTC.ContainsKey(id)) {
      var list = observersForFireBombTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForFireBombTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public FireBombTTC EffectFireBombTTCCreate(
      int turnsUntilExplosion) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new FireBombTTCIncarnation(
            turnsUntilExplosion
            );
    EffectInternalCreateFireBombTTC(id, rootIncarnation.version, incarnation);
    return new FireBombTTC(this, id);
  }
  public void EffectInternalCreateFireBombTTC(
      int id,
      int incarnationVersion,
      FireBombTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new FireBombTTCCreateEffect(id);
    rootIncarnation.incarnationsFireBombTTC.Add(
        id,
        new VersionAndIncarnation<FireBombTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsFireBombTTCCreateEffect.Add(effect);
  }

  public void EffectFireBombTTCDelete(int id) {
    CheckUnlocked();
    var effect = new FireBombTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsFireBombTTC[id];

    rootIncarnation.incarnationsFireBombTTC.Remove(id);
    effectsFireBombTTCDeleteEffect.Add(effect);
  }

     
  public int GetFireBombTTCHash(int id, int version, FireBombTTCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.turnsUntilExplosion.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastFireBombTTCEffects(
      SortedDictionary<int, List<IFireBombTTCEffectObserver>> observers) {
    foreach (var effect in effectsFireBombTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IFireBombTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireBombTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireBombTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireBombTTCEffect(effect);
        }
        observersForFireBombTTC.Remove(effect.id);
      }
    }
    effectsFireBombTTCDeleteEffect.Clear();


    foreach (var effect in effectsFireBombTTCSetTurnsUntilExplosionEffect) {
      if (observers.TryGetValue(0, out List<IFireBombTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireBombTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireBombTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireBombTTCEffect(effect);
        }
      }
    }
    effectsFireBombTTCSetTurnsUntilExplosionEffect.Clear();

    foreach (var effect in effectsFireBombTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IFireBombTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireBombTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireBombTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireBombTTCEffect(effect);
        }
      }
    }
    effectsFireBombTTCCreateEffect.Clear();
  }

  public void EffectFireBombTTCSetTurnsUntilExplosion(int id, int newValue) {
    CheckUnlocked();
    CheckHasFireBombTTC(id);
    var effect = new FireBombTTCSetTurnsUntilExplosionEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsFireBombTTC[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.turnsUntilExplosion;
      oldIncarnationAndVersion.incarnation.turnsUntilExplosion = newValue;

    } else {
      var newIncarnation =
          new FireBombTTCIncarnation(
              newValue);
      rootIncarnation.incarnationsFireBombTTC[id] =
          new VersionAndIncarnation<FireBombTTCIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsFireBombTTCSetTurnsUntilExplosionEffect.Add(effect);
  }
  public MarkerTTCIncarnation GetMarkerTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsMarkerTTC[id].incarnation;
  }
  public bool MarkerTTCExists(int id) {
    return rootIncarnation.incarnationsMarkerTTC.ContainsKey(id);
  }
  public MarkerTTC GetMarkerTTC(int id) {
    return new MarkerTTC(this, id);
  }
  public List<MarkerTTC> AllMarkerTTC() {
    List<MarkerTTC> result = new List<MarkerTTC>(rootIncarnation.incarnationsMarkerTTC.Count);
    foreach (var id in rootIncarnation.incarnationsMarkerTTC.Keys) {
      result.Add(new MarkerTTC(this, id));
    }
    return result;
  }
  public IEnumerator<MarkerTTC> EnumAllMarkerTTC() {
    foreach (var id in rootIncarnation.incarnationsMarkerTTC.Keys) {
      yield return GetMarkerTTC(id);
    }
  }
  public void CheckHasMarkerTTC(MarkerTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasMarkerTTC(thing.id);
  }
  public void CheckHasMarkerTTC(int id) {
    if (!rootIncarnation.incarnationsMarkerTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid MarkerTTC: " + id);
    }
  }
  public void AddMarkerTTCObserver(int id, IMarkerTTCEffectObserver observer) {
    List<IMarkerTTCEffectObserver> obsies;
    if (!observersForMarkerTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IMarkerTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForMarkerTTC[id] = obsies;
  }

  public void RemoveMarkerTTCObserver(int id, IMarkerTTCEffectObserver observer) {
    if (observersForMarkerTTC.ContainsKey(id)) {
      var list = observersForMarkerTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForMarkerTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public MarkerTTC EffectMarkerTTCCreate(
      string name) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new MarkerTTCIncarnation(
            name
            );
    EffectInternalCreateMarkerTTC(id, rootIncarnation.version, incarnation);
    return new MarkerTTC(this, id);
  }
  public void EffectInternalCreateMarkerTTC(
      int id,
      int incarnationVersion,
      MarkerTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new MarkerTTCCreateEffect(id);
    rootIncarnation.incarnationsMarkerTTC.Add(
        id,
        new VersionAndIncarnation<MarkerTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsMarkerTTCCreateEffect.Add(effect);
  }

  public void EffectMarkerTTCDelete(int id) {
    CheckUnlocked();
    var effect = new MarkerTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsMarkerTTC[id];

    rootIncarnation.incarnationsMarkerTTC.Remove(id);
    effectsMarkerTTCDeleteEffect.Add(effect);
  }

     
  public int GetMarkerTTCHash(int id, int version, MarkerTTCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.name.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastMarkerTTCEffects(
      SortedDictionary<int, List<IMarkerTTCEffectObserver>> observers) {
    foreach (var effect in effectsMarkerTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IMarkerTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMarkerTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMarkerTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMarkerTTCEffect(effect);
        }
        observersForMarkerTTC.Remove(effect.id);
      }
    }
    effectsMarkerTTCDeleteEffect.Clear();


    foreach (var effect in effectsMarkerTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IMarkerTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMarkerTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMarkerTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMarkerTTCEffect(effect);
        }
      }
    }
    effectsMarkerTTCCreateEffect.Clear();
  }
  public LevelLinkTTCIncarnation GetLevelLinkTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsLevelLinkTTC[id].incarnation;
  }
  public bool LevelLinkTTCExists(int id) {
    return rootIncarnation.incarnationsLevelLinkTTC.ContainsKey(id);
  }
  public LevelLinkTTC GetLevelLinkTTC(int id) {
    return new LevelLinkTTC(this, id);
  }
  public List<LevelLinkTTC> AllLevelLinkTTC() {
    List<LevelLinkTTC> result = new List<LevelLinkTTC>(rootIncarnation.incarnationsLevelLinkTTC.Count);
    foreach (var id in rootIncarnation.incarnationsLevelLinkTTC.Keys) {
      result.Add(new LevelLinkTTC(this, id));
    }
    return result;
  }
  public IEnumerator<LevelLinkTTC> EnumAllLevelLinkTTC() {
    foreach (var id in rootIncarnation.incarnationsLevelLinkTTC.Keys) {
      yield return GetLevelLinkTTC(id);
    }
  }
  public void CheckHasLevelLinkTTC(LevelLinkTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasLevelLinkTTC(thing.id);
  }
  public void CheckHasLevelLinkTTC(int id) {
    if (!rootIncarnation.incarnationsLevelLinkTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid LevelLinkTTC: " + id);
    }
  }
  public void AddLevelLinkTTCObserver(int id, ILevelLinkTTCEffectObserver observer) {
    List<ILevelLinkTTCEffectObserver> obsies;
    if (!observersForLevelLinkTTC.TryGetValue(id, out obsies)) {
      obsies = new List<ILevelLinkTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForLevelLinkTTC[id] = obsies;
  }

  public void RemoveLevelLinkTTCObserver(int id, ILevelLinkTTCEffectObserver observer) {
    if (observersForLevelLinkTTC.ContainsKey(id)) {
      var list = observersForLevelLinkTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForLevelLinkTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public LevelLinkTTC EffectLevelLinkTTCCreate(
      bool destroyThisLevel,
      Level destinationLevel,
      Location destinationLevelLocation) {
    CheckUnlocked();
    CheckHasLevel(destinationLevel);

    var id = NewId();
    var incarnation =
        new LevelLinkTTCIncarnation(
            destroyThisLevel,
            destinationLevel.id,
            destinationLevelLocation
            );
    EffectInternalCreateLevelLinkTTC(id, rootIncarnation.version, incarnation);
    return new LevelLinkTTC(this, id);
  }
  public void EffectInternalCreateLevelLinkTTC(
      int id,
      int incarnationVersion,
      LevelLinkTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new LevelLinkTTCCreateEffect(id);
    rootIncarnation.incarnationsLevelLinkTTC.Add(
        id,
        new VersionAndIncarnation<LevelLinkTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsLevelLinkTTCCreateEffect.Add(effect);
  }

  public void EffectLevelLinkTTCDelete(int id) {
    CheckUnlocked();
    var effect = new LevelLinkTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsLevelLinkTTC[id];

    rootIncarnation.incarnationsLevelLinkTTC.Remove(id);
    effectsLevelLinkTTCDeleteEffect.Add(effect);
  }

     
  public int GetLevelLinkTTCHash(int id, int version, LevelLinkTTCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.destroyThisLevel.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.destinationLevel.GetDeterministicHashCode();
    result += id * version * 3 * incarnation.destinationLevelLocation.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastLevelLinkTTCEffects(
      SortedDictionary<int, List<ILevelLinkTTCEffectObserver>> observers) {
    foreach (var effect in effectsLevelLinkTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<ILevelLinkTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLevelLinkTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILevelLinkTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLevelLinkTTCEffect(effect);
        }
        observersForLevelLinkTTC.Remove(effect.id);
      }
    }
    effectsLevelLinkTTCDeleteEffect.Clear();


    foreach (var effect in effectsLevelLinkTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<ILevelLinkTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLevelLinkTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILevelLinkTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLevelLinkTTCEffect(effect);
        }
      }
    }
    effectsLevelLinkTTCCreateEffect.Clear();
  }
  public MudTTCIncarnation GetMudTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsMudTTC[id].incarnation;
  }
  public bool MudTTCExists(int id) {
    return rootIncarnation.incarnationsMudTTC.ContainsKey(id);
  }
  public MudTTC GetMudTTC(int id) {
    return new MudTTC(this, id);
  }
  public List<MudTTC> AllMudTTC() {
    List<MudTTC> result = new List<MudTTC>(rootIncarnation.incarnationsMudTTC.Count);
    foreach (var id in rootIncarnation.incarnationsMudTTC.Keys) {
      result.Add(new MudTTC(this, id));
    }
    return result;
  }
  public IEnumerator<MudTTC> EnumAllMudTTC() {
    foreach (var id in rootIncarnation.incarnationsMudTTC.Keys) {
      yield return GetMudTTC(id);
    }
  }
  public void CheckHasMudTTC(MudTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasMudTTC(thing.id);
  }
  public void CheckHasMudTTC(int id) {
    if (!rootIncarnation.incarnationsMudTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid MudTTC: " + id);
    }
  }
  public void AddMudTTCObserver(int id, IMudTTCEffectObserver observer) {
    List<IMudTTCEffectObserver> obsies;
    if (!observersForMudTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IMudTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForMudTTC[id] = obsies;
  }

  public void RemoveMudTTCObserver(int id, IMudTTCEffectObserver observer) {
    if (observersForMudTTC.ContainsKey(id)) {
      var list = observersForMudTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForMudTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public MudTTC EffectMudTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new MudTTCIncarnation(

            );
    EffectInternalCreateMudTTC(id, rootIncarnation.version, incarnation);
    return new MudTTC(this, id);
  }
  public void EffectInternalCreateMudTTC(
      int id,
      int incarnationVersion,
      MudTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new MudTTCCreateEffect(id);
    rootIncarnation.incarnationsMudTTC.Add(
        id,
        new VersionAndIncarnation<MudTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsMudTTCCreateEffect.Add(effect);
  }

  public void EffectMudTTCDelete(int id) {
    CheckUnlocked();
    var effect = new MudTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsMudTTC[id];

    rootIncarnation.incarnationsMudTTC.Remove(id);
    effectsMudTTCDeleteEffect.Add(effect);
  }

     
  public int GetMudTTCHash(int id, int version, MudTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastMudTTCEffects(
      SortedDictionary<int, List<IMudTTCEffectObserver>> observers) {
    foreach (var effect in effectsMudTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IMudTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMudTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMudTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMudTTCEffect(effect);
        }
        observersForMudTTC.Remove(effect.id);
      }
    }
    effectsMudTTCDeleteEffect.Clear();


    foreach (var effect in effectsMudTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IMudTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMudTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMudTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMudTTCEffect(effect);
        }
      }
    }
    effectsMudTTCCreateEffect.Clear();
  }
  public DirtTTCIncarnation GetDirtTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsDirtTTC[id].incarnation;
  }
  public bool DirtTTCExists(int id) {
    return rootIncarnation.incarnationsDirtTTC.ContainsKey(id);
  }
  public DirtTTC GetDirtTTC(int id) {
    return new DirtTTC(this, id);
  }
  public List<DirtTTC> AllDirtTTC() {
    List<DirtTTC> result = new List<DirtTTC>(rootIncarnation.incarnationsDirtTTC.Count);
    foreach (var id in rootIncarnation.incarnationsDirtTTC.Keys) {
      result.Add(new DirtTTC(this, id));
    }
    return result;
  }
  public IEnumerator<DirtTTC> EnumAllDirtTTC() {
    foreach (var id in rootIncarnation.incarnationsDirtTTC.Keys) {
      yield return GetDirtTTC(id);
    }
  }
  public void CheckHasDirtTTC(DirtTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasDirtTTC(thing.id);
  }
  public void CheckHasDirtTTC(int id) {
    if (!rootIncarnation.incarnationsDirtTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid DirtTTC: " + id);
    }
  }
  public void AddDirtTTCObserver(int id, IDirtTTCEffectObserver observer) {
    List<IDirtTTCEffectObserver> obsies;
    if (!observersForDirtTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IDirtTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForDirtTTC[id] = obsies;
  }

  public void RemoveDirtTTCObserver(int id, IDirtTTCEffectObserver observer) {
    if (observersForDirtTTC.ContainsKey(id)) {
      var list = observersForDirtTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForDirtTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public DirtTTC EffectDirtTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new DirtTTCIncarnation(

            );
    EffectInternalCreateDirtTTC(id, rootIncarnation.version, incarnation);
    return new DirtTTC(this, id);
  }
  public void EffectInternalCreateDirtTTC(
      int id,
      int incarnationVersion,
      DirtTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new DirtTTCCreateEffect(id);
    rootIncarnation.incarnationsDirtTTC.Add(
        id,
        new VersionAndIncarnation<DirtTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsDirtTTCCreateEffect.Add(effect);
  }

  public void EffectDirtTTCDelete(int id) {
    CheckUnlocked();
    var effect = new DirtTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsDirtTTC[id];

    rootIncarnation.incarnationsDirtTTC.Remove(id);
    effectsDirtTTCDeleteEffect.Add(effect);
  }

     
  public int GetDirtTTCHash(int id, int version, DirtTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastDirtTTCEffects(
      SortedDictionary<int, List<IDirtTTCEffectObserver>> observers) {
    foreach (var effect in effectsDirtTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IDirtTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDirtTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDirtTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDirtTTCEffect(effect);
        }
        observersForDirtTTC.Remove(effect.id);
      }
    }
    effectsDirtTTCDeleteEffect.Clear();


    foreach (var effect in effectsDirtTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IDirtTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDirtTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDirtTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDirtTTCEffect(effect);
        }
      }
    }
    effectsDirtTTCCreateEffect.Clear();
  }
  public ObsidianTTCIncarnation GetObsidianTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsObsidianTTC[id].incarnation;
  }
  public bool ObsidianTTCExists(int id) {
    return rootIncarnation.incarnationsObsidianTTC.ContainsKey(id);
  }
  public ObsidianTTC GetObsidianTTC(int id) {
    return new ObsidianTTC(this, id);
  }
  public List<ObsidianTTC> AllObsidianTTC() {
    List<ObsidianTTC> result = new List<ObsidianTTC>(rootIncarnation.incarnationsObsidianTTC.Count);
    foreach (var id in rootIncarnation.incarnationsObsidianTTC.Keys) {
      result.Add(new ObsidianTTC(this, id));
    }
    return result;
  }
  public IEnumerator<ObsidianTTC> EnumAllObsidianTTC() {
    foreach (var id in rootIncarnation.incarnationsObsidianTTC.Keys) {
      yield return GetObsidianTTC(id);
    }
  }
  public void CheckHasObsidianTTC(ObsidianTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasObsidianTTC(thing.id);
  }
  public void CheckHasObsidianTTC(int id) {
    if (!rootIncarnation.incarnationsObsidianTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid ObsidianTTC: " + id);
    }
  }
  public void AddObsidianTTCObserver(int id, IObsidianTTCEffectObserver observer) {
    List<IObsidianTTCEffectObserver> obsies;
    if (!observersForObsidianTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IObsidianTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForObsidianTTC[id] = obsies;
  }

  public void RemoveObsidianTTCObserver(int id, IObsidianTTCEffectObserver observer) {
    if (observersForObsidianTTC.ContainsKey(id)) {
      var list = observersForObsidianTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForObsidianTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public ObsidianTTC EffectObsidianTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new ObsidianTTCIncarnation(

            );
    EffectInternalCreateObsidianTTC(id, rootIncarnation.version, incarnation);
    return new ObsidianTTC(this, id);
  }
  public void EffectInternalCreateObsidianTTC(
      int id,
      int incarnationVersion,
      ObsidianTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new ObsidianTTCCreateEffect(id);
    rootIncarnation.incarnationsObsidianTTC.Add(
        id,
        new VersionAndIncarnation<ObsidianTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsObsidianTTCCreateEffect.Add(effect);
  }

  public void EffectObsidianTTCDelete(int id) {
    CheckUnlocked();
    var effect = new ObsidianTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsObsidianTTC[id];

    rootIncarnation.incarnationsObsidianTTC.Remove(id);
    effectsObsidianTTCDeleteEffect.Add(effect);
  }

     
  public int GetObsidianTTCHash(int id, int version, ObsidianTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastObsidianTTCEffects(
      SortedDictionary<int, List<IObsidianTTCEffectObserver>> observers) {
    foreach (var effect in effectsObsidianTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IObsidianTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnObsidianTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IObsidianTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnObsidianTTCEffect(effect);
        }
        observersForObsidianTTC.Remove(effect.id);
      }
    }
    effectsObsidianTTCDeleteEffect.Clear();


    foreach (var effect in effectsObsidianTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IObsidianTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnObsidianTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IObsidianTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnObsidianTTCEffect(effect);
        }
      }
    }
    effectsObsidianTTCCreateEffect.Clear();
  }
  public DownStairsTTCIncarnation GetDownStairsTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsDownStairsTTC[id].incarnation;
  }
  public bool DownStairsTTCExists(int id) {
    return rootIncarnation.incarnationsDownStairsTTC.ContainsKey(id);
  }
  public DownStairsTTC GetDownStairsTTC(int id) {
    return new DownStairsTTC(this, id);
  }
  public List<DownStairsTTC> AllDownStairsTTC() {
    List<DownStairsTTC> result = new List<DownStairsTTC>(rootIncarnation.incarnationsDownStairsTTC.Count);
    foreach (var id in rootIncarnation.incarnationsDownStairsTTC.Keys) {
      result.Add(new DownStairsTTC(this, id));
    }
    return result;
  }
  public IEnumerator<DownStairsTTC> EnumAllDownStairsTTC() {
    foreach (var id in rootIncarnation.incarnationsDownStairsTTC.Keys) {
      yield return GetDownStairsTTC(id);
    }
  }
  public void CheckHasDownStairsTTC(DownStairsTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasDownStairsTTC(thing.id);
  }
  public void CheckHasDownStairsTTC(int id) {
    if (!rootIncarnation.incarnationsDownStairsTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid DownStairsTTC: " + id);
    }
  }
  public void AddDownStairsTTCObserver(int id, IDownStairsTTCEffectObserver observer) {
    List<IDownStairsTTCEffectObserver> obsies;
    if (!observersForDownStairsTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IDownStairsTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForDownStairsTTC[id] = obsies;
  }

  public void RemoveDownStairsTTCObserver(int id, IDownStairsTTCEffectObserver observer) {
    if (observersForDownStairsTTC.ContainsKey(id)) {
      var list = observersForDownStairsTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForDownStairsTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public DownStairsTTC EffectDownStairsTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new DownStairsTTCIncarnation(

            );
    EffectInternalCreateDownStairsTTC(id, rootIncarnation.version, incarnation);
    return new DownStairsTTC(this, id);
  }
  public void EffectInternalCreateDownStairsTTC(
      int id,
      int incarnationVersion,
      DownStairsTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new DownStairsTTCCreateEffect(id);
    rootIncarnation.incarnationsDownStairsTTC.Add(
        id,
        new VersionAndIncarnation<DownStairsTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsDownStairsTTCCreateEffect.Add(effect);
  }

  public void EffectDownStairsTTCDelete(int id) {
    CheckUnlocked();
    var effect = new DownStairsTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsDownStairsTTC[id];

    rootIncarnation.incarnationsDownStairsTTC.Remove(id);
    effectsDownStairsTTCDeleteEffect.Add(effect);
  }

     
  public int GetDownStairsTTCHash(int id, int version, DownStairsTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastDownStairsTTCEffects(
      SortedDictionary<int, List<IDownStairsTTCEffectObserver>> observers) {
    foreach (var effect in effectsDownStairsTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IDownStairsTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDownStairsTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDownStairsTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDownStairsTTCEffect(effect);
        }
        observersForDownStairsTTC.Remove(effect.id);
      }
    }
    effectsDownStairsTTCDeleteEffect.Clear();


    foreach (var effect in effectsDownStairsTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IDownStairsTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDownStairsTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDownStairsTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDownStairsTTCEffect(effect);
        }
      }
    }
    effectsDownStairsTTCCreateEffect.Clear();
  }
  public UpStairsTTCIncarnation GetUpStairsTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsUpStairsTTC[id].incarnation;
  }
  public bool UpStairsTTCExists(int id) {
    return rootIncarnation.incarnationsUpStairsTTC.ContainsKey(id);
  }
  public UpStairsTTC GetUpStairsTTC(int id) {
    return new UpStairsTTC(this, id);
  }
  public List<UpStairsTTC> AllUpStairsTTC() {
    List<UpStairsTTC> result = new List<UpStairsTTC>(rootIncarnation.incarnationsUpStairsTTC.Count);
    foreach (var id in rootIncarnation.incarnationsUpStairsTTC.Keys) {
      result.Add(new UpStairsTTC(this, id));
    }
    return result;
  }
  public IEnumerator<UpStairsTTC> EnumAllUpStairsTTC() {
    foreach (var id in rootIncarnation.incarnationsUpStairsTTC.Keys) {
      yield return GetUpStairsTTC(id);
    }
  }
  public void CheckHasUpStairsTTC(UpStairsTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasUpStairsTTC(thing.id);
  }
  public void CheckHasUpStairsTTC(int id) {
    if (!rootIncarnation.incarnationsUpStairsTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid UpStairsTTC: " + id);
    }
  }
  public void AddUpStairsTTCObserver(int id, IUpStairsTTCEffectObserver observer) {
    List<IUpStairsTTCEffectObserver> obsies;
    if (!observersForUpStairsTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IUpStairsTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForUpStairsTTC[id] = obsies;
  }

  public void RemoveUpStairsTTCObserver(int id, IUpStairsTTCEffectObserver observer) {
    if (observersForUpStairsTTC.ContainsKey(id)) {
      var list = observersForUpStairsTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForUpStairsTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public UpStairsTTC EffectUpStairsTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new UpStairsTTCIncarnation(

            );
    EffectInternalCreateUpStairsTTC(id, rootIncarnation.version, incarnation);
    return new UpStairsTTC(this, id);
  }
  public void EffectInternalCreateUpStairsTTC(
      int id,
      int incarnationVersion,
      UpStairsTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new UpStairsTTCCreateEffect(id);
    rootIncarnation.incarnationsUpStairsTTC.Add(
        id,
        new VersionAndIncarnation<UpStairsTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsUpStairsTTCCreateEffect.Add(effect);
  }

  public void EffectUpStairsTTCDelete(int id) {
    CheckUnlocked();
    var effect = new UpStairsTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsUpStairsTTC[id];

    rootIncarnation.incarnationsUpStairsTTC.Remove(id);
    effectsUpStairsTTCDeleteEffect.Add(effect);
  }

     
  public int GetUpStairsTTCHash(int id, int version, UpStairsTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastUpStairsTTCEffects(
      SortedDictionary<int, List<IUpStairsTTCEffectObserver>> observers) {
    foreach (var effect in effectsUpStairsTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IUpStairsTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUpStairsTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUpStairsTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUpStairsTTCEffect(effect);
        }
        observersForUpStairsTTC.Remove(effect.id);
      }
    }
    effectsUpStairsTTCDeleteEffect.Clear();


    foreach (var effect in effectsUpStairsTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IUpStairsTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUpStairsTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUpStairsTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUpStairsTTCEffect(effect);
        }
      }
    }
    effectsUpStairsTTCCreateEffect.Clear();
  }
  public WallTTCIncarnation GetWallTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsWallTTC[id].incarnation;
  }
  public bool WallTTCExists(int id) {
    return rootIncarnation.incarnationsWallTTC.ContainsKey(id);
  }
  public WallTTC GetWallTTC(int id) {
    return new WallTTC(this, id);
  }
  public List<WallTTC> AllWallTTC() {
    List<WallTTC> result = new List<WallTTC>(rootIncarnation.incarnationsWallTTC.Count);
    foreach (var id in rootIncarnation.incarnationsWallTTC.Keys) {
      result.Add(new WallTTC(this, id));
    }
    return result;
  }
  public IEnumerator<WallTTC> EnumAllWallTTC() {
    foreach (var id in rootIncarnation.incarnationsWallTTC.Keys) {
      yield return GetWallTTC(id);
    }
  }
  public void CheckHasWallTTC(WallTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasWallTTC(thing.id);
  }
  public void CheckHasWallTTC(int id) {
    if (!rootIncarnation.incarnationsWallTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid WallTTC: " + id);
    }
  }
  public void AddWallTTCObserver(int id, IWallTTCEffectObserver observer) {
    List<IWallTTCEffectObserver> obsies;
    if (!observersForWallTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IWallTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForWallTTC[id] = obsies;
  }

  public void RemoveWallTTCObserver(int id, IWallTTCEffectObserver observer) {
    if (observersForWallTTC.ContainsKey(id)) {
      var list = observersForWallTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForWallTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public WallTTC EffectWallTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new WallTTCIncarnation(

            );
    EffectInternalCreateWallTTC(id, rootIncarnation.version, incarnation);
    return new WallTTC(this, id);
  }
  public void EffectInternalCreateWallTTC(
      int id,
      int incarnationVersion,
      WallTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new WallTTCCreateEffect(id);
    rootIncarnation.incarnationsWallTTC.Add(
        id,
        new VersionAndIncarnation<WallTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsWallTTCCreateEffect.Add(effect);
  }

  public void EffectWallTTCDelete(int id) {
    CheckUnlocked();
    var effect = new WallTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsWallTTC[id];

    rootIncarnation.incarnationsWallTTC.Remove(id);
    effectsWallTTCDeleteEffect.Add(effect);
  }

     
  public int GetWallTTCHash(int id, int version, WallTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastWallTTCEffects(
      SortedDictionary<int, List<IWallTTCEffectObserver>> observers) {
    foreach (var effect in effectsWallTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IWallTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWallTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWallTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWallTTCEffect(effect);
        }
        observersForWallTTC.Remove(effect.id);
      }
    }
    effectsWallTTCDeleteEffect.Clear();


    foreach (var effect in effectsWallTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IWallTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWallTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWallTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWallTTCEffect(effect);
        }
      }
    }
    effectsWallTTCCreateEffect.Clear();
  }
  public BloodTTCIncarnation GetBloodTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsBloodTTC[id].incarnation;
  }
  public bool BloodTTCExists(int id) {
    return rootIncarnation.incarnationsBloodTTC.ContainsKey(id);
  }
  public BloodTTC GetBloodTTC(int id) {
    return new BloodTTC(this, id);
  }
  public List<BloodTTC> AllBloodTTC() {
    List<BloodTTC> result = new List<BloodTTC>(rootIncarnation.incarnationsBloodTTC.Count);
    foreach (var id in rootIncarnation.incarnationsBloodTTC.Keys) {
      result.Add(new BloodTTC(this, id));
    }
    return result;
  }
  public IEnumerator<BloodTTC> EnumAllBloodTTC() {
    foreach (var id in rootIncarnation.incarnationsBloodTTC.Keys) {
      yield return GetBloodTTC(id);
    }
  }
  public void CheckHasBloodTTC(BloodTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasBloodTTC(thing.id);
  }
  public void CheckHasBloodTTC(int id) {
    if (!rootIncarnation.incarnationsBloodTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid BloodTTC: " + id);
    }
  }
  public void AddBloodTTCObserver(int id, IBloodTTCEffectObserver observer) {
    List<IBloodTTCEffectObserver> obsies;
    if (!observersForBloodTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IBloodTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForBloodTTC[id] = obsies;
  }

  public void RemoveBloodTTCObserver(int id, IBloodTTCEffectObserver observer) {
    if (observersForBloodTTC.ContainsKey(id)) {
      var list = observersForBloodTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForBloodTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public BloodTTC EffectBloodTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new BloodTTCIncarnation(

            );
    EffectInternalCreateBloodTTC(id, rootIncarnation.version, incarnation);
    return new BloodTTC(this, id);
  }
  public void EffectInternalCreateBloodTTC(
      int id,
      int incarnationVersion,
      BloodTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new BloodTTCCreateEffect(id);
    rootIncarnation.incarnationsBloodTTC.Add(
        id,
        new VersionAndIncarnation<BloodTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsBloodTTCCreateEffect.Add(effect);
  }

  public void EffectBloodTTCDelete(int id) {
    CheckUnlocked();
    var effect = new BloodTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsBloodTTC[id];

    rootIncarnation.incarnationsBloodTTC.Remove(id);
    effectsBloodTTCDeleteEffect.Add(effect);
  }

     
  public int GetBloodTTCHash(int id, int version, BloodTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastBloodTTCEffects(
      SortedDictionary<int, List<IBloodTTCEffectObserver>> observers) {
    foreach (var effect in effectsBloodTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IBloodTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBloodTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBloodTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBloodTTCEffect(effect);
        }
        observersForBloodTTC.Remove(effect.id);
      }
    }
    effectsBloodTTCDeleteEffect.Clear();


    foreach (var effect in effectsBloodTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IBloodTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBloodTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBloodTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBloodTTCEffect(effect);
        }
      }
    }
    effectsBloodTTCCreateEffect.Clear();
  }
  public RocksTTCIncarnation GetRocksTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsRocksTTC[id].incarnation;
  }
  public bool RocksTTCExists(int id) {
    return rootIncarnation.incarnationsRocksTTC.ContainsKey(id);
  }
  public RocksTTC GetRocksTTC(int id) {
    return new RocksTTC(this, id);
  }
  public List<RocksTTC> AllRocksTTC() {
    List<RocksTTC> result = new List<RocksTTC>(rootIncarnation.incarnationsRocksTTC.Count);
    foreach (var id in rootIncarnation.incarnationsRocksTTC.Keys) {
      result.Add(new RocksTTC(this, id));
    }
    return result;
  }
  public IEnumerator<RocksTTC> EnumAllRocksTTC() {
    foreach (var id in rootIncarnation.incarnationsRocksTTC.Keys) {
      yield return GetRocksTTC(id);
    }
  }
  public void CheckHasRocksTTC(RocksTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasRocksTTC(thing.id);
  }
  public void CheckHasRocksTTC(int id) {
    if (!rootIncarnation.incarnationsRocksTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid RocksTTC: " + id);
    }
  }
  public void AddRocksTTCObserver(int id, IRocksTTCEffectObserver observer) {
    List<IRocksTTCEffectObserver> obsies;
    if (!observersForRocksTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IRocksTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForRocksTTC[id] = obsies;
  }

  public void RemoveRocksTTCObserver(int id, IRocksTTCEffectObserver observer) {
    if (observersForRocksTTC.ContainsKey(id)) {
      var list = observersForRocksTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForRocksTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public RocksTTC EffectRocksTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new RocksTTCIncarnation(

            );
    EffectInternalCreateRocksTTC(id, rootIncarnation.version, incarnation);
    return new RocksTTC(this, id);
  }
  public void EffectInternalCreateRocksTTC(
      int id,
      int incarnationVersion,
      RocksTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new RocksTTCCreateEffect(id);
    rootIncarnation.incarnationsRocksTTC.Add(
        id,
        new VersionAndIncarnation<RocksTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsRocksTTCCreateEffect.Add(effect);
  }

  public void EffectRocksTTCDelete(int id) {
    CheckUnlocked();
    var effect = new RocksTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsRocksTTC[id];

    rootIncarnation.incarnationsRocksTTC.Remove(id);
    effectsRocksTTCDeleteEffect.Add(effect);
  }

     
  public int GetRocksTTCHash(int id, int version, RocksTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastRocksTTCEffects(
      SortedDictionary<int, List<IRocksTTCEffectObserver>> observers) {
    foreach (var effect in effectsRocksTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IRocksTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRocksTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRocksTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRocksTTCEffect(effect);
        }
        observersForRocksTTC.Remove(effect.id);
      }
    }
    effectsRocksTTCDeleteEffect.Clear();


    foreach (var effect in effectsRocksTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IRocksTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRocksTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRocksTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRocksTTCEffect(effect);
        }
      }
    }
    effectsRocksTTCCreateEffect.Clear();
  }
  public TreeTTCIncarnation GetTreeTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsTreeTTC[id].incarnation;
  }
  public bool TreeTTCExists(int id) {
    return rootIncarnation.incarnationsTreeTTC.ContainsKey(id);
  }
  public TreeTTC GetTreeTTC(int id) {
    return new TreeTTC(this, id);
  }
  public List<TreeTTC> AllTreeTTC() {
    List<TreeTTC> result = new List<TreeTTC>(rootIncarnation.incarnationsTreeTTC.Count);
    foreach (var id in rootIncarnation.incarnationsTreeTTC.Keys) {
      result.Add(new TreeTTC(this, id));
    }
    return result;
  }
  public IEnumerator<TreeTTC> EnumAllTreeTTC() {
    foreach (var id in rootIncarnation.incarnationsTreeTTC.Keys) {
      yield return GetTreeTTC(id);
    }
  }
  public void CheckHasTreeTTC(TreeTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasTreeTTC(thing.id);
  }
  public void CheckHasTreeTTC(int id) {
    if (!rootIncarnation.incarnationsTreeTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid TreeTTC: " + id);
    }
  }
  public void AddTreeTTCObserver(int id, ITreeTTCEffectObserver observer) {
    List<ITreeTTCEffectObserver> obsies;
    if (!observersForTreeTTC.TryGetValue(id, out obsies)) {
      obsies = new List<ITreeTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForTreeTTC[id] = obsies;
  }

  public void RemoveTreeTTCObserver(int id, ITreeTTCEffectObserver observer) {
    if (observersForTreeTTC.ContainsKey(id)) {
      var list = observersForTreeTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForTreeTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public TreeTTC EffectTreeTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new TreeTTCIncarnation(

            );
    EffectInternalCreateTreeTTC(id, rootIncarnation.version, incarnation);
    return new TreeTTC(this, id);
  }
  public void EffectInternalCreateTreeTTC(
      int id,
      int incarnationVersion,
      TreeTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new TreeTTCCreateEffect(id);
    rootIncarnation.incarnationsTreeTTC.Add(
        id,
        new VersionAndIncarnation<TreeTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsTreeTTCCreateEffect.Add(effect);
  }

  public void EffectTreeTTCDelete(int id) {
    CheckUnlocked();
    var effect = new TreeTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsTreeTTC[id];

    rootIncarnation.incarnationsTreeTTC.Remove(id);
    effectsTreeTTCDeleteEffect.Add(effect);
  }

     
  public int GetTreeTTCHash(int id, int version, TreeTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastTreeTTCEffects(
      SortedDictionary<int, List<ITreeTTCEffectObserver>> observers) {
    foreach (var effect in effectsTreeTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<ITreeTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTreeTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITreeTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTreeTTCEffect(effect);
        }
        observersForTreeTTC.Remove(effect.id);
      }
    }
    effectsTreeTTCDeleteEffect.Clear();


    foreach (var effect in effectsTreeTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<ITreeTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTreeTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITreeTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTreeTTCEffect(effect);
        }
      }
    }
    effectsTreeTTCCreateEffect.Clear();
  }
  public WaterTTCIncarnation GetWaterTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsWaterTTC[id].incarnation;
  }
  public bool WaterTTCExists(int id) {
    return rootIncarnation.incarnationsWaterTTC.ContainsKey(id);
  }
  public WaterTTC GetWaterTTC(int id) {
    return new WaterTTC(this, id);
  }
  public List<WaterTTC> AllWaterTTC() {
    List<WaterTTC> result = new List<WaterTTC>(rootIncarnation.incarnationsWaterTTC.Count);
    foreach (var id in rootIncarnation.incarnationsWaterTTC.Keys) {
      result.Add(new WaterTTC(this, id));
    }
    return result;
  }
  public IEnumerator<WaterTTC> EnumAllWaterTTC() {
    foreach (var id in rootIncarnation.incarnationsWaterTTC.Keys) {
      yield return GetWaterTTC(id);
    }
  }
  public void CheckHasWaterTTC(WaterTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasWaterTTC(thing.id);
  }
  public void CheckHasWaterTTC(int id) {
    if (!rootIncarnation.incarnationsWaterTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid WaterTTC: " + id);
    }
  }
  public void AddWaterTTCObserver(int id, IWaterTTCEffectObserver observer) {
    List<IWaterTTCEffectObserver> obsies;
    if (!observersForWaterTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IWaterTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForWaterTTC[id] = obsies;
  }

  public void RemoveWaterTTCObserver(int id, IWaterTTCEffectObserver observer) {
    if (observersForWaterTTC.ContainsKey(id)) {
      var list = observersForWaterTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForWaterTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public WaterTTC EffectWaterTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new WaterTTCIncarnation(

            );
    EffectInternalCreateWaterTTC(id, rootIncarnation.version, incarnation);
    return new WaterTTC(this, id);
  }
  public void EffectInternalCreateWaterTTC(
      int id,
      int incarnationVersion,
      WaterTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new WaterTTCCreateEffect(id);
    rootIncarnation.incarnationsWaterTTC.Add(
        id,
        new VersionAndIncarnation<WaterTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsWaterTTCCreateEffect.Add(effect);
  }

  public void EffectWaterTTCDelete(int id) {
    CheckUnlocked();
    var effect = new WaterTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsWaterTTC[id];

    rootIncarnation.incarnationsWaterTTC.Remove(id);
    effectsWaterTTCDeleteEffect.Add(effect);
  }

     
  public int GetWaterTTCHash(int id, int version, WaterTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastWaterTTCEffects(
      SortedDictionary<int, List<IWaterTTCEffectObserver>> observers) {
    foreach (var effect in effectsWaterTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IWaterTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWaterTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWaterTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWaterTTCEffect(effect);
        }
        observersForWaterTTC.Remove(effect.id);
      }
    }
    effectsWaterTTCDeleteEffect.Clear();


    foreach (var effect in effectsWaterTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IWaterTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWaterTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWaterTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWaterTTCEffect(effect);
        }
      }
    }
    effectsWaterTTCCreateEffect.Clear();
  }
  public FloorTTCIncarnation GetFloorTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsFloorTTC[id].incarnation;
  }
  public bool FloorTTCExists(int id) {
    return rootIncarnation.incarnationsFloorTTC.ContainsKey(id);
  }
  public FloorTTC GetFloorTTC(int id) {
    return new FloorTTC(this, id);
  }
  public List<FloorTTC> AllFloorTTC() {
    List<FloorTTC> result = new List<FloorTTC>(rootIncarnation.incarnationsFloorTTC.Count);
    foreach (var id in rootIncarnation.incarnationsFloorTTC.Keys) {
      result.Add(new FloorTTC(this, id));
    }
    return result;
  }
  public IEnumerator<FloorTTC> EnumAllFloorTTC() {
    foreach (var id in rootIncarnation.incarnationsFloorTTC.Keys) {
      yield return GetFloorTTC(id);
    }
  }
  public void CheckHasFloorTTC(FloorTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasFloorTTC(thing.id);
  }
  public void CheckHasFloorTTC(int id) {
    if (!rootIncarnation.incarnationsFloorTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid FloorTTC: " + id);
    }
  }
  public void AddFloorTTCObserver(int id, IFloorTTCEffectObserver observer) {
    List<IFloorTTCEffectObserver> obsies;
    if (!observersForFloorTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IFloorTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForFloorTTC[id] = obsies;
  }

  public void RemoveFloorTTCObserver(int id, IFloorTTCEffectObserver observer) {
    if (observersForFloorTTC.ContainsKey(id)) {
      var list = observersForFloorTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForFloorTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public FloorTTC EffectFloorTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new FloorTTCIncarnation(

            );
    EffectInternalCreateFloorTTC(id, rootIncarnation.version, incarnation);
    return new FloorTTC(this, id);
  }
  public void EffectInternalCreateFloorTTC(
      int id,
      int incarnationVersion,
      FloorTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new FloorTTCCreateEffect(id);
    rootIncarnation.incarnationsFloorTTC.Add(
        id,
        new VersionAndIncarnation<FloorTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsFloorTTCCreateEffect.Add(effect);
  }

  public void EffectFloorTTCDelete(int id) {
    CheckUnlocked();
    var effect = new FloorTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsFloorTTC[id];

    rootIncarnation.incarnationsFloorTTC.Remove(id);
    effectsFloorTTCDeleteEffect.Add(effect);
  }

     
  public int GetFloorTTCHash(int id, int version, FloorTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastFloorTTCEffects(
      SortedDictionary<int, List<IFloorTTCEffectObserver>> observers) {
    foreach (var effect in effectsFloorTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IFloorTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFloorTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFloorTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFloorTTCEffect(effect);
        }
        observersForFloorTTC.Remove(effect.id);
      }
    }
    effectsFloorTTCDeleteEffect.Clear();


    foreach (var effect in effectsFloorTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IFloorTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFloorTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFloorTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFloorTTCEffect(effect);
        }
      }
    }
    effectsFloorTTCCreateEffect.Clear();
  }
  public CaveWallTTCIncarnation GetCaveWallTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsCaveWallTTC[id].incarnation;
  }
  public bool CaveWallTTCExists(int id) {
    return rootIncarnation.incarnationsCaveWallTTC.ContainsKey(id);
  }
  public CaveWallTTC GetCaveWallTTC(int id) {
    return new CaveWallTTC(this, id);
  }
  public List<CaveWallTTC> AllCaveWallTTC() {
    List<CaveWallTTC> result = new List<CaveWallTTC>(rootIncarnation.incarnationsCaveWallTTC.Count);
    foreach (var id in rootIncarnation.incarnationsCaveWallTTC.Keys) {
      result.Add(new CaveWallTTC(this, id));
    }
    return result;
  }
  public IEnumerator<CaveWallTTC> EnumAllCaveWallTTC() {
    foreach (var id in rootIncarnation.incarnationsCaveWallTTC.Keys) {
      yield return GetCaveWallTTC(id);
    }
  }
  public void CheckHasCaveWallTTC(CaveWallTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasCaveWallTTC(thing.id);
  }
  public void CheckHasCaveWallTTC(int id) {
    if (!rootIncarnation.incarnationsCaveWallTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid CaveWallTTC: " + id);
    }
  }
  public void AddCaveWallTTCObserver(int id, ICaveWallTTCEffectObserver observer) {
    List<ICaveWallTTCEffectObserver> obsies;
    if (!observersForCaveWallTTC.TryGetValue(id, out obsies)) {
      obsies = new List<ICaveWallTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForCaveWallTTC[id] = obsies;
  }

  public void RemoveCaveWallTTCObserver(int id, ICaveWallTTCEffectObserver observer) {
    if (observersForCaveWallTTC.ContainsKey(id)) {
      var list = observersForCaveWallTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForCaveWallTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public CaveWallTTC EffectCaveWallTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new CaveWallTTCIncarnation(

            );
    EffectInternalCreateCaveWallTTC(id, rootIncarnation.version, incarnation);
    return new CaveWallTTC(this, id);
  }
  public void EffectInternalCreateCaveWallTTC(
      int id,
      int incarnationVersion,
      CaveWallTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new CaveWallTTCCreateEffect(id);
    rootIncarnation.incarnationsCaveWallTTC.Add(
        id,
        new VersionAndIncarnation<CaveWallTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsCaveWallTTCCreateEffect.Add(effect);
  }

  public void EffectCaveWallTTCDelete(int id) {
    CheckUnlocked();
    var effect = new CaveWallTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsCaveWallTTC[id];

    rootIncarnation.incarnationsCaveWallTTC.Remove(id);
    effectsCaveWallTTCDeleteEffect.Add(effect);
  }

     
  public int GetCaveWallTTCHash(int id, int version, CaveWallTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastCaveWallTTCEffects(
      SortedDictionary<int, List<ICaveWallTTCEffectObserver>> observers) {
    foreach (var effect in effectsCaveWallTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<ICaveWallTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCaveWallTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICaveWallTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCaveWallTTCEffect(effect);
        }
        observersForCaveWallTTC.Remove(effect.id);
      }
    }
    effectsCaveWallTTCDeleteEffect.Clear();


    foreach (var effect in effectsCaveWallTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<ICaveWallTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCaveWallTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICaveWallTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCaveWallTTCEffect(effect);
        }
      }
    }
    effectsCaveWallTTCCreateEffect.Clear();
  }
  public CaveTTCIncarnation GetCaveTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsCaveTTC[id].incarnation;
  }
  public bool CaveTTCExists(int id) {
    return rootIncarnation.incarnationsCaveTTC.ContainsKey(id);
  }
  public CaveTTC GetCaveTTC(int id) {
    return new CaveTTC(this, id);
  }
  public List<CaveTTC> AllCaveTTC() {
    List<CaveTTC> result = new List<CaveTTC>(rootIncarnation.incarnationsCaveTTC.Count);
    foreach (var id in rootIncarnation.incarnationsCaveTTC.Keys) {
      result.Add(new CaveTTC(this, id));
    }
    return result;
  }
  public IEnumerator<CaveTTC> EnumAllCaveTTC() {
    foreach (var id in rootIncarnation.incarnationsCaveTTC.Keys) {
      yield return GetCaveTTC(id);
    }
  }
  public void CheckHasCaveTTC(CaveTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasCaveTTC(thing.id);
  }
  public void CheckHasCaveTTC(int id) {
    if (!rootIncarnation.incarnationsCaveTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid CaveTTC: " + id);
    }
  }
  public void AddCaveTTCObserver(int id, ICaveTTCEffectObserver observer) {
    List<ICaveTTCEffectObserver> obsies;
    if (!observersForCaveTTC.TryGetValue(id, out obsies)) {
      obsies = new List<ICaveTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForCaveTTC[id] = obsies;
  }

  public void RemoveCaveTTCObserver(int id, ICaveTTCEffectObserver observer) {
    if (observersForCaveTTC.ContainsKey(id)) {
      var list = observersForCaveTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForCaveTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public CaveTTC EffectCaveTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new CaveTTCIncarnation(

            );
    EffectInternalCreateCaveTTC(id, rootIncarnation.version, incarnation);
    return new CaveTTC(this, id);
  }
  public void EffectInternalCreateCaveTTC(
      int id,
      int incarnationVersion,
      CaveTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new CaveTTCCreateEffect(id);
    rootIncarnation.incarnationsCaveTTC.Add(
        id,
        new VersionAndIncarnation<CaveTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsCaveTTCCreateEffect.Add(effect);
  }

  public void EffectCaveTTCDelete(int id) {
    CheckUnlocked();
    var effect = new CaveTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsCaveTTC[id];

    rootIncarnation.incarnationsCaveTTC.Remove(id);
    effectsCaveTTCDeleteEffect.Add(effect);
  }

     
  public int GetCaveTTCHash(int id, int version, CaveTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastCaveTTCEffects(
      SortedDictionary<int, List<ICaveTTCEffectObserver>> observers) {
    foreach (var effect in effectsCaveTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<ICaveTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCaveTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICaveTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCaveTTCEffect(effect);
        }
        observersForCaveTTC.Remove(effect.id);
      }
    }
    effectsCaveTTCDeleteEffect.Clear();


    foreach (var effect in effectsCaveTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<ICaveTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCaveTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICaveTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCaveTTCEffect(effect);
        }
      }
    }
    effectsCaveTTCCreateEffect.Clear();
  }
  public FallsTTCIncarnation GetFallsTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsFallsTTC[id].incarnation;
  }
  public bool FallsTTCExists(int id) {
    return rootIncarnation.incarnationsFallsTTC.ContainsKey(id);
  }
  public FallsTTC GetFallsTTC(int id) {
    return new FallsTTC(this, id);
  }
  public List<FallsTTC> AllFallsTTC() {
    List<FallsTTC> result = new List<FallsTTC>(rootIncarnation.incarnationsFallsTTC.Count);
    foreach (var id in rootIncarnation.incarnationsFallsTTC.Keys) {
      result.Add(new FallsTTC(this, id));
    }
    return result;
  }
  public IEnumerator<FallsTTC> EnumAllFallsTTC() {
    foreach (var id in rootIncarnation.incarnationsFallsTTC.Keys) {
      yield return GetFallsTTC(id);
    }
  }
  public void CheckHasFallsTTC(FallsTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasFallsTTC(thing.id);
  }
  public void CheckHasFallsTTC(int id) {
    if (!rootIncarnation.incarnationsFallsTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid FallsTTC: " + id);
    }
  }
  public void AddFallsTTCObserver(int id, IFallsTTCEffectObserver observer) {
    List<IFallsTTCEffectObserver> obsies;
    if (!observersForFallsTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IFallsTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForFallsTTC[id] = obsies;
  }

  public void RemoveFallsTTCObserver(int id, IFallsTTCEffectObserver observer) {
    if (observersForFallsTTC.ContainsKey(id)) {
      var list = observersForFallsTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForFallsTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public FallsTTC EffectFallsTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new FallsTTCIncarnation(

            );
    EffectInternalCreateFallsTTC(id, rootIncarnation.version, incarnation);
    return new FallsTTC(this, id);
  }
  public void EffectInternalCreateFallsTTC(
      int id,
      int incarnationVersion,
      FallsTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new FallsTTCCreateEffect(id);
    rootIncarnation.incarnationsFallsTTC.Add(
        id,
        new VersionAndIncarnation<FallsTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsFallsTTCCreateEffect.Add(effect);
  }

  public void EffectFallsTTCDelete(int id) {
    CheckUnlocked();
    var effect = new FallsTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsFallsTTC[id];

    rootIncarnation.incarnationsFallsTTC.Remove(id);
    effectsFallsTTCDeleteEffect.Add(effect);
  }

     
  public int GetFallsTTCHash(int id, int version, FallsTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastFallsTTCEffects(
      SortedDictionary<int, List<IFallsTTCEffectObserver>> observers) {
    foreach (var effect in effectsFallsTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IFallsTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFallsTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFallsTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFallsTTCEffect(effect);
        }
        observersForFallsTTC.Remove(effect.id);
      }
    }
    effectsFallsTTCDeleteEffect.Clear();


    foreach (var effect in effectsFallsTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IFallsTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFallsTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFallsTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFallsTTCEffect(effect);
        }
      }
    }
    effectsFallsTTCCreateEffect.Clear();
  }
  public FireTTCIncarnation GetFireTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsFireTTC[id].incarnation;
  }
  public bool FireTTCExists(int id) {
    return rootIncarnation.incarnationsFireTTC.ContainsKey(id);
  }
  public FireTTC GetFireTTC(int id) {
    return new FireTTC(this, id);
  }
  public List<FireTTC> AllFireTTC() {
    List<FireTTC> result = new List<FireTTC>(rootIncarnation.incarnationsFireTTC.Count);
    foreach (var id in rootIncarnation.incarnationsFireTTC.Keys) {
      result.Add(new FireTTC(this, id));
    }
    return result;
  }
  public IEnumerator<FireTTC> EnumAllFireTTC() {
    foreach (var id in rootIncarnation.incarnationsFireTTC.Keys) {
      yield return GetFireTTC(id);
    }
  }
  public void CheckHasFireTTC(FireTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasFireTTC(thing.id);
  }
  public void CheckHasFireTTC(int id) {
    if (!rootIncarnation.incarnationsFireTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid FireTTC: " + id);
    }
  }
  public void AddFireTTCObserver(int id, IFireTTCEffectObserver observer) {
    List<IFireTTCEffectObserver> obsies;
    if (!observersForFireTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IFireTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForFireTTC[id] = obsies;
  }

  public void RemoveFireTTCObserver(int id, IFireTTCEffectObserver observer) {
    if (observersForFireTTC.ContainsKey(id)) {
      var list = observersForFireTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForFireTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public FireTTC EffectFireTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new FireTTCIncarnation(

            );
    EffectInternalCreateFireTTC(id, rootIncarnation.version, incarnation);
    return new FireTTC(this, id);
  }
  public void EffectInternalCreateFireTTC(
      int id,
      int incarnationVersion,
      FireTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new FireTTCCreateEffect(id);
    rootIncarnation.incarnationsFireTTC.Add(
        id,
        new VersionAndIncarnation<FireTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsFireTTCCreateEffect.Add(effect);
  }

  public void EffectFireTTCDelete(int id) {
    CheckUnlocked();
    var effect = new FireTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsFireTTC[id];

    rootIncarnation.incarnationsFireTTC.Remove(id);
    effectsFireTTCDeleteEffect.Add(effect);
  }

     
  public int GetFireTTCHash(int id, int version, FireTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastFireTTCEffects(
      SortedDictionary<int, List<IFireTTCEffectObserver>> observers) {
    foreach (var effect in effectsFireTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IFireTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireTTCEffect(effect);
        }
        observersForFireTTC.Remove(effect.id);
      }
    }
    effectsFireTTCDeleteEffect.Clear();


    foreach (var effect in effectsFireTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IFireTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireTTCEffect(effect);
        }
      }
    }
    effectsFireTTCCreateEffect.Clear();
  }
  public ObsidianFloorTTCIncarnation GetObsidianFloorTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsObsidianFloorTTC[id].incarnation;
  }
  public bool ObsidianFloorTTCExists(int id) {
    return rootIncarnation.incarnationsObsidianFloorTTC.ContainsKey(id);
  }
  public ObsidianFloorTTC GetObsidianFloorTTC(int id) {
    return new ObsidianFloorTTC(this, id);
  }
  public List<ObsidianFloorTTC> AllObsidianFloorTTC() {
    List<ObsidianFloorTTC> result = new List<ObsidianFloorTTC>(rootIncarnation.incarnationsObsidianFloorTTC.Count);
    foreach (var id in rootIncarnation.incarnationsObsidianFloorTTC.Keys) {
      result.Add(new ObsidianFloorTTC(this, id));
    }
    return result;
  }
  public IEnumerator<ObsidianFloorTTC> EnumAllObsidianFloorTTC() {
    foreach (var id in rootIncarnation.incarnationsObsidianFloorTTC.Keys) {
      yield return GetObsidianFloorTTC(id);
    }
  }
  public void CheckHasObsidianFloorTTC(ObsidianFloorTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasObsidianFloorTTC(thing.id);
  }
  public void CheckHasObsidianFloorTTC(int id) {
    if (!rootIncarnation.incarnationsObsidianFloorTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid ObsidianFloorTTC: " + id);
    }
  }
  public void AddObsidianFloorTTCObserver(int id, IObsidianFloorTTCEffectObserver observer) {
    List<IObsidianFloorTTCEffectObserver> obsies;
    if (!observersForObsidianFloorTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IObsidianFloorTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForObsidianFloorTTC[id] = obsies;
  }

  public void RemoveObsidianFloorTTCObserver(int id, IObsidianFloorTTCEffectObserver observer) {
    if (observersForObsidianFloorTTC.ContainsKey(id)) {
      var list = observersForObsidianFloorTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForObsidianFloorTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public ObsidianFloorTTC EffectObsidianFloorTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new ObsidianFloorTTCIncarnation(

            );
    EffectInternalCreateObsidianFloorTTC(id, rootIncarnation.version, incarnation);
    return new ObsidianFloorTTC(this, id);
  }
  public void EffectInternalCreateObsidianFloorTTC(
      int id,
      int incarnationVersion,
      ObsidianFloorTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new ObsidianFloorTTCCreateEffect(id);
    rootIncarnation.incarnationsObsidianFloorTTC.Add(
        id,
        new VersionAndIncarnation<ObsidianFloorTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsObsidianFloorTTCCreateEffect.Add(effect);
  }

  public void EffectObsidianFloorTTCDelete(int id) {
    CheckUnlocked();
    var effect = new ObsidianFloorTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsObsidianFloorTTC[id];

    rootIncarnation.incarnationsObsidianFloorTTC.Remove(id);
    effectsObsidianFloorTTCDeleteEffect.Add(effect);
  }

     
  public int GetObsidianFloorTTCHash(int id, int version, ObsidianFloorTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastObsidianFloorTTCEffects(
      SortedDictionary<int, List<IObsidianFloorTTCEffectObserver>> observers) {
    foreach (var effect in effectsObsidianFloorTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IObsidianFloorTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnObsidianFloorTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IObsidianFloorTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnObsidianFloorTTCEffect(effect);
        }
        observersForObsidianFloorTTC.Remove(effect.id);
      }
    }
    effectsObsidianFloorTTCDeleteEffect.Clear();


    foreach (var effect in effectsObsidianFloorTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IObsidianFloorTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnObsidianFloorTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IObsidianFloorTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnObsidianFloorTTCEffect(effect);
        }
      }
    }
    effectsObsidianFloorTTCCreateEffect.Clear();
  }
  public MagmaTTCIncarnation GetMagmaTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsMagmaTTC[id].incarnation;
  }
  public bool MagmaTTCExists(int id) {
    return rootIncarnation.incarnationsMagmaTTC.ContainsKey(id);
  }
  public MagmaTTC GetMagmaTTC(int id) {
    return new MagmaTTC(this, id);
  }
  public List<MagmaTTC> AllMagmaTTC() {
    List<MagmaTTC> result = new List<MagmaTTC>(rootIncarnation.incarnationsMagmaTTC.Count);
    foreach (var id in rootIncarnation.incarnationsMagmaTTC.Keys) {
      result.Add(new MagmaTTC(this, id));
    }
    return result;
  }
  public IEnumerator<MagmaTTC> EnumAllMagmaTTC() {
    foreach (var id in rootIncarnation.incarnationsMagmaTTC.Keys) {
      yield return GetMagmaTTC(id);
    }
  }
  public void CheckHasMagmaTTC(MagmaTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasMagmaTTC(thing.id);
  }
  public void CheckHasMagmaTTC(int id) {
    if (!rootIncarnation.incarnationsMagmaTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid MagmaTTC: " + id);
    }
  }
  public void AddMagmaTTCObserver(int id, IMagmaTTCEffectObserver observer) {
    List<IMagmaTTCEffectObserver> obsies;
    if (!observersForMagmaTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IMagmaTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForMagmaTTC[id] = obsies;
  }

  public void RemoveMagmaTTCObserver(int id, IMagmaTTCEffectObserver observer) {
    if (observersForMagmaTTC.ContainsKey(id)) {
      var list = observersForMagmaTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForMagmaTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public MagmaTTC EffectMagmaTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new MagmaTTCIncarnation(

            );
    EffectInternalCreateMagmaTTC(id, rootIncarnation.version, incarnation);
    return new MagmaTTC(this, id);
  }
  public void EffectInternalCreateMagmaTTC(
      int id,
      int incarnationVersion,
      MagmaTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new MagmaTTCCreateEffect(id);
    rootIncarnation.incarnationsMagmaTTC.Add(
        id,
        new VersionAndIncarnation<MagmaTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsMagmaTTCCreateEffect.Add(effect);
  }

  public void EffectMagmaTTCDelete(int id) {
    CheckUnlocked();
    var effect = new MagmaTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsMagmaTTC[id];

    rootIncarnation.incarnationsMagmaTTC.Remove(id);
    effectsMagmaTTCDeleteEffect.Add(effect);
  }

     
  public int GetMagmaTTCHash(int id, int version, MagmaTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastMagmaTTCEffects(
      SortedDictionary<int, List<IMagmaTTCEffectObserver>> observers) {
    foreach (var effect in effectsMagmaTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IMagmaTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMagmaTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMagmaTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMagmaTTCEffect(effect);
        }
        observersForMagmaTTC.Remove(effect.id);
      }
    }
    effectsMagmaTTCDeleteEffect.Clear();


    foreach (var effect in effectsMagmaTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IMagmaTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMagmaTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMagmaTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMagmaTTCEffect(effect);
        }
      }
    }
    effectsMagmaTTCCreateEffect.Clear();
  }
  public CliffTTCIncarnation GetCliffTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsCliffTTC[id].incarnation;
  }
  public bool CliffTTCExists(int id) {
    return rootIncarnation.incarnationsCliffTTC.ContainsKey(id);
  }
  public CliffTTC GetCliffTTC(int id) {
    return new CliffTTC(this, id);
  }
  public List<CliffTTC> AllCliffTTC() {
    List<CliffTTC> result = new List<CliffTTC>(rootIncarnation.incarnationsCliffTTC.Count);
    foreach (var id in rootIncarnation.incarnationsCliffTTC.Keys) {
      result.Add(new CliffTTC(this, id));
    }
    return result;
  }
  public IEnumerator<CliffTTC> EnumAllCliffTTC() {
    foreach (var id in rootIncarnation.incarnationsCliffTTC.Keys) {
      yield return GetCliffTTC(id);
    }
  }
  public void CheckHasCliffTTC(CliffTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasCliffTTC(thing.id);
  }
  public void CheckHasCliffTTC(int id) {
    if (!rootIncarnation.incarnationsCliffTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid CliffTTC: " + id);
    }
  }
  public void AddCliffTTCObserver(int id, ICliffTTCEffectObserver observer) {
    List<ICliffTTCEffectObserver> obsies;
    if (!observersForCliffTTC.TryGetValue(id, out obsies)) {
      obsies = new List<ICliffTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForCliffTTC[id] = obsies;
  }

  public void RemoveCliffTTCObserver(int id, ICliffTTCEffectObserver observer) {
    if (observersForCliffTTC.ContainsKey(id)) {
      var list = observersForCliffTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForCliffTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public CliffTTC EffectCliffTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new CliffTTCIncarnation(

            );
    EffectInternalCreateCliffTTC(id, rootIncarnation.version, incarnation);
    return new CliffTTC(this, id);
  }
  public void EffectInternalCreateCliffTTC(
      int id,
      int incarnationVersion,
      CliffTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new CliffTTCCreateEffect(id);
    rootIncarnation.incarnationsCliffTTC.Add(
        id,
        new VersionAndIncarnation<CliffTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsCliffTTCCreateEffect.Add(effect);
  }

  public void EffectCliffTTCDelete(int id) {
    CheckUnlocked();
    var effect = new CliffTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsCliffTTC[id];

    rootIncarnation.incarnationsCliffTTC.Remove(id);
    effectsCliffTTCDeleteEffect.Add(effect);
  }

     
  public int GetCliffTTCHash(int id, int version, CliffTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastCliffTTCEffects(
      SortedDictionary<int, List<ICliffTTCEffectObserver>> observers) {
    foreach (var effect in effectsCliffTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<ICliffTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCliffTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICliffTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCliffTTCEffect(effect);
        }
        observersForCliffTTC.Remove(effect.id);
      }
    }
    effectsCliffTTCDeleteEffect.Clear();


    foreach (var effect in effectsCliffTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<ICliffTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCliffTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICliffTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCliffTTCEffect(effect);
        }
      }
    }
    effectsCliffTTCCreateEffect.Clear();
  }
  public RavaNestTTCIncarnation GetRavaNestTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsRavaNestTTC[id].incarnation;
  }
  public bool RavaNestTTCExists(int id) {
    return rootIncarnation.incarnationsRavaNestTTC.ContainsKey(id);
  }
  public RavaNestTTC GetRavaNestTTC(int id) {
    return new RavaNestTTC(this, id);
  }
  public List<RavaNestTTC> AllRavaNestTTC() {
    List<RavaNestTTC> result = new List<RavaNestTTC>(rootIncarnation.incarnationsRavaNestTTC.Count);
    foreach (var id in rootIncarnation.incarnationsRavaNestTTC.Keys) {
      result.Add(new RavaNestTTC(this, id));
    }
    return result;
  }
  public IEnumerator<RavaNestTTC> EnumAllRavaNestTTC() {
    foreach (var id in rootIncarnation.incarnationsRavaNestTTC.Keys) {
      yield return GetRavaNestTTC(id);
    }
  }
  public void CheckHasRavaNestTTC(RavaNestTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasRavaNestTTC(thing.id);
  }
  public void CheckHasRavaNestTTC(int id) {
    if (!rootIncarnation.incarnationsRavaNestTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid RavaNestTTC: " + id);
    }
  }
  public void AddRavaNestTTCObserver(int id, IRavaNestTTCEffectObserver observer) {
    List<IRavaNestTTCEffectObserver> obsies;
    if (!observersForRavaNestTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IRavaNestTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForRavaNestTTC[id] = obsies;
  }

  public void RemoveRavaNestTTCObserver(int id, IRavaNestTTCEffectObserver observer) {
    if (observersForRavaNestTTC.ContainsKey(id)) {
      var list = observersForRavaNestTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForRavaNestTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public RavaNestTTC EffectRavaNestTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new RavaNestTTCIncarnation(

            );
    EffectInternalCreateRavaNestTTC(id, rootIncarnation.version, incarnation);
    return new RavaNestTTC(this, id);
  }
  public void EffectInternalCreateRavaNestTTC(
      int id,
      int incarnationVersion,
      RavaNestTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new RavaNestTTCCreateEffect(id);
    rootIncarnation.incarnationsRavaNestTTC.Add(
        id,
        new VersionAndIncarnation<RavaNestTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsRavaNestTTCCreateEffect.Add(effect);
  }

  public void EffectRavaNestTTCDelete(int id) {
    CheckUnlocked();
    var effect = new RavaNestTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsRavaNestTTC[id];

    rootIncarnation.incarnationsRavaNestTTC.Remove(id);
    effectsRavaNestTTCDeleteEffect.Add(effect);
  }

     
  public int GetRavaNestTTCHash(int id, int version, RavaNestTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastRavaNestTTCEffects(
      SortedDictionary<int, List<IRavaNestTTCEffectObserver>> observers) {
    foreach (var effect in effectsRavaNestTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IRavaNestTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRavaNestTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRavaNestTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRavaNestTTCEffect(effect);
        }
        observersForRavaNestTTC.Remove(effect.id);
      }
    }
    effectsRavaNestTTCDeleteEffect.Clear();


    foreach (var effect in effectsRavaNestTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IRavaNestTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRavaNestTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRavaNestTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRavaNestTTCEffect(effect);
        }
      }
    }
    effectsRavaNestTTCCreateEffect.Clear();
  }
  public CliffLandingTTCIncarnation GetCliffLandingTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsCliffLandingTTC[id].incarnation;
  }
  public bool CliffLandingTTCExists(int id) {
    return rootIncarnation.incarnationsCliffLandingTTC.ContainsKey(id);
  }
  public CliffLandingTTC GetCliffLandingTTC(int id) {
    return new CliffLandingTTC(this, id);
  }
  public List<CliffLandingTTC> AllCliffLandingTTC() {
    List<CliffLandingTTC> result = new List<CliffLandingTTC>(rootIncarnation.incarnationsCliffLandingTTC.Count);
    foreach (var id in rootIncarnation.incarnationsCliffLandingTTC.Keys) {
      result.Add(new CliffLandingTTC(this, id));
    }
    return result;
  }
  public IEnumerator<CliffLandingTTC> EnumAllCliffLandingTTC() {
    foreach (var id in rootIncarnation.incarnationsCliffLandingTTC.Keys) {
      yield return GetCliffLandingTTC(id);
    }
  }
  public void CheckHasCliffLandingTTC(CliffLandingTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasCliffLandingTTC(thing.id);
  }
  public void CheckHasCliffLandingTTC(int id) {
    if (!rootIncarnation.incarnationsCliffLandingTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid CliffLandingTTC: " + id);
    }
  }
  public void AddCliffLandingTTCObserver(int id, ICliffLandingTTCEffectObserver observer) {
    List<ICliffLandingTTCEffectObserver> obsies;
    if (!observersForCliffLandingTTC.TryGetValue(id, out obsies)) {
      obsies = new List<ICliffLandingTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForCliffLandingTTC[id] = obsies;
  }

  public void RemoveCliffLandingTTCObserver(int id, ICliffLandingTTCEffectObserver observer) {
    if (observersForCliffLandingTTC.ContainsKey(id)) {
      var list = observersForCliffLandingTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForCliffLandingTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public CliffLandingTTC EffectCliffLandingTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new CliffLandingTTCIncarnation(

            );
    EffectInternalCreateCliffLandingTTC(id, rootIncarnation.version, incarnation);
    return new CliffLandingTTC(this, id);
  }
  public void EffectInternalCreateCliffLandingTTC(
      int id,
      int incarnationVersion,
      CliffLandingTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new CliffLandingTTCCreateEffect(id);
    rootIncarnation.incarnationsCliffLandingTTC.Add(
        id,
        new VersionAndIncarnation<CliffLandingTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsCliffLandingTTCCreateEffect.Add(effect);
  }

  public void EffectCliffLandingTTCDelete(int id) {
    CheckUnlocked();
    var effect = new CliffLandingTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsCliffLandingTTC[id];

    rootIncarnation.incarnationsCliffLandingTTC.Remove(id);
    effectsCliffLandingTTCDeleteEffect.Add(effect);
  }

     
  public int GetCliffLandingTTCHash(int id, int version, CliffLandingTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastCliffLandingTTCEffects(
      SortedDictionary<int, List<ICliffLandingTTCEffectObserver>> observers) {
    foreach (var effect in effectsCliffLandingTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<ICliffLandingTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCliffLandingTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICliffLandingTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCliffLandingTTCEffect(effect);
        }
        observersForCliffLandingTTC.Remove(effect.id);
      }
    }
    effectsCliffLandingTTCDeleteEffect.Clear();


    foreach (var effect in effectsCliffLandingTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<ICliffLandingTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCliffLandingTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICliffLandingTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCliffLandingTTCEffect(effect);
        }
      }
    }
    effectsCliffLandingTTCCreateEffect.Clear();
  }
  public StoneTTCIncarnation GetStoneTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsStoneTTC[id].incarnation;
  }
  public bool StoneTTCExists(int id) {
    return rootIncarnation.incarnationsStoneTTC.ContainsKey(id);
  }
  public StoneTTC GetStoneTTC(int id) {
    return new StoneTTC(this, id);
  }
  public List<StoneTTC> AllStoneTTC() {
    List<StoneTTC> result = new List<StoneTTC>(rootIncarnation.incarnationsStoneTTC.Count);
    foreach (var id in rootIncarnation.incarnationsStoneTTC.Keys) {
      result.Add(new StoneTTC(this, id));
    }
    return result;
  }
  public IEnumerator<StoneTTC> EnumAllStoneTTC() {
    foreach (var id in rootIncarnation.incarnationsStoneTTC.Keys) {
      yield return GetStoneTTC(id);
    }
  }
  public void CheckHasStoneTTC(StoneTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasStoneTTC(thing.id);
  }
  public void CheckHasStoneTTC(int id) {
    if (!rootIncarnation.incarnationsStoneTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid StoneTTC: " + id);
    }
  }
  public void AddStoneTTCObserver(int id, IStoneTTCEffectObserver observer) {
    List<IStoneTTCEffectObserver> obsies;
    if (!observersForStoneTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IStoneTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForStoneTTC[id] = obsies;
  }

  public void RemoveStoneTTCObserver(int id, IStoneTTCEffectObserver observer) {
    if (observersForStoneTTC.ContainsKey(id)) {
      var list = observersForStoneTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForStoneTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public StoneTTC EffectStoneTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new StoneTTCIncarnation(

            );
    EffectInternalCreateStoneTTC(id, rootIncarnation.version, incarnation);
    return new StoneTTC(this, id);
  }
  public void EffectInternalCreateStoneTTC(
      int id,
      int incarnationVersion,
      StoneTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new StoneTTCCreateEffect(id);
    rootIncarnation.incarnationsStoneTTC.Add(
        id,
        new VersionAndIncarnation<StoneTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsStoneTTCCreateEffect.Add(effect);
  }

  public void EffectStoneTTCDelete(int id) {
    CheckUnlocked();
    var effect = new StoneTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsStoneTTC[id];

    rootIncarnation.incarnationsStoneTTC.Remove(id);
    effectsStoneTTCDeleteEffect.Add(effect);
  }

     
  public int GetStoneTTCHash(int id, int version, StoneTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastStoneTTCEffects(
      SortedDictionary<int, List<IStoneTTCEffectObserver>> observers) {
    foreach (var effect in effectsStoneTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IStoneTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnStoneTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IStoneTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnStoneTTCEffect(effect);
        }
        observersForStoneTTC.Remove(effect.id);
      }
    }
    effectsStoneTTCDeleteEffect.Clear();


    foreach (var effect in effectsStoneTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IStoneTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnStoneTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IStoneTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnStoneTTCEffect(effect);
        }
      }
    }
    effectsStoneTTCCreateEffect.Clear();
  }
  public GrassTTCIncarnation GetGrassTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsGrassTTC[id].incarnation;
  }
  public bool GrassTTCExists(int id) {
    return rootIncarnation.incarnationsGrassTTC.ContainsKey(id);
  }
  public GrassTTC GetGrassTTC(int id) {
    return new GrassTTC(this, id);
  }
  public List<GrassTTC> AllGrassTTC() {
    List<GrassTTC> result = new List<GrassTTC>(rootIncarnation.incarnationsGrassTTC.Count);
    foreach (var id in rootIncarnation.incarnationsGrassTTC.Keys) {
      result.Add(new GrassTTC(this, id));
    }
    return result;
  }
  public IEnumerator<GrassTTC> EnumAllGrassTTC() {
    foreach (var id in rootIncarnation.incarnationsGrassTTC.Keys) {
      yield return GetGrassTTC(id);
    }
  }
  public void CheckHasGrassTTC(GrassTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasGrassTTC(thing.id);
  }
  public void CheckHasGrassTTC(int id) {
    if (!rootIncarnation.incarnationsGrassTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid GrassTTC: " + id);
    }
  }
  public void AddGrassTTCObserver(int id, IGrassTTCEffectObserver observer) {
    List<IGrassTTCEffectObserver> obsies;
    if (!observersForGrassTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IGrassTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForGrassTTC[id] = obsies;
  }

  public void RemoveGrassTTCObserver(int id, IGrassTTCEffectObserver observer) {
    if (observersForGrassTTC.ContainsKey(id)) {
      var list = observersForGrassTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForGrassTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public GrassTTC EffectGrassTTCCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new GrassTTCIncarnation(

            );
    EffectInternalCreateGrassTTC(id, rootIncarnation.version, incarnation);
    return new GrassTTC(this, id);
  }
  public void EffectInternalCreateGrassTTC(
      int id,
      int incarnationVersion,
      GrassTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new GrassTTCCreateEffect(id);
    rootIncarnation.incarnationsGrassTTC.Add(
        id,
        new VersionAndIncarnation<GrassTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsGrassTTCCreateEffect.Add(effect);
  }

  public void EffectGrassTTCDelete(int id) {
    CheckUnlocked();
    var effect = new GrassTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsGrassTTC[id];

    rootIncarnation.incarnationsGrassTTC.Remove(id);
    effectsGrassTTCDeleteEffect.Add(effect);
  }

     
  public int GetGrassTTCHash(int id, int version, GrassTTCIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastGrassTTCEffects(
      SortedDictionary<int, List<IGrassTTCEffectObserver>> observers) {
    foreach (var effect in effectsGrassTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IGrassTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGrassTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGrassTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGrassTTCEffect(effect);
        }
        observersForGrassTTC.Remove(effect.id);
      }
    }
    effectsGrassTTCDeleteEffect.Clear();


    foreach (var effect in effectsGrassTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IGrassTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGrassTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGrassTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGrassTTCEffect(effect);
        }
      }
    }
    effectsGrassTTCCreateEffect.Clear();
  }
  public LevelIncarnation GetLevelIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsLevel[id].incarnation;
  }
  public bool LevelExists(int id) {
    return rootIncarnation.incarnationsLevel.ContainsKey(id);
  }
  public Level GetLevel(int id) {
    return new Level(this, id);
  }
  public List<Level> AllLevel() {
    List<Level> result = new List<Level>(rootIncarnation.incarnationsLevel.Count);
    foreach (var id in rootIncarnation.incarnationsLevel.Keys) {
      result.Add(new Level(this, id));
    }
    return result;
  }
  public IEnumerator<Level> EnumAllLevel() {
    foreach (var id in rootIncarnation.incarnationsLevel.Keys) {
      yield return GetLevel(id);
    }
  }
  public void CheckHasLevel(Level thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasLevel(thing.id);
  }
  public void CheckHasLevel(int id) {
    if (!rootIncarnation.incarnationsLevel.ContainsKey(id)) {
      throw new System.Exception("Invalid Level: " + id);
    }
  }
  public void AddLevelObserver(int id, ILevelEffectObserver observer) {
    List<ILevelEffectObserver> obsies;
    if (!observersForLevel.TryGetValue(id, out obsies)) {
      obsies = new List<ILevelEffectObserver>();
    }
    obsies.Add(observer);
    observersForLevel[id] = obsies;
  }

  public void RemoveLevelObserver(int id, ILevelEffectObserver observer) {
    if (observersForLevel.ContainsKey(id)) {
      var list = observersForLevel[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForLevel.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public Level EffectLevelCreate(
      Vec3 cameraAngle,
      Terrain terrain,
      UnitMutSet units,
      ILevelController controller,
      int time) {
    CheckUnlocked();
    CheckHasTerrain(terrain);
    CheckHasUnitMutSet(units);

    var id = NewId();
    var incarnation =
        new LevelIncarnation(
            cameraAngle,
            terrain.id,
            units.id,
            controller.id,
            time
            );
    EffectInternalCreateLevel(id, rootIncarnation.version, incarnation);
    return new Level(this, id);
  }
  public void EffectInternalCreateLevel(
      int id,
      int incarnationVersion,
      LevelIncarnation incarnation) {
    CheckUnlocked();
    var effect = new LevelCreateEffect(id);
    rootIncarnation.incarnationsLevel.Add(
        id,
        new VersionAndIncarnation<LevelIncarnation>(
            incarnationVersion,
            incarnation));
    effectsLevelCreateEffect.Add(effect);
  }

  public void EffectLevelDelete(int id) {
    CheckUnlocked();
    var effect = new LevelDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsLevel[id];

    rootIncarnation.incarnationsLevel.Remove(id);
    effectsLevelDeleteEffect.Add(effect);
  }

     
  public int GetLevelHash(int id, int version, LevelIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.cameraAngle.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.terrain.GetDeterministicHashCode();
    result += id * version * 3 * incarnation.units.GetDeterministicHashCode();
    if (!object.ReferenceEquals(incarnation.controller, null)) {
      result += id * version * 4 * incarnation.controller.GetDeterministicHashCode();
    }
    result += id * version * 5 * incarnation.time.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastLevelEffects(
      SortedDictionary<int, List<ILevelEffectObserver>> observers) {
    foreach (var effect in effectsLevelDeleteEffect) {
      if (observers.TryGetValue(0, out List<ILevelEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLevelEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILevelEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLevelEffect(effect);
        }
        observersForLevel.Remove(effect.id);
      }
    }
    effectsLevelDeleteEffect.Clear();


    foreach (var effect in effectsLevelSetControllerEffect) {
      if (observers.TryGetValue(0, out List<ILevelEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLevelEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILevelEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLevelEffect(effect);
        }
      }
    }
    effectsLevelSetControllerEffect.Clear();

    foreach (var effect in effectsLevelSetTimeEffect) {
      if (observers.TryGetValue(0, out List<ILevelEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLevelEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILevelEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLevelEffect(effect);
        }
      }
    }
    effectsLevelSetTimeEffect.Clear();

    foreach (var effect in effectsLevelCreateEffect) {
      if (observers.TryGetValue(0, out List<ILevelEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLevelEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILevelEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLevelEffect(effect);
        }
      }
    }
    effectsLevelCreateEffect.Clear();
  }

  public void EffectLevelSetController(int id, ILevelController newValue) {
    CheckUnlocked();
    CheckHasLevel(id);
    var effect = new LevelSetControllerEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsLevel[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldId = oldIncarnationAndVersion.incarnation.controller;
      oldIncarnationAndVersion.incarnation.controller = newValue.id;

    } else {
      var newIncarnation =
          new LevelIncarnation(
              oldIncarnationAndVersion.incarnation.cameraAngle,
              oldIncarnationAndVersion.incarnation.terrain,
              oldIncarnationAndVersion.incarnation.units,
              newValue.id,
              oldIncarnationAndVersion.incarnation.time);
      rootIncarnation.incarnationsLevel[id] =
          new VersionAndIncarnation<LevelIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsLevelSetControllerEffect.Add(effect);
  }

  public void EffectLevelSetTime(int id, int newValue) {
    CheckUnlocked();
    CheckHasLevel(id);
    var effect = new LevelSetTimeEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsLevel[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.time;
      oldIncarnationAndVersion.incarnation.time = newValue;

    } else {
      var newIncarnation =
          new LevelIncarnation(
              oldIncarnationAndVersion.incarnation.cameraAngle,
              oldIncarnationAndVersion.incarnation.terrain,
              oldIncarnationAndVersion.incarnation.units,
              oldIncarnationAndVersion.incarnation.controller,
              newValue);
      rootIncarnation.incarnationsLevel[id] =
          new VersionAndIncarnation<LevelIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsLevelSetTimeEffect.Add(effect);
  }
  public SpeedRingIncarnation GetSpeedRingIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsSpeedRing[id].incarnation;
  }
  public bool SpeedRingExists(int id) {
    return rootIncarnation.incarnationsSpeedRing.ContainsKey(id);
  }
  public SpeedRing GetSpeedRing(int id) {
    return new SpeedRing(this, id);
  }
  public List<SpeedRing> AllSpeedRing() {
    List<SpeedRing> result = new List<SpeedRing>(rootIncarnation.incarnationsSpeedRing.Count);
    foreach (var id in rootIncarnation.incarnationsSpeedRing.Keys) {
      result.Add(new SpeedRing(this, id));
    }
    return result;
  }
  public IEnumerator<SpeedRing> EnumAllSpeedRing() {
    foreach (var id in rootIncarnation.incarnationsSpeedRing.Keys) {
      yield return GetSpeedRing(id);
    }
  }
  public void CheckHasSpeedRing(SpeedRing thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasSpeedRing(thing.id);
  }
  public void CheckHasSpeedRing(int id) {
    if (!rootIncarnation.incarnationsSpeedRing.ContainsKey(id)) {
      throw new System.Exception("Invalid SpeedRing: " + id);
    }
  }
  public void AddSpeedRingObserver(int id, ISpeedRingEffectObserver observer) {
    List<ISpeedRingEffectObserver> obsies;
    if (!observersForSpeedRing.TryGetValue(id, out obsies)) {
      obsies = new List<ISpeedRingEffectObserver>();
    }
    obsies.Add(observer);
    observersForSpeedRing[id] = obsies;
  }

  public void RemoveSpeedRingObserver(int id, ISpeedRingEffectObserver observer) {
    if (observersForSpeedRing.ContainsKey(id)) {
      var list = observersForSpeedRing[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForSpeedRing.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public SpeedRing EffectSpeedRingCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new SpeedRingIncarnation(

            );
    EffectInternalCreateSpeedRing(id, rootIncarnation.version, incarnation);
    return new SpeedRing(this, id);
  }
  public void EffectInternalCreateSpeedRing(
      int id,
      int incarnationVersion,
      SpeedRingIncarnation incarnation) {
    CheckUnlocked();
    var effect = new SpeedRingCreateEffect(id);
    rootIncarnation.incarnationsSpeedRing.Add(
        id,
        new VersionAndIncarnation<SpeedRingIncarnation>(
            incarnationVersion,
            incarnation));
    effectsSpeedRingCreateEffect.Add(effect);
  }

  public void EffectSpeedRingDelete(int id) {
    CheckUnlocked();
    var effect = new SpeedRingDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsSpeedRing[id];

    rootIncarnation.incarnationsSpeedRing.Remove(id);
    effectsSpeedRingDeleteEffect.Add(effect);
  }

     
  public int GetSpeedRingHash(int id, int version, SpeedRingIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastSpeedRingEffects(
      SortedDictionary<int, List<ISpeedRingEffectObserver>> observers) {
    foreach (var effect in effectsSpeedRingDeleteEffect) {
      if (observers.TryGetValue(0, out List<ISpeedRingEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSpeedRingEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISpeedRingEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSpeedRingEffect(effect);
        }
        observersForSpeedRing.Remove(effect.id);
      }
    }
    effectsSpeedRingDeleteEffect.Clear();


    foreach (var effect in effectsSpeedRingCreateEffect) {
      if (observers.TryGetValue(0, out List<ISpeedRingEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSpeedRingEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISpeedRingEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSpeedRingEffect(effect);
        }
      }
    }
    effectsSpeedRingCreateEffect.Clear();
  }
  public ManaPotionIncarnation GetManaPotionIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsManaPotion[id].incarnation;
  }
  public bool ManaPotionExists(int id) {
    return rootIncarnation.incarnationsManaPotion.ContainsKey(id);
  }
  public ManaPotion GetManaPotion(int id) {
    return new ManaPotion(this, id);
  }
  public List<ManaPotion> AllManaPotion() {
    List<ManaPotion> result = new List<ManaPotion>(rootIncarnation.incarnationsManaPotion.Count);
    foreach (var id in rootIncarnation.incarnationsManaPotion.Keys) {
      result.Add(new ManaPotion(this, id));
    }
    return result;
  }
  public IEnumerator<ManaPotion> EnumAllManaPotion() {
    foreach (var id in rootIncarnation.incarnationsManaPotion.Keys) {
      yield return GetManaPotion(id);
    }
  }
  public void CheckHasManaPotion(ManaPotion thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasManaPotion(thing.id);
  }
  public void CheckHasManaPotion(int id) {
    if (!rootIncarnation.incarnationsManaPotion.ContainsKey(id)) {
      throw new System.Exception("Invalid ManaPotion: " + id);
    }
  }
  public void AddManaPotionObserver(int id, IManaPotionEffectObserver observer) {
    List<IManaPotionEffectObserver> obsies;
    if (!observersForManaPotion.TryGetValue(id, out obsies)) {
      obsies = new List<IManaPotionEffectObserver>();
    }
    obsies.Add(observer);
    observersForManaPotion[id] = obsies;
  }

  public void RemoveManaPotionObserver(int id, IManaPotionEffectObserver observer) {
    if (observersForManaPotion.ContainsKey(id)) {
      var list = observersForManaPotion[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForManaPotion.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public ManaPotion EffectManaPotionCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new ManaPotionIncarnation(

            );
    EffectInternalCreateManaPotion(id, rootIncarnation.version, incarnation);
    return new ManaPotion(this, id);
  }
  public void EffectInternalCreateManaPotion(
      int id,
      int incarnationVersion,
      ManaPotionIncarnation incarnation) {
    CheckUnlocked();
    var effect = new ManaPotionCreateEffect(id);
    rootIncarnation.incarnationsManaPotion.Add(
        id,
        new VersionAndIncarnation<ManaPotionIncarnation>(
            incarnationVersion,
            incarnation));
    effectsManaPotionCreateEffect.Add(effect);
  }

  public void EffectManaPotionDelete(int id) {
    CheckUnlocked();
    var effect = new ManaPotionDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsManaPotion[id];

    rootIncarnation.incarnationsManaPotion.Remove(id);
    effectsManaPotionDeleteEffect.Add(effect);
  }

     
  public int GetManaPotionHash(int id, int version, ManaPotionIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastManaPotionEffects(
      SortedDictionary<int, List<IManaPotionEffectObserver>> observers) {
    foreach (var effect in effectsManaPotionDeleteEffect) {
      if (observers.TryGetValue(0, out List<IManaPotionEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnManaPotionEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IManaPotionEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnManaPotionEffect(effect);
        }
        observersForManaPotion.Remove(effect.id);
      }
    }
    effectsManaPotionDeleteEffect.Clear();


    foreach (var effect in effectsManaPotionCreateEffect) {
      if (observers.TryGetValue(0, out List<IManaPotionEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnManaPotionEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IManaPotionEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnManaPotionEffect(effect);
        }
      }
    }
    effectsManaPotionCreateEffect.Clear();
  }
  public WatIncarnation GetWatIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsWat[id].incarnation;
  }
  public bool WatExists(int id) {
    return rootIncarnation.incarnationsWat.ContainsKey(id);
  }
  public Wat GetWat(int id) {
    return new Wat(this, id);
  }
  public List<Wat> AllWat() {
    List<Wat> result = new List<Wat>(rootIncarnation.incarnationsWat.Count);
    foreach (var id in rootIncarnation.incarnationsWat.Keys) {
      result.Add(new Wat(this, id));
    }
    return result;
  }
  public IEnumerator<Wat> EnumAllWat() {
    foreach (var id in rootIncarnation.incarnationsWat.Keys) {
      yield return GetWat(id);
    }
  }
  public void CheckHasWat(Wat thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasWat(thing.id);
  }
  public void CheckHasWat(int id) {
    if (!rootIncarnation.incarnationsWat.ContainsKey(id)) {
      throw new System.Exception("Invalid Wat: " + id);
    }
  }
  public void AddWatObserver(int id, IWatEffectObserver observer) {
    List<IWatEffectObserver> obsies;
    if (!observersForWat.TryGetValue(id, out obsies)) {
      obsies = new List<IWatEffectObserver>();
    }
    obsies.Add(observer);
    observersForWat[id] = obsies;
  }

  public void RemoveWatObserver(int id, IWatEffectObserver observer) {
    if (observersForWat.ContainsKey(id)) {
      var list = observersForWat[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForWat.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public Wat EffectWatCreate(
      IItemStrongMutBunch items,
      IImpulseStrongMutBunch impulses) {
    CheckUnlocked();
    CheckHasIItemStrongMutBunch(items);
    CheckHasIImpulseStrongMutBunch(impulses);

    var id = NewId();
    var incarnation =
        new WatIncarnation(
            items.id,
            impulses.id
            );
    EffectInternalCreateWat(id, rootIncarnation.version, incarnation);
    return new Wat(this, id);
  }
  public void EffectInternalCreateWat(
      int id,
      int incarnationVersion,
      WatIncarnation incarnation) {
    CheckUnlocked();
    var effect = new WatCreateEffect(id);
    rootIncarnation.incarnationsWat.Add(
        id,
        new VersionAndIncarnation<WatIncarnation>(
            incarnationVersion,
            incarnation));
    effectsWatCreateEffect.Add(effect);
  }

  public void EffectWatDelete(int id) {
    CheckUnlocked();
    var effect = new WatDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsWat[id];

    rootIncarnation.incarnationsWat.Remove(id);
    effectsWatDeleteEffect.Add(effect);
  }

     
  public int GetWatHash(int id, int version, WatIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.items.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.impulses.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastWatEffects(
      SortedDictionary<int, List<IWatEffectObserver>> observers) {
    foreach (var effect in effectsWatDeleteEffect) {
      if (observers.TryGetValue(0, out List<IWatEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWatEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWatEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWatEffect(effect);
        }
        observersForWat.Remove(effect.id);
      }
    }
    effectsWatDeleteEffect.Clear();


    foreach (var effect in effectsWatCreateEffect) {
      if (observers.TryGetValue(0, out List<IWatEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWatEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWatEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWatEffect(effect);
        }
      }
    }
    effectsWatCreateEffect.Clear();
  }
  public IImpulseStrongMutBunchIncarnation GetIImpulseStrongMutBunchIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsIImpulseStrongMutBunch[id].incarnation;
  }
  public bool IImpulseStrongMutBunchExists(int id) {
    return rootIncarnation.incarnationsIImpulseStrongMutBunch.ContainsKey(id);
  }
  public IImpulseStrongMutBunch GetIImpulseStrongMutBunch(int id) {
    return new IImpulseStrongMutBunch(this, id);
  }
  public List<IImpulseStrongMutBunch> AllIImpulseStrongMutBunch() {
    List<IImpulseStrongMutBunch> result = new List<IImpulseStrongMutBunch>(rootIncarnation.incarnationsIImpulseStrongMutBunch.Count);
    foreach (var id in rootIncarnation.incarnationsIImpulseStrongMutBunch.Keys) {
      result.Add(new IImpulseStrongMutBunch(this, id));
    }
    return result;
  }
  public IEnumerator<IImpulseStrongMutBunch> EnumAllIImpulseStrongMutBunch() {
    foreach (var id in rootIncarnation.incarnationsIImpulseStrongMutBunch.Keys) {
      yield return GetIImpulseStrongMutBunch(id);
    }
  }
  public void CheckHasIImpulseStrongMutBunch(IImpulseStrongMutBunch thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasIImpulseStrongMutBunch(thing.id);
  }
  public void CheckHasIImpulseStrongMutBunch(int id) {
    if (!rootIncarnation.incarnationsIImpulseStrongMutBunch.ContainsKey(id)) {
      throw new System.Exception("Invalid IImpulseStrongMutBunch: " + id);
    }
  }
  public void AddIImpulseStrongMutBunchObserver(int id, IIImpulseStrongMutBunchEffectObserver observer) {
    List<IIImpulseStrongMutBunchEffectObserver> obsies;
    if (!observersForIImpulseStrongMutBunch.TryGetValue(id, out obsies)) {
      obsies = new List<IIImpulseStrongMutBunchEffectObserver>();
    }
    obsies.Add(observer);
    observersForIImpulseStrongMutBunch[id] = obsies;
  }

  public void RemoveIImpulseStrongMutBunchObserver(int id, IIImpulseStrongMutBunchEffectObserver observer) {
    if (observersForIImpulseStrongMutBunch.ContainsKey(id)) {
      var list = observersForIImpulseStrongMutBunch[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForIImpulseStrongMutBunch.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public IImpulseStrongMutBunch EffectIImpulseStrongMutBunchCreate(
      HoldPositionImpulseStrongMutSet membersHoldPositionImpulseStrongMutSet,
      TemporaryCloneImpulseStrongMutSet membersTemporaryCloneImpulseStrongMutSet,
      SummonImpulseStrongMutSet membersSummonImpulseStrongMutSet,
      MireImpulseStrongMutSet membersMireImpulseStrongMutSet,
      EvaporateImpulseStrongMutSet membersEvaporateImpulseStrongMutSet,
      MoveImpulseStrongMutSet membersMoveImpulseStrongMutSet,
      KamikazeJumpImpulseStrongMutSet membersKamikazeJumpImpulseStrongMutSet,
      KamikazeTargetImpulseStrongMutSet membersKamikazeTargetImpulseStrongMutSet,
      NoImpulseStrongMutSet membersNoImpulseStrongMutSet,
      FireImpulseStrongMutSet membersFireImpulseStrongMutSet,
      DefyImpulseStrongMutSet membersDefyImpulseStrongMutSet,
      CounterImpulseStrongMutSet membersCounterImpulseStrongMutSet,
      UnleashBideImpulseStrongMutSet membersUnleashBideImpulseStrongMutSet,
      ContinueBidingImpulseStrongMutSet membersContinueBidingImpulseStrongMutSet,
      StartBidingImpulseStrongMutSet membersStartBidingImpulseStrongMutSet,
      AttackImpulseStrongMutSet membersAttackImpulseStrongMutSet,
      PursueImpulseStrongMutSet membersPursueImpulseStrongMutSet,
      FireBombImpulseStrongMutSet membersFireBombImpulseStrongMutSet) {
    CheckUnlocked();
    CheckHasHoldPositionImpulseStrongMutSet(membersHoldPositionImpulseStrongMutSet);
    CheckHasTemporaryCloneImpulseStrongMutSet(membersTemporaryCloneImpulseStrongMutSet);
    CheckHasSummonImpulseStrongMutSet(membersSummonImpulseStrongMutSet);
    CheckHasMireImpulseStrongMutSet(membersMireImpulseStrongMutSet);
    CheckHasEvaporateImpulseStrongMutSet(membersEvaporateImpulseStrongMutSet);
    CheckHasMoveImpulseStrongMutSet(membersMoveImpulseStrongMutSet);
    CheckHasKamikazeJumpImpulseStrongMutSet(membersKamikazeJumpImpulseStrongMutSet);
    CheckHasKamikazeTargetImpulseStrongMutSet(membersKamikazeTargetImpulseStrongMutSet);
    CheckHasNoImpulseStrongMutSet(membersNoImpulseStrongMutSet);
    CheckHasFireImpulseStrongMutSet(membersFireImpulseStrongMutSet);
    CheckHasDefyImpulseStrongMutSet(membersDefyImpulseStrongMutSet);
    CheckHasCounterImpulseStrongMutSet(membersCounterImpulseStrongMutSet);
    CheckHasUnleashBideImpulseStrongMutSet(membersUnleashBideImpulseStrongMutSet);
    CheckHasContinueBidingImpulseStrongMutSet(membersContinueBidingImpulseStrongMutSet);
    CheckHasStartBidingImpulseStrongMutSet(membersStartBidingImpulseStrongMutSet);
    CheckHasAttackImpulseStrongMutSet(membersAttackImpulseStrongMutSet);
    CheckHasPursueImpulseStrongMutSet(membersPursueImpulseStrongMutSet);
    CheckHasFireBombImpulseStrongMutSet(membersFireBombImpulseStrongMutSet);

    var id = NewId();
    var incarnation =
        new IImpulseStrongMutBunchIncarnation(
            membersHoldPositionImpulseStrongMutSet.id,
            membersTemporaryCloneImpulseStrongMutSet.id,
            membersSummonImpulseStrongMutSet.id,
            membersMireImpulseStrongMutSet.id,
            membersEvaporateImpulseStrongMutSet.id,
            membersMoveImpulseStrongMutSet.id,
            membersKamikazeJumpImpulseStrongMutSet.id,
            membersKamikazeTargetImpulseStrongMutSet.id,
            membersNoImpulseStrongMutSet.id,
            membersFireImpulseStrongMutSet.id,
            membersDefyImpulseStrongMutSet.id,
            membersCounterImpulseStrongMutSet.id,
            membersUnleashBideImpulseStrongMutSet.id,
            membersContinueBidingImpulseStrongMutSet.id,
            membersStartBidingImpulseStrongMutSet.id,
            membersAttackImpulseStrongMutSet.id,
            membersPursueImpulseStrongMutSet.id,
            membersFireBombImpulseStrongMutSet.id
            );
    EffectInternalCreateIImpulseStrongMutBunch(id, rootIncarnation.version, incarnation);
    return new IImpulseStrongMutBunch(this, id);
  }
  public void EffectInternalCreateIImpulseStrongMutBunch(
      int id,
      int incarnationVersion,
      IImpulseStrongMutBunchIncarnation incarnation) {
    CheckUnlocked();
    var effect = new IImpulseStrongMutBunchCreateEffect(id);
    rootIncarnation.incarnationsIImpulseStrongMutBunch.Add(
        id,
        new VersionAndIncarnation<IImpulseStrongMutBunchIncarnation>(
            incarnationVersion,
            incarnation));
    effectsIImpulseStrongMutBunchCreateEffect.Add(effect);
  }

  public void EffectIImpulseStrongMutBunchDelete(int id) {
    CheckUnlocked();
    var effect = new IImpulseStrongMutBunchDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsIImpulseStrongMutBunch[id];

    rootIncarnation.incarnationsIImpulseStrongMutBunch.Remove(id);
    effectsIImpulseStrongMutBunchDeleteEffect.Add(effect);
  }

     
  public int GetIImpulseStrongMutBunchHash(int id, int version, IImpulseStrongMutBunchIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.membersHoldPositionImpulseStrongMutSet.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.membersTemporaryCloneImpulseStrongMutSet.GetDeterministicHashCode();
    result += id * version * 3 * incarnation.membersSummonImpulseStrongMutSet.GetDeterministicHashCode();
    result += id * version * 4 * incarnation.membersMireImpulseStrongMutSet.GetDeterministicHashCode();
    result += id * version * 5 * incarnation.membersEvaporateImpulseStrongMutSet.GetDeterministicHashCode();
    result += id * version * 6 * incarnation.membersMoveImpulseStrongMutSet.GetDeterministicHashCode();
    result += id * version * 7 * incarnation.membersKamikazeJumpImpulseStrongMutSet.GetDeterministicHashCode();
    result += id * version * 8 * incarnation.membersKamikazeTargetImpulseStrongMutSet.GetDeterministicHashCode();
    result += id * version * 9 * incarnation.membersNoImpulseStrongMutSet.GetDeterministicHashCode();
    result += id * version * 10 * incarnation.membersFireImpulseStrongMutSet.GetDeterministicHashCode();
    result += id * version * 11 * incarnation.membersDefyImpulseStrongMutSet.GetDeterministicHashCode();
    result += id * version * 12 * incarnation.membersCounterImpulseStrongMutSet.GetDeterministicHashCode();
    result += id * version * 13 * incarnation.membersUnleashBideImpulseStrongMutSet.GetDeterministicHashCode();
    result += id * version * 14 * incarnation.membersContinueBidingImpulseStrongMutSet.GetDeterministicHashCode();
    result += id * version * 15 * incarnation.membersStartBidingImpulseStrongMutSet.GetDeterministicHashCode();
    result += id * version * 16 * incarnation.membersAttackImpulseStrongMutSet.GetDeterministicHashCode();
    result += id * version * 17 * incarnation.membersPursueImpulseStrongMutSet.GetDeterministicHashCode();
    result += id * version * 18 * incarnation.membersFireBombImpulseStrongMutSet.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastIImpulseStrongMutBunchEffects(
      SortedDictionary<int, List<IIImpulseStrongMutBunchEffectObserver>> observers) {
    foreach (var effect in effectsIImpulseStrongMutBunchDeleteEffect) {
      if (observers.TryGetValue(0, out List<IIImpulseStrongMutBunchEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIImpulseStrongMutBunchEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIImpulseStrongMutBunchEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIImpulseStrongMutBunchEffect(effect);
        }
        observersForIImpulseStrongMutBunch.Remove(effect.id);
      }
    }
    effectsIImpulseStrongMutBunchDeleteEffect.Clear();


    foreach (var effect in effectsIImpulseStrongMutBunchCreateEffect) {
      if (observers.TryGetValue(0, out List<IIImpulseStrongMutBunchEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIImpulseStrongMutBunchEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIImpulseStrongMutBunchEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIImpulseStrongMutBunchEffect(effect);
        }
      }
    }
    effectsIImpulseStrongMutBunchCreateEffect.Clear();
  }
  public IItemStrongMutBunchIncarnation GetIItemStrongMutBunchIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsIItemStrongMutBunch[id].incarnation;
  }
  public bool IItemStrongMutBunchExists(int id) {
    return rootIncarnation.incarnationsIItemStrongMutBunch.ContainsKey(id);
  }
  public IItemStrongMutBunch GetIItemStrongMutBunch(int id) {
    return new IItemStrongMutBunch(this, id);
  }
  public List<IItemStrongMutBunch> AllIItemStrongMutBunch() {
    List<IItemStrongMutBunch> result = new List<IItemStrongMutBunch>(rootIncarnation.incarnationsIItemStrongMutBunch.Count);
    foreach (var id in rootIncarnation.incarnationsIItemStrongMutBunch.Keys) {
      result.Add(new IItemStrongMutBunch(this, id));
    }
    return result;
  }
  public IEnumerator<IItemStrongMutBunch> EnumAllIItemStrongMutBunch() {
    foreach (var id in rootIncarnation.incarnationsIItemStrongMutBunch.Keys) {
      yield return GetIItemStrongMutBunch(id);
    }
  }
  public void CheckHasIItemStrongMutBunch(IItemStrongMutBunch thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasIItemStrongMutBunch(thing.id);
  }
  public void CheckHasIItemStrongMutBunch(int id) {
    if (!rootIncarnation.incarnationsIItemStrongMutBunch.ContainsKey(id)) {
      throw new System.Exception("Invalid IItemStrongMutBunch: " + id);
    }
  }
  public void AddIItemStrongMutBunchObserver(int id, IIItemStrongMutBunchEffectObserver observer) {
    List<IIItemStrongMutBunchEffectObserver> obsies;
    if (!observersForIItemStrongMutBunch.TryGetValue(id, out obsies)) {
      obsies = new List<IIItemStrongMutBunchEffectObserver>();
    }
    obsies.Add(observer);
    observersForIItemStrongMutBunch[id] = obsies;
  }

  public void RemoveIItemStrongMutBunchObserver(int id, IIItemStrongMutBunchEffectObserver observer) {
    if (observersForIItemStrongMutBunch.ContainsKey(id)) {
      var list = observersForIItemStrongMutBunch[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForIItemStrongMutBunch.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public IItemStrongMutBunch EffectIItemStrongMutBunchCreate(
      ManaPotionStrongMutSet membersManaPotionStrongMutSet,
      HealthPotionStrongMutSet membersHealthPotionStrongMutSet,
      SpeedRingStrongMutSet membersSpeedRingStrongMutSet,
      GlaiveStrongMutSet membersGlaiveStrongMutSet,
      SlowRodStrongMutSet membersSlowRodStrongMutSet,
      BlastRodStrongMutSet membersBlastRodStrongMutSet,
      ArmorStrongMutSet membersArmorStrongMutSet) {
    CheckUnlocked();
    CheckHasManaPotionStrongMutSet(membersManaPotionStrongMutSet);
    CheckHasHealthPotionStrongMutSet(membersHealthPotionStrongMutSet);
    CheckHasSpeedRingStrongMutSet(membersSpeedRingStrongMutSet);
    CheckHasGlaiveStrongMutSet(membersGlaiveStrongMutSet);
    CheckHasSlowRodStrongMutSet(membersSlowRodStrongMutSet);
    CheckHasBlastRodStrongMutSet(membersBlastRodStrongMutSet);
    CheckHasArmorStrongMutSet(membersArmorStrongMutSet);

    var id = NewId();
    var incarnation =
        new IItemStrongMutBunchIncarnation(
            membersManaPotionStrongMutSet.id,
            membersHealthPotionStrongMutSet.id,
            membersSpeedRingStrongMutSet.id,
            membersGlaiveStrongMutSet.id,
            membersSlowRodStrongMutSet.id,
            membersBlastRodStrongMutSet.id,
            membersArmorStrongMutSet.id
            );
    EffectInternalCreateIItemStrongMutBunch(id, rootIncarnation.version, incarnation);
    return new IItemStrongMutBunch(this, id);
  }
  public void EffectInternalCreateIItemStrongMutBunch(
      int id,
      int incarnationVersion,
      IItemStrongMutBunchIncarnation incarnation) {
    CheckUnlocked();
    var effect = new IItemStrongMutBunchCreateEffect(id);
    rootIncarnation.incarnationsIItemStrongMutBunch.Add(
        id,
        new VersionAndIncarnation<IItemStrongMutBunchIncarnation>(
            incarnationVersion,
            incarnation));
    effectsIItemStrongMutBunchCreateEffect.Add(effect);
  }

  public void EffectIItemStrongMutBunchDelete(int id) {
    CheckUnlocked();
    var effect = new IItemStrongMutBunchDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsIItemStrongMutBunch[id];

    rootIncarnation.incarnationsIItemStrongMutBunch.Remove(id);
    effectsIItemStrongMutBunchDeleteEffect.Add(effect);
  }

     
  public int GetIItemStrongMutBunchHash(int id, int version, IItemStrongMutBunchIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.membersManaPotionStrongMutSet.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.membersHealthPotionStrongMutSet.GetDeterministicHashCode();
    result += id * version * 3 * incarnation.membersSpeedRingStrongMutSet.GetDeterministicHashCode();
    result += id * version * 4 * incarnation.membersGlaiveStrongMutSet.GetDeterministicHashCode();
    result += id * version * 5 * incarnation.membersSlowRodStrongMutSet.GetDeterministicHashCode();
    result += id * version * 6 * incarnation.membersBlastRodStrongMutSet.GetDeterministicHashCode();
    result += id * version * 7 * incarnation.membersArmorStrongMutSet.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastIItemStrongMutBunchEffects(
      SortedDictionary<int, List<IIItemStrongMutBunchEffectObserver>> observers) {
    foreach (var effect in effectsIItemStrongMutBunchDeleteEffect) {
      if (observers.TryGetValue(0, out List<IIItemStrongMutBunchEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIItemStrongMutBunchEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIItemStrongMutBunchEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIItemStrongMutBunchEffect(effect);
        }
        observersForIItemStrongMutBunch.Remove(effect.id);
      }
    }
    effectsIItemStrongMutBunchDeleteEffect.Clear();


    foreach (var effect in effectsIItemStrongMutBunchCreateEffect) {
      if (observers.TryGetValue(0, out List<IIItemStrongMutBunchEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIItemStrongMutBunchEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIItemStrongMutBunchEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIItemStrongMutBunchEffect(effect);
        }
      }
    }
    effectsIItemStrongMutBunchCreateEffect.Clear();
  }
  public ItemTTCIncarnation GetItemTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsItemTTC[id].incarnation;
  }
  public bool ItemTTCExists(int id) {
    return rootIncarnation.incarnationsItemTTC.ContainsKey(id);
  }
  public ItemTTC GetItemTTC(int id) {
    return new ItemTTC(this, id);
  }
  public List<ItemTTC> AllItemTTC() {
    List<ItemTTC> result = new List<ItemTTC>(rootIncarnation.incarnationsItemTTC.Count);
    foreach (var id in rootIncarnation.incarnationsItemTTC.Keys) {
      result.Add(new ItemTTC(this, id));
    }
    return result;
  }
  public IEnumerator<ItemTTC> EnumAllItemTTC() {
    foreach (var id in rootIncarnation.incarnationsItemTTC.Keys) {
      yield return GetItemTTC(id);
    }
  }
  public void CheckHasItemTTC(ItemTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasItemTTC(thing.id);
  }
  public void CheckHasItemTTC(int id) {
    if (!rootIncarnation.incarnationsItemTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid ItemTTC: " + id);
    }
  }
  public void AddItemTTCObserver(int id, IItemTTCEffectObserver observer) {
    List<IItemTTCEffectObserver> obsies;
    if (!observersForItemTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IItemTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForItemTTC[id] = obsies;
  }

  public void RemoveItemTTCObserver(int id, IItemTTCEffectObserver observer) {
    if (observersForItemTTC.ContainsKey(id)) {
      var list = observersForItemTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForItemTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public ItemTTC EffectItemTTCCreate(
      IItem item) {
    CheckUnlocked();
    CheckHasIItem(item);

    var id = NewId();
    var incarnation =
        new ItemTTCIncarnation(
            item.id
            );
    EffectInternalCreateItemTTC(id, rootIncarnation.version, incarnation);
    return new ItemTTC(this, id);
  }
  public void EffectInternalCreateItemTTC(
      int id,
      int incarnationVersion,
      ItemTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new ItemTTCCreateEffect(id);
    rootIncarnation.incarnationsItemTTC.Add(
        id,
        new VersionAndIncarnation<ItemTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsItemTTCCreateEffect.Add(effect);
  }

  public void EffectItemTTCDelete(int id) {
    CheckUnlocked();
    var effect = new ItemTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsItemTTC[id];

    rootIncarnation.incarnationsItemTTC.Remove(id);
    effectsItemTTCDeleteEffect.Add(effect);
  }

     
  public int GetItemTTCHash(int id, int version, ItemTTCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.item.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastItemTTCEffects(
      SortedDictionary<int, List<IItemTTCEffectObserver>> observers) {
    foreach (var effect in effectsItemTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IItemTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnItemTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IItemTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnItemTTCEffect(effect);
        }
        observersForItemTTC.Remove(effect.id);
      }
    }
    effectsItemTTCDeleteEffect.Clear();


    foreach (var effect in effectsItemTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IItemTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnItemTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IItemTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnItemTTCEffect(effect);
        }
      }
    }
    effectsItemTTCCreateEffect.Clear();
  }
  public HealthPotionIncarnation GetHealthPotionIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsHealthPotion[id].incarnation;
  }
  public bool HealthPotionExists(int id) {
    return rootIncarnation.incarnationsHealthPotion.ContainsKey(id);
  }
  public HealthPotion GetHealthPotion(int id) {
    return new HealthPotion(this, id);
  }
  public List<HealthPotion> AllHealthPotion() {
    List<HealthPotion> result = new List<HealthPotion>(rootIncarnation.incarnationsHealthPotion.Count);
    foreach (var id in rootIncarnation.incarnationsHealthPotion.Keys) {
      result.Add(new HealthPotion(this, id));
    }
    return result;
  }
  public IEnumerator<HealthPotion> EnumAllHealthPotion() {
    foreach (var id in rootIncarnation.incarnationsHealthPotion.Keys) {
      yield return GetHealthPotion(id);
    }
  }
  public void CheckHasHealthPotion(HealthPotion thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasHealthPotion(thing.id);
  }
  public void CheckHasHealthPotion(int id) {
    if (!rootIncarnation.incarnationsHealthPotion.ContainsKey(id)) {
      throw new System.Exception("Invalid HealthPotion: " + id);
    }
  }
  public void AddHealthPotionObserver(int id, IHealthPotionEffectObserver observer) {
    List<IHealthPotionEffectObserver> obsies;
    if (!observersForHealthPotion.TryGetValue(id, out obsies)) {
      obsies = new List<IHealthPotionEffectObserver>();
    }
    obsies.Add(observer);
    observersForHealthPotion[id] = obsies;
  }

  public void RemoveHealthPotionObserver(int id, IHealthPotionEffectObserver observer) {
    if (observersForHealthPotion.ContainsKey(id)) {
      var list = observersForHealthPotion[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForHealthPotion.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public HealthPotion EffectHealthPotionCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new HealthPotionIncarnation(

            );
    EffectInternalCreateHealthPotion(id, rootIncarnation.version, incarnation);
    return new HealthPotion(this, id);
  }
  public void EffectInternalCreateHealthPotion(
      int id,
      int incarnationVersion,
      HealthPotionIncarnation incarnation) {
    CheckUnlocked();
    var effect = new HealthPotionCreateEffect(id);
    rootIncarnation.incarnationsHealthPotion.Add(
        id,
        new VersionAndIncarnation<HealthPotionIncarnation>(
            incarnationVersion,
            incarnation));
    effectsHealthPotionCreateEffect.Add(effect);
  }

  public void EffectHealthPotionDelete(int id) {
    CheckUnlocked();
    var effect = new HealthPotionDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsHealthPotion[id];

    rootIncarnation.incarnationsHealthPotion.Remove(id);
    effectsHealthPotionDeleteEffect.Add(effect);
  }

     
  public int GetHealthPotionHash(int id, int version, HealthPotionIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastHealthPotionEffects(
      SortedDictionary<int, List<IHealthPotionEffectObserver>> observers) {
    foreach (var effect in effectsHealthPotionDeleteEffect) {
      if (observers.TryGetValue(0, out List<IHealthPotionEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnHealthPotionEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IHealthPotionEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnHealthPotionEffect(effect);
        }
        observersForHealthPotion.Remove(effect.id);
      }
    }
    effectsHealthPotionDeleteEffect.Clear();


    foreach (var effect in effectsHealthPotionCreateEffect) {
      if (observers.TryGetValue(0, out List<IHealthPotionEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnHealthPotionEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IHealthPotionEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnHealthPotionEffect(effect);
        }
      }
    }
    effectsHealthPotionCreateEffect.Clear();
  }
  public GlaiveIncarnation GetGlaiveIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsGlaive[id].incarnation;
  }
  public bool GlaiveExists(int id) {
    return rootIncarnation.incarnationsGlaive.ContainsKey(id);
  }
  public Glaive GetGlaive(int id) {
    return new Glaive(this, id);
  }
  public List<Glaive> AllGlaive() {
    List<Glaive> result = new List<Glaive>(rootIncarnation.incarnationsGlaive.Count);
    foreach (var id in rootIncarnation.incarnationsGlaive.Keys) {
      result.Add(new Glaive(this, id));
    }
    return result;
  }
  public IEnumerator<Glaive> EnumAllGlaive() {
    foreach (var id in rootIncarnation.incarnationsGlaive.Keys) {
      yield return GetGlaive(id);
    }
  }
  public void CheckHasGlaive(Glaive thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasGlaive(thing.id);
  }
  public void CheckHasGlaive(int id) {
    if (!rootIncarnation.incarnationsGlaive.ContainsKey(id)) {
      throw new System.Exception("Invalid Glaive: " + id);
    }
  }
  public void AddGlaiveObserver(int id, IGlaiveEffectObserver observer) {
    List<IGlaiveEffectObserver> obsies;
    if (!observersForGlaive.TryGetValue(id, out obsies)) {
      obsies = new List<IGlaiveEffectObserver>();
    }
    obsies.Add(observer);
    observersForGlaive[id] = obsies;
  }

  public void RemoveGlaiveObserver(int id, IGlaiveEffectObserver observer) {
    if (observersForGlaive.ContainsKey(id)) {
      var list = observersForGlaive[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForGlaive.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public Glaive EffectGlaiveCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new GlaiveIncarnation(

            );
    EffectInternalCreateGlaive(id, rootIncarnation.version, incarnation);
    return new Glaive(this, id);
  }
  public void EffectInternalCreateGlaive(
      int id,
      int incarnationVersion,
      GlaiveIncarnation incarnation) {
    CheckUnlocked();
    var effect = new GlaiveCreateEffect(id);
    rootIncarnation.incarnationsGlaive.Add(
        id,
        new VersionAndIncarnation<GlaiveIncarnation>(
            incarnationVersion,
            incarnation));
    effectsGlaiveCreateEffect.Add(effect);
  }

  public void EffectGlaiveDelete(int id) {
    CheckUnlocked();
    var effect = new GlaiveDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsGlaive[id];

    rootIncarnation.incarnationsGlaive.Remove(id);
    effectsGlaiveDeleteEffect.Add(effect);
  }

     
  public int GetGlaiveHash(int id, int version, GlaiveIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastGlaiveEffects(
      SortedDictionary<int, List<IGlaiveEffectObserver>> observers) {
    foreach (var effect in effectsGlaiveDeleteEffect) {
      if (observers.TryGetValue(0, out List<IGlaiveEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGlaiveEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGlaiveEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGlaiveEffect(effect);
        }
        observersForGlaive.Remove(effect.id);
      }
    }
    effectsGlaiveDeleteEffect.Clear();


    foreach (var effect in effectsGlaiveCreateEffect) {
      if (observers.TryGetValue(0, out List<IGlaiveEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGlaiveEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGlaiveEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGlaiveEffect(effect);
        }
      }
    }
    effectsGlaiveCreateEffect.Clear();
  }
  public SlowRodIncarnation GetSlowRodIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsSlowRod[id].incarnation;
  }
  public bool SlowRodExists(int id) {
    return rootIncarnation.incarnationsSlowRod.ContainsKey(id);
  }
  public SlowRod GetSlowRod(int id) {
    return new SlowRod(this, id);
  }
  public List<SlowRod> AllSlowRod() {
    List<SlowRod> result = new List<SlowRod>(rootIncarnation.incarnationsSlowRod.Count);
    foreach (var id in rootIncarnation.incarnationsSlowRod.Keys) {
      result.Add(new SlowRod(this, id));
    }
    return result;
  }
  public IEnumerator<SlowRod> EnumAllSlowRod() {
    foreach (var id in rootIncarnation.incarnationsSlowRod.Keys) {
      yield return GetSlowRod(id);
    }
  }
  public void CheckHasSlowRod(SlowRod thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasSlowRod(thing.id);
  }
  public void CheckHasSlowRod(int id) {
    if (!rootIncarnation.incarnationsSlowRod.ContainsKey(id)) {
      throw new System.Exception("Invalid SlowRod: " + id);
    }
  }
  public void AddSlowRodObserver(int id, ISlowRodEffectObserver observer) {
    List<ISlowRodEffectObserver> obsies;
    if (!observersForSlowRod.TryGetValue(id, out obsies)) {
      obsies = new List<ISlowRodEffectObserver>();
    }
    obsies.Add(observer);
    observersForSlowRod[id] = obsies;
  }

  public void RemoveSlowRodObserver(int id, ISlowRodEffectObserver observer) {
    if (observersForSlowRod.ContainsKey(id)) {
      var list = observersForSlowRod[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForSlowRod.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public SlowRod EffectSlowRodCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new SlowRodIncarnation(

            );
    EffectInternalCreateSlowRod(id, rootIncarnation.version, incarnation);
    return new SlowRod(this, id);
  }
  public void EffectInternalCreateSlowRod(
      int id,
      int incarnationVersion,
      SlowRodIncarnation incarnation) {
    CheckUnlocked();
    var effect = new SlowRodCreateEffect(id);
    rootIncarnation.incarnationsSlowRod.Add(
        id,
        new VersionAndIncarnation<SlowRodIncarnation>(
            incarnationVersion,
            incarnation));
    effectsSlowRodCreateEffect.Add(effect);
  }

  public void EffectSlowRodDelete(int id) {
    CheckUnlocked();
    var effect = new SlowRodDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsSlowRod[id];

    rootIncarnation.incarnationsSlowRod.Remove(id);
    effectsSlowRodDeleteEffect.Add(effect);
  }

     
  public int GetSlowRodHash(int id, int version, SlowRodIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastSlowRodEffects(
      SortedDictionary<int, List<ISlowRodEffectObserver>> observers) {
    foreach (var effect in effectsSlowRodDeleteEffect) {
      if (observers.TryGetValue(0, out List<ISlowRodEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSlowRodEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISlowRodEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSlowRodEffect(effect);
        }
        observersForSlowRod.Remove(effect.id);
      }
    }
    effectsSlowRodDeleteEffect.Clear();


    foreach (var effect in effectsSlowRodCreateEffect) {
      if (observers.TryGetValue(0, out List<ISlowRodEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSlowRodEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISlowRodEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSlowRodEffect(effect);
        }
      }
    }
    effectsSlowRodCreateEffect.Clear();
  }
  public BlastRodIncarnation GetBlastRodIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsBlastRod[id].incarnation;
  }
  public bool BlastRodExists(int id) {
    return rootIncarnation.incarnationsBlastRod.ContainsKey(id);
  }
  public BlastRod GetBlastRod(int id) {
    return new BlastRod(this, id);
  }
  public List<BlastRod> AllBlastRod() {
    List<BlastRod> result = new List<BlastRod>(rootIncarnation.incarnationsBlastRod.Count);
    foreach (var id in rootIncarnation.incarnationsBlastRod.Keys) {
      result.Add(new BlastRod(this, id));
    }
    return result;
  }
  public IEnumerator<BlastRod> EnumAllBlastRod() {
    foreach (var id in rootIncarnation.incarnationsBlastRod.Keys) {
      yield return GetBlastRod(id);
    }
  }
  public void CheckHasBlastRod(BlastRod thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasBlastRod(thing.id);
  }
  public void CheckHasBlastRod(int id) {
    if (!rootIncarnation.incarnationsBlastRod.ContainsKey(id)) {
      throw new System.Exception("Invalid BlastRod: " + id);
    }
  }
  public void AddBlastRodObserver(int id, IBlastRodEffectObserver observer) {
    List<IBlastRodEffectObserver> obsies;
    if (!observersForBlastRod.TryGetValue(id, out obsies)) {
      obsies = new List<IBlastRodEffectObserver>();
    }
    obsies.Add(observer);
    observersForBlastRod[id] = obsies;
  }

  public void RemoveBlastRodObserver(int id, IBlastRodEffectObserver observer) {
    if (observersForBlastRod.ContainsKey(id)) {
      var list = observersForBlastRod[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForBlastRod.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public BlastRod EffectBlastRodCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new BlastRodIncarnation(

            );
    EffectInternalCreateBlastRod(id, rootIncarnation.version, incarnation);
    return new BlastRod(this, id);
  }
  public void EffectInternalCreateBlastRod(
      int id,
      int incarnationVersion,
      BlastRodIncarnation incarnation) {
    CheckUnlocked();
    var effect = new BlastRodCreateEffect(id);
    rootIncarnation.incarnationsBlastRod.Add(
        id,
        new VersionAndIncarnation<BlastRodIncarnation>(
            incarnationVersion,
            incarnation));
    effectsBlastRodCreateEffect.Add(effect);
  }

  public void EffectBlastRodDelete(int id) {
    CheckUnlocked();
    var effect = new BlastRodDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsBlastRod[id];

    rootIncarnation.incarnationsBlastRod.Remove(id);
    effectsBlastRodDeleteEffect.Add(effect);
  }

     
  public int GetBlastRodHash(int id, int version, BlastRodIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastBlastRodEffects(
      SortedDictionary<int, List<IBlastRodEffectObserver>> observers) {
    foreach (var effect in effectsBlastRodDeleteEffect) {
      if (observers.TryGetValue(0, out List<IBlastRodEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBlastRodEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBlastRodEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBlastRodEffect(effect);
        }
        observersForBlastRod.Remove(effect.id);
      }
    }
    effectsBlastRodDeleteEffect.Clear();


    foreach (var effect in effectsBlastRodCreateEffect) {
      if (observers.TryGetValue(0, out List<IBlastRodEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBlastRodEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBlastRodEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBlastRodEffect(effect);
        }
      }
    }
    effectsBlastRodCreateEffect.Clear();
  }
  public ArmorIncarnation GetArmorIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsArmor[id].incarnation;
  }
  public bool ArmorExists(int id) {
    return rootIncarnation.incarnationsArmor.ContainsKey(id);
  }
  public Armor GetArmor(int id) {
    return new Armor(this, id);
  }
  public List<Armor> AllArmor() {
    List<Armor> result = new List<Armor>(rootIncarnation.incarnationsArmor.Count);
    foreach (var id in rootIncarnation.incarnationsArmor.Keys) {
      result.Add(new Armor(this, id));
    }
    return result;
  }
  public IEnumerator<Armor> EnumAllArmor() {
    foreach (var id in rootIncarnation.incarnationsArmor.Keys) {
      yield return GetArmor(id);
    }
  }
  public void CheckHasArmor(Armor thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasArmor(thing.id);
  }
  public void CheckHasArmor(int id) {
    if (!rootIncarnation.incarnationsArmor.ContainsKey(id)) {
      throw new System.Exception("Invalid Armor: " + id);
    }
  }
  public void AddArmorObserver(int id, IArmorEffectObserver observer) {
    List<IArmorEffectObserver> obsies;
    if (!observersForArmor.TryGetValue(id, out obsies)) {
      obsies = new List<IArmorEffectObserver>();
    }
    obsies.Add(observer);
    observersForArmor[id] = obsies;
  }

  public void RemoveArmorObserver(int id, IArmorEffectObserver observer) {
    if (observersForArmor.ContainsKey(id)) {
      var list = observersForArmor[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForArmor.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public Armor EffectArmorCreate(
) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new ArmorIncarnation(

            );
    EffectInternalCreateArmor(id, rootIncarnation.version, incarnation);
    return new Armor(this, id);
  }
  public void EffectInternalCreateArmor(
      int id,
      int incarnationVersion,
      ArmorIncarnation incarnation) {
    CheckUnlocked();
    var effect = new ArmorCreateEffect(id);
    rootIncarnation.incarnationsArmor.Add(
        id,
        new VersionAndIncarnation<ArmorIncarnation>(
            incarnationVersion,
            incarnation));
    effectsArmorCreateEffect.Add(effect);
  }

  public void EffectArmorDelete(int id) {
    CheckUnlocked();
    var effect = new ArmorDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsArmor[id];

    rootIncarnation.incarnationsArmor.Remove(id);
    effectsArmorDeleteEffect.Add(effect);
  }

     
  public int GetArmorHash(int id, int version, ArmorIncarnation incarnation) {
    int result = id * version;
    return result;
  }
     
  public void BroadcastArmorEffects(
      SortedDictionary<int, List<IArmorEffectObserver>> observers) {
    foreach (var effect in effectsArmorDeleteEffect) {
      if (observers.TryGetValue(0, out List<IArmorEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnArmorEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IArmorEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnArmorEffect(effect);
        }
        observersForArmor.Remove(effect.id);
      }
    }
    effectsArmorDeleteEffect.Clear();


    foreach (var effect in effectsArmorCreateEffect) {
      if (observers.TryGetValue(0, out List<IArmorEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnArmorEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IArmorEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnArmorEffect(effect);
        }
      }
    }
    effectsArmorCreateEffect.Clear();
  }
  public SquareCaveLevelControllerIncarnation GetSquareCaveLevelControllerIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsSquareCaveLevelController[id].incarnation;
  }
  public bool SquareCaveLevelControllerExists(int id) {
    return rootIncarnation.incarnationsSquareCaveLevelController.ContainsKey(id);
  }
  public SquareCaveLevelController GetSquareCaveLevelController(int id) {
    return new SquareCaveLevelController(this, id);
  }
  public List<SquareCaveLevelController> AllSquareCaveLevelController() {
    List<SquareCaveLevelController> result = new List<SquareCaveLevelController>(rootIncarnation.incarnationsSquareCaveLevelController.Count);
    foreach (var id in rootIncarnation.incarnationsSquareCaveLevelController.Keys) {
      result.Add(new SquareCaveLevelController(this, id));
    }
    return result;
  }
  public IEnumerator<SquareCaveLevelController> EnumAllSquareCaveLevelController() {
    foreach (var id in rootIncarnation.incarnationsSquareCaveLevelController.Keys) {
      yield return GetSquareCaveLevelController(id);
    }
  }
  public void CheckHasSquareCaveLevelController(SquareCaveLevelController thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasSquareCaveLevelController(thing.id);
  }
  public void CheckHasSquareCaveLevelController(int id) {
    if (!rootIncarnation.incarnationsSquareCaveLevelController.ContainsKey(id)) {
      throw new System.Exception("Invalid SquareCaveLevelController: " + id);
    }
  }
  public void AddSquareCaveLevelControllerObserver(int id, ISquareCaveLevelControllerEffectObserver observer) {
    List<ISquareCaveLevelControllerEffectObserver> obsies;
    if (!observersForSquareCaveLevelController.TryGetValue(id, out obsies)) {
      obsies = new List<ISquareCaveLevelControllerEffectObserver>();
    }
    obsies.Add(observer);
    observersForSquareCaveLevelController[id] = obsies;
  }

  public void RemoveSquareCaveLevelControllerObserver(int id, ISquareCaveLevelControllerEffectObserver observer) {
    if (observersForSquareCaveLevelController.ContainsKey(id)) {
      var list = observersForSquareCaveLevelController[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForSquareCaveLevelController.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public SquareCaveLevelController EffectSquareCaveLevelControllerCreate(
      Level level,
      int depth) {
    CheckUnlocked();
    CheckHasLevel(level);

    var id = NewId();
    var incarnation =
        new SquareCaveLevelControllerIncarnation(
            level.id,
            depth
            );
    EffectInternalCreateSquareCaveLevelController(id, rootIncarnation.version, incarnation);
    return new SquareCaveLevelController(this, id);
  }
  public void EffectInternalCreateSquareCaveLevelController(
      int id,
      int incarnationVersion,
      SquareCaveLevelControllerIncarnation incarnation) {
    CheckUnlocked();
    var effect = new SquareCaveLevelControllerCreateEffect(id);
    rootIncarnation.incarnationsSquareCaveLevelController.Add(
        id,
        new VersionAndIncarnation<SquareCaveLevelControllerIncarnation>(
            incarnationVersion,
            incarnation));
    effectsSquareCaveLevelControllerCreateEffect.Add(effect);
  }

  public void EffectSquareCaveLevelControllerDelete(int id) {
    CheckUnlocked();
    var effect = new SquareCaveLevelControllerDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsSquareCaveLevelController[id];

    rootIncarnation.incarnationsSquareCaveLevelController.Remove(id);
    effectsSquareCaveLevelControllerDeleteEffect.Add(effect);
  }

     
  public int GetSquareCaveLevelControllerHash(int id, int version, SquareCaveLevelControllerIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.level.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.depth.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastSquareCaveLevelControllerEffects(
      SortedDictionary<int, List<ISquareCaveLevelControllerEffectObserver>> observers) {
    foreach (var effect in effectsSquareCaveLevelControllerDeleteEffect) {
      if (observers.TryGetValue(0, out List<ISquareCaveLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSquareCaveLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISquareCaveLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSquareCaveLevelControllerEffect(effect);
        }
        observersForSquareCaveLevelController.Remove(effect.id);
      }
    }
    effectsSquareCaveLevelControllerDeleteEffect.Clear();


    foreach (var effect in effectsSquareCaveLevelControllerCreateEffect) {
      if (observers.TryGetValue(0, out List<ISquareCaveLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSquareCaveLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISquareCaveLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSquareCaveLevelControllerEffect(effect);
        }
      }
    }
    effectsSquareCaveLevelControllerCreateEffect.Clear();
  }
  public RavashrikeLevelControllerIncarnation GetRavashrikeLevelControllerIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsRavashrikeLevelController[id].incarnation;
  }
  public bool RavashrikeLevelControllerExists(int id) {
    return rootIncarnation.incarnationsRavashrikeLevelController.ContainsKey(id);
  }
  public RavashrikeLevelController GetRavashrikeLevelController(int id) {
    return new RavashrikeLevelController(this, id);
  }
  public List<RavashrikeLevelController> AllRavashrikeLevelController() {
    List<RavashrikeLevelController> result = new List<RavashrikeLevelController>(rootIncarnation.incarnationsRavashrikeLevelController.Count);
    foreach (var id in rootIncarnation.incarnationsRavashrikeLevelController.Keys) {
      result.Add(new RavashrikeLevelController(this, id));
    }
    return result;
  }
  public IEnumerator<RavashrikeLevelController> EnumAllRavashrikeLevelController() {
    foreach (var id in rootIncarnation.incarnationsRavashrikeLevelController.Keys) {
      yield return GetRavashrikeLevelController(id);
    }
  }
  public void CheckHasRavashrikeLevelController(RavashrikeLevelController thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasRavashrikeLevelController(thing.id);
  }
  public void CheckHasRavashrikeLevelController(int id) {
    if (!rootIncarnation.incarnationsRavashrikeLevelController.ContainsKey(id)) {
      throw new System.Exception("Invalid RavashrikeLevelController: " + id);
    }
  }
  public void AddRavashrikeLevelControllerObserver(int id, IRavashrikeLevelControllerEffectObserver observer) {
    List<IRavashrikeLevelControllerEffectObserver> obsies;
    if (!observersForRavashrikeLevelController.TryGetValue(id, out obsies)) {
      obsies = new List<IRavashrikeLevelControllerEffectObserver>();
    }
    obsies.Add(observer);
    observersForRavashrikeLevelController[id] = obsies;
  }

  public void RemoveRavashrikeLevelControllerObserver(int id, IRavashrikeLevelControllerEffectObserver observer) {
    if (observersForRavashrikeLevelController.ContainsKey(id)) {
      var list = observersForRavashrikeLevelController[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForRavashrikeLevelController.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public RavashrikeLevelController EffectRavashrikeLevelControllerCreate(
      Level level) {
    CheckUnlocked();
    CheckHasLevel(level);

    var id = NewId();
    var incarnation =
        new RavashrikeLevelControllerIncarnation(
            level.id
            );
    EffectInternalCreateRavashrikeLevelController(id, rootIncarnation.version, incarnation);
    return new RavashrikeLevelController(this, id);
  }
  public void EffectInternalCreateRavashrikeLevelController(
      int id,
      int incarnationVersion,
      RavashrikeLevelControllerIncarnation incarnation) {
    CheckUnlocked();
    var effect = new RavashrikeLevelControllerCreateEffect(id);
    rootIncarnation.incarnationsRavashrikeLevelController.Add(
        id,
        new VersionAndIncarnation<RavashrikeLevelControllerIncarnation>(
            incarnationVersion,
            incarnation));
    effectsRavashrikeLevelControllerCreateEffect.Add(effect);
  }

  public void EffectRavashrikeLevelControllerDelete(int id) {
    CheckUnlocked();
    var effect = new RavashrikeLevelControllerDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsRavashrikeLevelController[id];

    rootIncarnation.incarnationsRavashrikeLevelController.Remove(id);
    effectsRavashrikeLevelControllerDeleteEffect.Add(effect);
  }

     
  public int GetRavashrikeLevelControllerHash(int id, int version, RavashrikeLevelControllerIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.level.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastRavashrikeLevelControllerEffects(
      SortedDictionary<int, List<IRavashrikeLevelControllerEffectObserver>> observers) {
    foreach (var effect in effectsRavashrikeLevelControllerDeleteEffect) {
      if (observers.TryGetValue(0, out List<IRavashrikeLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRavashrikeLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRavashrikeLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRavashrikeLevelControllerEffect(effect);
        }
        observersForRavashrikeLevelController.Remove(effect.id);
      }
    }
    effectsRavashrikeLevelControllerDeleteEffect.Clear();


    foreach (var effect in effectsRavashrikeLevelControllerCreateEffect) {
      if (observers.TryGetValue(0, out List<IRavashrikeLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRavashrikeLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRavashrikeLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRavashrikeLevelControllerEffect(effect);
        }
      }
    }
    effectsRavashrikeLevelControllerCreateEffect.Clear();
  }
  public PentagonalCaveLevelControllerIncarnation GetPentagonalCaveLevelControllerIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsPentagonalCaveLevelController[id].incarnation;
  }
  public bool PentagonalCaveLevelControllerExists(int id) {
    return rootIncarnation.incarnationsPentagonalCaveLevelController.ContainsKey(id);
  }
  public PentagonalCaveLevelController GetPentagonalCaveLevelController(int id) {
    return new PentagonalCaveLevelController(this, id);
  }
  public List<PentagonalCaveLevelController> AllPentagonalCaveLevelController() {
    List<PentagonalCaveLevelController> result = new List<PentagonalCaveLevelController>(rootIncarnation.incarnationsPentagonalCaveLevelController.Count);
    foreach (var id in rootIncarnation.incarnationsPentagonalCaveLevelController.Keys) {
      result.Add(new PentagonalCaveLevelController(this, id));
    }
    return result;
  }
  public IEnumerator<PentagonalCaveLevelController> EnumAllPentagonalCaveLevelController() {
    foreach (var id in rootIncarnation.incarnationsPentagonalCaveLevelController.Keys) {
      yield return GetPentagonalCaveLevelController(id);
    }
  }
  public void CheckHasPentagonalCaveLevelController(PentagonalCaveLevelController thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasPentagonalCaveLevelController(thing.id);
  }
  public void CheckHasPentagonalCaveLevelController(int id) {
    if (!rootIncarnation.incarnationsPentagonalCaveLevelController.ContainsKey(id)) {
      throw new System.Exception("Invalid PentagonalCaveLevelController: " + id);
    }
  }
  public void AddPentagonalCaveLevelControllerObserver(int id, IPentagonalCaveLevelControllerEffectObserver observer) {
    List<IPentagonalCaveLevelControllerEffectObserver> obsies;
    if (!observersForPentagonalCaveLevelController.TryGetValue(id, out obsies)) {
      obsies = new List<IPentagonalCaveLevelControllerEffectObserver>();
    }
    obsies.Add(observer);
    observersForPentagonalCaveLevelController[id] = obsies;
  }

  public void RemovePentagonalCaveLevelControllerObserver(int id, IPentagonalCaveLevelControllerEffectObserver observer) {
    if (observersForPentagonalCaveLevelController.ContainsKey(id)) {
      var list = observersForPentagonalCaveLevelController[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForPentagonalCaveLevelController.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public PentagonalCaveLevelController EffectPentagonalCaveLevelControllerCreate(
      Level level,
      int depth) {
    CheckUnlocked();
    CheckHasLevel(level);

    var id = NewId();
    var incarnation =
        new PentagonalCaveLevelControllerIncarnation(
            level.id,
            depth
            );
    EffectInternalCreatePentagonalCaveLevelController(id, rootIncarnation.version, incarnation);
    return new PentagonalCaveLevelController(this, id);
  }
  public void EffectInternalCreatePentagonalCaveLevelController(
      int id,
      int incarnationVersion,
      PentagonalCaveLevelControllerIncarnation incarnation) {
    CheckUnlocked();
    var effect = new PentagonalCaveLevelControllerCreateEffect(id);
    rootIncarnation.incarnationsPentagonalCaveLevelController.Add(
        id,
        new VersionAndIncarnation<PentagonalCaveLevelControllerIncarnation>(
            incarnationVersion,
            incarnation));
    effectsPentagonalCaveLevelControllerCreateEffect.Add(effect);
  }

  public void EffectPentagonalCaveLevelControllerDelete(int id) {
    CheckUnlocked();
    var effect = new PentagonalCaveLevelControllerDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsPentagonalCaveLevelController[id];

    rootIncarnation.incarnationsPentagonalCaveLevelController.Remove(id);
    effectsPentagonalCaveLevelControllerDeleteEffect.Add(effect);
  }

     
  public int GetPentagonalCaveLevelControllerHash(int id, int version, PentagonalCaveLevelControllerIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.level.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.depth.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastPentagonalCaveLevelControllerEffects(
      SortedDictionary<int, List<IPentagonalCaveLevelControllerEffectObserver>> observers) {
    foreach (var effect in effectsPentagonalCaveLevelControllerDeleteEffect) {
      if (observers.TryGetValue(0, out List<IPentagonalCaveLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnPentagonalCaveLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IPentagonalCaveLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnPentagonalCaveLevelControllerEffect(effect);
        }
        observersForPentagonalCaveLevelController.Remove(effect.id);
      }
    }
    effectsPentagonalCaveLevelControllerDeleteEffect.Clear();


    foreach (var effect in effectsPentagonalCaveLevelControllerCreateEffect) {
      if (observers.TryGetValue(0, out List<IPentagonalCaveLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnPentagonalCaveLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IPentagonalCaveLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnPentagonalCaveLevelControllerEffect(effect);
        }
      }
    }
    effectsPentagonalCaveLevelControllerCreateEffect.Clear();
  }
  public IncendianFallsLevelLinkerTTCIncarnation GetIncendianFallsLevelLinkerTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC[id].incarnation;
  }
  public bool IncendianFallsLevelLinkerTTCExists(int id) {
    return rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC.ContainsKey(id);
  }
  public IncendianFallsLevelLinkerTTC GetIncendianFallsLevelLinkerTTC(int id) {
    return new IncendianFallsLevelLinkerTTC(this, id);
  }
  public List<IncendianFallsLevelLinkerTTC> AllIncendianFallsLevelLinkerTTC() {
    List<IncendianFallsLevelLinkerTTC> result = new List<IncendianFallsLevelLinkerTTC>(rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC.Count);
    foreach (var id in rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC.Keys) {
      result.Add(new IncendianFallsLevelLinkerTTC(this, id));
    }
    return result;
  }
  public IEnumerator<IncendianFallsLevelLinkerTTC> EnumAllIncendianFallsLevelLinkerTTC() {
    foreach (var id in rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC.Keys) {
      yield return GetIncendianFallsLevelLinkerTTC(id);
    }
  }
  public void CheckHasIncendianFallsLevelLinkerTTC(IncendianFallsLevelLinkerTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasIncendianFallsLevelLinkerTTC(thing.id);
  }
  public void CheckHasIncendianFallsLevelLinkerTTC(int id) {
    if (!rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid IncendianFallsLevelLinkerTTC: " + id);
    }
  }
  public void AddIncendianFallsLevelLinkerTTCObserver(int id, IIncendianFallsLevelLinkerTTCEffectObserver observer) {
    List<IIncendianFallsLevelLinkerTTCEffectObserver> obsies;
    if (!observersForIncendianFallsLevelLinkerTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IIncendianFallsLevelLinkerTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForIncendianFallsLevelLinkerTTC[id] = obsies;
  }

  public void RemoveIncendianFallsLevelLinkerTTCObserver(int id, IIncendianFallsLevelLinkerTTCEffectObserver observer) {
    if (observersForIncendianFallsLevelLinkerTTC.ContainsKey(id)) {
      var list = observersForIncendianFallsLevelLinkerTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForIncendianFallsLevelLinkerTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public IncendianFallsLevelLinkerTTC EffectIncendianFallsLevelLinkerTTCCreate(
      int thisLevelDepth) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new IncendianFallsLevelLinkerTTCIncarnation(
            thisLevelDepth
            );
    EffectInternalCreateIncendianFallsLevelLinkerTTC(id, rootIncarnation.version, incarnation);
    return new IncendianFallsLevelLinkerTTC(this, id);
  }
  public void EffectInternalCreateIncendianFallsLevelLinkerTTC(
      int id,
      int incarnationVersion,
      IncendianFallsLevelLinkerTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new IncendianFallsLevelLinkerTTCCreateEffect(id);
    rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC.Add(
        id,
        new VersionAndIncarnation<IncendianFallsLevelLinkerTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsIncendianFallsLevelLinkerTTCCreateEffect.Add(effect);
  }

  public void EffectIncendianFallsLevelLinkerTTCDelete(int id) {
    CheckUnlocked();
    var effect = new IncendianFallsLevelLinkerTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC[id];

    rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC.Remove(id);
    effectsIncendianFallsLevelLinkerTTCDeleteEffect.Add(effect);
  }

     
  public int GetIncendianFallsLevelLinkerTTCHash(int id, int version, IncendianFallsLevelLinkerTTCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.thisLevelDepth.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastIncendianFallsLevelLinkerTTCEffects(
      SortedDictionary<int, List<IIncendianFallsLevelLinkerTTCEffectObserver>> observers) {
    foreach (var effect in effectsIncendianFallsLevelLinkerTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IIncendianFallsLevelLinkerTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIncendianFallsLevelLinkerTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIncendianFallsLevelLinkerTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIncendianFallsLevelLinkerTTCEffect(effect);
        }
        observersForIncendianFallsLevelLinkerTTC.Remove(effect.id);
      }
    }
    effectsIncendianFallsLevelLinkerTTCDeleteEffect.Clear();


    foreach (var effect in effectsIncendianFallsLevelLinkerTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IIncendianFallsLevelLinkerTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIncendianFallsLevelLinkerTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIncendianFallsLevelLinkerTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIncendianFallsLevelLinkerTTCEffect(effect);
        }
      }
    }
    effectsIncendianFallsLevelLinkerTTCCreateEffect.Clear();
  }
  public CliffLevelControllerIncarnation GetCliffLevelControllerIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsCliffLevelController[id].incarnation;
  }
  public bool CliffLevelControllerExists(int id) {
    return rootIncarnation.incarnationsCliffLevelController.ContainsKey(id);
  }
  public CliffLevelController GetCliffLevelController(int id) {
    return new CliffLevelController(this, id);
  }
  public List<CliffLevelController> AllCliffLevelController() {
    List<CliffLevelController> result = new List<CliffLevelController>(rootIncarnation.incarnationsCliffLevelController.Count);
    foreach (var id in rootIncarnation.incarnationsCliffLevelController.Keys) {
      result.Add(new CliffLevelController(this, id));
    }
    return result;
  }
  public IEnumerator<CliffLevelController> EnumAllCliffLevelController() {
    foreach (var id in rootIncarnation.incarnationsCliffLevelController.Keys) {
      yield return GetCliffLevelController(id);
    }
  }
  public void CheckHasCliffLevelController(CliffLevelController thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasCliffLevelController(thing.id);
  }
  public void CheckHasCliffLevelController(int id) {
    if (!rootIncarnation.incarnationsCliffLevelController.ContainsKey(id)) {
      throw new System.Exception("Invalid CliffLevelController: " + id);
    }
  }
  public void AddCliffLevelControllerObserver(int id, ICliffLevelControllerEffectObserver observer) {
    List<ICliffLevelControllerEffectObserver> obsies;
    if (!observersForCliffLevelController.TryGetValue(id, out obsies)) {
      obsies = new List<ICliffLevelControllerEffectObserver>();
    }
    obsies.Add(observer);
    observersForCliffLevelController[id] = obsies;
  }

  public void RemoveCliffLevelControllerObserver(int id, ICliffLevelControllerEffectObserver observer) {
    if (observersForCliffLevelController.ContainsKey(id)) {
      var list = observersForCliffLevelController[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForCliffLevelController.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public CliffLevelController EffectCliffLevelControllerCreate(
      Level level,
      int depth) {
    CheckUnlocked();
    CheckHasLevel(level);

    var id = NewId();
    var incarnation =
        new CliffLevelControllerIncarnation(
            level.id,
            depth
            );
    EffectInternalCreateCliffLevelController(id, rootIncarnation.version, incarnation);
    return new CliffLevelController(this, id);
  }
  public void EffectInternalCreateCliffLevelController(
      int id,
      int incarnationVersion,
      CliffLevelControllerIncarnation incarnation) {
    CheckUnlocked();
    var effect = new CliffLevelControllerCreateEffect(id);
    rootIncarnation.incarnationsCliffLevelController.Add(
        id,
        new VersionAndIncarnation<CliffLevelControllerIncarnation>(
            incarnationVersion,
            incarnation));
    effectsCliffLevelControllerCreateEffect.Add(effect);
  }

  public void EffectCliffLevelControllerDelete(int id) {
    CheckUnlocked();
    var effect = new CliffLevelControllerDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsCliffLevelController[id];

    rootIncarnation.incarnationsCliffLevelController.Remove(id);
    effectsCliffLevelControllerDeleteEffect.Add(effect);
  }

     
  public int GetCliffLevelControllerHash(int id, int version, CliffLevelControllerIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.level.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.depth.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastCliffLevelControllerEffects(
      SortedDictionary<int, List<ICliffLevelControllerEffectObserver>> observers) {
    foreach (var effect in effectsCliffLevelControllerDeleteEffect) {
      if (observers.TryGetValue(0, out List<ICliffLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCliffLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICliffLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCliffLevelControllerEffect(effect);
        }
        observersForCliffLevelController.Remove(effect.id);
      }
    }
    effectsCliffLevelControllerDeleteEffect.Clear();


    foreach (var effect in effectsCliffLevelControllerCreateEffect) {
      if (observers.TryGetValue(0, out List<ICliffLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCliffLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICliffLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCliffLevelControllerEffect(effect);
        }
      }
    }
    effectsCliffLevelControllerCreateEffect.Clear();
  }
  public PreGauntletLevelControllerIncarnation GetPreGauntletLevelControllerIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsPreGauntletLevelController[id].incarnation;
  }
  public bool PreGauntletLevelControllerExists(int id) {
    return rootIncarnation.incarnationsPreGauntletLevelController.ContainsKey(id);
  }
  public PreGauntletLevelController GetPreGauntletLevelController(int id) {
    return new PreGauntletLevelController(this, id);
  }
  public List<PreGauntletLevelController> AllPreGauntletLevelController() {
    List<PreGauntletLevelController> result = new List<PreGauntletLevelController>(rootIncarnation.incarnationsPreGauntletLevelController.Count);
    foreach (var id in rootIncarnation.incarnationsPreGauntletLevelController.Keys) {
      result.Add(new PreGauntletLevelController(this, id));
    }
    return result;
  }
  public IEnumerator<PreGauntletLevelController> EnumAllPreGauntletLevelController() {
    foreach (var id in rootIncarnation.incarnationsPreGauntletLevelController.Keys) {
      yield return GetPreGauntletLevelController(id);
    }
  }
  public void CheckHasPreGauntletLevelController(PreGauntletLevelController thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasPreGauntletLevelController(thing.id);
  }
  public void CheckHasPreGauntletLevelController(int id) {
    if (!rootIncarnation.incarnationsPreGauntletLevelController.ContainsKey(id)) {
      throw new System.Exception("Invalid PreGauntletLevelController: " + id);
    }
  }
  public void AddPreGauntletLevelControllerObserver(int id, IPreGauntletLevelControllerEffectObserver observer) {
    List<IPreGauntletLevelControllerEffectObserver> obsies;
    if (!observersForPreGauntletLevelController.TryGetValue(id, out obsies)) {
      obsies = new List<IPreGauntletLevelControllerEffectObserver>();
    }
    obsies.Add(observer);
    observersForPreGauntletLevelController[id] = obsies;
  }

  public void RemovePreGauntletLevelControllerObserver(int id, IPreGauntletLevelControllerEffectObserver observer) {
    if (observersForPreGauntletLevelController.ContainsKey(id)) {
      var list = observersForPreGauntletLevelController[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForPreGauntletLevelController.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public PreGauntletLevelController EffectPreGauntletLevelControllerCreate(
      Level level) {
    CheckUnlocked();
    CheckHasLevel(level);

    var id = NewId();
    var incarnation =
        new PreGauntletLevelControllerIncarnation(
            level.id
            );
    EffectInternalCreatePreGauntletLevelController(id, rootIncarnation.version, incarnation);
    return new PreGauntletLevelController(this, id);
  }
  public void EffectInternalCreatePreGauntletLevelController(
      int id,
      int incarnationVersion,
      PreGauntletLevelControllerIncarnation incarnation) {
    CheckUnlocked();
    var effect = new PreGauntletLevelControllerCreateEffect(id);
    rootIncarnation.incarnationsPreGauntletLevelController.Add(
        id,
        new VersionAndIncarnation<PreGauntletLevelControllerIncarnation>(
            incarnationVersion,
            incarnation));
    effectsPreGauntletLevelControllerCreateEffect.Add(effect);
  }

  public void EffectPreGauntletLevelControllerDelete(int id) {
    CheckUnlocked();
    var effect = new PreGauntletLevelControllerDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsPreGauntletLevelController[id];

    rootIncarnation.incarnationsPreGauntletLevelController.Remove(id);
    effectsPreGauntletLevelControllerDeleteEffect.Add(effect);
  }

     
  public int GetPreGauntletLevelControllerHash(int id, int version, PreGauntletLevelControllerIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.level.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastPreGauntletLevelControllerEffects(
      SortedDictionary<int, List<IPreGauntletLevelControllerEffectObserver>> observers) {
    foreach (var effect in effectsPreGauntletLevelControllerDeleteEffect) {
      if (observers.TryGetValue(0, out List<IPreGauntletLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnPreGauntletLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IPreGauntletLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnPreGauntletLevelControllerEffect(effect);
        }
        observersForPreGauntletLevelController.Remove(effect.id);
      }
    }
    effectsPreGauntletLevelControllerDeleteEffect.Clear();


    foreach (var effect in effectsPreGauntletLevelControllerCreateEffect) {
      if (observers.TryGetValue(0, out List<IPreGauntletLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnPreGauntletLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IPreGauntletLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnPreGauntletLevelControllerEffect(effect);
        }
      }
    }
    effectsPreGauntletLevelControllerCreateEffect.Clear();
  }
  public GauntletLevelControllerIncarnation GetGauntletLevelControllerIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsGauntletLevelController[id].incarnation;
  }
  public bool GauntletLevelControllerExists(int id) {
    return rootIncarnation.incarnationsGauntletLevelController.ContainsKey(id);
  }
  public GauntletLevelController GetGauntletLevelController(int id) {
    return new GauntletLevelController(this, id);
  }
  public List<GauntletLevelController> AllGauntletLevelController() {
    List<GauntletLevelController> result = new List<GauntletLevelController>(rootIncarnation.incarnationsGauntletLevelController.Count);
    foreach (var id in rootIncarnation.incarnationsGauntletLevelController.Keys) {
      result.Add(new GauntletLevelController(this, id));
    }
    return result;
  }
  public IEnumerator<GauntletLevelController> EnumAllGauntletLevelController() {
    foreach (var id in rootIncarnation.incarnationsGauntletLevelController.Keys) {
      yield return GetGauntletLevelController(id);
    }
  }
  public void CheckHasGauntletLevelController(GauntletLevelController thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasGauntletLevelController(thing.id);
  }
  public void CheckHasGauntletLevelController(int id) {
    if (!rootIncarnation.incarnationsGauntletLevelController.ContainsKey(id)) {
      throw new System.Exception("Invalid GauntletLevelController: " + id);
    }
  }
  public void AddGauntletLevelControllerObserver(int id, IGauntletLevelControllerEffectObserver observer) {
    List<IGauntletLevelControllerEffectObserver> obsies;
    if (!observersForGauntletLevelController.TryGetValue(id, out obsies)) {
      obsies = new List<IGauntletLevelControllerEffectObserver>();
    }
    obsies.Add(observer);
    observersForGauntletLevelController[id] = obsies;
  }

  public void RemoveGauntletLevelControllerObserver(int id, IGauntletLevelControllerEffectObserver observer) {
    if (observersForGauntletLevelController.ContainsKey(id)) {
      var list = observersForGauntletLevelController[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForGauntletLevelController.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public GauntletLevelController EffectGauntletLevelControllerCreate(
      Level level) {
    CheckUnlocked();
    CheckHasLevel(level);

    var id = NewId();
    var incarnation =
        new GauntletLevelControllerIncarnation(
            level.id
            );
    EffectInternalCreateGauntletLevelController(id, rootIncarnation.version, incarnation);
    return new GauntletLevelController(this, id);
  }
  public void EffectInternalCreateGauntletLevelController(
      int id,
      int incarnationVersion,
      GauntletLevelControllerIncarnation incarnation) {
    CheckUnlocked();
    var effect = new GauntletLevelControllerCreateEffect(id);
    rootIncarnation.incarnationsGauntletLevelController.Add(
        id,
        new VersionAndIncarnation<GauntletLevelControllerIncarnation>(
            incarnationVersion,
            incarnation));
    effectsGauntletLevelControllerCreateEffect.Add(effect);
  }

  public void EffectGauntletLevelControllerDelete(int id) {
    CheckUnlocked();
    var effect = new GauntletLevelControllerDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsGauntletLevelController[id];

    rootIncarnation.incarnationsGauntletLevelController.Remove(id);
    effectsGauntletLevelControllerDeleteEffect.Add(effect);
  }

     
  public int GetGauntletLevelControllerHash(int id, int version, GauntletLevelControllerIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.level.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastGauntletLevelControllerEffects(
      SortedDictionary<int, List<IGauntletLevelControllerEffectObserver>> observers) {
    foreach (var effect in effectsGauntletLevelControllerDeleteEffect) {
      if (observers.TryGetValue(0, out List<IGauntletLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGauntletLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGauntletLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGauntletLevelControllerEffect(effect);
        }
        observersForGauntletLevelController.Remove(effect.id);
      }
    }
    effectsGauntletLevelControllerDeleteEffect.Clear();


    foreach (var effect in effectsGauntletLevelControllerCreateEffect) {
      if (observers.TryGetValue(0, out List<IGauntletLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGauntletLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGauntletLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGauntletLevelControllerEffect(effect);
        }
      }
    }
    effectsGauntletLevelControllerCreateEffect.Clear();
  }
  public ExecutionStateIncarnation GetExecutionStateIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsExecutionState[id].incarnation;
  }
  public bool ExecutionStateExists(int id) {
    return rootIncarnation.incarnationsExecutionState.ContainsKey(id);
  }
  public ExecutionState GetExecutionState(int id) {
    return new ExecutionState(this, id);
  }
  public List<ExecutionState> AllExecutionState() {
    List<ExecutionState> result = new List<ExecutionState>(rootIncarnation.incarnationsExecutionState.Count);
    foreach (var id in rootIncarnation.incarnationsExecutionState.Keys) {
      result.Add(new ExecutionState(this, id));
    }
    return result;
  }
  public IEnumerator<ExecutionState> EnumAllExecutionState() {
    foreach (var id in rootIncarnation.incarnationsExecutionState.Keys) {
      yield return GetExecutionState(id);
    }
  }
  public void CheckHasExecutionState(ExecutionState thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasExecutionState(thing.id);
  }
  public void CheckHasExecutionState(int id) {
    if (!rootIncarnation.incarnationsExecutionState.ContainsKey(id)) {
      throw new System.Exception("Invalid ExecutionState: " + id);
    }
  }
  public void AddExecutionStateObserver(int id, IExecutionStateEffectObserver observer) {
    List<IExecutionStateEffectObserver> obsies;
    if (!observersForExecutionState.TryGetValue(id, out obsies)) {
      obsies = new List<IExecutionStateEffectObserver>();
    }
    obsies.Add(observer);
    observersForExecutionState[id] = obsies;
  }

  public void RemoveExecutionStateObserver(int id, IExecutionStateEffectObserver observer) {
    if (observersForExecutionState.ContainsKey(id)) {
      var list = observersForExecutionState[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForExecutionState.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public ExecutionState EffectExecutionStateCreate(
      Unit actingUnit,
      bool actingUnitDidAction,
      IPreActingUCWeakMutBunch remainingPreActingUnitComponents,
      IPostActingUCWeakMutBunch remainingPostActingUnitComponents) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new ExecutionStateIncarnation(
            actingUnit.id,
            actingUnitDidAction,
            remainingPreActingUnitComponents.id,
            remainingPostActingUnitComponents.id
            );
    EffectInternalCreateExecutionState(id, rootIncarnation.version, incarnation);
    return new ExecutionState(this, id);
  }
  public void EffectInternalCreateExecutionState(
      int id,
      int incarnationVersion,
      ExecutionStateIncarnation incarnation) {
    CheckUnlocked();
    var effect = new ExecutionStateCreateEffect(id);
    rootIncarnation.incarnationsExecutionState.Add(
        id,
        new VersionAndIncarnation<ExecutionStateIncarnation>(
            incarnationVersion,
            incarnation));
    effectsExecutionStateCreateEffect.Add(effect);
  }

  public void EffectExecutionStateDelete(int id) {
    CheckUnlocked();
    var effect = new ExecutionStateDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsExecutionState[id];

    rootIncarnation.incarnationsExecutionState.Remove(id);
    effectsExecutionStateDeleteEffect.Add(effect);
  }

     
  public int GetExecutionStateHash(int id, int version, ExecutionStateIncarnation incarnation) {
    int result = id * version;
    if (!object.ReferenceEquals(incarnation.actingUnit, null)) {
      result += id * version * 1 * incarnation.actingUnit.GetDeterministicHashCode();
    }
    result += id * version * 2 * incarnation.actingUnitDidAction.GetDeterministicHashCode();
    if (!object.ReferenceEquals(incarnation.remainingPreActingUnitComponents, null)) {
      result += id * version * 3 * incarnation.remainingPreActingUnitComponents.GetDeterministicHashCode();
    }
    if (!object.ReferenceEquals(incarnation.remainingPostActingUnitComponents, null)) {
      result += id * version * 4 * incarnation.remainingPostActingUnitComponents.GetDeterministicHashCode();
    }
    return result;
  }
     
  public void BroadcastExecutionStateEffects(
      SortedDictionary<int, List<IExecutionStateEffectObserver>> observers) {
    foreach (var effect in effectsExecutionStateDeleteEffect) {
      if (observers.TryGetValue(0, out List<IExecutionStateEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnExecutionStateEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IExecutionStateEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnExecutionStateEffect(effect);
        }
        observersForExecutionState.Remove(effect.id);
      }
    }
    effectsExecutionStateDeleteEffect.Clear();


    foreach (var effect in effectsExecutionStateSetActingUnitEffect) {
      if (observers.TryGetValue(0, out List<IExecutionStateEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnExecutionStateEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IExecutionStateEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnExecutionStateEffect(effect);
        }
      }
    }
    effectsExecutionStateSetActingUnitEffect.Clear();

    foreach (var effect in effectsExecutionStateSetActingUnitDidActionEffect) {
      if (observers.TryGetValue(0, out List<IExecutionStateEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnExecutionStateEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IExecutionStateEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnExecutionStateEffect(effect);
        }
      }
    }
    effectsExecutionStateSetActingUnitDidActionEffect.Clear();

    foreach (var effect in effectsExecutionStateSetRemainingPreActingUnitComponentsEffect) {
      if (observers.TryGetValue(0, out List<IExecutionStateEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnExecutionStateEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IExecutionStateEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnExecutionStateEffect(effect);
        }
      }
    }
    effectsExecutionStateSetRemainingPreActingUnitComponentsEffect.Clear();

    foreach (var effect in effectsExecutionStateSetRemainingPostActingUnitComponentsEffect) {
      if (observers.TryGetValue(0, out List<IExecutionStateEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnExecutionStateEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IExecutionStateEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnExecutionStateEffect(effect);
        }
      }
    }
    effectsExecutionStateSetRemainingPostActingUnitComponentsEffect.Clear();

    foreach (var effect in effectsExecutionStateCreateEffect) {
      if (observers.TryGetValue(0, out List<IExecutionStateEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnExecutionStateEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IExecutionStateEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnExecutionStateEffect(effect);
        }
      }
    }
    effectsExecutionStateCreateEffect.Clear();
  }

  public void EffectExecutionStateSetActingUnit(int id, Unit newValue) {
    CheckUnlocked();
    CheckHasExecutionState(id);
    var effect = new ExecutionStateSetActingUnitEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsExecutionState[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldId = oldIncarnationAndVersion.incarnation.actingUnit;
      oldIncarnationAndVersion.incarnation.actingUnit = newValue.id;

    } else {
      var newIncarnation =
          new ExecutionStateIncarnation(
              newValue.id,
              oldIncarnationAndVersion.incarnation.actingUnitDidAction,
              oldIncarnationAndVersion.incarnation.remainingPreActingUnitComponents,
              oldIncarnationAndVersion.incarnation.remainingPostActingUnitComponents);
      rootIncarnation.incarnationsExecutionState[id] =
          new VersionAndIncarnation<ExecutionStateIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsExecutionStateSetActingUnitEffect.Add(effect);
  }

  public void EffectExecutionStateSetActingUnitDidAction(int id, bool newValue) {
    CheckUnlocked();
    CheckHasExecutionState(id);
    var effect = new ExecutionStateSetActingUnitDidActionEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsExecutionState[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.actingUnitDidAction;
      oldIncarnationAndVersion.incarnation.actingUnitDidAction = newValue;

    } else {
      var newIncarnation =
          new ExecutionStateIncarnation(
              oldIncarnationAndVersion.incarnation.actingUnit,
              newValue,
              oldIncarnationAndVersion.incarnation.remainingPreActingUnitComponents,
              oldIncarnationAndVersion.incarnation.remainingPostActingUnitComponents);
      rootIncarnation.incarnationsExecutionState[id] =
          new VersionAndIncarnation<ExecutionStateIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsExecutionStateSetActingUnitDidActionEffect.Add(effect);
  }

  public void EffectExecutionStateSetRemainingPreActingUnitComponents(int id, IPreActingUCWeakMutBunch newValue) {
    CheckUnlocked();
    CheckHasExecutionState(id);
    var effect = new ExecutionStateSetRemainingPreActingUnitComponentsEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsExecutionState[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldId = oldIncarnationAndVersion.incarnation.remainingPreActingUnitComponents;
      oldIncarnationAndVersion.incarnation.remainingPreActingUnitComponents = newValue.id;

    } else {
      var newIncarnation =
          new ExecutionStateIncarnation(
              oldIncarnationAndVersion.incarnation.actingUnit,
              oldIncarnationAndVersion.incarnation.actingUnitDidAction,
              newValue.id,
              oldIncarnationAndVersion.incarnation.remainingPostActingUnitComponents);
      rootIncarnation.incarnationsExecutionState[id] =
          new VersionAndIncarnation<ExecutionStateIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsExecutionStateSetRemainingPreActingUnitComponentsEffect.Add(effect);
  }

  public void EffectExecutionStateSetRemainingPostActingUnitComponents(int id, IPostActingUCWeakMutBunch newValue) {
    CheckUnlocked();
    CheckHasExecutionState(id);
    var effect = new ExecutionStateSetRemainingPostActingUnitComponentsEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsExecutionState[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldId = oldIncarnationAndVersion.incarnation.remainingPostActingUnitComponents;
      oldIncarnationAndVersion.incarnation.remainingPostActingUnitComponents = newValue.id;

    } else {
      var newIncarnation =
          new ExecutionStateIncarnation(
              oldIncarnationAndVersion.incarnation.actingUnit,
              oldIncarnationAndVersion.incarnation.actingUnitDidAction,
              oldIncarnationAndVersion.incarnation.remainingPreActingUnitComponents,
              newValue.id);
      rootIncarnation.incarnationsExecutionState[id] =
          new VersionAndIncarnation<ExecutionStateIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsExecutionStateSetRemainingPostActingUnitComponentsEffect.Add(effect);
  }
  public IPostActingUCWeakMutBunchIncarnation GetIPostActingUCWeakMutBunchIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsIPostActingUCWeakMutBunch[id].incarnation;
  }
  public bool IPostActingUCWeakMutBunchExists(int id) {
    return rootIncarnation.incarnationsIPostActingUCWeakMutBunch.ContainsKey(id);
  }
  public IPostActingUCWeakMutBunch GetIPostActingUCWeakMutBunch(int id) {
    return new IPostActingUCWeakMutBunch(this, id);
  }
  public List<IPostActingUCWeakMutBunch> AllIPostActingUCWeakMutBunch() {
    List<IPostActingUCWeakMutBunch> result = new List<IPostActingUCWeakMutBunch>(rootIncarnation.incarnationsIPostActingUCWeakMutBunch.Count);
    foreach (var id in rootIncarnation.incarnationsIPostActingUCWeakMutBunch.Keys) {
      result.Add(new IPostActingUCWeakMutBunch(this, id));
    }
    return result;
  }
  public IEnumerator<IPostActingUCWeakMutBunch> EnumAllIPostActingUCWeakMutBunch() {
    foreach (var id in rootIncarnation.incarnationsIPostActingUCWeakMutBunch.Keys) {
      yield return GetIPostActingUCWeakMutBunch(id);
    }
  }
  public void CheckHasIPostActingUCWeakMutBunch(IPostActingUCWeakMutBunch thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasIPostActingUCWeakMutBunch(thing.id);
  }
  public void CheckHasIPostActingUCWeakMutBunch(int id) {
    if (!rootIncarnation.incarnationsIPostActingUCWeakMutBunch.ContainsKey(id)) {
      throw new System.Exception("Invalid IPostActingUCWeakMutBunch: " + id);
    }
  }
  public void AddIPostActingUCWeakMutBunchObserver(int id, IIPostActingUCWeakMutBunchEffectObserver observer) {
    List<IIPostActingUCWeakMutBunchEffectObserver> obsies;
    if (!observersForIPostActingUCWeakMutBunch.TryGetValue(id, out obsies)) {
      obsies = new List<IIPostActingUCWeakMutBunchEffectObserver>();
    }
    obsies.Add(observer);
    observersForIPostActingUCWeakMutBunch[id] = obsies;
  }

  public void RemoveIPostActingUCWeakMutBunchObserver(int id, IIPostActingUCWeakMutBunchEffectObserver observer) {
    if (observersForIPostActingUCWeakMutBunch.ContainsKey(id)) {
      var list = observersForIPostActingUCWeakMutBunch[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForIPostActingUCWeakMutBunch.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public IPostActingUCWeakMutBunch EffectIPostActingUCWeakMutBunchCreate(
      LightningChargedUCWeakMutSet membersLightningChargedUCWeakMutSet,
      TimeCloneAICapabilityUCWeakMutSet membersTimeCloneAICapabilityUCWeakMutSet) {
    CheckUnlocked();
    CheckHasLightningChargedUCWeakMutSet(membersLightningChargedUCWeakMutSet);
    CheckHasTimeCloneAICapabilityUCWeakMutSet(membersTimeCloneAICapabilityUCWeakMutSet);

    var id = NewId();
    var incarnation =
        new IPostActingUCWeakMutBunchIncarnation(
            membersLightningChargedUCWeakMutSet.id,
            membersTimeCloneAICapabilityUCWeakMutSet.id
            );
    EffectInternalCreateIPostActingUCWeakMutBunch(id, rootIncarnation.version, incarnation);
    return new IPostActingUCWeakMutBunch(this, id);
  }
  public void EffectInternalCreateIPostActingUCWeakMutBunch(
      int id,
      int incarnationVersion,
      IPostActingUCWeakMutBunchIncarnation incarnation) {
    CheckUnlocked();
    var effect = new IPostActingUCWeakMutBunchCreateEffect(id);
    rootIncarnation.incarnationsIPostActingUCWeakMutBunch.Add(
        id,
        new VersionAndIncarnation<IPostActingUCWeakMutBunchIncarnation>(
            incarnationVersion,
            incarnation));
    effectsIPostActingUCWeakMutBunchCreateEffect.Add(effect);
  }

  public void EffectIPostActingUCWeakMutBunchDelete(int id) {
    CheckUnlocked();
    var effect = new IPostActingUCWeakMutBunchDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsIPostActingUCWeakMutBunch[id];

    rootIncarnation.incarnationsIPostActingUCWeakMutBunch.Remove(id);
    effectsIPostActingUCWeakMutBunchDeleteEffect.Add(effect);
  }

     
  public int GetIPostActingUCWeakMutBunchHash(int id, int version, IPostActingUCWeakMutBunchIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.membersLightningChargedUCWeakMutSet.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.membersTimeCloneAICapabilityUCWeakMutSet.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastIPostActingUCWeakMutBunchEffects(
      SortedDictionary<int, List<IIPostActingUCWeakMutBunchEffectObserver>> observers) {
    foreach (var effect in effectsIPostActingUCWeakMutBunchDeleteEffect) {
      if (observers.TryGetValue(0, out List<IIPostActingUCWeakMutBunchEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIPostActingUCWeakMutBunchEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIPostActingUCWeakMutBunchEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIPostActingUCWeakMutBunchEffect(effect);
        }
        observersForIPostActingUCWeakMutBunch.Remove(effect.id);
      }
    }
    effectsIPostActingUCWeakMutBunchDeleteEffect.Clear();


    foreach (var effect in effectsIPostActingUCWeakMutBunchCreateEffect) {
      if (observers.TryGetValue(0, out List<IIPostActingUCWeakMutBunchEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIPostActingUCWeakMutBunchEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIPostActingUCWeakMutBunchEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIPostActingUCWeakMutBunchEffect(effect);
        }
      }
    }
    effectsIPostActingUCWeakMutBunchCreateEffect.Clear();
  }
  public IPreActingUCWeakMutBunchIncarnation GetIPreActingUCWeakMutBunchIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsIPreActingUCWeakMutBunch[id].incarnation;
  }
  public bool IPreActingUCWeakMutBunchExists(int id) {
    return rootIncarnation.incarnationsIPreActingUCWeakMutBunch.ContainsKey(id);
  }
  public IPreActingUCWeakMutBunch GetIPreActingUCWeakMutBunch(int id) {
    return new IPreActingUCWeakMutBunch(this, id);
  }
  public List<IPreActingUCWeakMutBunch> AllIPreActingUCWeakMutBunch() {
    List<IPreActingUCWeakMutBunch> result = new List<IPreActingUCWeakMutBunch>(rootIncarnation.incarnationsIPreActingUCWeakMutBunch.Count);
    foreach (var id in rootIncarnation.incarnationsIPreActingUCWeakMutBunch.Keys) {
      result.Add(new IPreActingUCWeakMutBunch(this, id));
    }
    return result;
  }
  public IEnumerator<IPreActingUCWeakMutBunch> EnumAllIPreActingUCWeakMutBunch() {
    foreach (var id in rootIncarnation.incarnationsIPreActingUCWeakMutBunch.Keys) {
      yield return GetIPreActingUCWeakMutBunch(id);
    }
  }
  public void CheckHasIPreActingUCWeakMutBunch(IPreActingUCWeakMutBunch thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasIPreActingUCWeakMutBunch(thing.id);
  }
  public void CheckHasIPreActingUCWeakMutBunch(int id) {
    if (!rootIncarnation.incarnationsIPreActingUCWeakMutBunch.ContainsKey(id)) {
      throw new System.Exception("Invalid IPreActingUCWeakMutBunch: " + id);
    }
  }
  public void AddIPreActingUCWeakMutBunchObserver(int id, IIPreActingUCWeakMutBunchEffectObserver observer) {
    List<IIPreActingUCWeakMutBunchEffectObserver> obsies;
    if (!observersForIPreActingUCWeakMutBunch.TryGetValue(id, out obsies)) {
      obsies = new List<IIPreActingUCWeakMutBunchEffectObserver>();
    }
    obsies.Add(observer);
    observersForIPreActingUCWeakMutBunch[id] = obsies;
  }

  public void RemoveIPreActingUCWeakMutBunchObserver(int id, IIPreActingUCWeakMutBunchEffectObserver observer) {
    if (observersForIPreActingUCWeakMutBunch.ContainsKey(id)) {
      var list = observersForIPreActingUCWeakMutBunch[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForIPreActingUCWeakMutBunch.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public IPreActingUCWeakMutBunch EffectIPreActingUCWeakMutBunchCreate(
      DoomedUCWeakMutSet membersDoomedUCWeakMutSet,
      MiredUCWeakMutSet membersMiredUCWeakMutSet,
      InvincibilityUCWeakMutSet membersInvincibilityUCWeakMutSet,
      DefyingUCWeakMutSet membersDefyingUCWeakMutSet,
      CounteringUCWeakMutSet membersCounteringUCWeakMutSet,
      AttackAICapabilityUCWeakMutSet membersAttackAICapabilityUCWeakMutSet) {
    CheckUnlocked();
    CheckHasDoomedUCWeakMutSet(membersDoomedUCWeakMutSet);
    CheckHasMiredUCWeakMutSet(membersMiredUCWeakMutSet);
    CheckHasInvincibilityUCWeakMutSet(membersInvincibilityUCWeakMutSet);
    CheckHasDefyingUCWeakMutSet(membersDefyingUCWeakMutSet);
    CheckHasCounteringUCWeakMutSet(membersCounteringUCWeakMutSet);
    CheckHasAttackAICapabilityUCWeakMutSet(membersAttackAICapabilityUCWeakMutSet);

    var id = NewId();
    var incarnation =
        new IPreActingUCWeakMutBunchIncarnation(
            membersDoomedUCWeakMutSet.id,
            membersMiredUCWeakMutSet.id,
            membersInvincibilityUCWeakMutSet.id,
            membersDefyingUCWeakMutSet.id,
            membersCounteringUCWeakMutSet.id,
            membersAttackAICapabilityUCWeakMutSet.id
            );
    EffectInternalCreateIPreActingUCWeakMutBunch(id, rootIncarnation.version, incarnation);
    return new IPreActingUCWeakMutBunch(this, id);
  }
  public void EffectInternalCreateIPreActingUCWeakMutBunch(
      int id,
      int incarnationVersion,
      IPreActingUCWeakMutBunchIncarnation incarnation) {
    CheckUnlocked();
    var effect = new IPreActingUCWeakMutBunchCreateEffect(id);
    rootIncarnation.incarnationsIPreActingUCWeakMutBunch.Add(
        id,
        new VersionAndIncarnation<IPreActingUCWeakMutBunchIncarnation>(
            incarnationVersion,
            incarnation));
    effectsIPreActingUCWeakMutBunchCreateEffect.Add(effect);
  }

  public void EffectIPreActingUCWeakMutBunchDelete(int id) {
    CheckUnlocked();
    var effect = new IPreActingUCWeakMutBunchDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsIPreActingUCWeakMutBunch[id];

    rootIncarnation.incarnationsIPreActingUCWeakMutBunch.Remove(id);
    effectsIPreActingUCWeakMutBunchDeleteEffect.Add(effect);
  }

     
  public int GetIPreActingUCWeakMutBunchHash(int id, int version, IPreActingUCWeakMutBunchIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.membersDoomedUCWeakMutSet.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.membersMiredUCWeakMutSet.GetDeterministicHashCode();
    result += id * version * 3 * incarnation.membersInvincibilityUCWeakMutSet.GetDeterministicHashCode();
    result += id * version * 4 * incarnation.membersDefyingUCWeakMutSet.GetDeterministicHashCode();
    result += id * version * 5 * incarnation.membersCounteringUCWeakMutSet.GetDeterministicHashCode();
    result += id * version * 6 * incarnation.membersAttackAICapabilityUCWeakMutSet.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastIPreActingUCWeakMutBunchEffects(
      SortedDictionary<int, List<IIPreActingUCWeakMutBunchEffectObserver>> observers) {
    foreach (var effect in effectsIPreActingUCWeakMutBunchDeleteEffect) {
      if (observers.TryGetValue(0, out List<IIPreActingUCWeakMutBunchEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIPreActingUCWeakMutBunchEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIPreActingUCWeakMutBunchEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIPreActingUCWeakMutBunchEffect(effect);
        }
        observersForIPreActingUCWeakMutBunch.Remove(effect.id);
      }
    }
    effectsIPreActingUCWeakMutBunchDeleteEffect.Clear();


    foreach (var effect in effectsIPreActingUCWeakMutBunchCreateEffect) {
      if (observers.TryGetValue(0, out List<IIPreActingUCWeakMutBunchEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIPreActingUCWeakMutBunchEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIPreActingUCWeakMutBunchEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIPreActingUCWeakMutBunchEffect(effect);
        }
      }
    }
    effectsIPreActingUCWeakMutBunchCreateEffect.Clear();
  }
  public GameIncarnation GetGameIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsGame[id].incarnation;
  }
  public bool GameExists(int id) {
    return rootIncarnation.incarnationsGame.ContainsKey(id);
  }
  public Game GetGame(int id) {
    return new Game(this, id);
  }
  public List<Game> AllGame() {
    List<Game> result = new List<Game>(rootIncarnation.incarnationsGame.Count);
    foreach (var id in rootIncarnation.incarnationsGame.Keys) {
      result.Add(new Game(this, id));
    }
    return result;
  }
  public IEnumerator<Game> EnumAllGame() {
    foreach (var id in rootIncarnation.incarnationsGame.Keys) {
      yield return GetGame(id);
    }
  }
  public void CheckHasGame(Game thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasGame(thing.id);
  }
  public void CheckHasGame(int id) {
    if (!rootIncarnation.incarnationsGame.ContainsKey(id)) {
      throw new System.Exception("Invalid Game: " + id);
    }
  }
  public void AddGameObserver(int id, IGameEffectObserver observer) {
    List<IGameEffectObserver> obsies;
    if (!observersForGame.TryGetValue(id, out obsies)) {
      obsies = new List<IGameEffectObserver>();
    }
    obsies.Add(observer);
    observersForGame[id] = obsies;
  }

  public void RemoveGameObserver(int id, IGameEffectObserver observer) {
    if (observersForGame.ContainsKey(id)) {
      var list = observersForGame[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForGame.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public Game EffectGameCreate(
      Rand rand,
      bool squareLevelsOnly,
      LevelMutSet levels,
      Unit player,
      IGameEventMutList events,
      Level level,
      int time,
      ExecutionState executionState) {
    CheckUnlocked();
    CheckHasRand(rand);
    CheckHasLevelMutSet(levels);
    CheckHasIGameEventMutList(events);
    CheckHasExecutionState(executionState);

    var id = NewId();
    var incarnation =
        new GameIncarnation(
            rand.id,
            squareLevelsOnly,
            levels.id,
            player.id,
            events.id,
            level.id,
            time,
            executionState.id
            );
    EffectInternalCreateGame(id, rootIncarnation.version, incarnation);
    return new Game(this, id);
  }
  public void EffectInternalCreateGame(
      int id,
      int incarnationVersion,
      GameIncarnation incarnation) {
    CheckUnlocked();
    var effect = new GameCreateEffect(id);
    rootIncarnation.incarnationsGame.Add(
        id,
        new VersionAndIncarnation<GameIncarnation>(
            incarnationVersion,
            incarnation));
    effectsGameCreateEffect.Add(effect);
  }

  public void EffectGameDelete(int id) {
    CheckUnlocked();
    var effect = new GameDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsGame[id];

    rootIncarnation.incarnationsGame.Remove(id);
    effectsGameDeleteEffect.Add(effect);
  }

     
  public int GetGameHash(int id, int version, GameIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.rand.GetDeterministicHashCode();
    result += id * version * 2 * incarnation.squareLevelsOnly.GetDeterministicHashCode();
    result += id * version * 3 * incarnation.levels.GetDeterministicHashCode();
    if (!object.ReferenceEquals(incarnation.player, null)) {
      result += id * version * 4 * incarnation.player.GetDeterministicHashCode();
    }
    result += id * version * 5 * incarnation.events.GetDeterministicHashCode();
    if (!object.ReferenceEquals(incarnation.level, null)) {
      result += id * version * 6 * incarnation.level.GetDeterministicHashCode();
    }
    result += id * version * 7 * incarnation.time.GetDeterministicHashCode();
    result += id * version * 8 * incarnation.executionState.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastGameEffects(
      SortedDictionary<int, List<IGameEffectObserver>> observers) {
    foreach (var effect in effectsGameDeleteEffect) {
      if (observers.TryGetValue(0, out List<IGameEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGameEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGameEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGameEffect(effect);
        }
        observersForGame.Remove(effect.id);
      }
    }
    effectsGameDeleteEffect.Clear();


    foreach (var effect in effectsGameSetPlayerEffect) {
      if (observers.TryGetValue(0, out List<IGameEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGameEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGameEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGameEffect(effect);
        }
      }
    }
    effectsGameSetPlayerEffect.Clear();

    foreach (var effect in effectsGameSetLevelEffect) {
      if (observers.TryGetValue(0, out List<IGameEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGameEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGameEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGameEffect(effect);
        }
      }
    }
    effectsGameSetLevelEffect.Clear();

    foreach (var effect in effectsGameSetTimeEffect) {
      if (observers.TryGetValue(0, out List<IGameEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGameEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGameEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGameEffect(effect);
        }
      }
    }
    effectsGameSetTimeEffect.Clear();

    foreach (var effect in effectsGameCreateEffect) {
      if (observers.TryGetValue(0, out List<IGameEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGameEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGameEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGameEffect(effect);
        }
      }
    }
    effectsGameCreateEffect.Clear();
  }

  public void EffectGameSetPlayer(int id, Unit newValue) {
    CheckUnlocked();
    CheckHasGame(id);
    var effect = new GameSetPlayerEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsGame[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldId = oldIncarnationAndVersion.incarnation.player;
      oldIncarnationAndVersion.incarnation.player = newValue.id;

    } else {
      var newIncarnation =
          new GameIncarnation(
              oldIncarnationAndVersion.incarnation.rand,
              oldIncarnationAndVersion.incarnation.squareLevelsOnly,
              oldIncarnationAndVersion.incarnation.levels,
              newValue.id,
              oldIncarnationAndVersion.incarnation.events,
              oldIncarnationAndVersion.incarnation.level,
              oldIncarnationAndVersion.incarnation.time,
              oldIncarnationAndVersion.incarnation.executionState);
      rootIncarnation.incarnationsGame[id] =
          new VersionAndIncarnation<GameIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsGameSetPlayerEffect.Add(effect);
  }

  public void EffectGameSetLevel(int id, Level newValue) {
    CheckUnlocked();
    CheckHasGame(id);
    var effect = new GameSetLevelEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsGame[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldId = oldIncarnationAndVersion.incarnation.level;
      oldIncarnationAndVersion.incarnation.level = newValue.id;

    } else {
      var newIncarnation =
          new GameIncarnation(
              oldIncarnationAndVersion.incarnation.rand,
              oldIncarnationAndVersion.incarnation.squareLevelsOnly,
              oldIncarnationAndVersion.incarnation.levels,
              oldIncarnationAndVersion.incarnation.player,
              oldIncarnationAndVersion.incarnation.events,
              newValue.id,
              oldIncarnationAndVersion.incarnation.time,
              oldIncarnationAndVersion.incarnation.executionState);
      rootIncarnation.incarnationsGame[id] =
          new VersionAndIncarnation<GameIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsGameSetLevelEffect.Add(effect);
  }

  public void EffectGameSetTime(int id, int newValue) {
    CheckUnlocked();
    CheckHasGame(id);
    var effect = new GameSetTimeEffect(id, newValue);
    var oldIncarnationAndVersion = rootIncarnation.incarnationsGame[id];
    if (oldIncarnationAndVersion.version == rootIncarnation.version) {
      var oldValue = oldIncarnationAndVersion.incarnation.time;
      oldIncarnationAndVersion.incarnation.time = newValue;

    } else {
      var newIncarnation =
          new GameIncarnation(
              oldIncarnationAndVersion.incarnation.rand,
              oldIncarnationAndVersion.incarnation.squareLevelsOnly,
              oldIncarnationAndVersion.incarnation.levels,
              oldIncarnationAndVersion.incarnation.player,
              oldIncarnationAndVersion.incarnation.events,
              oldIncarnationAndVersion.incarnation.level,
              newValue,
              oldIncarnationAndVersion.incarnation.executionState);
      rootIncarnation.incarnationsGame[id] =
          new VersionAndIncarnation<GameIncarnation>(
              rootIncarnation.version,
              newIncarnation);
    }

    effectsGameSetTimeEffect.Add(effect);
  }
  public VolcaetusLevelControllerIncarnation GetVolcaetusLevelControllerIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsVolcaetusLevelController[id].incarnation;
  }
  public bool VolcaetusLevelControllerExists(int id) {
    return rootIncarnation.incarnationsVolcaetusLevelController.ContainsKey(id);
  }
  public VolcaetusLevelController GetVolcaetusLevelController(int id) {
    return new VolcaetusLevelController(this, id);
  }
  public List<VolcaetusLevelController> AllVolcaetusLevelController() {
    List<VolcaetusLevelController> result = new List<VolcaetusLevelController>(rootIncarnation.incarnationsVolcaetusLevelController.Count);
    foreach (var id in rootIncarnation.incarnationsVolcaetusLevelController.Keys) {
      result.Add(new VolcaetusLevelController(this, id));
    }
    return result;
  }
  public IEnumerator<VolcaetusLevelController> EnumAllVolcaetusLevelController() {
    foreach (var id in rootIncarnation.incarnationsVolcaetusLevelController.Keys) {
      yield return GetVolcaetusLevelController(id);
    }
  }
  public void CheckHasVolcaetusLevelController(VolcaetusLevelController thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasVolcaetusLevelController(thing.id);
  }
  public void CheckHasVolcaetusLevelController(int id) {
    if (!rootIncarnation.incarnationsVolcaetusLevelController.ContainsKey(id)) {
      throw new System.Exception("Invalid VolcaetusLevelController: " + id);
    }
  }
  public void AddVolcaetusLevelControllerObserver(int id, IVolcaetusLevelControllerEffectObserver observer) {
    List<IVolcaetusLevelControllerEffectObserver> obsies;
    if (!observersForVolcaetusLevelController.TryGetValue(id, out obsies)) {
      obsies = new List<IVolcaetusLevelControllerEffectObserver>();
    }
    obsies.Add(observer);
    observersForVolcaetusLevelController[id] = obsies;
  }

  public void RemoveVolcaetusLevelControllerObserver(int id, IVolcaetusLevelControllerEffectObserver observer) {
    if (observersForVolcaetusLevelController.ContainsKey(id)) {
      var list = observersForVolcaetusLevelController[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForVolcaetusLevelController.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public VolcaetusLevelController EffectVolcaetusLevelControllerCreate(
      Level level) {
    CheckUnlocked();
    CheckHasLevel(level);

    var id = NewId();
    var incarnation =
        new VolcaetusLevelControllerIncarnation(
            level.id
            );
    EffectInternalCreateVolcaetusLevelController(id, rootIncarnation.version, incarnation);
    return new VolcaetusLevelController(this, id);
  }
  public void EffectInternalCreateVolcaetusLevelController(
      int id,
      int incarnationVersion,
      VolcaetusLevelControllerIncarnation incarnation) {
    CheckUnlocked();
    var effect = new VolcaetusLevelControllerCreateEffect(id);
    rootIncarnation.incarnationsVolcaetusLevelController.Add(
        id,
        new VersionAndIncarnation<VolcaetusLevelControllerIncarnation>(
            incarnationVersion,
            incarnation));
    effectsVolcaetusLevelControllerCreateEffect.Add(effect);
  }

  public void EffectVolcaetusLevelControllerDelete(int id) {
    CheckUnlocked();
    var effect = new VolcaetusLevelControllerDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsVolcaetusLevelController[id];

    rootIncarnation.incarnationsVolcaetusLevelController.Remove(id);
    effectsVolcaetusLevelControllerDeleteEffect.Add(effect);
  }

     
  public int GetVolcaetusLevelControllerHash(int id, int version, VolcaetusLevelControllerIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.level.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastVolcaetusLevelControllerEffects(
      SortedDictionary<int, List<IVolcaetusLevelControllerEffectObserver>> observers) {
    foreach (var effect in effectsVolcaetusLevelControllerDeleteEffect) {
      if (observers.TryGetValue(0, out List<IVolcaetusLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnVolcaetusLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IVolcaetusLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnVolcaetusLevelControllerEffect(effect);
        }
        observersForVolcaetusLevelController.Remove(effect.id);
      }
    }
    effectsVolcaetusLevelControllerDeleteEffect.Clear();


    foreach (var effect in effectsVolcaetusLevelControllerCreateEffect) {
      if (observers.TryGetValue(0, out List<IVolcaetusLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnVolcaetusLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IVolcaetusLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnVolcaetusLevelControllerEffect(effect);
        }
      }
    }
    effectsVolcaetusLevelControllerCreateEffect.Clear();
  }
  public Tutorial2LevelControllerIncarnation GetTutorial2LevelControllerIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsTutorial2LevelController[id].incarnation;
  }
  public bool Tutorial2LevelControllerExists(int id) {
    return rootIncarnation.incarnationsTutorial2LevelController.ContainsKey(id);
  }
  public Tutorial2LevelController GetTutorial2LevelController(int id) {
    return new Tutorial2LevelController(this, id);
  }
  public List<Tutorial2LevelController> AllTutorial2LevelController() {
    List<Tutorial2LevelController> result = new List<Tutorial2LevelController>(rootIncarnation.incarnationsTutorial2LevelController.Count);
    foreach (var id in rootIncarnation.incarnationsTutorial2LevelController.Keys) {
      result.Add(new Tutorial2LevelController(this, id));
    }
    return result;
  }
  public IEnumerator<Tutorial2LevelController> EnumAllTutorial2LevelController() {
    foreach (var id in rootIncarnation.incarnationsTutorial2LevelController.Keys) {
      yield return GetTutorial2LevelController(id);
    }
  }
  public void CheckHasTutorial2LevelController(Tutorial2LevelController thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasTutorial2LevelController(thing.id);
  }
  public void CheckHasTutorial2LevelController(int id) {
    if (!rootIncarnation.incarnationsTutorial2LevelController.ContainsKey(id)) {
      throw new System.Exception("Invalid Tutorial2LevelController: " + id);
    }
  }
  public void AddTutorial2LevelControllerObserver(int id, ITutorial2LevelControllerEffectObserver observer) {
    List<ITutorial2LevelControllerEffectObserver> obsies;
    if (!observersForTutorial2LevelController.TryGetValue(id, out obsies)) {
      obsies = new List<ITutorial2LevelControllerEffectObserver>();
    }
    obsies.Add(observer);
    observersForTutorial2LevelController[id] = obsies;
  }

  public void RemoveTutorial2LevelControllerObserver(int id, ITutorial2LevelControllerEffectObserver observer) {
    if (observersForTutorial2LevelController.ContainsKey(id)) {
      var list = observersForTutorial2LevelController[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForTutorial2LevelController.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public Tutorial2LevelController EffectTutorial2LevelControllerCreate(
      Level level) {
    CheckUnlocked();
    CheckHasLevel(level);

    var id = NewId();
    var incarnation =
        new Tutorial2LevelControllerIncarnation(
            level.id
            );
    EffectInternalCreateTutorial2LevelController(id, rootIncarnation.version, incarnation);
    return new Tutorial2LevelController(this, id);
  }
  public void EffectInternalCreateTutorial2LevelController(
      int id,
      int incarnationVersion,
      Tutorial2LevelControllerIncarnation incarnation) {
    CheckUnlocked();
    var effect = new Tutorial2LevelControllerCreateEffect(id);
    rootIncarnation.incarnationsTutorial2LevelController.Add(
        id,
        new VersionAndIncarnation<Tutorial2LevelControllerIncarnation>(
            incarnationVersion,
            incarnation));
    effectsTutorial2LevelControllerCreateEffect.Add(effect);
  }

  public void EffectTutorial2LevelControllerDelete(int id) {
    CheckUnlocked();
    var effect = new Tutorial2LevelControllerDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsTutorial2LevelController[id];

    rootIncarnation.incarnationsTutorial2LevelController.Remove(id);
    effectsTutorial2LevelControllerDeleteEffect.Add(effect);
  }

     
  public int GetTutorial2LevelControllerHash(int id, int version, Tutorial2LevelControllerIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.level.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastTutorial2LevelControllerEffects(
      SortedDictionary<int, List<ITutorial2LevelControllerEffectObserver>> observers) {
    foreach (var effect in effectsTutorial2LevelControllerDeleteEffect) {
      if (observers.TryGetValue(0, out List<ITutorial2LevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTutorial2LevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITutorial2LevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTutorial2LevelControllerEffect(effect);
        }
        observersForTutorial2LevelController.Remove(effect.id);
      }
    }
    effectsTutorial2LevelControllerDeleteEffect.Clear();


    foreach (var effect in effectsTutorial2LevelControllerCreateEffect) {
      if (observers.TryGetValue(0, out List<ITutorial2LevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTutorial2LevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITutorial2LevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTutorial2LevelControllerEffect(effect);
        }
      }
    }
    effectsTutorial2LevelControllerCreateEffect.Clear();
  }
  public Tutorial1LevelControllerIncarnation GetTutorial1LevelControllerIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsTutorial1LevelController[id].incarnation;
  }
  public bool Tutorial1LevelControllerExists(int id) {
    return rootIncarnation.incarnationsTutorial1LevelController.ContainsKey(id);
  }
  public Tutorial1LevelController GetTutorial1LevelController(int id) {
    return new Tutorial1LevelController(this, id);
  }
  public List<Tutorial1LevelController> AllTutorial1LevelController() {
    List<Tutorial1LevelController> result = new List<Tutorial1LevelController>(rootIncarnation.incarnationsTutorial1LevelController.Count);
    foreach (var id in rootIncarnation.incarnationsTutorial1LevelController.Keys) {
      result.Add(new Tutorial1LevelController(this, id));
    }
    return result;
  }
  public IEnumerator<Tutorial1LevelController> EnumAllTutorial1LevelController() {
    foreach (var id in rootIncarnation.incarnationsTutorial1LevelController.Keys) {
      yield return GetTutorial1LevelController(id);
    }
  }
  public void CheckHasTutorial1LevelController(Tutorial1LevelController thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasTutorial1LevelController(thing.id);
  }
  public void CheckHasTutorial1LevelController(int id) {
    if (!rootIncarnation.incarnationsTutorial1LevelController.ContainsKey(id)) {
      throw new System.Exception("Invalid Tutorial1LevelController: " + id);
    }
  }
  public void AddTutorial1LevelControllerObserver(int id, ITutorial1LevelControllerEffectObserver observer) {
    List<ITutorial1LevelControllerEffectObserver> obsies;
    if (!observersForTutorial1LevelController.TryGetValue(id, out obsies)) {
      obsies = new List<ITutorial1LevelControllerEffectObserver>();
    }
    obsies.Add(observer);
    observersForTutorial1LevelController[id] = obsies;
  }

  public void RemoveTutorial1LevelControllerObserver(int id, ITutorial1LevelControllerEffectObserver observer) {
    if (observersForTutorial1LevelController.ContainsKey(id)) {
      var list = observersForTutorial1LevelController[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForTutorial1LevelController.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public Tutorial1LevelController EffectTutorial1LevelControllerCreate(
      Level level) {
    CheckUnlocked();
    CheckHasLevel(level);

    var id = NewId();
    var incarnation =
        new Tutorial1LevelControllerIncarnation(
            level.id
            );
    EffectInternalCreateTutorial1LevelController(id, rootIncarnation.version, incarnation);
    return new Tutorial1LevelController(this, id);
  }
  public void EffectInternalCreateTutorial1LevelController(
      int id,
      int incarnationVersion,
      Tutorial1LevelControllerIncarnation incarnation) {
    CheckUnlocked();
    var effect = new Tutorial1LevelControllerCreateEffect(id);
    rootIncarnation.incarnationsTutorial1LevelController.Add(
        id,
        new VersionAndIncarnation<Tutorial1LevelControllerIncarnation>(
            incarnationVersion,
            incarnation));
    effectsTutorial1LevelControllerCreateEffect.Add(effect);
  }

  public void EffectTutorial1LevelControllerDelete(int id) {
    CheckUnlocked();
    var effect = new Tutorial1LevelControllerDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsTutorial1LevelController[id];

    rootIncarnation.incarnationsTutorial1LevelController.Remove(id);
    effectsTutorial1LevelControllerDeleteEffect.Add(effect);
  }

     
  public int GetTutorial1LevelControllerHash(int id, int version, Tutorial1LevelControllerIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.level.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastTutorial1LevelControllerEffects(
      SortedDictionary<int, List<ITutorial1LevelControllerEffectObserver>> observers) {
    foreach (var effect in effectsTutorial1LevelControllerDeleteEffect) {
      if (observers.TryGetValue(0, out List<ITutorial1LevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTutorial1LevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITutorial1LevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTutorial1LevelControllerEffect(effect);
        }
        observersForTutorial1LevelController.Remove(effect.id);
      }
    }
    effectsTutorial1LevelControllerDeleteEffect.Clear();


    foreach (var effect in effectsTutorial1LevelControllerCreateEffect) {
      if (observers.TryGetValue(0, out List<ITutorial1LevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTutorial1LevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITutorial1LevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTutorial1LevelControllerEffect(effect);
        }
      }
    }
    effectsTutorial1LevelControllerCreateEffect.Clear();
  }
  public RetreatLevelControllerIncarnation GetRetreatLevelControllerIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsRetreatLevelController[id].incarnation;
  }
  public bool RetreatLevelControllerExists(int id) {
    return rootIncarnation.incarnationsRetreatLevelController.ContainsKey(id);
  }
  public RetreatLevelController GetRetreatLevelController(int id) {
    return new RetreatLevelController(this, id);
  }
  public List<RetreatLevelController> AllRetreatLevelController() {
    List<RetreatLevelController> result = new List<RetreatLevelController>(rootIncarnation.incarnationsRetreatLevelController.Count);
    foreach (var id in rootIncarnation.incarnationsRetreatLevelController.Keys) {
      result.Add(new RetreatLevelController(this, id));
    }
    return result;
  }
  public IEnumerator<RetreatLevelController> EnumAllRetreatLevelController() {
    foreach (var id in rootIncarnation.incarnationsRetreatLevelController.Keys) {
      yield return GetRetreatLevelController(id);
    }
  }
  public void CheckHasRetreatLevelController(RetreatLevelController thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasRetreatLevelController(thing.id);
  }
  public void CheckHasRetreatLevelController(int id) {
    if (!rootIncarnation.incarnationsRetreatLevelController.ContainsKey(id)) {
      throw new System.Exception("Invalid RetreatLevelController: " + id);
    }
  }
  public void AddRetreatLevelControllerObserver(int id, IRetreatLevelControllerEffectObserver observer) {
    List<IRetreatLevelControllerEffectObserver> obsies;
    if (!observersForRetreatLevelController.TryGetValue(id, out obsies)) {
      obsies = new List<IRetreatLevelControllerEffectObserver>();
    }
    obsies.Add(observer);
    observersForRetreatLevelController[id] = obsies;
  }

  public void RemoveRetreatLevelControllerObserver(int id, IRetreatLevelControllerEffectObserver observer) {
    if (observersForRetreatLevelController.ContainsKey(id)) {
      var list = observersForRetreatLevelController[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForRetreatLevelController.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public RetreatLevelController EffectRetreatLevelControllerCreate(
      Level level) {
    CheckUnlocked();
    CheckHasLevel(level);

    var id = NewId();
    var incarnation =
        new RetreatLevelControllerIncarnation(
            level.id
            );
    EffectInternalCreateRetreatLevelController(id, rootIncarnation.version, incarnation);
    return new RetreatLevelController(this, id);
  }
  public void EffectInternalCreateRetreatLevelController(
      int id,
      int incarnationVersion,
      RetreatLevelControllerIncarnation incarnation) {
    CheckUnlocked();
    var effect = new RetreatLevelControllerCreateEffect(id);
    rootIncarnation.incarnationsRetreatLevelController.Add(
        id,
        new VersionAndIncarnation<RetreatLevelControllerIncarnation>(
            incarnationVersion,
            incarnation));
    effectsRetreatLevelControllerCreateEffect.Add(effect);
  }

  public void EffectRetreatLevelControllerDelete(int id) {
    CheckUnlocked();
    var effect = new RetreatLevelControllerDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsRetreatLevelController[id];

    rootIncarnation.incarnationsRetreatLevelController.Remove(id);
    effectsRetreatLevelControllerDeleteEffect.Add(effect);
  }

     
  public int GetRetreatLevelControllerHash(int id, int version, RetreatLevelControllerIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.level.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastRetreatLevelControllerEffects(
      SortedDictionary<int, List<IRetreatLevelControllerEffectObserver>> observers) {
    foreach (var effect in effectsRetreatLevelControllerDeleteEffect) {
      if (observers.TryGetValue(0, out List<IRetreatLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRetreatLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRetreatLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRetreatLevelControllerEffect(effect);
        }
        observersForRetreatLevelController.Remove(effect.id);
      }
    }
    effectsRetreatLevelControllerDeleteEffect.Clear();


    foreach (var effect in effectsRetreatLevelControllerCreateEffect) {
      if (observers.TryGetValue(0, out List<IRetreatLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRetreatLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRetreatLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRetreatLevelControllerEffect(effect);
        }
      }
    }
    effectsRetreatLevelControllerCreateEffect.Clear();
  }
  public SotaventoLevelControllerIncarnation GetSotaventoLevelControllerIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsSotaventoLevelController[id].incarnation;
  }
  public bool SotaventoLevelControllerExists(int id) {
    return rootIncarnation.incarnationsSotaventoLevelController.ContainsKey(id);
  }
  public SotaventoLevelController GetSotaventoLevelController(int id) {
    return new SotaventoLevelController(this, id);
  }
  public List<SotaventoLevelController> AllSotaventoLevelController() {
    List<SotaventoLevelController> result = new List<SotaventoLevelController>(rootIncarnation.incarnationsSotaventoLevelController.Count);
    foreach (var id in rootIncarnation.incarnationsSotaventoLevelController.Keys) {
      result.Add(new SotaventoLevelController(this, id));
    }
    return result;
  }
  public IEnumerator<SotaventoLevelController> EnumAllSotaventoLevelController() {
    foreach (var id in rootIncarnation.incarnationsSotaventoLevelController.Keys) {
      yield return GetSotaventoLevelController(id);
    }
  }
  public void CheckHasSotaventoLevelController(SotaventoLevelController thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasSotaventoLevelController(thing.id);
  }
  public void CheckHasSotaventoLevelController(int id) {
    if (!rootIncarnation.incarnationsSotaventoLevelController.ContainsKey(id)) {
      throw new System.Exception("Invalid SotaventoLevelController: " + id);
    }
  }
  public void AddSotaventoLevelControllerObserver(int id, ISotaventoLevelControllerEffectObserver observer) {
    List<ISotaventoLevelControllerEffectObserver> obsies;
    if (!observersForSotaventoLevelController.TryGetValue(id, out obsies)) {
      obsies = new List<ISotaventoLevelControllerEffectObserver>();
    }
    obsies.Add(observer);
    observersForSotaventoLevelController[id] = obsies;
  }

  public void RemoveSotaventoLevelControllerObserver(int id, ISotaventoLevelControllerEffectObserver observer) {
    if (observersForSotaventoLevelController.ContainsKey(id)) {
      var list = observersForSotaventoLevelController[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForSotaventoLevelController.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public SotaventoLevelController EffectSotaventoLevelControllerCreate(
      Level level) {
    CheckUnlocked();
    CheckHasLevel(level);

    var id = NewId();
    var incarnation =
        new SotaventoLevelControllerIncarnation(
            level.id
            );
    EffectInternalCreateSotaventoLevelController(id, rootIncarnation.version, incarnation);
    return new SotaventoLevelController(this, id);
  }
  public void EffectInternalCreateSotaventoLevelController(
      int id,
      int incarnationVersion,
      SotaventoLevelControllerIncarnation incarnation) {
    CheckUnlocked();
    var effect = new SotaventoLevelControllerCreateEffect(id);
    rootIncarnation.incarnationsSotaventoLevelController.Add(
        id,
        new VersionAndIncarnation<SotaventoLevelControllerIncarnation>(
            incarnationVersion,
            incarnation));
    effectsSotaventoLevelControllerCreateEffect.Add(effect);
  }

  public void EffectSotaventoLevelControllerDelete(int id) {
    CheckUnlocked();
    var effect = new SotaventoLevelControllerDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsSotaventoLevelController[id];

    rootIncarnation.incarnationsSotaventoLevelController.Remove(id);
    effectsSotaventoLevelControllerDeleteEffect.Add(effect);
  }

     
  public int GetSotaventoLevelControllerHash(int id, int version, SotaventoLevelControllerIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.level.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastSotaventoLevelControllerEffects(
      SortedDictionary<int, List<ISotaventoLevelControllerEffectObserver>> observers) {
    foreach (var effect in effectsSotaventoLevelControllerDeleteEffect) {
      if (observers.TryGetValue(0, out List<ISotaventoLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSotaventoLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISotaventoLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSotaventoLevelControllerEffect(effect);
        }
        observersForSotaventoLevelController.Remove(effect.id);
      }
    }
    effectsSotaventoLevelControllerDeleteEffect.Clear();


    foreach (var effect in effectsSotaventoLevelControllerCreateEffect) {
      if (observers.TryGetValue(0, out List<ISotaventoLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSotaventoLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISotaventoLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSotaventoLevelControllerEffect(effect);
        }
      }
    }
    effectsSotaventoLevelControllerCreateEffect.Clear();
  }
  public NestLevelControllerIncarnation GetNestLevelControllerIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsNestLevelController[id].incarnation;
  }
  public bool NestLevelControllerExists(int id) {
    return rootIncarnation.incarnationsNestLevelController.ContainsKey(id);
  }
  public NestLevelController GetNestLevelController(int id) {
    return new NestLevelController(this, id);
  }
  public List<NestLevelController> AllNestLevelController() {
    List<NestLevelController> result = new List<NestLevelController>(rootIncarnation.incarnationsNestLevelController.Count);
    foreach (var id in rootIncarnation.incarnationsNestLevelController.Keys) {
      result.Add(new NestLevelController(this, id));
    }
    return result;
  }
  public IEnumerator<NestLevelController> EnumAllNestLevelController() {
    foreach (var id in rootIncarnation.incarnationsNestLevelController.Keys) {
      yield return GetNestLevelController(id);
    }
  }
  public void CheckHasNestLevelController(NestLevelController thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasNestLevelController(thing.id);
  }
  public void CheckHasNestLevelController(int id) {
    if (!rootIncarnation.incarnationsNestLevelController.ContainsKey(id)) {
      throw new System.Exception("Invalid NestLevelController: " + id);
    }
  }
  public void AddNestLevelControllerObserver(int id, INestLevelControllerEffectObserver observer) {
    List<INestLevelControllerEffectObserver> obsies;
    if (!observersForNestLevelController.TryGetValue(id, out obsies)) {
      obsies = new List<INestLevelControllerEffectObserver>();
    }
    obsies.Add(observer);
    observersForNestLevelController[id] = obsies;
  }

  public void RemoveNestLevelControllerObserver(int id, INestLevelControllerEffectObserver observer) {
    if (observersForNestLevelController.ContainsKey(id)) {
      var list = observersForNestLevelController[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForNestLevelController.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public NestLevelController EffectNestLevelControllerCreate(
      Level level) {
    CheckUnlocked();
    CheckHasLevel(level);

    var id = NewId();
    var incarnation =
        new NestLevelControllerIncarnation(
            level.id
            );
    EffectInternalCreateNestLevelController(id, rootIncarnation.version, incarnation);
    return new NestLevelController(this, id);
  }
  public void EffectInternalCreateNestLevelController(
      int id,
      int incarnationVersion,
      NestLevelControllerIncarnation incarnation) {
    CheckUnlocked();
    var effect = new NestLevelControllerCreateEffect(id);
    rootIncarnation.incarnationsNestLevelController.Add(
        id,
        new VersionAndIncarnation<NestLevelControllerIncarnation>(
            incarnationVersion,
            incarnation));
    effectsNestLevelControllerCreateEffect.Add(effect);
  }

  public void EffectNestLevelControllerDelete(int id) {
    CheckUnlocked();
    var effect = new NestLevelControllerDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsNestLevelController[id];

    rootIncarnation.incarnationsNestLevelController.Remove(id);
    effectsNestLevelControllerDeleteEffect.Add(effect);
  }

     
  public int GetNestLevelControllerHash(int id, int version, NestLevelControllerIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.level.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastNestLevelControllerEffects(
      SortedDictionary<int, List<INestLevelControllerEffectObserver>> observers) {
    foreach (var effect in effectsNestLevelControllerDeleteEffect) {
      if (observers.TryGetValue(0, out List<INestLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnNestLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<INestLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnNestLevelControllerEffect(effect);
        }
        observersForNestLevelController.Remove(effect.id);
      }
    }
    effectsNestLevelControllerDeleteEffect.Clear();


    foreach (var effect in effectsNestLevelControllerCreateEffect) {
      if (observers.TryGetValue(0, out List<INestLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnNestLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<INestLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnNestLevelControllerEffect(effect);
        }
      }
    }
    effectsNestLevelControllerCreateEffect.Clear();
  }
  public LakeLevelControllerIncarnation GetLakeLevelControllerIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsLakeLevelController[id].incarnation;
  }
  public bool LakeLevelControllerExists(int id) {
    return rootIncarnation.incarnationsLakeLevelController.ContainsKey(id);
  }
  public LakeLevelController GetLakeLevelController(int id) {
    return new LakeLevelController(this, id);
  }
  public List<LakeLevelController> AllLakeLevelController() {
    List<LakeLevelController> result = new List<LakeLevelController>(rootIncarnation.incarnationsLakeLevelController.Count);
    foreach (var id in rootIncarnation.incarnationsLakeLevelController.Keys) {
      result.Add(new LakeLevelController(this, id));
    }
    return result;
  }
  public IEnumerator<LakeLevelController> EnumAllLakeLevelController() {
    foreach (var id in rootIncarnation.incarnationsLakeLevelController.Keys) {
      yield return GetLakeLevelController(id);
    }
  }
  public void CheckHasLakeLevelController(LakeLevelController thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasLakeLevelController(thing.id);
  }
  public void CheckHasLakeLevelController(int id) {
    if (!rootIncarnation.incarnationsLakeLevelController.ContainsKey(id)) {
      throw new System.Exception("Invalid LakeLevelController: " + id);
    }
  }
  public void AddLakeLevelControllerObserver(int id, ILakeLevelControllerEffectObserver observer) {
    List<ILakeLevelControllerEffectObserver> obsies;
    if (!observersForLakeLevelController.TryGetValue(id, out obsies)) {
      obsies = new List<ILakeLevelControllerEffectObserver>();
    }
    obsies.Add(observer);
    observersForLakeLevelController[id] = obsies;
  }

  public void RemoveLakeLevelControllerObserver(int id, ILakeLevelControllerEffectObserver observer) {
    if (observersForLakeLevelController.ContainsKey(id)) {
      var list = observersForLakeLevelController[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForLakeLevelController.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public LakeLevelController EffectLakeLevelControllerCreate(
      Level level) {
    CheckUnlocked();
    CheckHasLevel(level);

    var id = NewId();
    var incarnation =
        new LakeLevelControllerIncarnation(
            level.id
            );
    EffectInternalCreateLakeLevelController(id, rootIncarnation.version, incarnation);
    return new LakeLevelController(this, id);
  }
  public void EffectInternalCreateLakeLevelController(
      int id,
      int incarnationVersion,
      LakeLevelControllerIncarnation incarnation) {
    CheckUnlocked();
    var effect = new LakeLevelControllerCreateEffect(id);
    rootIncarnation.incarnationsLakeLevelController.Add(
        id,
        new VersionAndIncarnation<LakeLevelControllerIncarnation>(
            incarnationVersion,
            incarnation));
    effectsLakeLevelControllerCreateEffect.Add(effect);
  }

  public void EffectLakeLevelControllerDelete(int id) {
    CheckUnlocked();
    var effect = new LakeLevelControllerDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsLakeLevelController[id];

    rootIncarnation.incarnationsLakeLevelController.Remove(id);
    effectsLakeLevelControllerDeleteEffect.Add(effect);
  }

     
  public int GetLakeLevelControllerHash(int id, int version, LakeLevelControllerIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.level.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastLakeLevelControllerEffects(
      SortedDictionary<int, List<ILakeLevelControllerEffectObserver>> observers) {
    foreach (var effect in effectsLakeLevelControllerDeleteEffect) {
      if (observers.TryGetValue(0, out List<ILakeLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLakeLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILakeLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLakeLevelControllerEffect(effect);
        }
        observersForLakeLevelController.Remove(effect.id);
      }
    }
    effectsLakeLevelControllerDeleteEffect.Clear();


    foreach (var effect in effectsLakeLevelControllerCreateEffect) {
      if (observers.TryGetValue(0, out List<ILakeLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLakeLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILakeLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLakeLevelControllerEffect(effect);
        }
      }
    }
    effectsLakeLevelControllerCreateEffect.Clear();
  }
  public EmberDeepLevelLinkerTTCIncarnation GetEmberDeepLevelLinkerTTCIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsEmberDeepLevelLinkerTTC[id].incarnation;
  }
  public bool EmberDeepLevelLinkerTTCExists(int id) {
    return rootIncarnation.incarnationsEmberDeepLevelLinkerTTC.ContainsKey(id);
  }
  public EmberDeepLevelLinkerTTC GetEmberDeepLevelLinkerTTC(int id) {
    return new EmberDeepLevelLinkerTTC(this, id);
  }
  public List<EmberDeepLevelLinkerTTC> AllEmberDeepLevelLinkerTTC() {
    List<EmberDeepLevelLinkerTTC> result = new List<EmberDeepLevelLinkerTTC>(rootIncarnation.incarnationsEmberDeepLevelLinkerTTC.Count);
    foreach (var id in rootIncarnation.incarnationsEmberDeepLevelLinkerTTC.Keys) {
      result.Add(new EmberDeepLevelLinkerTTC(this, id));
    }
    return result;
  }
  public IEnumerator<EmberDeepLevelLinkerTTC> EnumAllEmberDeepLevelLinkerTTC() {
    foreach (var id in rootIncarnation.incarnationsEmberDeepLevelLinkerTTC.Keys) {
      yield return GetEmberDeepLevelLinkerTTC(id);
    }
  }
  public void CheckHasEmberDeepLevelLinkerTTC(EmberDeepLevelLinkerTTC thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasEmberDeepLevelLinkerTTC(thing.id);
  }
  public void CheckHasEmberDeepLevelLinkerTTC(int id) {
    if (!rootIncarnation.incarnationsEmberDeepLevelLinkerTTC.ContainsKey(id)) {
      throw new System.Exception("Invalid EmberDeepLevelLinkerTTC: " + id);
    }
  }
  public void AddEmberDeepLevelLinkerTTCObserver(int id, IEmberDeepLevelLinkerTTCEffectObserver observer) {
    List<IEmberDeepLevelLinkerTTCEffectObserver> obsies;
    if (!observersForEmberDeepLevelLinkerTTC.TryGetValue(id, out obsies)) {
      obsies = new List<IEmberDeepLevelLinkerTTCEffectObserver>();
    }
    obsies.Add(observer);
    observersForEmberDeepLevelLinkerTTC[id] = obsies;
  }

  public void RemoveEmberDeepLevelLinkerTTCObserver(int id, IEmberDeepLevelLinkerTTCEffectObserver observer) {
    if (observersForEmberDeepLevelLinkerTTC.ContainsKey(id)) {
      var list = observersForEmberDeepLevelLinkerTTC[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForEmberDeepLevelLinkerTTC.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public EmberDeepLevelLinkerTTC EffectEmberDeepLevelLinkerTTCCreate(
      int nextLevelDepth) {
    CheckUnlocked();

    var id = NewId();
    var incarnation =
        new EmberDeepLevelLinkerTTCIncarnation(
            nextLevelDepth
            );
    EffectInternalCreateEmberDeepLevelLinkerTTC(id, rootIncarnation.version, incarnation);
    return new EmberDeepLevelLinkerTTC(this, id);
  }
  public void EffectInternalCreateEmberDeepLevelLinkerTTC(
      int id,
      int incarnationVersion,
      EmberDeepLevelLinkerTTCIncarnation incarnation) {
    CheckUnlocked();
    var effect = new EmberDeepLevelLinkerTTCCreateEffect(id);
    rootIncarnation.incarnationsEmberDeepLevelLinkerTTC.Add(
        id,
        new VersionAndIncarnation<EmberDeepLevelLinkerTTCIncarnation>(
            incarnationVersion,
            incarnation));
    effectsEmberDeepLevelLinkerTTCCreateEffect.Add(effect);
  }

  public void EffectEmberDeepLevelLinkerTTCDelete(int id) {
    CheckUnlocked();
    var effect = new EmberDeepLevelLinkerTTCDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsEmberDeepLevelLinkerTTC[id];

    rootIncarnation.incarnationsEmberDeepLevelLinkerTTC.Remove(id);
    effectsEmberDeepLevelLinkerTTCDeleteEffect.Add(effect);
  }

     
  public int GetEmberDeepLevelLinkerTTCHash(int id, int version, EmberDeepLevelLinkerTTCIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.nextLevelDepth.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastEmberDeepLevelLinkerTTCEffects(
      SortedDictionary<int, List<IEmberDeepLevelLinkerTTCEffectObserver>> observers) {
    foreach (var effect in effectsEmberDeepLevelLinkerTTCDeleteEffect) {
      if (observers.TryGetValue(0, out List<IEmberDeepLevelLinkerTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnEmberDeepLevelLinkerTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IEmberDeepLevelLinkerTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnEmberDeepLevelLinkerTTCEffect(effect);
        }
        observersForEmberDeepLevelLinkerTTC.Remove(effect.id);
      }
    }
    effectsEmberDeepLevelLinkerTTCDeleteEffect.Clear();


    foreach (var effect in effectsEmberDeepLevelLinkerTTCCreateEffect) {
      if (observers.TryGetValue(0, out List<IEmberDeepLevelLinkerTTCEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnEmberDeepLevelLinkerTTCEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IEmberDeepLevelLinkerTTCEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnEmberDeepLevelLinkerTTCEffect(effect);
        }
      }
    }
    effectsEmberDeepLevelLinkerTTCCreateEffect.Clear();
  }
  public DirtRoadLevelControllerIncarnation GetDirtRoadLevelControllerIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsDirtRoadLevelController[id].incarnation;
  }
  public bool DirtRoadLevelControllerExists(int id) {
    return rootIncarnation.incarnationsDirtRoadLevelController.ContainsKey(id);
  }
  public DirtRoadLevelController GetDirtRoadLevelController(int id) {
    return new DirtRoadLevelController(this, id);
  }
  public List<DirtRoadLevelController> AllDirtRoadLevelController() {
    List<DirtRoadLevelController> result = new List<DirtRoadLevelController>(rootIncarnation.incarnationsDirtRoadLevelController.Count);
    foreach (var id in rootIncarnation.incarnationsDirtRoadLevelController.Keys) {
      result.Add(new DirtRoadLevelController(this, id));
    }
    return result;
  }
  public IEnumerator<DirtRoadLevelController> EnumAllDirtRoadLevelController() {
    foreach (var id in rootIncarnation.incarnationsDirtRoadLevelController.Keys) {
      yield return GetDirtRoadLevelController(id);
    }
  }
  public void CheckHasDirtRoadLevelController(DirtRoadLevelController thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasDirtRoadLevelController(thing.id);
  }
  public void CheckHasDirtRoadLevelController(int id) {
    if (!rootIncarnation.incarnationsDirtRoadLevelController.ContainsKey(id)) {
      throw new System.Exception("Invalid DirtRoadLevelController: " + id);
    }
  }
  public void AddDirtRoadLevelControllerObserver(int id, IDirtRoadLevelControllerEffectObserver observer) {
    List<IDirtRoadLevelControllerEffectObserver> obsies;
    if (!observersForDirtRoadLevelController.TryGetValue(id, out obsies)) {
      obsies = new List<IDirtRoadLevelControllerEffectObserver>();
    }
    obsies.Add(observer);
    observersForDirtRoadLevelController[id] = obsies;
  }

  public void RemoveDirtRoadLevelControllerObserver(int id, IDirtRoadLevelControllerEffectObserver observer) {
    if (observersForDirtRoadLevelController.ContainsKey(id)) {
      var list = observersForDirtRoadLevelController[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForDirtRoadLevelController.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public DirtRoadLevelController EffectDirtRoadLevelControllerCreate(
      Level level) {
    CheckUnlocked();
    CheckHasLevel(level);

    var id = NewId();
    var incarnation =
        new DirtRoadLevelControllerIncarnation(
            level.id
            );
    EffectInternalCreateDirtRoadLevelController(id, rootIncarnation.version, incarnation);
    return new DirtRoadLevelController(this, id);
  }
  public void EffectInternalCreateDirtRoadLevelController(
      int id,
      int incarnationVersion,
      DirtRoadLevelControllerIncarnation incarnation) {
    CheckUnlocked();
    var effect = new DirtRoadLevelControllerCreateEffect(id);
    rootIncarnation.incarnationsDirtRoadLevelController.Add(
        id,
        new VersionAndIncarnation<DirtRoadLevelControllerIncarnation>(
            incarnationVersion,
            incarnation));
    effectsDirtRoadLevelControllerCreateEffect.Add(effect);
  }

  public void EffectDirtRoadLevelControllerDelete(int id) {
    CheckUnlocked();
    var effect = new DirtRoadLevelControllerDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsDirtRoadLevelController[id];

    rootIncarnation.incarnationsDirtRoadLevelController.Remove(id);
    effectsDirtRoadLevelControllerDeleteEffect.Add(effect);
  }

     
  public int GetDirtRoadLevelControllerHash(int id, int version, DirtRoadLevelControllerIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.level.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastDirtRoadLevelControllerEffects(
      SortedDictionary<int, List<IDirtRoadLevelControllerEffectObserver>> observers) {
    foreach (var effect in effectsDirtRoadLevelControllerDeleteEffect) {
      if (observers.TryGetValue(0, out List<IDirtRoadLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDirtRoadLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDirtRoadLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDirtRoadLevelControllerEffect(effect);
        }
        observersForDirtRoadLevelController.Remove(effect.id);
      }
    }
    effectsDirtRoadLevelControllerDeleteEffect.Clear();


    foreach (var effect in effectsDirtRoadLevelControllerCreateEffect) {
      if (observers.TryGetValue(0, out List<IDirtRoadLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDirtRoadLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDirtRoadLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDirtRoadLevelControllerEffect(effect);
        }
      }
    }
    effectsDirtRoadLevelControllerCreateEffect.Clear();
  }
  public CaveLevelControllerIncarnation GetCaveLevelControllerIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsCaveLevelController[id].incarnation;
  }
  public bool CaveLevelControllerExists(int id) {
    return rootIncarnation.incarnationsCaveLevelController.ContainsKey(id);
  }
  public CaveLevelController GetCaveLevelController(int id) {
    return new CaveLevelController(this, id);
  }
  public List<CaveLevelController> AllCaveLevelController() {
    List<CaveLevelController> result = new List<CaveLevelController>(rootIncarnation.incarnationsCaveLevelController.Count);
    foreach (var id in rootIncarnation.incarnationsCaveLevelController.Keys) {
      result.Add(new CaveLevelController(this, id));
    }
    return result;
  }
  public IEnumerator<CaveLevelController> EnumAllCaveLevelController() {
    foreach (var id in rootIncarnation.incarnationsCaveLevelController.Keys) {
      yield return GetCaveLevelController(id);
    }
  }
  public void CheckHasCaveLevelController(CaveLevelController thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasCaveLevelController(thing.id);
  }
  public void CheckHasCaveLevelController(int id) {
    if (!rootIncarnation.incarnationsCaveLevelController.ContainsKey(id)) {
      throw new System.Exception("Invalid CaveLevelController: " + id);
    }
  }
  public void AddCaveLevelControllerObserver(int id, ICaveLevelControllerEffectObserver observer) {
    List<ICaveLevelControllerEffectObserver> obsies;
    if (!observersForCaveLevelController.TryGetValue(id, out obsies)) {
      obsies = new List<ICaveLevelControllerEffectObserver>();
    }
    obsies.Add(observer);
    observersForCaveLevelController[id] = obsies;
  }

  public void RemoveCaveLevelControllerObserver(int id, ICaveLevelControllerEffectObserver observer) {
    if (observersForCaveLevelController.ContainsKey(id)) {
      var list = observersForCaveLevelController[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForCaveLevelController.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public CaveLevelController EffectCaveLevelControllerCreate(
      Level level) {
    CheckUnlocked();
    CheckHasLevel(level);

    var id = NewId();
    var incarnation =
        new CaveLevelControllerIncarnation(
            level.id
            );
    EffectInternalCreateCaveLevelController(id, rootIncarnation.version, incarnation);
    return new CaveLevelController(this, id);
  }
  public void EffectInternalCreateCaveLevelController(
      int id,
      int incarnationVersion,
      CaveLevelControllerIncarnation incarnation) {
    CheckUnlocked();
    var effect = new CaveLevelControllerCreateEffect(id);
    rootIncarnation.incarnationsCaveLevelController.Add(
        id,
        new VersionAndIncarnation<CaveLevelControllerIncarnation>(
            incarnationVersion,
            incarnation));
    effectsCaveLevelControllerCreateEffect.Add(effect);
  }

  public void EffectCaveLevelControllerDelete(int id) {
    CheckUnlocked();
    var effect = new CaveLevelControllerDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsCaveLevelController[id];

    rootIncarnation.incarnationsCaveLevelController.Remove(id);
    effectsCaveLevelControllerDeleteEffect.Add(effect);
  }

     
  public int GetCaveLevelControllerHash(int id, int version, CaveLevelControllerIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.level.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastCaveLevelControllerEffects(
      SortedDictionary<int, List<ICaveLevelControllerEffectObserver>> observers) {
    foreach (var effect in effectsCaveLevelControllerDeleteEffect) {
      if (observers.TryGetValue(0, out List<ICaveLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCaveLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICaveLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCaveLevelControllerEffect(effect);
        }
        observersForCaveLevelController.Remove(effect.id);
      }
    }
    effectsCaveLevelControllerDeleteEffect.Clear();


    foreach (var effect in effectsCaveLevelControllerCreateEffect) {
      if (observers.TryGetValue(0, out List<ICaveLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCaveLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICaveLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCaveLevelControllerEffect(effect);
        }
      }
    }
    effectsCaveLevelControllerCreateEffect.Clear();
  }
  public BridgesLevelControllerIncarnation GetBridgesLevelControllerIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsBridgesLevelController[id].incarnation;
  }
  public bool BridgesLevelControllerExists(int id) {
    return rootIncarnation.incarnationsBridgesLevelController.ContainsKey(id);
  }
  public BridgesLevelController GetBridgesLevelController(int id) {
    return new BridgesLevelController(this, id);
  }
  public List<BridgesLevelController> AllBridgesLevelController() {
    List<BridgesLevelController> result = new List<BridgesLevelController>(rootIncarnation.incarnationsBridgesLevelController.Count);
    foreach (var id in rootIncarnation.incarnationsBridgesLevelController.Keys) {
      result.Add(new BridgesLevelController(this, id));
    }
    return result;
  }
  public IEnumerator<BridgesLevelController> EnumAllBridgesLevelController() {
    foreach (var id in rootIncarnation.incarnationsBridgesLevelController.Keys) {
      yield return GetBridgesLevelController(id);
    }
  }
  public void CheckHasBridgesLevelController(BridgesLevelController thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasBridgesLevelController(thing.id);
  }
  public void CheckHasBridgesLevelController(int id) {
    if (!rootIncarnation.incarnationsBridgesLevelController.ContainsKey(id)) {
      throw new System.Exception("Invalid BridgesLevelController: " + id);
    }
  }
  public void AddBridgesLevelControllerObserver(int id, IBridgesLevelControllerEffectObserver observer) {
    List<IBridgesLevelControllerEffectObserver> obsies;
    if (!observersForBridgesLevelController.TryGetValue(id, out obsies)) {
      obsies = new List<IBridgesLevelControllerEffectObserver>();
    }
    obsies.Add(observer);
    observersForBridgesLevelController[id] = obsies;
  }

  public void RemoveBridgesLevelControllerObserver(int id, IBridgesLevelControllerEffectObserver observer) {
    if (observersForBridgesLevelController.ContainsKey(id)) {
      var list = observersForBridgesLevelController[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForBridgesLevelController.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public BridgesLevelController EffectBridgesLevelControllerCreate(
      Level level) {
    CheckUnlocked();
    CheckHasLevel(level);

    var id = NewId();
    var incarnation =
        new BridgesLevelControllerIncarnation(
            level.id
            );
    EffectInternalCreateBridgesLevelController(id, rootIncarnation.version, incarnation);
    return new BridgesLevelController(this, id);
  }
  public void EffectInternalCreateBridgesLevelController(
      int id,
      int incarnationVersion,
      BridgesLevelControllerIncarnation incarnation) {
    CheckUnlocked();
    var effect = new BridgesLevelControllerCreateEffect(id);
    rootIncarnation.incarnationsBridgesLevelController.Add(
        id,
        new VersionAndIncarnation<BridgesLevelControllerIncarnation>(
            incarnationVersion,
            incarnation));
    effectsBridgesLevelControllerCreateEffect.Add(effect);
  }

  public void EffectBridgesLevelControllerDelete(int id) {
    CheckUnlocked();
    var effect = new BridgesLevelControllerDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsBridgesLevelController[id];

    rootIncarnation.incarnationsBridgesLevelController.Remove(id);
    effectsBridgesLevelControllerDeleteEffect.Add(effect);
  }

     
  public int GetBridgesLevelControllerHash(int id, int version, BridgesLevelControllerIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.level.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastBridgesLevelControllerEffects(
      SortedDictionary<int, List<IBridgesLevelControllerEffectObserver>> observers) {
    foreach (var effect in effectsBridgesLevelControllerDeleteEffect) {
      if (observers.TryGetValue(0, out List<IBridgesLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBridgesLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBridgesLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBridgesLevelControllerEffect(effect);
        }
        observersForBridgesLevelController.Remove(effect.id);
      }
    }
    effectsBridgesLevelControllerDeleteEffect.Clear();


    foreach (var effect in effectsBridgesLevelControllerCreateEffect) {
      if (observers.TryGetValue(0, out List<IBridgesLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBridgesLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBridgesLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBridgesLevelControllerEffect(effect);
        }
      }
    }
    effectsBridgesLevelControllerCreateEffect.Clear();
  }
  public AncientTownLevelControllerIncarnation GetAncientTownLevelControllerIncarnation(int id) {
    if (id == 0) {
      throw new Exception("Tried dereferencing null!");
    }
    return rootIncarnation.incarnationsAncientTownLevelController[id].incarnation;
  }
  public bool AncientTownLevelControllerExists(int id) {
    return rootIncarnation.incarnationsAncientTownLevelController.ContainsKey(id);
  }
  public AncientTownLevelController GetAncientTownLevelController(int id) {
    return new AncientTownLevelController(this, id);
  }
  public List<AncientTownLevelController> AllAncientTownLevelController() {
    List<AncientTownLevelController> result = new List<AncientTownLevelController>(rootIncarnation.incarnationsAncientTownLevelController.Count);
    foreach (var id in rootIncarnation.incarnationsAncientTownLevelController.Keys) {
      result.Add(new AncientTownLevelController(this, id));
    }
    return result;
  }
  public IEnumerator<AncientTownLevelController> EnumAllAncientTownLevelController() {
    foreach (var id in rootIncarnation.incarnationsAncientTownLevelController.Keys) {
      yield return GetAncientTownLevelController(id);
    }
  }
  public void CheckHasAncientTownLevelController(AncientTownLevelController thing) {
    CheckRootsEqual(this, thing.root);
    CheckHasAncientTownLevelController(thing.id);
  }
  public void CheckHasAncientTownLevelController(int id) {
    if (!rootIncarnation.incarnationsAncientTownLevelController.ContainsKey(id)) {
      throw new System.Exception("Invalid AncientTownLevelController: " + id);
    }
  }
  public void AddAncientTownLevelControllerObserver(int id, IAncientTownLevelControllerEffectObserver observer) {
    List<IAncientTownLevelControllerEffectObserver> obsies;
    if (!observersForAncientTownLevelController.TryGetValue(id, out obsies)) {
      obsies = new List<IAncientTownLevelControllerEffectObserver>();
    }
    obsies.Add(observer);
    observersForAncientTownLevelController[id] = obsies;
  }

  public void RemoveAncientTownLevelControllerObserver(int id, IAncientTownLevelControllerEffectObserver observer) {
    if (observersForAncientTownLevelController.ContainsKey(id)) {
      var list = observersForAncientTownLevelController[id];
      list.Remove(observer);
      if (list.Count == 0) {
        observersForAncientTownLevelController.Remove(id);
      }
    } else {
      throw new Exception("Couldnt find!");
    }
  }
  public AncientTownLevelController EffectAncientTownLevelControllerCreate(
      Level level) {
    CheckUnlocked();
    CheckHasLevel(level);

    var id = NewId();
    var incarnation =
        new AncientTownLevelControllerIncarnation(
            level.id
            );
    EffectInternalCreateAncientTownLevelController(id, rootIncarnation.version, incarnation);
    return new AncientTownLevelController(this, id);
  }
  public void EffectInternalCreateAncientTownLevelController(
      int id,
      int incarnationVersion,
      AncientTownLevelControllerIncarnation incarnation) {
    CheckUnlocked();
    var effect = new AncientTownLevelControllerCreateEffect(id);
    rootIncarnation.incarnationsAncientTownLevelController.Add(
        id,
        new VersionAndIncarnation<AncientTownLevelControllerIncarnation>(
            incarnationVersion,
            incarnation));
    effectsAncientTownLevelControllerCreateEffect.Add(effect);
  }

  public void EffectAncientTownLevelControllerDelete(int id) {
    CheckUnlocked();
    var effect = new AncientTownLevelControllerDeleteEffect(id);

    var oldIncarnationAndVersion =
        rootIncarnation.incarnationsAncientTownLevelController[id];

    rootIncarnation.incarnationsAncientTownLevelController.Remove(id);
    effectsAncientTownLevelControllerDeleteEffect.Add(effect);
  }

     
  public int GetAncientTownLevelControllerHash(int id, int version, AncientTownLevelControllerIncarnation incarnation) {
    int result = id * version;
    result += id * version * 1 * incarnation.level.GetDeterministicHashCode();
    return result;
  }
     
  public void BroadcastAncientTownLevelControllerEffects(
      SortedDictionary<int, List<IAncientTownLevelControllerEffectObserver>> observers) {
    foreach (var effect in effectsAncientTownLevelControllerDeleteEffect) {
      if (observers.TryGetValue(0, out List<IAncientTownLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAncientTownLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAncientTownLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAncientTownLevelControllerEffect(effect);
        }
        observersForAncientTownLevelController.Remove(effect.id);
      }
    }
    effectsAncientTownLevelControllerDeleteEffect.Clear();


    foreach (var effect in effectsAncientTownLevelControllerCreateEffect) {
      if (observers.TryGetValue(0, out List<IAncientTownLevelControllerEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAncientTownLevelControllerEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAncientTownLevelControllerEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAncientTownLevelControllerEffect(effect);
        }
      }
    }
    effectsAncientTownLevelControllerCreateEffect.Clear();
  }

  public IImpulsePostReactor GetIImpulsePostReactor(int id) {
    if (rootIncarnation.incarnationsTutorialDefyCounterUC.ContainsKey(id)) {
      return new TutorialDefyCounterUCAsIImpulsePostReactor(new TutorialDefyCounterUC(this, id));
    }
    if (rootIncarnation.incarnationsTimeCloneAICapabilityUC.ContainsKey(id)) {
      return new TimeCloneAICapabilityUCAsIImpulsePostReactor(new TimeCloneAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsAttackAICapabilityUC.ContainsKey(id)) {
      return new AttackAICapabilityUCAsIImpulsePostReactor(new AttackAICapabilityUC(this, id));
    }
    throw new Exception("Unknown IImpulsePostReactor: " + id);
  }
  public IImpulsePostReactor GetIImpulsePostReactorOrNull(int id) {
    if (rootIncarnation.incarnationsTutorialDefyCounterUC.ContainsKey(id)) {
      return new TutorialDefyCounterUCAsIImpulsePostReactor(new TutorialDefyCounterUC(this, id));
    }
    if (rootIncarnation.incarnationsTimeCloneAICapabilityUC.ContainsKey(id)) {
      return new TimeCloneAICapabilityUCAsIImpulsePostReactor(new TimeCloneAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsAttackAICapabilityUC.ContainsKey(id)) {
      return new AttackAICapabilityUCAsIImpulsePostReactor(new AttackAICapabilityUC(this, id));
    }
    return NullIImpulsePostReactor.Null;
  }
  public bool IImpulsePostReactorExists(int id) {
    return GetIImpulsePostReactorOrNull(id) != null;
  }
  public void CheckHasIImpulsePostReactor(IImpulsePostReactor thing) {
    GetIImpulsePostReactor(thing.id);
  }
  public void CheckHasIImpulsePostReactor(int id) {
    GetIImpulsePostReactor(id);
  }

  public IImpulsePreReactor GetIImpulsePreReactor(int id) {
    if (rootIncarnation.incarnationsLightningChargingUC.ContainsKey(id)) {
      return new LightningChargingUCAsIImpulsePreReactor(new LightningChargingUC(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeAICapabilityUC.ContainsKey(id)) {
      return new KamikazeAICapabilityUCAsIImpulsePreReactor(new KamikazeAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsBideAICapabilityUC.ContainsKey(id)) {
      return new BideAICapabilityUCAsIImpulsePreReactor(new BideAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsAttackAICapabilityUC.ContainsKey(id)) {
      return new AttackAICapabilityUCAsIImpulsePreReactor(new AttackAICapabilityUC(this, id));
    }
    throw new Exception("Unknown IImpulsePreReactor: " + id);
  }
  public IImpulsePreReactor GetIImpulsePreReactorOrNull(int id) {
    if (rootIncarnation.incarnationsLightningChargingUC.ContainsKey(id)) {
      return new LightningChargingUCAsIImpulsePreReactor(new LightningChargingUC(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeAICapabilityUC.ContainsKey(id)) {
      return new KamikazeAICapabilityUCAsIImpulsePreReactor(new KamikazeAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsBideAICapabilityUC.ContainsKey(id)) {
      return new BideAICapabilityUCAsIImpulsePreReactor(new BideAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsAttackAICapabilityUC.ContainsKey(id)) {
      return new AttackAICapabilityUCAsIImpulsePreReactor(new AttackAICapabilityUC(this, id));
    }
    return NullIImpulsePreReactor.Null;
  }
  public bool IImpulsePreReactorExists(int id) {
    return GetIImpulsePreReactorOrNull(id) != null;
  }
  public void CheckHasIImpulsePreReactor(IImpulsePreReactor thing) {
    GetIImpulsePreReactor(thing.id);
  }
  public void CheckHasIImpulsePreReactor(int id) {
    GetIImpulsePreReactor(id);
  }

  public IAICapabilityUC GetIAICapabilityUC(int id) {
    if (rootIncarnation.incarnationsWanderAICapabilityUC.ContainsKey(id)) {
      return new WanderAICapabilityUCAsIAICapabilityUC(new WanderAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsTemporaryCloneAICapabilityUC.ContainsKey(id)) {
      return new TemporaryCloneAICapabilityUCAsIAICapabilityUC(new TemporaryCloneAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsSummonAICapabilityUC.ContainsKey(id)) {
      return new SummonAICapabilityUCAsIAICapabilityUC(new SummonAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsTimeCloneAICapabilityUC.ContainsKey(id)) {
      return new TimeCloneAICapabilityUCAsIAICapabilityUC(new TimeCloneAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeAICapabilityUC.ContainsKey(id)) {
      return new KamikazeAICapabilityUCAsIAICapabilityUC(new KamikazeAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsGuardAICapabilityUC.ContainsKey(id)) {
      return new GuardAICapabilityUCAsIAICapabilityUC(new GuardAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsBideAICapabilityUC.ContainsKey(id)) {
      return new BideAICapabilityUCAsIAICapabilityUC(new BideAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsAttackAICapabilityUC.ContainsKey(id)) {
      return new AttackAICapabilityUCAsIAICapabilityUC(new AttackAICapabilityUC(this, id));
    }
    throw new Exception("Unknown IAICapabilityUC: " + id);
  }
  public IAICapabilityUC GetIAICapabilityUCOrNull(int id) {
    if (rootIncarnation.incarnationsWanderAICapabilityUC.ContainsKey(id)) {
      return new WanderAICapabilityUCAsIAICapabilityUC(new WanderAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsTemporaryCloneAICapabilityUC.ContainsKey(id)) {
      return new TemporaryCloneAICapabilityUCAsIAICapabilityUC(new TemporaryCloneAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsSummonAICapabilityUC.ContainsKey(id)) {
      return new SummonAICapabilityUCAsIAICapabilityUC(new SummonAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsTimeCloneAICapabilityUC.ContainsKey(id)) {
      return new TimeCloneAICapabilityUCAsIAICapabilityUC(new TimeCloneAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeAICapabilityUC.ContainsKey(id)) {
      return new KamikazeAICapabilityUCAsIAICapabilityUC(new KamikazeAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsGuardAICapabilityUC.ContainsKey(id)) {
      return new GuardAICapabilityUCAsIAICapabilityUC(new GuardAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsBideAICapabilityUC.ContainsKey(id)) {
      return new BideAICapabilityUCAsIAICapabilityUC(new BideAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsAttackAICapabilityUC.ContainsKey(id)) {
      return new AttackAICapabilityUCAsIAICapabilityUC(new AttackAICapabilityUC(this, id));
    }
    return NullIAICapabilityUC.Null;
  }
  public bool IAICapabilityUCExists(int id) {
    return GetIAICapabilityUCOrNull(id) != null;
  }
  public void CheckHasIAICapabilityUC(IAICapabilityUC thing) {
    GetIAICapabilityUC(thing.id);
  }
  public void CheckHasIAICapabilityUC(int id) {
    GetIAICapabilityUC(id);
  }

  public IPostActingUC GetIPostActingUC(int id) {
    if (rootIncarnation.incarnationsLightningChargedUC.ContainsKey(id)) {
      return new LightningChargedUCAsIPostActingUC(new LightningChargedUC(this, id));
    }
    if (rootIncarnation.incarnationsTimeCloneAICapabilityUC.ContainsKey(id)) {
      return new TimeCloneAICapabilityUCAsIPostActingUC(new TimeCloneAICapabilityUC(this, id));
    }
    throw new Exception("Unknown IPostActingUC: " + id);
  }
  public IPostActingUC GetIPostActingUCOrNull(int id) {
    if (rootIncarnation.incarnationsLightningChargedUC.ContainsKey(id)) {
      return new LightningChargedUCAsIPostActingUC(new LightningChargedUC(this, id));
    }
    if (rootIncarnation.incarnationsTimeCloneAICapabilityUC.ContainsKey(id)) {
      return new TimeCloneAICapabilityUCAsIPostActingUC(new TimeCloneAICapabilityUC(this, id));
    }
    return NullIPostActingUC.Null;
  }
  public bool IPostActingUCExists(int id) {
    return GetIPostActingUCOrNull(id) != null;
  }
  public void CheckHasIPostActingUC(IPostActingUC thing) {
    GetIPostActingUC(thing.id);
  }
  public void CheckHasIPostActingUC(int id) {
    GetIPostActingUC(id);
  }

  public IPreActingUC GetIPreActingUC(int id) {
    if (rootIncarnation.incarnationsDoomedUC.ContainsKey(id)) {
      return new DoomedUCAsIPreActingUC(new DoomedUC(this, id));
    }
    if (rootIncarnation.incarnationsMiredUC.ContainsKey(id)) {
      return new MiredUCAsIPreActingUC(new MiredUC(this, id));
    }
    if (rootIncarnation.incarnationsInvincibilityUC.ContainsKey(id)) {
      return new InvincibilityUCAsIPreActingUC(new InvincibilityUC(this, id));
    }
    if (rootIncarnation.incarnationsDefyingUC.ContainsKey(id)) {
      return new DefyingUCAsIPreActingUC(new DefyingUC(this, id));
    }
    if (rootIncarnation.incarnationsCounteringUC.ContainsKey(id)) {
      return new CounteringUCAsIPreActingUC(new CounteringUC(this, id));
    }
    if (rootIncarnation.incarnationsAttackAICapabilityUC.ContainsKey(id)) {
      return new AttackAICapabilityUCAsIPreActingUC(new AttackAICapabilityUC(this, id));
    }
    throw new Exception("Unknown IPreActingUC: " + id);
  }
  public IPreActingUC GetIPreActingUCOrNull(int id) {
    if (rootIncarnation.incarnationsDoomedUC.ContainsKey(id)) {
      return new DoomedUCAsIPreActingUC(new DoomedUC(this, id));
    }
    if (rootIncarnation.incarnationsMiredUC.ContainsKey(id)) {
      return new MiredUCAsIPreActingUC(new MiredUC(this, id));
    }
    if (rootIncarnation.incarnationsInvincibilityUC.ContainsKey(id)) {
      return new InvincibilityUCAsIPreActingUC(new InvincibilityUC(this, id));
    }
    if (rootIncarnation.incarnationsDefyingUC.ContainsKey(id)) {
      return new DefyingUCAsIPreActingUC(new DefyingUC(this, id));
    }
    if (rootIncarnation.incarnationsCounteringUC.ContainsKey(id)) {
      return new CounteringUCAsIPreActingUC(new CounteringUC(this, id));
    }
    if (rootIncarnation.incarnationsAttackAICapabilityUC.ContainsKey(id)) {
      return new AttackAICapabilityUCAsIPreActingUC(new AttackAICapabilityUC(this, id));
    }
    return NullIPreActingUC.Null;
  }
  public bool IPreActingUCExists(int id) {
    return GetIPreActingUCOrNull(id) != null;
  }
  public void CheckHasIPreActingUC(IPreActingUC thing) {
    GetIPreActingUC(thing.id);
  }
  public void CheckHasIPreActingUC(int id) {
    GetIPreActingUC(id);
  }

  public IReactingToAttacksUC GetIReactingToAttacksUC(int id) {
    if (rootIncarnation.incarnationsCounteringUC.ContainsKey(id)) {
      return new CounteringUCAsIReactingToAttacksUC(new CounteringUC(this, id));
    }
    throw new Exception("Unknown IReactingToAttacksUC: " + id);
  }
  public IReactingToAttacksUC GetIReactingToAttacksUCOrNull(int id) {
    if (rootIncarnation.incarnationsCounteringUC.ContainsKey(id)) {
      return new CounteringUCAsIReactingToAttacksUC(new CounteringUC(this, id));
    }
    return NullIReactingToAttacksUC.Null;
  }
  public bool IReactingToAttacksUCExists(int id) {
    return GetIReactingToAttacksUCOrNull(id) != null;
  }
  public void CheckHasIReactingToAttacksUC(IReactingToAttacksUC thing) {
    GetIReactingToAttacksUC(thing.id);
  }
  public void CheckHasIReactingToAttacksUC(int id) {
    GetIReactingToAttacksUC(id);
  }

  public IUnitComponent GetIUnitComponent(int id) {
    if (rootIncarnation.incarnationsTutorialDefyCounterUC.ContainsKey(id)) {
      return new TutorialDefyCounterUCAsIUnitComponent(new TutorialDefyCounterUC(this, id));
    }
    if (rootIncarnation.incarnationsLightningChargingUC.ContainsKey(id)) {
      return new LightningChargingUCAsIUnitComponent(new LightningChargingUC(this, id));
    }
    if (rootIncarnation.incarnationsWanderAICapabilityUC.ContainsKey(id)) {
      return new WanderAICapabilityUCAsIUnitComponent(new WanderAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsTemporaryCloneAICapabilityUC.ContainsKey(id)) {
      return new TemporaryCloneAICapabilityUCAsIUnitComponent(new TemporaryCloneAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsSummonAICapabilityUC.ContainsKey(id)) {
      return new SummonAICapabilityUCAsIUnitComponent(new SummonAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeAICapabilityUC.ContainsKey(id)) {
      return new KamikazeAICapabilityUCAsIUnitComponent(new KamikazeAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsGuardAICapabilityUC.ContainsKey(id)) {
      return new GuardAICapabilityUCAsIUnitComponent(new GuardAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsTimeCloneAICapabilityUC.ContainsKey(id)) {
      return new TimeCloneAICapabilityUCAsIUnitComponent(new TimeCloneAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsDoomedUC.ContainsKey(id)) {
      return new DoomedUCAsIUnitComponent(new DoomedUC(this, id));
    }
    if (rootIncarnation.incarnationsMiredUC.ContainsKey(id)) {
      return new MiredUCAsIUnitComponent(new MiredUC(this, id));
    }
    if (rootIncarnation.incarnationsAttackAICapabilityUC.ContainsKey(id)) {
      return new AttackAICapabilityUCAsIUnitComponent(new AttackAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsCounteringUC.ContainsKey(id)) {
      return new CounteringUCAsIUnitComponent(new CounteringUC(this, id));
    }
    if (rootIncarnation.incarnationsLightningChargedUC.ContainsKey(id)) {
      return new LightningChargedUCAsIUnitComponent(new LightningChargedUC(this, id));
    }
    if (rootIncarnation.incarnationsInvincibilityUC.ContainsKey(id)) {
      return new InvincibilityUCAsIUnitComponent(new InvincibilityUC(this, id));
    }
    if (rootIncarnation.incarnationsDefyingUC.ContainsKey(id)) {
      return new DefyingUCAsIUnitComponent(new DefyingUC(this, id));
    }
    if (rootIncarnation.incarnationsBideAICapabilityUC.ContainsKey(id)) {
      return new BideAICapabilityUCAsIUnitComponent(new BideAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseMovementTimeUC.ContainsKey(id)) {
      return new BaseMovementTimeUCAsIUnitComponent(new BaseMovementTimeUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseCombatTimeUC.ContainsKey(id)) {
      return new BaseCombatTimeUCAsIUnitComponent(new BaseCombatTimeUC(this, id));
    }
    if (rootIncarnation.incarnationsManaPotion.ContainsKey(id)) {
      return new ManaPotionAsIUnitComponent(new ManaPotion(this, id));
    }
    if (rootIncarnation.incarnationsHealthPotion.ContainsKey(id)) {
      return new HealthPotionAsIUnitComponent(new HealthPotion(this, id));
    }
    if (rootIncarnation.incarnationsSpeedRing.ContainsKey(id)) {
      return new SpeedRingAsIUnitComponent(new SpeedRing(this, id));
    }
    if (rootIncarnation.incarnationsGlaive.ContainsKey(id)) {
      return new GlaiveAsIUnitComponent(new Glaive(this, id));
    }
    if (rootIncarnation.incarnationsSlowRod.ContainsKey(id)) {
      return new SlowRodAsIUnitComponent(new SlowRod(this, id));
    }
    if (rootIncarnation.incarnationsBlastRod.ContainsKey(id)) {
      return new BlastRodAsIUnitComponent(new BlastRod(this, id));
    }
    if (rootIncarnation.incarnationsArmor.ContainsKey(id)) {
      return new ArmorAsIUnitComponent(new Armor(this, id));
    }
    if (rootIncarnation.incarnationsSorcerousUC.ContainsKey(id)) {
      return new SorcerousUCAsIUnitComponent(new SorcerousUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseOffenseUC.ContainsKey(id)) {
      return new BaseOffenseUCAsIUnitComponent(new BaseOffenseUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseDefenseUC.ContainsKey(id)) {
      return new BaseDefenseUCAsIUnitComponent(new BaseDefenseUC(this, id));
    }
    throw new Exception("Unknown IUnitComponent: " + id);
  }
  public IUnitComponent GetIUnitComponentOrNull(int id) {
    if (rootIncarnation.incarnationsTutorialDefyCounterUC.ContainsKey(id)) {
      return new TutorialDefyCounterUCAsIUnitComponent(new TutorialDefyCounterUC(this, id));
    }
    if (rootIncarnation.incarnationsLightningChargingUC.ContainsKey(id)) {
      return new LightningChargingUCAsIUnitComponent(new LightningChargingUC(this, id));
    }
    if (rootIncarnation.incarnationsWanderAICapabilityUC.ContainsKey(id)) {
      return new WanderAICapabilityUCAsIUnitComponent(new WanderAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsTemporaryCloneAICapabilityUC.ContainsKey(id)) {
      return new TemporaryCloneAICapabilityUCAsIUnitComponent(new TemporaryCloneAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsSummonAICapabilityUC.ContainsKey(id)) {
      return new SummonAICapabilityUCAsIUnitComponent(new SummonAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeAICapabilityUC.ContainsKey(id)) {
      return new KamikazeAICapabilityUCAsIUnitComponent(new KamikazeAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsGuardAICapabilityUC.ContainsKey(id)) {
      return new GuardAICapabilityUCAsIUnitComponent(new GuardAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsTimeCloneAICapabilityUC.ContainsKey(id)) {
      return new TimeCloneAICapabilityUCAsIUnitComponent(new TimeCloneAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsDoomedUC.ContainsKey(id)) {
      return new DoomedUCAsIUnitComponent(new DoomedUC(this, id));
    }
    if (rootIncarnation.incarnationsMiredUC.ContainsKey(id)) {
      return new MiredUCAsIUnitComponent(new MiredUC(this, id));
    }
    if (rootIncarnation.incarnationsAttackAICapabilityUC.ContainsKey(id)) {
      return new AttackAICapabilityUCAsIUnitComponent(new AttackAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsCounteringUC.ContainsKey(id)) {
      return new CounteringUCAsIUnitComponent(new CounteringUC(this, id));
    }
    if (rootIncarnation.incarnationsLightningChargedUC.ContainsKey(id)) {
      return new LightningChargedUCAsIUnitComponent(new LightningChargedUC(this, id));
    }
    if (rootIncarnation.incarnationsInvincibilityUC.ContainsKey(id)) {
      return new InvincibilityUCAsIUnitComponent(new InvincibilityUC(this, id));
    }
    if (rootIncarnation.incarnationsDefyingUC.ContainsKey(id)) {
      return new DefyingUCAsIUnitComponent(new DefyingUC(this, id));
    }
    if (rootIncarnation.incarnationsBideAICapabilityUC.ContainsKey(id)) {
      return new BideAICapabilityUCAsIUnitComponent(new BideAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseMovementTimeUC.ContainsKey(id)) {
      return new BaseMovementTimeUCAsIUnitComponent(new BaseMovementTimeUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseCombatTimeUC.ContainsKey(id)) {
      return new BaseCombatTimeUCAsIUnitComponent(new BaseCombatTimeUC(this, id));
    }
    if (rootIncarnation.incarnationsManaPotion.ContainsKey(id)) {
      return new ManaPotionAsIUnitComponent(new ManaPotion(this, id));
    }
    if (rootIncarnation.incarnationsHealthPotion.ContainsKey(id)) {
      return new HealthPotionAsIUnitComponent(new HealthPotion(this, id));
    }
    if (rootIncarnation.incarnationsSpeedRing.ContainsKey(id)) {
      return new SpeedRingAsIUnitComponent(new SpeedRing(this, id));
    }
    if (rootIncarnation.incarnationsGlaive.ContainsKey(id)) {
      return new GlaiveAsIUnitComponent(new Glaive(this, id));
    }
    if (rootIncarnation.incarnationsSlowRod.ContainsKey(id)) {
      return new SlowRodAsIUnitComponent(new SlowRod(this, id));
    }
    if (rootIncarnation.incarnationsBlastRod.ContainsKey(id)) {
      return new BlastRodAsIUnitComponent(new BlastRod(this, id));
    }
    if (rootIncarnation.incarnationsArmor.ContainsKey(id)) {
      return new ArmorAsIUnitComponent(new Armor(this, id));
    }
    if (rootIncarnation.incarnationsSorcerousUC.ContainsKey(id)) {
      return new SorcerousUCAsIUnitComponent(new SorcerousUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseOffenseUC.ContainsKey(id)) {
      return new BaseOffenseUCAsIUnitComponent(new BaseOffenseUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseDefenseUC.ContainsKey(id)) {
      return new BaseDefenseUCAsIUnitComponent(new BaseDefenseUC(this, id));
    }
    return NullIUnitComponent.Null;
  }
  public bool IUnitComponentExists(int id) {
    return GetIUnitComponentOrNull(id) != null;
  }
  public void CheckHasIUnitComponent(IUnitComponent thing) {
    GetIUnitComponent(thing.id);
  }
  public void CheckHasIUnitComponent(int id) {
    GetIUnitComponent(id);
  }

  public IOffenseFactorUC GetIOffenseFactorUC(int id) {
    if (rootIncarnation.incarnationsBaseOffenseUC.ContainsKey(id)) {
      return new BaseOffenseUCAsIOffenseFactorUC(new BaseOffenseUC(this, id));
    }
    if (rootIncarnation.incarnationsInvincibilityUC.ContainsKey(id)) {
      return new InvincibilityUCAsIOffenseFactorUC(new InvincibilityUC(this, id));
    }
    if (rootIncarnation.incarnationsGlaive.ContainsKey(id)) {
      return new GlaiveAsIOffenseFactorUC(new Glaive(this, id));
    }
    throw new Exception("Unknown IOffenseFactorUC: " + id);
  }
  public IOffenseFactorUC GetIOffenseFactorUCOrNull(int id) {
    if (rootIncarnation.incarnationsBaseOffenseUC.ContainsKey(id)) {
      return new BaseOffenseUCAsIOffenseFactorUC(new BaseOffenseUC(this, id));
    }
    if (rootIncarnation.incarnationsInvincibilityUC.ContainsKey(id)) {
      return new InvincibilityUCAsIOffenseFactorUC(new InvincibilityUC(this, id));
    }
    if (rootIncarnation.incarnationsGlaive.ContainsKey(id)) {
      return new GlaiveAsIOffenseFactorUC(new Glaive(this, id));
    }
    return NullIOffenseFactorUC.Null;
  }
  public bool IOffenseFactorUCExists(int id) {
    return GetIOffenseFactorUCOrNull(id) != null;
  }
  public void CheckHasIOffenseFactorUC(IOffenseFactorUC thing) {
    GetIOffenseFactorUC(thing.id);
  }
  public void CheckHasIOffenseFactorUC(int id) {
    GetIOffenseFactorUC(id);
  }

  public IMovementTimeFactorUC GetIMovementTimeFactorUC(int id) {
    if (rootIncarnation.incarnationsLightningChargedUC.ContainsKey(id)) {
      return new LightningChargedUCAsIMovementTimeFactorUC(new LightningChargedUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseMovementTimeUC.ContainsKey(id)) {
      return new BaseMovementTimeUCAsIMovementTimeFactorUC(new BaseMovementTimeUC(this, id));
    }
    if (rootIncarnation.incarnationsSpeedRing.ContainsKey(id)) {
      return new SpeedRingAsIMovementTimeFactorUC(new SpeedRing(this, id));
    }
    throw new Exception("Unknown IMovementTimeFactorUC: " + id);
  }
  public IMovementTimeFactorUC GetIMovementTimeFactorUCOrNull(int id) {
    if (rootIncarnation.incarnationsLightningChargedUC.ContainsKey(id)) {
      return new LightningChargedUCAsIMovementTimeFactorUC(new LightningChargedUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseMovementTimeUC.ContainsKey(id)) {
      return new BaseMovementTimeUCAsIMovementTimeFactorUC(new BaseMovementTimeUC(this, id));
    }
    if (rootIncarnation.incarnationsSpeedRing.ContainsKey(id)) {
      return new SpeedRingAsIMovementTimeFactorUC(new SpeedRing(this, id));
    }
    return NullIMovementTimeFactorUC.Null;
  }
  public bool IMovementTimeFactorUCExists(int id) {
    return GetIMovementTimeFactorUCOrNull(id) != null;
  }
  public void CheckHasIMovementTimeFactorUC(IMovementTimeFactorUC thing) {
    GetIMovementTimeFactorUC(thing.id);
  }
  public void CheckHasIMovementTimeFactorUC(int id) {
    GetIMovementTimeFactorUC(id);
  }

  public IDefenseFactorUC GetIDefenseFactorUC(int id) {
    if (rootIncarnation.incarnationsBaseDefenseUC.ContainsKey(id)) {
      return new BaseDefenseUCAsIDefenseFactorUC(new BaseDefenseUC(this, id));
    }
    if (rootIncarnation.incarnationsInvincibilityUC.ContainsKey(id)) {
      return new InvincibilityUCAsIDefenseFactorUC(new InvincibilityUC(this, id));
    }
    if (rootIncarnation.incarnationsDefyingUC.ContainsKey(id)) {
      return new DefyingUCAsIDefenseFactorUC(new DefyingUC(this, id));
    }
    if (rootIncarnation.incarnationsBideAICapabilityUC.ContainsKey(id)) {
      return new BideAICapabilityUCAsIDefenseFactorUC(new BideAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsArmor.ContainsKey(id)) {
      return new ArmorAsIDefenseFactorUC(new Armor(this, id));
    }
    throw new Exception("Unknown IDefenseFactorUC: " + id);
  }
  public IDefenseFactorUC GetIDefenseFactorUCOrNull(int id) {
    if (rootIncarnation.incarnationsBaseDefenseUC.ContainsKey(id)) {
      return new BaseDefenseUCAsIDefenseFactorUC(new BaseDefenseUC(this, id));
    }
    if (rootIncarnation.incarnationsInvincibilityUC.ContainsKey(id)) {
      return new InvincibilityUCAsIDefenseFactorUC(new InvincibilityUC(this, id));
    }
    if (rootIncarnation.incarnationsDefyingUC.ContainsKey(id)) {
      return new DefyingUCAsIDefenseFactorUC(new DefyingUC(this, id));
    }
    if (rootIncarnation.incarnationsBideAICapabilityUC.ContainsKey(id)) {
      return new BideAICapabilityUCAsIDefenseFactorUC(new BideAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsArmor.ContainsKey(id)) {
      return new ArmorAsIDefenseFactorUC(new Armor(this, id));
    }
    return NullIDefenseFactorUC.Null;
  }
  public bool IDefenseFactorUCExists(int id) {
    return GetIDefenseFactorUCOrNull(id) != null;
  }
  public void CheckHasIDefenseFactorUC(IDefenseFactorUC thing) {
    GetIDefenseFactorUC(thing.id);
  }
  public void CheckHasIDefenseFactorUC(int id) {
    GetIDefenseFactorUC(id);
  }

  public ICombatTimeFactorUC GetICombatTimeFactorUC(int id) {
    if (rootIncarnation.incarnationsBaseCombatTimeUC.ContainsKey(id)) {
      return new BaseCombatTimeUCAsICombatTimeFactorUC(new BaseCombatTimeUC(this, id));
    }
    throw new Exception("Unknown ICombatTimeFactorUC: " + id);
  }
  public ICombatTimeFactorUC GetICombatTimeFactorUCOrNull(int id) {
    if (rootIncarnation.incarnationsBaseCombatTimeUC.ContainsKey(id)) {
      return new BaseCombatTimeUCAsICombatTimeFactorUC(new BaseCombatTimeUC(this, id));
    }
    return NullICombatTimeFactorUC.Null;
  }
  public bool ICombatTimeFactorUCExists(int id) {
    return GetICombatTimeFactorUCOrNull(id) != null;
  }
  public void CheckHasICombatTimeFactorUC(ICombatTimeFactorUC thing) {
    GetICombatTimeFactorUC(thing.id);
  }
  public void CheckHasICombatTimeFactorUC(int id) {
    GetICombatTimeFactorUC(id);
  }

  public IImpulse GetIImpulse(int id) {
    if (rootIncarnation.incarnationsHoldPositionImpulse.ContainsKey(id)) {
      return new HoldPositionImpulseAsIImpulse(new HoldPositionImpulse(this, id));
    }
    if (rootIncarnation.incarnationsTemporaryCloneImpulse.ContainsKey(id)) {
      return new TemporaryCloneImpulseAsIImpulse(new TemporaryCloneImpulse(this, id));
    }
    if (rootIncarnation.incarnationsSummonImpulse.ContainsKey(id)) {
      return new SummonImpulseAsIImpulse(new SummonImpulse(this, id));
    }
    if (rootIncarnation.incarnationsMireImpulse.ContainsKey(id)) {
      return new MireImpulseAsIImpulse(new MireImpulse(this, id));
    }
    if (rootIncarnation.incarnationsEvaporateImpulse.ContainsKey(id)) {
      return new EvaporateImpulseAsIImpulse(new EvaporateImpulse(this, id));
    }
    if (rootIncarnation.incarnationsMoveImpulse.ContainsKey(id)) {
      return new MoveImpulseAsIImpulse(new MoveImpulse(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeJumpImpulse.ContainsKey(id)) {
      return new KamikazeJumpImpulseAsIImpulse(new KamikazeJumpImpulse(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeTargetImpulse.ContainsKey(id)) {
      return new KamikazeTargetImpulseAsIImpulse(new KamikazeTargetImpulse(this, id));
    }
    if (rootIncarnation.incarnationsNoImpulse.ContainsKey(id)) {
      return new NoImpulseAsIImpulse(new NoImpulse(this, id));
    }
    if (rootIncarnation.incarnationsFireImpulse.ContainsKey(id)) {
      return new FireImpulseAsIImpulse(new FireImpulse(this, id));
    }
    if (rootIncarnation.incarnationsDefyImpulse.ContainsKey(id)) {
      return new DefyImpulseAsIImpulse(new DefyImpulse(this, id));
    }
    if (rootIncarnation.incarnationsCounterImpulse.ContainsKey(id)) {
      return new CounterImpulseAsIImpulse(new CounterImpulse(this, id));
    }
    if (rootIncarnation.incarnationsUnleashBideImpulse.ContainsKey(id)) {
      return new UnleashBideImpulseAsIImpulse(new UnleashBideImpulse(this, id));
    }
    if (rootIncarnation.incarnationsContinueBidingImpulse.ContainsKey(id)) {
      return new ContinueBidingImpulseAsIImpulse(new ContinueBidingImpulse(this, id));
    }
    if (rootIncarnation.incarnationsStartBidingImpulse.ContainsKey(id)) {
      return new StartBidingImpulseAsIImpulse(new StartBidingImpulse(this, id));
    }
    if (rootIncarnation.incarnationsAttackImpulse.ContainsKey(id)) {
      return new AttackImpulseAsIImpulse(new AttackImpulse(this, id));
    }
    if (rootIncarnation.incarnationsPursueImpulse.ContainsKey(id)) {
      return new PursueImpulseAsIImpulse(new PursueImpulse(this, id));
    }
    if (rootIncarnation.incarnationsFireBombImpulse.ContainsKey(id)) {
      return new FireBombImpulseAsIImpulse(new FireBombImpulse(this, id));
    }
    throw new Exception("Unknown IImpulse: " + id);
  }
  public IImpulse GetIImpulseOrNull(int id) {
    if (rootIncarnation.incarnationsHoldPositionImpulse.ContainsKey(id)) {
      return new HoldPositionImpulseAsIImpulse(new HoldPositionImpulse(this, id));
    }
    if (rootIncarnation.incarnationsTemporaryCloneImpulse.ContainsKey(id)) {
      return new TemporaryCloneImpulseAsIImpulse(new TemporaryCloneImpulse(this, id));
    }
    if (rootIncarnation.incarnationsSummonImpulse.ContainsKey(id)) {
      return new SummonImpulseAsIImpulse(new SummonImpulse(this, id));
    }
    if (rootIncarnation.incarnationsMireImpulse.ContainsKey(id)) {
      return new MireImpulseAsIImpulse(new MireImpulse(this, id));
    }
    if (rootIncarnation.incarnationsEvaporateImpulse.ContainsKey(id)) {
      return new EvaporateImpulseAsIImpulse(new EvaporateImpulse(this, id));
    }
    if (rootIncarnation.incarnationsMoveImpulse.ContainsKey(id)) {
      return new MoveImpulseAsIImpulse(new MoveImpulse(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeJumpImpulse.ContainsKey(id)) {
      return new KamikazeJumpImpulseAsIImpulse(new KamikazeJumpImpulse(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeTargetImpulse.ContainsKey(id)) {
      return new KamikazeTargetImpulseAsIImpulse(new KamikazeTargetImpulse(this, id));
    }
    if (rootIncarnation.incarnationsNoImpulse.ContainsKey(id)) {
      return new NoImpulseAsIImpulse(new NoImpulse(this, id));
    }
    if (rootIncarnation.incarnationsFireImpulse.ContainsKey(id)) {
      return new FireImpulseAsIImpulse(new FireImpulse(this, id));
    }
    if (rootIncarnation.incarnationsDefyImpulse.ContainsKey(id)) {
      return new DefyImpulseAsIImpulse(new DefyImpulse(this, id));
    }
    if (rootIncarnation.incarnationsCounterImpulse.ContainsKey(id)) {
      return new CounterImpulseAsIImpulse(new CounterImpulse(this, id));
    }
    if (rootIncarnation.incarnationsUnleashBideImpulse.ContainsKey(id)) {
      return new UnleashBideImpulseAsIImpulse(new UnleashBideImpulse(this, id));
    }
    if (rootIncarnation.incarnationsContinueBidingImpulse.ContainsKey(id)) {
      return new ContinueBidingImpulseAsIImpulse(new ContinueBidingImpulse(this, id));
    }
    if (rootIncarnation.incarnationsStartBidingImpulse.ContainsKey(id)) {
      return new StartBidingImpulseAsIImpulse(new StartBidingImpulse(this, id));
    }
    if (rootIncarnation.incarnationsAttackImpulse.ContainsKey(id)) {
      return new AttackImpulseAsIImpulse(new AttackImpulse(this, id));
    }
    if (rootIncarnation.incarnationsPursueImpulse.ContainsKey(id)) {
      return new PursueImpulseAsIImpulse(new PursueImpulse(this, id));
    }
    if (rootIncarnation.incarnationsFireBombImpulse.ContainsKey(id)) {
      return new FireBombImpulseAsIImpulse(new FireBombImpulse(this, id));
    }
    return NullIImpulse.Null;
  }
  public bool IImpulseExists(int id) {
    return GetIImpulseOrNull(id) != null;
  }
  public void CheckHasIImpulse(IImpulse thing) {
    GetIImpulse(thing.id);
  }
  public void CheckHasIImpulse(int id) {
    GetIImpulse(id);
  }

  public IActingTTC GetIActingTTC(int id) {
    if (rootIncarnation.incarnationsFireBombTTC.ContainsKey(id)) {
      return new FireBombTTCAsIActingTTC(new FireBombTTC(this, id));
    }
    throw new Exception("Unknown IActingTTC: " + id);
  }
  public IActingTTC GetIActingTTCOrNull(int id) {
    if (rootIncarnation.incarnationsFireBombTTC.ContainsKey(id)) {
      return new FireBombTTCAsIActingTTC(new FireBombTTC(this, id));
    }
    return NullIActingTTC.Null;
  }
  public bool IActingTTCExists(int id) {
    return GetIActingTTCOrNull(id) != null;
  }
  public void CheckHasIActingTTC(IActingTTC thing) {
    GetIActingTTC(thing.id);
  }
  public void CheckHasIActingTTC(int id) {
    GetIActingTTC(id);
  }

  public IPresenceTriggerTTC GetIPresenceTriggerTTC(int id) {
    if (rootIncarnation.incarnationsSimplePresenceTriggerTTC.ContainsKey(id)) {
      return new SimplePresenceTriggerTTCAsIPresenceTriggerTTC(new SimplePresenceTriggerTTC(this, id));
    }
    throw new Exception("Unknown IPresenceTriggerTTC: " + id);
  }
  public IPresenceTriggerTTC GetIPresenceTriggerTTCOrNull(int id) {
    if (rootIncarnation.incarnationsSimplePresenceTriggerTTC.ContainsKey(id)) {
      return new SimplePresenceTriggerTTCAsIPresenceTriggerTTC(new SimplePresenceTriggerTTC(this, id));
    }
    return NullIPresenceTriggerTTC.Null;
  }
  public bool IPresenceTriggerTTCExists(int id) {
    return GetIPresenceTriggerTTCOrNull(id) != null;
  }
  public void CheckHasIPresenceTriggerTTC(IPresenceTriggerTTC thing) {
    GetIPresenceTriggerTTC(thing.id);
  }
  public void CheckHasIPresenceTriggerTTC(int id) {
    GetIPresenceTriggerTTC(id);
  }

  public IInteractableTTC GetIInteractableTTC(int id) {
    if (rootIncarnation.incarnationsWarperTTC.ContainsKey(id)) {
      return new WarperTTCAsIInteractableTTC(new WarperTTC(this, id));
    }
    if (rootIncarnation.incarnationsLevelLinkTTC.ContainsKey(id)) {
      return new LevelLinkTTCAsIInteractableTTC(new LevelLinkTTC(this, id));
    }
    if (rootIncarnation.incarnationsItemTTC.ContainsKey(id)) {
      return new ItemTTCAsIInteractableTTC(new ItemTTC(this, id));
    }
    if (rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC.ContainsKey(id)) {
      return new IncendianFallsLevelLinkerTTCAsIInteractableTTC(new IncendianFallsLevelLinkerTTC(this, id));
    }
    if (rootIncarnation.incarnationsEmberDeepLevelLinkerTTC.ContainsKey(id)) {
      return new EmberDeepLevelLinkerTTCAsIInteractableTTC(new EmberDeepLevelLinkerTTC(this, id));
    }
    throw new Exception("Unknown IInteractableTTC: " + id);
  }
  public IInteractableTTC GetIInteractableTTCOrNull(int id) {
    if (rootIncarnation.incarnationsWarperTTC.ContainsKey(id)) {
      return new WarperTTCAsIInteractableTTC(new WarperTTC(this, id));
    }
    if (rootIncarnation.incarnationsLevelLinkTTC.ContainsKey(id)) {
      return new LevelLinkTTCAsIInteractableTTC(new LevelLinkTTC(this, id));
    }
    if (rootIncarnation.incarnationsItemTTC.ContainsKey(id)) {
      return new ItemTTCAsIInteractableTTC(new ItemTTC(this, id));
    }
    if (rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC.ContainsKey(id)) {
      return new IncendianFallsLevelLinkerTTCAsIInteractableTTC(new IncendianFallsLevelLinkerTTC(this, id));
    }
    if (rootIncarnation.incarnationsEmberDeepLevelLinkerTTC.ContainsKey(id)) {
      return new EmberDeepLevelLinkerTTCAsIInteractableTTC(new EmberDeepLevelLinkerTTC(this, id));
    }
    return NullIInteractableTTC.Null;
  }
  public bool IInteractableTTCExists(int id) {
    return GetIInteractableTTCOrNull(id) != null;
  }
  public void CheckHasIInteractableTTC(IInteractableTTC thing) {
    GetIInteractableTTC(thing.id);
  }
  public void CheckHasIInteractableTTC(int id) {
    GetIInteractableTTC(id);
  }

  public IUnwalkableTTC GetIUnwalkableTTC(int id) {
    if (rootIncarnation.incarnationsTreeTTC.ContainsKey(id)) {
      return new TreeTTCAsIUnwalkableTTC(new TreeTTC(this, id));
    }
    if (rootIncarnation.incarnationsWaterTTC.ContainsKey(id)) {
      return new WaterTTCAsIUnwalkableTTC(new WaterTTC(this, id));
    }
    if (rootIncarnation.incarnationsFloorTTC.ContainsKey(id)) {
      return new FloorTTCAsIUnwalkableTTC(new FloorTTC(this, id));
    }
    if (rootIncarnation.incarnationsCaveWallTTC.ContainsKey(id)) {
      return new CaveWallTTCAsIUnwalkableTTC(new CaveWallTTC(this, id));
    }
    if (rootIncarnation.incarnationsFallsTTC.ContainsKey(id)) {
      return new FallsTTCAsIUnwalkableTTC(new FallsTTC(this, id));
    }
    if (rootIncarnation.incarnationsMagmaTTC.ContainsKey(id)) {
      return new MagmaTTCAsIUnwalkableTTC(new MagmaTTC(this, id));
    }
    throw new Exception("Unknown IUnwalkableTTC: " + id);
  }
  public IUnwalkableTTC GetIUnwalkableTTCOrNull(int id) {
    if (rootIncarnation.incarnationsTreeTTC.ContainsKey(id)) {
      return new TreeTTCAsIUnwalkableTTC(new TreeTTC(this, id));
    }
    if (rootIncarnation.incarnationsWaterTTC.ContainsKey(id)) {
      return new WaterTTCAsIUnwalkableTTC(new WaterTTC(this, id));
    }
    if (rootIncarnation.incarnationsFloorTTC.ContainsKey(id)) {
      return new FloorTTCAsIUnwalkableTTC(new FloorTTC(this, id));
    }
    if (rootIncarnation.incarnationsCaveWallTTC.ContainsKey(id)) {
      return new CaveWallTTCAsIUnwalkableTTC(new CaveWallTTC(this, id));
    }
    if (rootIncarnation.incarnationsFallsTTC.ContainsKey(id)) {
      return new FallsTTCAsIUnwalkableTTC(new FallsTTC(this, id));
    }
    if (rootIncarnation.incarnationsMagmaTTC.ContainsKey(id)) {
      return new MagmaTTCAsIUnwalkableTTC(new MagmaTTC(this, id));
    }
    return NullIUnwalkableTTC.Null;
  }
  public bool IUnwalkableTTCExists(int id) {
    return GetIUnwalkableTTCOrNull(id) != null;
  }
  public void CheckHasIUnwalkableTTC(IUnwalkableTTC thing) {
    GetIUnwalkableTTC(thing.id);
  }
  public void CheckHasIUnwalkableTTC(int id) {
    GetIUnwalkableTTC(id);
  }

  public ITerrainTileComponent GetITerrainTileComponent(int id) {
    if (rootIncarnation.incarnationsSimplePresenceTriggerTTC.ContainsKey(id)) {
      return new SimplePresenceTriggerTTCAsITerrainTileComponent(new SimplePresenceTriggerTTC(this, id));
    }
    if (rootIncarnation.incarnationsItemTTC.ContainsKey(id)) {
      return new ItemTTCAsITerrainTileComponent(new ItemTTC(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeTargetTTC.ContainsKey(id)) {
      return new KamikazeTargetTTCAsITerrainTileComponent(new KamikazeTargetTTC(this, id));
    }
    if (rootIncarnation.incarnationsWarperTTC.ContainsKey(id)) {
      return new WarperTTCAsITerrainTileComponent(new WarperTTC(this, id));
    }
    if (rootIncarnation.incarnationsTimeAnchorTTC.ContainsKey(id)) {
      return new TimeAnchorTTCAsITerrainTileComponent(new TimeAnchorTTC(this, id));
    }
    if (rootIncarnation.incarnationsFireBombTTC.ContainsKey(id)) {
      return new FireBombTTCAsITerrainTileComponent(new FireBombTTC(this, id));
    }
    if (rootIncarnation.incarnationsMarkerTTC.ContainsKey(id)) {
      return new MarkerTTCAsITerrainTileComponent(new MarkerTTC(this, id));
    }
    if (rootIncarnation.incarnationsLevelLinkTTC.ContainsKey(id)) {
      return new LevelLinkTTCAsITerrainTileComponent(new LevelLinkTTC(this, id));
    }
    if (rootIncarnation.incarnationsMudTTC.ContainsKey(id)) {
      return new MudTTCAsITerrainTileComponent(new MudTTC(this, id));
    }
    if (rootIncarnation.incarnationsDirtTTC.ContainsKey(id)) {
      return new DirtTTCAsITerrainTileComponent(new DirtTTC(this, id));
    }
    if (rootIncarnation.incarnationsObsidianTTC.ContainsKey(id)) {
      return new ObsidianTTCAsITerrainTileComponent(new ObsidianTTC(this, id));
    }
    if (rootIncarnation.incarnationsDownStairsTTC.ContainsKey(id)) {
      return new DownStairsTTCAsITerrainTileComponent(new DownStairsTTC(this, id));
    }
    if (rootIncarnation.incarnationsUpStairsTTC.ContainsKey(id)) {
      return new UpStairsTTCAsITerrainTileComponent(new UpStairsTTC(this, id));
    }
    if (rootIncarnation.incarnationsWallTTC.ContainsKey(id)) {
      return new WallTTCAsITerrainTileComponent(new WallTTC(this, id));
    }
    if (rootIncarnation.incarnationsBloodTTC.ContainsKey(id)) {
      return new BloodTTCAsITerrainTileComponent(new BloodTTC(this, id));
    }
    if (rootIncarnation.incarnationsRocksTTC.ContainsKey(id)) {
      return new RocksTTCAsITerrainTileComponent(new RocksTTC(this, id));
    }
    if (rootIncarnation.incarnationsTreeTTC.ContainsKey(id)) {
      return new TreeTTCAsITerrainTileComponent(new TreeTTC(this, id));
    }
    if (rootIncarnation.incarnationsWaterTTC.ContainsKey(id)) {
      return new WaterTTCAsITerrainTileComponent(new WaterTTC(this, id));
    }
    if (rootIncarnation.incarnationsFloorTTC.ContainsKey(id)) {
      return new FloorTTCAsITerrainTileComponent(new FloorTTC(this, id));
    }
    if (rootIncarnation.incarnationsCaveWallTTC.ContainsKey(id)) {
      return new CaveWallTTCAsITerrainTileComponent(new CaveWallTTC(this, id));
    }
    if (rootIncarnation.incarnationsCaveTTC.ContainsKey(id)) {
      return new CaveTTCAsITerrainTileComponent(new CaveTTC(this, id));
    }
    if (rootIncarnation.incarnationsFallsTTC.ContainsKey(id)) {
      return new FallsTTCAsITerrainTileComponent(new FallsTTC(this, id));
    }
    if (rootIncarnation.incarnationsFireTTC.ContainsKey(id)) {
      return new FireTTCAsITerrainTileComponent(new FireTTC(this, id));
    }
    if (rootIncarnation.incarnationsObsidianFloorTTC.ContainsKey(id)) {
      return new ObsidianFloorTTCAsITerrainTileComponent(new ObsidianFloorTTC(this, id));
    }
    if (rootIncarnation.incarnationsMagmaTTC.ContainsKey(id)) {
      return new MagmaTTCAsITerrainTileComponent(new MagmaTTC(this, id));
    }
    if (rootIncarnation.incarnationsCliffTTC.ContainsKey(id)) {
      return new CliffTTCAsITerrainTileComponent(new CliffTTC(this, id));
    }
    if (rootIncarnation.incarnationsRavaNestTTC.ContainsKey(id)) {
      return new RavaNestTTCAsITerrainTileComponent(new RavaNestTTC(this, id));
    }
    if (rootIncarnation.incarnationsCliffLandingTTC.ContainsKey(id)) {
      return new CliffLandingTTCAsITerrainTileComponent(new CliffLandingTTC(this, id));
    }
    if (rootIncarnation.incarnationsStoneTTC.ContainsKey(id)) {
      return new StoneTTCAsITerrainTileComponent(new StoneTTC(this, id));
    }
    if (rootIncarnation.incarnationsGrassTTC.ContainsKey(id)) {
      return new GrassTTCAsITerrainTileComponent(new GrassTTC(this, id));
    }
    if (rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC.ContainsKey(id)) {
      return new IncendianFallsLevelLinkerTTCAsITerrainTileComponent(new IncendianFallsLevelLinkerTTC(this, id));
    }
    if (rootIncarnation.incarnationsEmberDeepLevelLinkerTTC.ContainsKey(id)) {
      return new EmberDeepLevelLinkerTTCAsITerrainTileComponent(new EmberDeepLevelLinkerTTC(this, id));
    }
    throw new Exception("Unknown ITerrainTileComponent: " + id);
  }
  public ITerrainTileComponent GetITerrainTileComponentOrNull(int id) {
    if (rootIncarnation.incarnationsSimplePresenceTriggerTTC.ContainsKey(id)) {
      return new SimplePresenceTriggerTTCAsITerrainTileComponent(new SimplePresenceTriggerTTC(this, id));
    }
    if (rootIncarnation.incarnationsItemTTC.ContainsKey(id)) {
      return new ItemTTCAsITerrainTileComponent(new ItemTTC(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeTargetTTC.ContainsKey(id)) {
      return new KamikazeTargetTTCAsITerrainTileComponent(new KamikazeTargetTTC(this, id));
    }
    if (rootIncarnation.incarnationsWarperTTC.ContainsKey(id)) {
      return new WarperTTCAsITerrainTileComponent(new WarperTTC(this, id));
    }
    if (rootIncarnation.incarnationsTimeAnchorTTC.ContainsKey(id)) {
      return new TimeAnchorTTCAsITerrainTileComponent(new TimeAnchorTTC(this, id));
    }
    if (rootIncarnation.incarnationsFireBombTTC.ContainsKey(id)) {
      return new FireBombTTCAsITerrainTileComponent(new FireBombTTC(this, id));
    }
    if (rootIncarnation.incarnationsMarkerTTC.ContainsKey(id)) {
      return new MarkerTTCAsITerrainTileComponent(new MarkerTTC(this, id));
    }
    if (rootIncarnation.incarnationsLevelLinkTTC.ContainsKey(id)) {
      return new LevelLinkTTCAsITerrainTileComponent(new LevelLinkTTC(this, id));
    }
    if (rootIncarnation.incarnationsMudTTC.ContainsKey(id)) {
      return new MudTTCAsITerrainTileComponent(new MudTTC(this, id));
    }
    if (rootIncarnation.incarnationsDirtTTC.ContainsKey(id)) {
      return new DirtTTCAsITerrainTileComponent(new DirtTTC(this, id));
    }
    if (rootIncarnation.incarnationsObsidianTTC.ContainsKey(id)) {
      return new ObsidianTTCAsITerrainTileComponent(new ObsidianTTC(this, id));
    }
    if (rootIncarnation.incarnationsDownStairsTTC.ContainsKey(id)) {
      return new DownStairsTTCAsITerrainTileComponent(new DownStairsTTC(this, id));
    }
    if (rootIncarnation.incarnationsUpStairsTTC.ContainsKey(id)) {
      return new UpStairsTTCAsITerrainTileComponent(new UpStairsTTC(this, id));
    }
    if (rootIncarnation.incarnationsWallTTC.ContainsKey(id)) {
      return new WallTTCAsITerrainTileComponent(new WallTTC(this, id));
    }
    if (rootIncarnation.incarnationsBloodTTC.ContainsKey(id)) {
      return new BloodTTCAsITerrainTileComponent(new BloodTTC(this, id));
    }
    if (rootIncarnation.incarnationsRocksTTC.ContainsKey(id)) {
      return new RocksTTCAsITerrainTileComponent(new RocksTTC(this, id));
    }
    if (rootIncarnation.incarnationsTreeTTC.ContainsKey(id)) {
      return new TreeTTCAsITerrainTileComponent(new TreeTTC(this, id));
    }
    if (rootIncarnation.incarnationsWaterTTC.ContainsKey(id)) {
      return new WaterTTCAsITerrainTileComponent(new WaterTTC(this, id));
    }
    if (rootIncarnation.incarnationsFloorTTC.ContainsKey(id)) {
      return new FloorTTCAsITerrainTileComponent(new FloorTTC(this, id));
    }
    if (rootIncarnation.incarnationsCaveWallTTC.ContainsKey(id)) {
      return new CaveWallTTCAsITerrainTileComponent(new CaveWallTTC(this, id));
    }
    if (rootIncarnation.incarnationsCaveTTC.ContainsKey(id)) {
      return new CaveTTCAsITerrainTileComponent(new CaveTTC(this, id));
    }
    if (rootIncarnation.incarnationsFallsTTC.ContainsKey(id)) {
      return new FallsTTCAsITerrainTileComponent(new FallsTTC(this, id));
    }
    if (rootIncarnation.incarnationsFireTTC.ContainsKey(id)) {
      return new FireTTCAsITerrainTileComponent(new FireTTC(this, id));
    }
    if (rootIncarnation.incarnationsObsidianFloorTTC.ContainsKey(id)) {
      return new ObsidianFloorTTCAsITerrainTileComponent(new ObsidianFloorTTC(this, id));
    }
    if (rootIncarnation.incarnationsMagmaTTC.ContainsKey(id)) {
      return new MagmaTTCAsITerrainTileComponent(new MagmaTTC(this, id));
    }
    if (rootIncarnation.incarnationsCliffTTC.ContainsKey(id)) {
      return new CliffTTCAsITerrainTileComponent(new CliffTTC(this, id));
    }
    if (rootIncarnation.incarnationsRavaNestTTC.ContainsKey(id)) {
      return new RavaNestTTCAsITerrainTileComponent(new RavaNestTTC(this, id));
    }
    if (rootIncarnation.incarnationsCliffLandingTTC.ContainsKey(id)) {
      return new CliffLandingTTCAsITerrainTileComponent(new CliffLandingTTC(this, id));
    }
    if (rootIncarnation.incarnationsStoneTTC.ContainsKey(id)) {
      return new StoneTTCAsITerrainTileComponent(new StoneTTC(this, id));
    }
    if (rootIncarnation.incarnationsGrassTTC.ContainsKey(id)) {
      return new GrassTTCAsITerrainTileComponent(new GrassTTC(this, id));
    }
    if (rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC.ContainsKey(id)) {
      return new IncendianFallsLevelLinkerTTCAsITerrainTileComponent(new IncendianFallsLevelLinkerTTC(this, id));
    }
    if (rootIncarnation.incarnationsEmberDeepLevelLinkerTTC.ContainsKey(id)) {
      return new EmberDeepLevelLinkerTTCAsITerrainTileComponent(new EmberDeepLevelLinkerTTC(this, id));
    }
    return NullITerrainTileComponent.Null;
  }
  public bool ITerrainTileComponentExists(int id) {
    return GetITerrainTileComponentOrNull(id) != null;
  }
  public void CheckHasITerrainTileComponent(ITerrainTileComponent thing) {
    GetITerrainTileComponent(thing.id);
  }
  public void CheckHasITerrainTileComponent(int id) {
    GetITerrainTileComponent(id);
  }

  public ILevelController GetILevelController(int id) {
    if (rootIncarnation.incarnationsSquareCaveLevelController.ContainsKey(id)) {
      return new SquareCaveLevelControllerAsILevelController(new SquareCaveLevelController(this, id));
    }
    if (rootIncarnation.incarnationsRavashrikeLevelController.ContainsKey(id)) {
      return new RavashrikeLevelControllerAsILevelController(new RavashrikeLevelController(this, id));
    }
    if (rootIncarnation.incarnationsPentagonalCaveLevelController.ContainsKey(id)) {
      return new PentagonalCaveLevelControllerAsILevelController(new PentagonalCaveLevelController(this, id));
    }
    if (rootIncarnation.incarnationsCliffLevelController.ContainsKey(id)) {
      return new CliffLevelControllerAsILevelController(new CliffLevelController(this, id));
    }
    if (rootIncarnation.incarnationsPreGauntletLevelController.ContainsKey(id)) {
      return new PreGauntletLevelControllerAsILevelController(new PreGauntletLevelController(this, id));
    }
    if (rootIncarnation.incarnationsGauntletLevelController.ContainsKey(id)) {
      return new GauntletLevelControllerAsILevelController(new GauntletLevelController(this, id));
    }
    if (rootIncarnation.incarnationsVolcaetusLevelController.ContainsKey(id)) {
      return new VolcaetusLevelControllerAsILevelController(new VolcaetusLevelController(this, id));
    }
    if (rootIncarnation.incarnationsTutorial2LevelController.ContainsKey(id)) {
      return new Tutorial2LevelControllerAsILevelController(new Tutorial2LevelController(this, id));
    }
    if (rootIncarnation.incarnationsTutorial1LevelController.ContainsKey(id)) {
      return new Tutorial1LevelControllerAsILevelController(new Tutorial1LevelController(this, id));
    }
    if (rootIncarnation.incarnationsRetreatLevelController.ContainsKey(id)) {
      return new RetreatLevelControllerAsILevelController(new RetreatLevelController(this, id));
    }
    if (rootIncarnation.incarnationsSotaventoLevelController.ContainsKey(id)) {
      return new SotaventoLevelControllerAsILevelController(new SotaventoLevelController(this, id));
    }
    if (rootIncarnation.incarnationsNestLevelController.ContainsKey(id)) {
      return new NestLevelControllerAsILevelController(new NestLevelController(this, id));
    }
    if (rootIncarnation.incarnationsLakeLevelController.ContainsKey(id)) {
      return new LakeLevelControllerAsILevelController(new LakeLevelController(this, id));
    }
    if (rootIncarnation.incarnationsDirtRoadLevelController.ContainsKey(id)) {
      return new DirtRoadLevelControllerAsILevelController(new DirtRoadLevelController(this, id));
    }
    if (rootIncarnation.incarnationsCaveLevelController.ContainsKey(id)) {
      return new CaveLevelControllerAsILevelController(new CaveLevelController(this, id));
    }
    if (rootIncarnation.incarnationsBridgesLevelController.ContainsKey(id)) {
      return new BridgesLevelControllerAsILevelController(new BridgesLevelController(this, id));
    }
    if (rootIncarnation.incarnationsAncientTownLevelController.ContainsKey(id)) {
      return new AncientTownLevelControllerAsILevelController(new AncientTownLevelController(this, id));
    }
    throw new Exception("Unknown ILevelController: " + id);
  }
  public ILevelController GetILevelControllerOrNull(int id) {
    if (rootIncarnation.incarnationsSquareCaveLevelController.ContainsKey(id)) {
      return new SquareCaveLevelControllerAsILevelController(new SquareCaveLevelController(this, id));
    }
    if (rootIncarnation.incarnationsRavashrikeLevelController.ContainsKey(id)) {
      return new RavashrikeLevelControllerAsILevelController(new RavashrikeLevelController(this, id));
    }
    if (rootIncarnation.incarnationsPentagonalCaveLevelController.ContainsKey(id)) {
      return new PentagonalCaveLevelControllerAsILevelController(new PentagonalCaveLevelController(this, id));
    }
    if (rootIncarnation.incarnationsCliffLevelController.ContainsKey(id)) {
      return new CliffLevelControllerAsILevelController(new CliffLevelController(this, id));
    }
    if (rootIncarnation.incarnationsPreGauntletLevelController.ContainsKey(id)) {
      return new PreGauntletLevelControllerAsILevelController(new PreGauntletLevelController(this, id));
    }
    if (rootIncarnation.incarnationsGauntletLevelController.ContainsKey(id)) {
      return new GauntletLevelControllerAsILevelController(new GauntletLevelController(this, id));
    }
    if (rootIncarnation.incarnationsVolcaetusLevelController.ContainsKey(id)) {
      return new VolcaetusLevelControllerAsILevelController(new VolcaetusLevelController(this, id));
    }
    if (rootIncarnation.incarnationsTutorial2LevelController.ContainsKey(id)) {
      return new Tutorial2LevelControllerAsILevelController(new Tutorial2LevelController(this, id));
    }
    if (rootIncarnation.incarnationsTutorial1LevelController.ContainsKey(id)) {
      return new Tutorial1LevelControllerAsILevelController(new Tutorial1LevelController(this, id));
    }
    if (rootIncarnation.incarnationsRetreatLevelController.ContainsKey(id)) {
      return new RetreatLevelControllerAsILevelController(new RetreatLevelController(this, id));
    }
    if (rootIncarnation.incarnationsSotaventoLevelController.ContainsKey(id)) {
      return new SotaventoLevelControllerAsILevelController(new SotaventoLevelController(this, id));
    }
    if (rootIncarnation.incarnationsNestLevelController.ContainsKey(id)) {
      return new NestLevelControllerAsILevelController(new NestLevelController(this, id));
    }
    if (rootIncarnation.incarnationsLakeLevelController.ContainsKey(id)) {
      return new LakeLevelControllerAsILevelController(new LakeLevelController(this, id));
    }
    if (rootIncarnation.incarnationsDirtRoadLevelController.ContainsKey(id)) {
      return new DirtRoadLevelControllerAsILevelController(new DirtRoadLevelController(this, id));
    }
    if (rootIncarnation.incarnationsCaveLevelController.ContainsKey(id)) {
      return new CaveLevelControllerAsILevelController(new CaveLevelController(this, id));
    }
    if (rootIncarnation.incarnationsBridgesLevelController.ContainsKey(id)) {
      return new BridgesLevelControllerAsILevelController(new BridgesLevelController(this, id));
    }
    if (rootIncarnation.incarnationsAncientTownLevelController.ContainsKey(id)) {
      return new AncientTownLevelControllerAsILevelController(new AncientTownLevelController(this, id));
    }
    return NullILevelController.Null;
  }
  public bool ILevelControllerExists(int id) {
    return GetILevelControllerOrNull(id) != null;
  }
  public void CheckHasILevelController(ILevelController thing) {
    GetILevelController(thing.id);
  }
  public void CheckHasILevelController(int id) {
    GetILevelController(id);
  }

  public IPickUpReactorItem GetIPickUpReactorItem(int id) {
    if (rootIncarnation.incarnationsSlowRod.ContainsKey(id)) {
      return new SlowRodAsIPickUpReactorItem(new SlowRod(this, id));
    }
    if (rootIncarnation.incarnationsBlastRod.ContainsKey(id)) {
      return new BlastRodAsIPickUpReactorItem(new BlastRod(this, id));
    }
    throw new Exception("Unknown IPickUpReactorItem: " + id);
  }
  public IPickUpReactorItem GetIPickUpReactorItemOrNull(int id) {
    if (rootIncarnation.incarnationsSlowRod.ContainsKey(id)) {
      return new SlowRodAsIPickUpReactorItem(new SlowRod(this, id));
    }
    if (rootIncarnation.incarnationsBlastRod.ContainsKey(id)) {
      return new BlastRodAsIPickUpReactorItem(new BlastRod(this, id));
    }
    return NullIPickUpReactorItem.Null;
  }
  public bool IPickUpReactorItemExists(int id) {
    return GetIPickUpReactorItemOrNull(id) != null;
  }
  public void CheckHasIPickUpReactorItem(IPickUpReactorItem thing) {
    GetIPickUpReactorItem(thing.id);
  }
  public void CheckHasIPickUpReactorItem(int id) {
    GetIPickUpReactorItem(id);
  }

  public IImmediatelyUseItem GetIImmediatelyUseItem(int id) {
    if (rootIncarnation.incarnationsManaPotion.ContainsKey(id)) {
      return new ManaPotionAsIImmediatelyUseItem(new ManaPotion(this, id));
    }
    if (rootIncarnation.incarnationsHealthPotion.ContainsKey(id)) {
      return new HealthPotionAsIImmediatelyUseItem(new HealthPotion(this, id));
    }
    throw new Exception("Unknown IImmediatelyUseItem: " + id);
  }
  public IImmediatelyUseItem GetIImmediatelyUseItemOrNull(int id) {
    if (rootIncarnation.incarnationsManaPotion.ContainsKey(id)) {
      return new ManaPotionAsIImmediatelyUseItem(new ManaPotion(this, id));
    }
    if (rootIncarnation.incarnationsHealthPotion.ContainsKey(id)) {
      return new HealthPotionAsIImmediatelyUseItem(new HealthPotion(this, id));
    }
    return NullIImmediatelyUseItem.Null;
  }
  public bool IImmediatelyUseItemExists(int id) {
    return GetIImmediatelyUseItemOrNull(id) != null;
  }
  public void CheckHasIImmediatelyUseItem(IImmediatelyUseItem thing) {
    GetIImmediatelyUseItem(thing.id);
  }
  public void CheckHasIImmediatelyUseItem(int id) {
    GetIImmediatelyUseItem(id);
  }

  public IUsableItem GetIUsableItem(int id) {
    if (rootIncarnation.incarnationsManaPotion.ContainsKey(id)) {
      return new ManaPotionAsIUsableItem(new ManaPotion(this, id));
    }
    if (rootIncarnation.incarnationsHealthPotion.ContainsKey(id)) {
      return new HealthPotionAsIUsableItem(new HealthPotion(this, id));
    }
    throw new Exception("Unknown IUsableItem: " + id);
  }
  public IUsableItem GetIUsableItemOrNull(int id) {
    if (rootIncarnation.incarnationsManaPotion.ContainsKey(id)) {
      return new ManaPotionAsIUsableItem(new ManaPotion(this, id));
    }
    if (rootIncarnation.incarnationsHealthPotion.ContainsKey(id)) {
      return new HealthPotionAsIUsableItem(new HealthPotion(this, id));
    }
    return NullIUsableItem.Null;
  }
  public bool IUsableItemExists(int id) {
    return GetIUsableItemOrNull(id) != null;
  }
  public void CheckHasIUsableItem(IUsableItem thing) {
    GetIUsableItem(thing.id);
  }
  public void CheckHasIUsableItem(int id) {
    GetIUsableItem(id);
  }

  public ICloneableUC GetICloneableUC(int id) {
    if (rootIncarnation.incarnationsSorcerousUC.ContainsKey(id)) {
      return new SorcerousUCAsICloneableUC(new SorcerousUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseOffenseUC.ContainsKey(id)) {
      return new BaseOffenseUCAsICloneableUC(new BaseOffenseUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseMovementTimeUC.ContainsKey(id)) {
      return new BaseMovementTimeUCAsICloneableUC(new BaseMovementTimeUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseDefenseUC.ContainsKey(id)) {
      return new BaseDefenseUCAsICloneableUC(new BaseDefenseUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseCombatTimeUC.ContainsKey(id)) {
      return new BaseCombatTimeUCAsICloneableUC(new BaseCombatTimeUC(this, id));
    }
    if (rootIncarnation.incarnationsSpeedRing.ContainsKey(id)) {
      return new SpeedRingAsICloneableUC(new SpeedRing(this, id));
    }
    if (rootIncarnation.incarnationsGlaive.ContainsKey(id)) {
      return new GlaiveAsICloneableUC(new Glaive(this, id));
    }
    if (rootIncarnation.incarnationsSlowRod.ContainsKey(id)) {
      return new SlowRodAsICloneableUC(new SlowRod(this, id));
    }
    if (rootIncarnation.incarnationsBlastRod.ContainsKey(id)) {
      return new BlastRodAsICloneableUC(new BlastRod(this, id));
    }
    if (rootIncarnation.incarnationsArmor.ContainsKey(id)) {
      return new ArmorAsICloneableUC(new Armor(this, id));
    }
    throw new Exception("Unknown ICloneableUC: " + id);
  }
  public ICloneableUC GetICloneableUCOrNull(int id) {
    if (rootIncarnation.incarnationsSorcerousUC.ContainsKey(id)) {
      return new SorcerousUCAsICloneableUC(new SorcerousUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseOffenseUC.ContainsKey(id)) {
      return new BaseOffenseUCAsICloneableUC(new BaseOffenseUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseMovementTimeUC.ContainsKey(id)) {
      return new BaseMovementTimeUCAsICloneableUC(new BaseMovementTimeUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseDefenseUC.ContainsKey(id)) {
      return new BaseDefenseUCAsICloneableUC(new BaseDefenseUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseCombatTimeUC.ContainsKey(id)) {
      return new BaseCombatTimeUCAsICloneableUC(new BaseCombatTimeUC(this, id));
    }
    if (rootIncarnation.incarnationsSpeedRing.ContainsKey(id)) {
      return new SpeedRingAsICloneableUC(new SpeedRing(this, id));
    }
    if (rootIncarnation.incarnationsGlaive.ContainsKey(id)) {
      return new GlaiveAsICloneableUC(new Glaive(this, id));
    }
    if (rootIncarnation.incarnationsSlowRod.ContainsKey(id)) {
      return new SlowRodAsICloneableUC(new SlowRod(this, id));
    }
    if (rootIncarnation.incarnationsBlastRod.ContainsKey(id)) {
      return new BlastRodAsICloneableUC(new BlastRod(this, id));
    }
    if (rootIncarnation.incarnationsArmor.ContainsKey(id)) {
      return new ArmorAsICloneableUC(new Armor(this, id));
    }
    return NullICloneableUC.Null;
  }
  public bool ICloneableUCExists(int id) {
    return GetICloneableUCOrNull(id) != null;
  }
  public void CheckHasICloneableUC(ICloneableUC thing) {
    GetICloneableUC(thing.id);
  }
  public void CheckHasICloneableUC(int id) {
    GetICloneableUC(id);
  }

  public IItem GetIItem(int id) {
    if (rootIncarnation.incarnationsManaPotion.ContainsKey(id)) {
      return new ManaPotionAsIItem(new ManaPotion(this, id));
    }
    if (rootIncarnation.incarnationsHealthPotion.ContainsKey(id)) {
      return new HealthPotionAsIItem(new HealthPotion(this, id));
    }
    if (rootIncarnation.incarnationsSpeedRing.ContainsKey(id)) {
      return new SpeedRingAsIItem(new SpeedRing(this, id));
    }
    if (rootIncarnation.incarnationsGlaive.ContainsKey(id)) {
      return new GlaiveAsIItem(new Glaive(this, id));
    }
    if (rootIncarnation.incarnationsSlowRod.ContainsKey(id)) {
      return new SlowRodAsIItem(new SlowRod(this, id));
    }
    if (rootIncarnation.incarnationsBlastRod.ContainsKey(id)) {
      return new BlastRodAsIItem(new BlastRod(this, id));
    }
    if (rootIncarnation.incarnationsArmor.ContainsKey(id)) {
      return new ArmorAsIItem(new Armor(this, id));
    }
    throw new Exception("Unknown IItem: " + id);
  }
  public IItem GetIItemOrNull(int id) {
    if (rootIncarnation.incarnationsManaPotion.ContainsKey(id)) {
      return new ManaPotionAsIItem(new ManaPotion(this, id));
    }
    if (rootIncarnation.incarnationsHealthPotion.ContainsKey(id)) {
      return new HealthPotionAsIItem(new HealthPotion(this, id));
    }
    if (rootIncarnation.incarnationsSpeedRing.ContainsKey(id)) {
      return new SpeedRingAsIItem(new SpeedRing(this, id));
    }
    if (rootIncarnation.incarnationsGlaive.ContainsKey(id)) {
      return new GlaiveAsIItem(new Glaive(this, id));
    }
    if (rootIncarnation.incarnationsSlowRod.ContainsKey(id)) {
      return new SlowRodAsIItem(new SlowRod(this, id));
    }
    if (rootIncarnation.incarnationsBlastRod.ContainsKey(id)) {
      return new BlastRodAsIItem(new BlastRod(this, id));
    }
    if (rootIncarnation.incarnationsArmor.ContainsKey(id)) {
      return new ArmorAsIItem(new Armor(this, id));
    }
    return NullIItem.Null;
  }
  public bool IItemExists(int id) {
    return GetIItemOrNull(id) != null;
  }
  public void CheckHasIItem(IItem thing) {
    GetIItem(thing.id);
  }
  public void CheckHasIItem(int id) {
    GetIItem(id);
  }

  public IDestructible GetIDestructible(int id) {
    if (rootIncarnation.incarnationsTutorialDefyCounterUC.ContainsKey(id)) {
      return new TutorialDefyCounterUCAsIDestructible(new TutorialDefyCounterUC(this, id));
    }
    if (rootIncarnation.incarnationsLightningChargingUC.ContainsKey(id)) {
      return new LightningChargingUCAsIDestructible(new LightningChargingUC(this, id));
    }
    if (rootIncarnation.incarnationsWanderAICapabilityUC.ContainsKey(id)) {
      return new WanderAICapabilityUCAsIDestructible(new WanderAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsTemporaryCloneAICapabilityUC.ContainsKey(id)) {
      return new TemporaryCloneAICapabilityUCAsIDestructible(new TemporaryCloneAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsSummonAICapabilityUC.ContainsKey(id)) {
      return new SummonAICapabilityUCAsIDestructible(new SummonAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeAICapabilityUC.ContainsKey(id)) {
      return new KamikazeAICapabilityUCAsIDestructible(new KamikazeAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsGuardAICapabilityUC.ContainsKey(id)) {
      return new GuardAICapabilityUCAsIDestructible(new GuardAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsTimeCloneAICapabilityUC.ContainsKey(id)) {
      return new TimeCloneAICapabilityUCAsIDestructible(new TimeCloneAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsDoomedUC.ContainsKey(id)) {
      return new DoomedUCAsIDestructible(new DoomedUC(this, id));
    }
    if (rootIncarnation.incarnationsMiredUC.ContainsKey(id)) {
      return new MiredUCAsIDestructible(new MiredUC(this, id));
    }
    if (rootIncarnation.incarnationsAttackAICapabilityUC.ContainsKey(id)) {
      return new AttackAICapabilityUCAsIDestructible(new AttackAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsCounteringUC.ContainsKey(id)) {
      return new CounteringUCAsIDestructible(new CounteringUC(this, id));
    }
    if (rootIncarnation.incarnationsLightningChargedUC.ContainsKey(id)) {
      return new LightningChargedUCAsIDestructible(new LightningChargedUC(this, id));
    }
    if (rootIncarnation.incarnationsInvincibilityUC.ContainsKey(id)) {
      return new InvincibilityUCAsIDestructible(new InvincibilityUC(this, id));
    }
    if (rootIncarnation.incarnationsDefyingUC.ContainsKey(id)) {
      return new DefyingUCAsIDestructible(new DefyingUC(this, id));
    }
    if (rootIncarnation.incarnationsBideAICapabilityUC.ContainsKey(id)) {
      return new BideAICapabilityUCAsIDestructible(new BideAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseMovementTimeUC.ContainsKey(id)) {
      return new BaseMovementTimeUCAsIDestructible(new BaseMovementTimeUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseCombatTimeUC.ContainsKey(id)) {
      return new BaseCombatTimeUCAsIDestructible(new BaseCombatTimeUC(this, id));
    }
    if (rootIncarnation.incarnationsManaPotion.ContainsKey(id)) {
      return new ManaPotionAsIDestructible(new ManaPotion(this, id));
    }
    if (rootIncarnation.incarnationsHealthPotion.ContainsKey(id)) {
      return new HealthPotionAsIDestructible(new HealthPotion(this, id));
    }
    if (rootIncarnation.incarnationsSpeedRing.ContainsKey(id)) {
      return new SpeedRingAsIDestructible(new SpeedRing(this, id));
    }
    if (rootIncarnation.incarnationsGlaive.ContainsKey(id)) {
      return new GlaiveAsIDestructible(new Glaive(this, id));
    }
    if (rootIncarnation.incarnationsSlowRod.ContainsKey(id)) {
      return new SlowRodAsIDestructible(new SlowRod(this, id));
    }
    if (rootIncarnation.incarnationsBlastRod.ContainsKey(id)) {
      return new BlastRodAsIDestructible(new BlastRod(this, id));
    }
    if (rootIncarnation.incarnationsArmor.ContainsKey(id)) {
      return new ArmorAsIDestructible(new Armor(this, id));
    }
    if (rootIncarnation.incarnationsSorcerousUC.ContainsKey(id)) {
      return new SorcerousUCAsIDestructible(new SorcerousUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseOffenseUC.ContainsKey(id)) {
      return new BaseOffenseUCAsIDestructible(new BaseOffenseUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseDefenseUC.ContainsKey(id)) {
      return new BaseDefenseUCAsIDestructible(new BaseDefenseUC(this, id));
    }
    if (rootIncarnation.incarnationsHoldPositionImpulse.ContainsKey(id)) {
      return new HoldPositionImpulseAsIDestructible(new HoldPositionImpulse(this, id));
    }
    if (rootIncarnation.incarnationsTemporaryCloneImpulse.ContainsKey(id)) {
      return new TemporaryCloneImpulseAsIDestructible(new TemporaryCloneImpulse(this, id));
    }
    if (rootIncarnation.incarnationsSummonImpulse.ContainsKey(id)) {
      return new SummonImpulseAsIDestructible(new SummonImpulse(this, id));
    }
    if (rootIncarnation.incarnationsMireImpulse.ContainsKey(id)) {
      return new MireImpulseAsIDestructible(new MireImpulse(this, id));
    }
    if (rootIncarnation.incarnationsEvaporateImpulse.ContainsKey(id)) {
      return new EvaporateImpulseAsIDestructible(new EvaporateImpulse(this, id));
    }
    if (rootIncarnation.incarnationsMoveImpulse.ContainsKey(id)) {
      return new MoveImpulseAsIDestructible(new MoveImpulse(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeJumpImpulse.ContainsKey(id)) {
      return new KamikazeJumpImpulseAsIDestructible(new KamikazeJumpImpulse(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeTargetImpulse.ContainsKey(id)) {
      return new KamikazeTargetImpulseAsIDestructible(new KamikazeTargetImpulse(this, id));
    }
    if (rootIncarnation.incarnationsNoImpulse.ContainsKey(id)) {
      return new NoImpulseAsIDestructible(new NoImpulse(this, id));
    }
    if (rootIncarnation.incarnationsFireImpulse.ContainsKey(id)) {
      return new FireImpulseAsIDestructible(new FireImpulse(this, id));
    }
    if (rootIncarnation.incarnationsDefyImpulse.ContainsKey(id)) {
      return new DefyImpulseAsIDestructible(new DefyImpulse(this, id));
    }
    if (rootIncarnation.incarnationsCounterImpulse.ContainsKey(id)) {
      return new CounterImpulseAsIDestructible(new CounterImpulse(this, id));
    }
    if (rootIncarnation.incarnationsUnleashBideImpulse.ContainsKey(id)) {
      return new UnleashBideImpulseAsIDestructible(new UnleashBideImpulse(this, id));
    }
    if (rootIncarnation.incarnationsContinueBidingImpulse.ContainsKey(id)) {
      return new ContinueBidingImpulseAsIDestructible(new ContinueBidingImpulse(this, id));
    }
    if (rootIncarnation.incarnationsStartBidingImpulse.ContainsKey(id)) {
      return new StartBidingImpulseAsIDestructible(new StartBidingImpulse(this, id));
    }
    if (rootIncarnation.incarnationsAttackImpulse.ContainsKey(id)) {
      return new AttackImpulseAsIDestructible(new AttackImpulse(this, id));
    }
    if (rootIncarnation.incarnationsPursueImpulse.ContainsKey(id)) {
      return new PursueImpulseAsIDestructible(new PursueImpulse(this, id));
    }
    if (rootIncarnation.incarnationsFireBombImpulse.ContainsKey(id)) {
      return new FireBombImpulseAsIDestructible(new FireBombImpulse(this, id));
    }
    if (rootIncarnation.incarnationsSimplePresenceTriggerTTC.ContainsKey(id)) {
      return new SimplePresenceTriggerTTCAsIDestructible(new SimplePresenceTriggerTTC(this, id));
    }
    if (rootIncarnation.incarnationsItemTTC.ContainsKey(id)) {
      return new ItemTTCAsIDestructible(new ItemTTC(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeTargetTTC.ContainsKey(id)) {
      return new KamikazeTargetTTCAsIDestructible(new KamikazeTargetTTC(this, id));
    }
    if (rootIncarnation.incarnationsWarperTTC.ContainsKey(id)) {
      return new WarperTTCAsIDestructible(new WarperTTC(this, id));
    }
    if (rootIncarnation.incarnationsTimeAnchorTTC.ContainsKey(id)) {
      return new TimeAnchorTTCAsIDestructible(new TimeAnchorTTC(this, id));
    }
    if (rootIncarnation.incarnationsFireBombTTC.ContainsKey(id)) {
      return new FireBombTTCAsIDestructible(new FireBombTTC(this, id));
    }
    if (rootIncarnation.incarnationsMarkerTTC.ContainsKey(id)) {
      return new MarkerTTCAsIDestructible(new MarkerTTC(this, id));
    }
    if (rootIncarnation.incarnationsLevelLinkTTC.ContainsKey(id)) {
      return new LevelLinkTTCAsIDestructible(new LevelLinkTTC(this, id));
    }
    if (rootIncarnation.incarnationsMudTTC.ContainsKey(id)) {
      return new MudTTCAsIDestructible(new MudTTC(this, id));
    }
    if (rootIncarnation.incarnationsDirtTTC.ContainsKey(id)) {
      return new DirtTTCAsIDestructible(new DirtTTC(this, id));
    }
    if (rootIncarnation.incarnationsObsidianTTC.ContainsKey(id)) {
      return new ObsidianTTCAsIDestructible(new ObsidianTTC(this, id));
    }
    if (rootIncarnation.incarnationsDownStairsTTC.ContainsKey(id)) {
      return new DownStairsTTCAsIDestructible(new DownStairsTTC(this, id));
    }
    if (rootIncarnation.incarnationsUpStairsTTC.ContainsKey(id)) {
      return new UpStairsTTCAsIDestructible(new UpStairsTTC(this, id));
    }
    if (rootIncarnation.incarnationsWallTTC.ContainsKey(id)) {
      return new WallTTCAsIDestructible(new WallTTC(this, id));
    }
    if (rootIncarnation.incarnationsBloodTTC.ContainsKey(id)) {
      return new BloodTTCAsIDestructible(new BloodTTC(this, id));
    }
    if (rootIncarnation.incarnationsRocksTTC.ContainsKey(id)) {
      return new RocksTTCAsIDestructible(new RocksTTC(this, id));
    }
    if (rootIncarnation.incarnationsTreeTTC.ContainsKey(id)) {
      return new TreeTTCAsIDestructible(new TreeTTC(this, id));
    }
    if (rootIncarnation.incarnationsWaterTTC.ContainsKey(id)) {
      return new WaterTTCAsIDestructible(new WaterTTC(this, id));
    }
    if (rootIncarnation.incarnationsFloorTTC.ContainsKey(id)) {
      return new FloorTTCAsIDestructible(new FloorTTC(this, id));
    }
    if (rootIncarnation.incarnationsCaveWallTTC.ContainsKey(id)) {
      return new CaveWallTTCAsIDestructible(new CaveWallTTC(this, id));
    }
    if (rootIncarnation.incarnationsCaveTTC.ContainsKey(id)) {
      return new CaveTTCAsIDestructible(new CaveTTC(this, id));
    }
    if (rootIncarnation.incarnationsFallsTTC.ContainsKey(id)) {
      return new FallsTTCAsIDestructible(new FallsTTC(this, id));
    }
    if (rootIncarnation.incarnationsFireTTC.ContainsKey(id)) {
      return new FireTTCAsIDestructible(new FireTTC(this, id));
    }
    if (rootIncarnation.incarnationsObsidianFloorTTC.ContainsKey(id)) {
      return new ObsidianFloorTTCAsIDestructible(new ObsidianFloorTTC(this, id));
    }
    if (rootIncarnation.incarnationsMagmaTTC.ContainsKey(id)) {
      return new MagmaTTCAsIDestructible(new MagmaTTC(this, id));
    }
    if (rootIncarnation.incarnationsCliffTTC.ContainsKey(id)) {
      return new CliffTTCAsIDestructible(new CliffTTC(this, id));
    }
    if (rootIncarnation.incarnationsRavaNestTTC.ContainsKey(id)) {
      return new RavaNestTTCAsIDestructible(new RavaNestTTC(this, id));
    }
    if (rootIncarnation.incarnationsCliffLandingTTC.ContainsKey(id)) {
      return new CliffLandingTTCAsIDestructible(new CliffLandingTTC(this, id));
    }
    if (rootIncarnation.incarnationsStoneTTC.ContainsKey(id)) {
      return new StoneTTCAsIDestructible(new StoneTTC(this, id));
    }
    if (rootIncarnation.incarnationsGrassTTC.ContainsKey(id)) {
      return new GrassTTCAsIDestructible(new GrassTTC(this, id));
    }
    if (rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC.ContainsKey(id)) {
      return new IncendianFallsLevelLinkerTTCAsIDestructible(new IncendianFallsLevelLinkerTTC(this, id));
    }
    if (rootIncarnation.incarnationsEmberDeepLevelLinkerTTC.ContainsKey(id)) {
      return new EmberDeepLevelLinkerTTCAsIDestructible(new EmberDeepLevelLinkerTTC(this, id));
    }
    if (rootIncarnation.incarnationsUnit.ContainsKey(id)) {
      return new UnitAsIDestructible(new Unit(this, id));
    }
    throw new Exception("Unknown IDestructible: " + id);
  }
  public IDestructible GetIDestructibleOrNull(int id) {
    if (rootIncarnation.incarnationsTutorialDefyCounterUC.ContainsKey(id)) {
      return new TutorialDefyCounterUCAsIDestructible(new TutorialDefyCounterUC(this, id));
    }
    if (rootIncarnation.incarnationsLightningChargingUC.ContainsKey(id)) {
      return new LightningChargingUCAsIDestructible(new LightningChargingUC(this, id));
    }
    if (rootIncarnation.incarnationsWanderAICapabilityUC.ContainsKey(id)) {
      return new WanderAICapabilityUCAsIDestructible(new WanderAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsTemporaryCloneAICapabilityUC.ContainsKey(id)) {
      return new TemporaryCloneAICapabilityUCAsIDestructible(new TemporaryCloneAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsSummonAICapabilityUC.ContainsKey(id)) {
      return new SummonAICapabilityUCAsIDestructible(new SummonAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeAICapabilityUC.ContainsKey(id)) {
      return new KamikazeAICapabilityUCAsIDestructible(new KamikazeAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsGuardAICapabilityUC.ContainsKey(id)) {
      return new GuardAICapabilityUCAsIDestructible(new GuardAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsTimeCloneAICapabilityUC.ContainsKey(id)) {
      return new TimeCloneAICapabilityUCAsIDestructible(new TimeCloneAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsDoomedUC.ContainsKey(id)) {
      return new DoomedUCAsIDestructible(new DoomedUC(this, id));
    }
    if (rootIncarnation.incarnationsMiredUC.ContainsKey(id)) {
      return new MiredUCAsIDestructible(new MiredUC(this, id));
    }
    if (rootIncarnation.incarnationsAttackAICapabilityUC.ContainsKey(id)) {
      return new AttackAICapabilityUCAsIDestructible(new AttackAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsCounteringUC.ContainsKey(id)) {
      return new CounteringUCAsIDestructible(new CounteringUC(this, id));
    }
    if (rootIncarnation.incarnationsLightningChargedUC.ContainsKey(id)) {
      return new LightningChargedUCAsIDestructible(new LightningChargedUC(this, id));
    }
    if (rootIncarnation.incarnationsInvincibilityUC.ContainsKey(id)) {
      return new InvincibilityUCAsIDestructible(new InvincibilityUC(this, id));
    }
    if (rootIncarnation.incarnationsDefyingUC.ContainsKey(id)) {
      return new DefyingUCAsIDestructible(new DefyingUC(this, id));
    }
    if (rootIncarnation.incarnationsBideAICapabilityUC.ContainsKey(id)) {
      return new BideAICapabilityUCAsIDestructible(new BideAICapabilityUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseMovementTimeUC.ContainsKey(id)) {
      return new BaseMovementTimeUCAsIDestructible(new BaseMovementTimeUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseCombatTimeUC.ContainsKey(id)) {
      return new BaseCombatTimeUCAsIDestructible(new BaseCombatTimeUC(this, id));
    }
    if (rootIncarnation.incarnationsManaPotion.ContainsKey(id)) {
      return new ManaPotionAsIDestructible(new ManaPotion(this, id));
    }
    if (rootIncarnation.incarnationsHealthPotion.ContainsKey(id)) {
      return new HealthPotionAsIDestructible(new HealthPotion(this, id));
    }
    if (rootIncarnation.incarnationsSpeedRing.ContainsKey(id)) {
      return new SpeedRingAsIDestructible(new SpeedRing(this, id));
    }
    if (rootIncarnation.incarnationsGlaive.ContainsKey(id)) {
      return new GlaiveAsIDestructible(new Glaive(this, id));
    }
    if (rootIncarnation.incarnationsSlowRod.ContainsKey(id)) {
      return new SlowRodAsIDestructible(new SlowRod(this, id));
    }
    if (rootIncarnation.incarnationsBlastRod.ContainsKey(id)) {
      return new BlastRodAsIDestructible(new BlastRod(this, id));
    }
    if (rootIncarnation.incarnationsArmor.ContainsKey(id)) {
      return new ArmorAsIDestructible(new Armor(this, id));
    }
    if (rootIncarnation.incarnationsSorcerousUC.ContainsKey(id)) {
      return new SorcerousUCAsIDestructible(new SorcerousUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseOffenseUC.ContainsKey(id)) {
      return new BaseOffenseUCAsIDestructible(new BaseOffenseUC(this, id));
    }
    if (rootIncarnation.incarnationsBaseDefenseUC.ContainsKey(id)) {
      return new BaseDefenseUCAsIDestructible(new BaseDefenseUC(this, id));
    }
    if (rootIncarnation.incarnationsHoldPositionImpulse.ContainsKey(id)) {
      return new HoldPositionImpulseAsIDestructible(new HoldPositionImpulse(this, id));
    }
    if (rootIncarnation.incarnationsTemporaryCloneImpulse.ContainsKey(id)) {
      return new TemporaryCloneImpulseAsIDestructible(new TemporaryCloneImpulse(this, id));
    }
    if (rootIncarnation.incarnationsSummonImpulse.ContainsKey(id)) {
      return new SummonImpulseAsIDestructible(new SummonImpulse(this, id));
    }
    if (rootIncarnation.incarnationsMireImpulse.ContainsKey(id)) {
      return new MireImpulseAsIDestructible(new MireImpulse(this, id));
    }
    if (rootIncarnation.incarnationsEvaporateImpulse.ContainsKey(id)) {
      return new EvaporateImpulseAsIDestructible(new EvaporateImpulse(this, id));
    }
    if (rootIncarnation.incarnationsMoveImpulse.ContainsKey(id)) {
      return new MoveImpulseAsIDestructible(new MoveImpulse(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeJumpImpulse.ContainsKey(id)) {
      return new KamikazeJumpImpulseAsIDestructible(new KamikazeJumpImpulse(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeTargetImpulse.ContainsKey(id)) {
      return new KamikazeTargetImpulseAsIDestructible(new KamikazeTargetImpulse(this, id));
    }
    if (rootIncarnation.incarnationsNoImpulse.ContainsKey(id)) {
      return new NoImpulseAsIDestructible(new NoImpulse(this, id));
    }
    if (rootIncarnation.incarnationsFireImpulse.ContainsKey(id)) {
      return new FireImpulseAsIDestructible(new FireImpulse(this, id));
    }
    if (rootIncarnation.incarnationsDefyImpulse.ContainsKey(id)) {
      return new DefyImpulseAsIDestructible(new DefyImpulse(this, id));
    }
    if (rootIncarnation.incarnationsCounterImpulse.ContainsKey(id)) {
      return new CounterImpulseAsIDestructible(new CounterImpulse(this, id));
    }
    if (rootIncarnation.incarnationsUnleashBideImpulse.ContainsKey(id)) {
      return new UnleashBideImpulseAsIDestructible(new UnleashBideImpulse(this, id));
    }
    if (rootIncarnation.incarnationsContinueBidingImpulse.ContainsKey(id)) {
      return new ContinueBidingImpulseAsIDestructible(new ContinueBidingImpulse(this, id));
    }
    if (rootIncarnation.incarnationsStartBidingImpulse.ContainsKey(id)) {
      return new StartBidingImpulseAsIDestructible(new StartBidingImpulse(this, id));
    }
    if (rootIncarnation.incarnationsAttackImpulse.ContainsKey(id)) {
      return new AttackImpulseAsIDestructible(new AttackImpulse(this, id));
    }
    if (rootIncarnation.incarnationsPursueImpulse.ContainsKey(id)) {
      return new PursueImpulseAsIDestructible(new PursueImpulse(this, id));
    }
    if (rootIncarnation.incarnationsFireBombImpulse.ContainsKey(id)) {
      return new FireBombImpulseAsIDestructible(new FireBombImpulse(this, id));
    }
    if (rootIncarnation.incarnationsSimplePresenceTriggerTTC.ContainsKey(id)) {
      return new SimplePresenceTriggerTTCAsIDestructible(new SimplePresenceTriggerTTC(this, id));
    }
    if (rootIncarnation.incarnationsItemTTC.ContainsKey(id)) {
      return new ItemTTCAsIDestructible(new ItemTTC(this, id));
    }
    if (rootIncarnation.incarnationsKamikazeTargetTTC.ContainsKey(id)) {
      return new KamikazeTargetTTCAsIDestructible(new KamikazeTargetTTC(this, id));
    }
    if (rootIncarnation.incarnationsWarperTTC.ContainsKey(id)) {
      return new WarperTTCAsIDestructible(new WarperTTC(this, id));
    }
    if (rootIncarnation.incarnationsTimeAnchorTTC.ContainsKey(id)) {
      return new TimeAnchorTTCAsIDestructible(new TimeAnchorTTC(this, id));
    }
    if (rootIncarnation.incarnationsFireBombTTC.ContainsKey(id)) {
      return new FireBombTTCAsIDestructible(new FireBombTTC(this, id));
    }
    if (rootIncarnation.incarnationsMarkerTTC.ContainsKey(id)) {
      return new MarkerTTCAsIDestructible(new MarkerTTC(this, id));
    }
    if (rootIncarnation.incarnationsLevelLinkTTC.ContainsKey(id)) {
      return new LevelLinkTTCAsIDestructible(new LevelLinkTTC(this, id));
    }
    if (rootIncarnation.incarnationsMudTTC.ContainsKey(id)) {
      return new MudTTCAsIDestructible(new MudTTC(this, id));
    }
    if (rootIncarnation.incarnationsDirtTTC.ContainsKey(id)) {
      return new DirtTTCAsIDestructible(new DirtTTC(this, id));
    }
    if (rootIncarnation.incarnationsObsidianTTC.ContainsKey(id)) {
      return new ObsidianTTCAsIDestructible(new ObsidianTTC(this, id));
    }
    if (rootIncarnation.incarnationsDownStairsTTC.ContainsKey(id)) {
      return new DownStairsTTCAsIDestructible(new DownStairsTTC(this, id));
    }
    if (rootIncarnation.incarnationsUpStairsTTC.ContainsKey(id)) {
      return new UpStairsTTCAsIDestructible(new UpStairsTTC(this, id));
    }
    if (rootIncarnation.incarnationsWallTTC.ContainsKey(id)) {
      return new WallTTCAsIDestructible(new WallTTC(this, id));
    }
    if (rootIncarnation.incarnationsBloodTTC.ContainsKey(id)) {
      return new BloodTTCAsIDestructible(new BloodTTC(this, id));
    }
    if (rootIncarnation.incarnationsRocksTTC.ContainsKey(id)) {
      return new RocksTTCAsIDestructible(new RocksTTC(this, id));
    }
    if (rootIncarnation.incarnationsTreeTTC.ContainsKey(id)) {
      return new TreeTTCAsIDestructible(new TreeTTC(this, id));
    }
    if (rootIncarnation.incarnationsWaterTTC.ContainsKey(id)) {
      return new WaterTTCAsIDestructible(new WaterTTC(this, id));
    }
    if (rootIncarnation.incarnationsFloorTTC.ContainsKey(id)) {
      return new FloorTTCAsIDestructible(new FloorTTC(this, id));
    }
    if (rootIncarnation.incarnationsCaveWallTTC.ContainsKey(id)) {
      return new CaveWallTTCAsIDestructible(new CaveWallTTC(this, id));
    }
    if (rootIncarnation.incarnationsCaveTTC.ContainsKey(id)) {
      return new CaveTTCAsIDestructible(new CaveTTC(this, id));
    }
    if (rootIncarnation.incarnationsFallsTTC.ContainsKey(id)) {
      return new FallsTTCAsIDestructible(new FallsTTC(this, id));
    }
    if (rootIncarnation.incarnationsFireTTC.ContainsKey(id)) {
      return new FireTTCAsIDestructible(new FireTTC(this, id));
    }
    if (rootIncarnation.incarnationsObsidianFloorTTC.ContainsKey(id)) {
      return new ObsidianFloorTTCAsIDestructible(new ObsidianFloorTTC(this, id));
    }
    if (rootIncarnation.incarnationsMagmaTTC.ContainsKey(id)) {
      return new MagmaTTCAsIDestructible(new MagmaTTC(this, id));
    }
    if (rootIncarnation.incarnationsCliffTTC.ContainsKey(id)) {
      return new CliffTTCAsIDestructible(new CliffTTC(this, id));
    }
    if (rootIncarnation.incarnationsRavaNestTTC.ContainsKey(id)) {
      return new RavaNestTTCAsIDestructible(new RavaNestTTC(this, id));
    }
    if (rootIncarnation.incarnationsCliffLandingTTC.ContainsKey(id)) {
      return new CliffLandingTTCAsIDestructible(new CliffLandingTTC(this, id));
    }
    if (rootIncarnation.incarnationsStoneTTC.ContainsKey(id)) {
      return new StoneTTCAsIDestructible(new StoneTTC(this, id));
    }
    if (rootIncarnation.incarnationsGrassTTC.ContainsKey(id)) {
      return new GrassTTCAsIDestructible(new GrassTTC(this, id));
    }
    if (rootIncarnation.incarnationsIncendianFallsLevelLinkerTTC.ContainsKey(id)) {
      return new IncendianFallsLevelLinkerTTCAsIDestructible(new IncendianFallsLevelLinkerTTC(this, id));
    }
    if (rootIncarnation.incarnationsEmberDeepLevelLinkerTTC.ContainsKey(id)) {
      return new EmberDeepLevelLinkerTTCAsIDestructible(new EmberDeepLevelLinkerTTC(this, id));
    }
    if (rootIncarnation.incarnationsUnit.ContainsKey(id)) {
      return new UnitAsIDestructible(new Unit(this, id));
    }
    return NullIDestructible.Null;
  }
  public bool IDestructibleExists(int id) {
    return GetIDestructibleOrNull(id) != null;
  }
  public void CheckHasIDestructible(IDestructible thing) {
    GetIDestructible(thing.id);
  }
  public void CheckHasIDestructible(int id) {
    GetIDestructible(id);
  }

    public int GetIGameEventMutListHash(int id, int version, IGameEventMutListIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.list) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public IGameEventMutListIncarnation GetIGameEventMutListIncarnation(int id) {
      return rootIncarnation.incarnationsIGameEventMutList[id].incarnation;
    }
    public IGameEventMutList GetIGameEventMutList(int id) {
      return new IGameEventMutList(this, id);
    }
    public List<IGameEventMutList> AllIGameEventMutList() {
      List<IGameEventMutList> result = new List<IGameEventMutList>(rootIncarnation.incarnationsIGameEventMutList.Count);
      foreach (var id in rootIncarnation.incarnationsIGameEventMutList.Keys) {
        result.Add(new IGameEventMutList(this, id));
      }
      return result;
    }
    public bool IGameEventMutListExists(int id) {
      return rootIncarnation.incarnationsIGameEventMutList.ContainsKey(id);
    }
    public void CheckHasIGameEventMutList(IGameEventMutList thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasIGameEventMutList(thing.id);
    }
    public void CheckHasIGameEventMutList(int id) {
      if (!rootIncarnation.incarnationsIGameEventMutList.ContainsKey(id)) {
        throw new System.Exception("Invalid IGameEventMutList}: " + id);
      }
    }
    public IGameEventMutList EffectIGameEventMutListCreate() {
      CheckUnlocked();
      var id = NewId();
      EffectInternalCreateIGameEventMutList(id, rootIncarnation.version, new IGameEventMutListIncarnation(new List<IGameEvent>()));
      return new IGameEventMutList(this, id);
    }
    public IGameEventMutList EffectIGameEventMutListCreate(IEnumerable<IGameEvent> elements) {
      var id = NewId();
      var incarnation = new IGameEventMutListIncarnation(new List<IGameEvent>(elements));
      EffectInternalCreateIGameEventMutList(id, rootIncarnation.version, incarnation);
      return new IGameEventMutList(this, id);
    }
    public void EffectInternalCreateIGameEventMutList(int id, int incarnationVersion, IGameEventMutListIncarnation incarnation) {
      var effect = new IGameEventMutListCreateEffect(id);
      rootIncarnation.incarnationsIGameEventMutList
          .Add(
              id,
              new VersionAndIncarnation<IGameEventMutListIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsIGameEventMutListCreateEffect.Add(effect);
    }
    public void EffectIGameEventMutListDelete(int id) {
      CheckUnlocked();
      var effect = new IGameEventMutListDeleteEffect(id);
      effectsIGameEventMutListDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsIGameEventMutList[id];
      rootIncarnation.incarnationsIGameEventMutList.Remove(id);
    }
    public void EffectIGameEventMutListAdd(int listId, IGameEvent element) {
      CheckUnlocked();
      CheckHasIGameEventMutList(listId);

    
      var effect = new IGameEventMutListAddEffect(listId, element);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsIGameEventMutList[listId];
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.list.Add(element);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.list;
        var newMap = new List<IGameEvent>(oldMap);
        newMap.Add(element);
        var newIncarnation = new IGameEventMutListIncarnation(newMap);
        rootIncarnation.incarnationsIGameEventMutList[listId] =
            new VersionAndIncarnation<IGameEventMutListIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsIGameEventMutListAddEffect.Add(effect);
    }
    public void EffectIGameEventMutListRemoveAt(int listId, int index) {
      CheckUnlocked();
      CheckHasIGameEventMutList(listId);

      var effect = new IGameEventMutListRemoveEffect(listId, index);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsIGameEventMutList[listId];
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        var oldElement = oldIncarnationAndVersion.incarnation.list[index];
        oldIncarnationAndVersion.incarnation.list.RemoveAt(index);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.list;
        var newMap = new List<IGameEvent>(oldMap);
        newMap.RemoveAt(index);
        var newIncarnation = new IGameEventMutListIncarnation(newMap);
        rootIncarnation.incarnationsIGameEventMutList[listId] =
            new VersionAndIncarnation<IGameEventMutListIncarnation>(
                rootIncarnation.version, newIncarnation);

      }
      effectsIGameEventMutListRemoveEffect.Add(effect);
    }
       
    public void AddIGameEventMutListObserver(int id, IIGameEventMutListEffectObserver observer) {
      List<IIGameEventMutListEffectObserver> obsies;
      if (!observersForIGameEventMutList.TryGetValue(id, out obsies)) {
        obsies = new List<IIGameEventMutListEffectObserver>();
      }
      obsies.Add(observer);
      observersForIGameEventMutList[id] = obsies;
    }

    public void RemoveIGameEventMutListObserver(int id, IIGameEventMutListEffectObserver observer) {
      if (observersForIGameEventMutList.ContainsKey(id)) {
        var list = observersForIGameEventMutList[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForIGameEventMutList.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }

  public void BroadcastIGameEventMutListEffects(
      SortedDictionary<int, List<IIGameEventMutListEffectObserver>> observers) {
    foreach (var effect in effectsIGameEventMutListDeleteEffect) {
      if (observers.TryGetValue(0, out List<IIGameEventMutListEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIGameEventMutListEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIGameEventMutListEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIGameEventMutListEffect(effect);
        }
        observersForIGameEventMutList.Remove(effect.id);
      }
    }
    effectsIGameEventMutListDeleteEffect.Clear();

    foreach (var effect in effectsIGameEventMutListAddEffect) {
      if (observers.TryGetValue(0, out List<IIGameEventMutListEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIGameEventMutListEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIGameEventMutListEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIGameEventMutListEffect(effect);
        }
      }
    }
    effectsIGameEventMutListAddEffect.Clear();

    foreach (var effect in effectsIGameEventMutListRemoveEffect) {
      if (observers.TryGetValue(0, out List<IIGameEventMutListEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIGameEventMutListEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIGameEventMutListEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIGameEventMutListEffect(effect);
        }
      }
    }
    effectsIGameEventMutListRemoveEffect.Clear();

    foreach (var effect in effectsIGameEventMutListCreateEffect) {
      if (observers.TryGetValue(0, out List<IIGameEventMutListEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIGameEventMutListEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIGameEventMutListEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIGameEventMutListEffect(effect);
        }
      }
    }
    effectsIGameEventMutListCreateEffect.Clear();

  }

    public int GetLocationMutListHash(int id, int version, LocationMutListIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.list) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public LocationMutListIncarnation GetLocationMutListIncarnation(int id) {
      return rootIncarnation.incarnationsLocationMutList[id].incarnation;
    }
    public LocationMutList GetLocationMutList(int id) {
      return new LocationMutList(this, id);
    }
    public List<LocationMutList> AllLocationMutList() {
      List<LocationMutList> result = new List<LocationMutList>(rootIncarnation.incarnationsLocationMutList.Count);
      foreach (var id in rootIncarnation.incarnationsLocationMutList.Keys) {
        result.Add(new LocationMutList(this, id));
      }
      return result;
    }
    public bool LocationMutListExists(int id) {
      return rootIncarnation.incarnationsLocationMutList.ContainsKey(id);
    }
    public void CheckHasLocationMutList(LocationMutList thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasLocationMutList(thing.id);
    }
    public void CheckHasLocationMutList(int id) {
      if (!rootIncarnation.incarnationsLocationMutList.ContainsKey(id)) {
        throw new System.Exception("Invalid LocationMutList}: " + id);
      }
    }
    public LocationMutList EffectLocationMutListCreate() {
      CheckUnlocked();
      var id = NewId();
      EffectInternalCreateLocationMutList(id, rootIncarnation.version, new LocationMutListIncarnation(new List<Location>()));
      return new LocationMutList(this, id);
    }
    public LocationMutList EffectLocationMutListCreate(IEnumerable<Location> elements) {
      var id = NewId();
      var incarnation = new LocationMutListIncarnation(new List<Location>(elements));
      EffectInternalCreateLocationMutList(id, rootIncarnation.version, incarnation);
      return new LocationMutList(this, id);
    }
    public void EffectInternalCreateLocationMutList(int id, int incarnationVersion, LocationMutListIncarnation incarnation) {
      var effect = new LocationMutListCreateEffect(id);
      rootIncarnation.incarnationsLocationMutList
          .Add(
              id,
              new VersionAndIncarnation<LocationMutListIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsLocationMutListCreateEffect.Add(effect);
    }
    public void EffectLocationMutListDelete(int id) {
      CheckUnlocked();
      var effect = new LocationMutListDeleteEffect(id);
      effectsLocationMutListDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsLocationMutList[id];
      rootIncarnation.incarnationsLocationMutList.Remove(id);
    }
    public void EffectLocationMutListAdd(int listId, Location element) {
      CheckUnlocked();
      CheckHasLocationMutList(listId);

    
      var effect = new LocationMutListAddEffect(listId, element);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsLocationMutList[listId];
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.list.Add(element);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.list;
        var newMap = new List<Location>(oldMap);
        newMap.Add(element);
        var newIncarnation = new LocationMutListIncarnation(newMap);
        rootIncarnation.incarnationsLocationMutList[listId] =
            new VersionAndIncarnation<LocationMutListIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsLocationMutListAddEffect.Add(effect);
    }
    public void EffectLocationMutListRemoveAt(int listId, int index) {
      CheckUnlocked();
      CheckHasLocationMutList(listId);

      var effect = new LocationMutListRemoveEffect(listId, index);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsLocationMutList[listId];
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        var oldElement = oldIncarnationAndVersion.incarnation.list[index];
        oldIncarnationAndVersion.incarnation.list.RemoveAt(index);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.list;
        var newMap = new List<Location>(oldMap);
        newMap.RemoveAt(index);
        var newIncarnation = new LocationMutListIncarnation(newMap);
        rootIncarnation.incarnationsLocationMutList[listId] =
            new VersionAndIncarnation<LocationMutListIncarnation>(
                rootIncarnation.version, newIncarnation);

      }
      effectsLocationMutListRemoveEffect.Add(effect);
    }
       
    public void AddLocationMutListObserver(int id, ILocationMutListEffectObserver observer) {
      List<ILocationMutListEffectObserver> obsies;
      if (!observersForLocationMutList.TryGetValue(id, out obsies)) {
        obsies = new List<ILocationMutListEffectObserver>();
      }
      obsies.Add(observer);
      observersForLocationMutList[id] = obsies;
    }

    public void RemoveLocationMutListObserver(int id, ILocationMutListEffectObserver observer) {
      if (observersForLocationMutList.ContainsKey(id)) {
        var list = observersForLocationMutList[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForLocationMutList.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }

  public void BroadcastLocationMutListEffects(
      SortedDictionary<int, List<ILocationMutListEffectObserver>> observers) {
    foreach (var effect in effectsLocationMutListDeleteEffect) {
      if (observers.TryGetValue(0, out List<ILocationMutListEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLocationMutListEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILocationMutListEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLocationMutListEffect(effect);
        }
        observersForLocationMutList.Remove(effect.id);
      }
    }
    effectsLocationMutListDeleteEffect.Clear();

    foreach (var effect in effectsLocationMutListAddEffect) {
      if (observers.TryGetValue(0, out List<ILocationMutListEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLocationMutListEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILocationMutListEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLocationMutListEffect(effect);
        }
      }
    }
    effectsLocationMutListAddEffect.Clear();

    foreach (var effect in effectsLocationMutListRemoveEffect) {
      if (observers.TryGetValue(0, out List<ILocationMutListEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLocationMutListEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILocationMutListEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLocationMutListEffect(effect);
        }
      }
    }
    effectsLocationMutListRemoveEffect.Clear();

    foreach (var effect in effectsLocationMutListCreateEffect) {
      if (observers.TryGetValue(0, out List<ILocationMutListEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLocationMutListEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILocationMutListEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLocationMutListEffect(effect);
        }
      }
    }
    effectsLocationMutListCreateEffect.Clear();

  }

    public int GetIRequestMutListHash(int id, int version, IRequestMutListIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.list) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public IRequestMutListIncarnation GetIRequestMutListIncarnation(int id) {
      return rootIncarnation.incarnationsIRequestMutList[id].incarnation;
    }
    public IRequestMutList GetIRequestMutList(int id) {
      return new IRequestMutList(this, id);
    }
    public List<IRequestMutList> AllIRequestMutList() {
      List<IRequestMutList> result = new List<IRequestMutList>(rootIncarnation.incarnationsIRequestMutList.Count);
      foreach (var id in rootIncarnation.incarnationsIRequestMutList.Keys) {
        result.Add(new IRequestMutList(this, id));
      }
      return result;
    }
    public bool IRequestMutListExists(int id) {
      return rootIncarnation.incarnationsIRequestMutList.ContainsKey(id);
    }
    public void CheckHasIRequestMutList(IRequestMutList thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasIRequestMutList(thing.id);
    }
    public void CheckHasIRequestMutList(int id) {
      if (!rootIncarnation.incarnationsIRequestMutList.ContainsKey(id)) {
        throw new System.Exception("Invalid IRequestMutList}: " + id);
      }
    }
    public IRequestMutList EffectIRequestMutListCreate() {
      CheckUnlocked();
      var id = NewId();
      EffectInternalCreateIRequestMutList(id, rootIncarnation.version, new IRequestMutListIncarnation(new List<IRequest>()));
      return new IRequestMutList(this, id);
    }
    public IRequestMutList EffectIRequestMutListCreate(IEnumerable<IRequest> elements) {
      var id = NewId();
      var incarnation = new IRequestMutListIncarnation(new List<IRequest>(elements));
      EffectInternalCreateIRequestMutList(id, rootIncarnation.version, incarnation);
      return new IRequestMutList(this, id);
    }
    public void EffectInternalCreateIRequestMutList(int id, int incarnationVersion, IRequestMutListIncarnation incarnation) {
      var effect = new IRequestMutListCreateEffect(id);
      rootIncarnation.incarnationsIRequestMutList
          .Add(
              id,
              new VersionAndIncarnation<IRequestMutListIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsIRequestMutListCreateEffect.Add(effect);
    }
    public void EffectIRequestMutListDelete(int id) {
      CheckUnlocked();
      var effect = new IRequestMutListDeleteEffect(id);
      effectsIRequestMutListDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsIRequestMutList[id];
      rootIncarnation.incarnationsIRequestMutList.Remove(id);
    }
    public void EffectIRequestMutListAdd(int listId, IRequest element) {
      CheckUnlocked();
      CheckHasIRequestMutList(listId);

    
      var effect = new IRequestMutListAddEffect(listId, element);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsIRequestMutList[listId];
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.list.Add(element);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.list;
        var newMap = new List<IRequest>(oldMap);
        newMap.Add(element);
        var newIncarnation = new IRequestMutListIncarnation(newMap);
        rootIncarnation.incarnationsIRequestMutList[listId] =
            new VersionAndIncarnation<IRequestMutListIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsIRequestMutListAddEffect.Add(effect);
    }
    public void EffectIRequestMutListRemoveAt(int listId, int index) {
      CheckUnlocked();
      CheckHasIRequestMutList(listId);

      var effect = new IRequestMutListRemoveEffect(listId, index);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsIRequestMutList[listId];
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        var oldElement = oldIncarnationAndVersion.incarnation.list[index];
        oldIncarnationAndVersion.incarnation.list.RemoveAt(index);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.list;
        var newMap = new List<IRequest>(oldMap);
        newMap.RemoveAt(index);
        var newIncarnation = new IRequestMutListIncarnation(newMap);
        rootIncarnation.incarnationsIRequestMutList[listId] =
            new VersionAndIncarnation<IRequestMutListIncarnation>(
                rootIncarnation.version, newIncarnation);

      }
      effectsIRequestMutListRemoveEffect.Add(effect);
    }
       
    public void AddIRequestMutListObserver(int id, IIRequestMutListEffectObserver observer) {
      List<IIRequestMutListEffectObserver> obsies;
      if (!observersForIRequestMutList.TryGetValue(id, out obsies)) {
        obsies = new List<IIRequestMutListEffectObserver>();
      }
      obsies.Add(observer);
      observersForIRequestMutList[id] = obsies;
    }

    public void RemoveIRequestMutListObserver(int id, IIRequestMutListEffectObserver observer) {
      if (observersForIRequestMutList.ContainsKey(id)) {
        var list = observersForIRequestMutList[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForIRequestMutList.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }

  public void BroadcastIRequestMutListEffects(
      SortedDictionary<int, List<IIRequestMutListEffectObserver>> observers) {
    foreach (var effect in effectsIRequestMutListDeleteEffect) {
      if (observers.TryGetValue(0, out List<IIRequestMutListEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIRequestMutListEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIRequestMutListEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIRequestMutListEffect(effect);
        }
        observersForIRequestMutList.Remove(effect.id);
      }
    }
    effectsIRequestMutListDeleteEffect.Clear();

    foreach (var effect in effectsIRequestMutListAddEffect) {
      if (observers.TryGetValue(0, out List<IIRequestMutListEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIRequestMutListEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIRequestMutListEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIRequestMutListEffect(effect);
        }
      }
    }
    effectsIRequestMutListAddEffect.Clear();

    foreach (var effect in effectsIRequestMutListRemoveEffect) {
      if (observers.TryGetValue(0, out List<IIRequestMutListEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIRequestMutListEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIRequestMutListEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIRequestMutListEffect(effect);
        }
      }
    }
    effectsIRequestMutListRemoveEffect.Clear();

    foreach (var effect in effectsIRequestMutListCreateEffect) {
      if (observers.TryGetValue(0, out List<IIRequestMutListEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIRequestMutListEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIRequestMutListEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIRequestMutListEffect(effect);
        }
      }
    }
    effectsIRequestMutListCreateEffect.Clear();

  }

    public int GetIUnitEventMutListHash(int id, int version, IUnitEventMutListIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.list) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public IUnitEventMutListIncarnation GetIUnitEventMutListIncarnation(int id) {
      return rootIncarnation.incarnationsIUnitEventMutList[id].incarnation;
    }
    public IUnitEventMutList GetIUnitEventMutList(int id) {
      return new IUnitEventMutList(this, id);
    }
    public List<IUnitEventMutList> AllIUnitEventMutList() {
      List<IUnitEventMutList> result = new List<IUnitEventMutList>(rootIncarnation.incarnationsIUnitEventMutList.Count);
      foreach (var id in rootIncarnation.incarnationsIUnitEventMutList.Keys) {
        result.Add(new IUnitEventMutList(this, id));
      }
      return result;
    }
    public bool IUnitEventMutListExists(int id) {
      return rootIncarnation.incarnationsIUnitEventMutList.ContainsKey(id);
    }
    public void CheckHasIUnitEventMutList(IUnitEventMutList thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasIUnitEventMutList(thing.id);
    }
    public void CheckHasIUnitEventMutList(int id) {
      if (!rootIncarnation.incarnationsIUnitEventMutList.ContainsKey(id)) {
        throw new System.Exception("Invalid IUnitEventMutList}: " + id);
      }
    }
    public IUnitEventMutList EffectIUnitEventMutListCreate() {
      CheckUnlocked();
      var id = NewId();
      EffectInternalCreateIUnitEventMutList(id, rootIncarnation.version, new IUnitEventMutListIncarnation(new List<IUnitEvent>()));
      return new IUnitEventMutList(this, id);
    }
    public IUnitEventMutList EffectIUnitEventMutListCreate(IEnumerable<IUnitEvent> elements) {
      var id = NewId();
      var incarnation = new IUnitEventMutListIncarnation(new List<IUnitEvent>(elements));
      EffectInternalCreateIUnitEventMutList(id, rootIncarnation.version, incarnation);
      return new IUnitEventMutList(this, id);
    }
    public void EffectInternalCreateIUnitEventMutList(int id, int incarnationVersion, IUnitEventMutListIncarnation incarnation) {
      var effect = new IUnitEventMutListCreateEffect(id);
      rootIncarnation.incarnationsIUnitEventMutList
          .Add(
              id,
              new VersionAndIncarnation<IUnitEventMutListIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsIUnitEventMutListCreateEffect.Add(effect);
    }
    public void EffectIUnitEventMutListDelete(int id) {
      CheckUnlocked();
      var effect = new IUnitEventMutListDeleteEffect(id);
      effectsIUnitEventMutListDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsIUnitEventMutList[id];
      rootIncarnation.incarnationsIUnitEventMutList.Remove(id);
    }
    public void EffectIUnitEventMutListAdd(int listId, IUnitEvent element) {
      CheckUnlocked();
      CheckHasIUnitEventMutList(listId);

    
      var effect = new IUnitEventMutListAddEffect(listId, element);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsIUnitEventMutList[listId];
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.list.Add(element);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.list;
        var newMap = new List<IUnitEvent>(oldMap);
        newMap.Add(element);
        var newIncarnation = new IUnitEventMutListIncarnation(newMap);
        rootIncarnation.incarnationsIUnitEventMutList[listId] =
            new VersionAndIncarnation<IUnitEventMutListIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsIUnitEventMutListAddEffect.Add(effect);
    }
    public void EffectIUnitEventMutListRemoveAt(int listId, int index) {
      CheckUnlocked();
      CheckHasIUnitEventMutList(listId);

      var effect = new IUnitEventMutListRemoveEffect(listId, index);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsIUnitEventMutList[listId];
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        var oldElement = oldIncarnationAndVersion.incarnation.list[index];
        oldIncarnationAndVersion.incarnation.list.RemoveAt(index);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.list;
        var newMap = new List<IUnitEvent>(oldMap);
        newMap.RemoveAt(index);
        var newIncarnation = new IUnitEventMutListIncarnation(newMap);
        rootIncarnation.incarnationsIUnitEventMutList[listId] =
            new VersionAndIncarnation<IUnitEventMutListIncarnation>(
                rootIncarnation.version, newIncarnation);

      }
      effectsIUnitEventMutListRemoveEffect.Add(effect);
    }
       
    public void AddIUnitEventMutListObserver(int id, IIUnitEventMutListEffectObserver observer) {
      List<IIUnitEventMutListEffectObserver> obsies;
      if (!observersForIUnitEventMutList.TryGetValue(id, out obsies)) {
        obsies = new List<IIUnitEventMutListEffectObserver>();
      }
      obsies.Add(observer);
      observersForIUnitEventMutList[id] = obsies;
    }

    public void RemoveIUnitEventMutListObserver(int id, IIUnitEventMutListEffectObserver observer) {
      if (observersForIUnitEventMutList.ContainsKey(id)) {
        var list = observersForIUnitEventMutList[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForIUnitEventMutList.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }

  public void BroadcastIUnitEventMutListEffects(
      SortedDictionary<int, List<IIUnitEventMutListEffectObserver>> observers) {
    foreach (var effect in effectsIUnitEventMutListDeleteEffect) {
      if (observers.TryGetValue(0, out List<IIUnitEventMutListEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIUnitEventMutListEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIUnitEventMutListEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIUnitEventMutListEffect(effect);
        }
        observersForIUnitEventMutList.Remove(effect.id);
      }
    }
    effectsIUnitEventMutListDeleteEffect.Clear();

    foreach (var effect in effectsIUnitEventMutListAddEffect) {
      if (observers.TryGetValue(0, out List<IIUnitEventMutListEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIUnitEventMutListEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIUnitEventMutListEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIUnitEventMutListEffect(effect);
        }
      }
    }
    effectsIUnitEventMutListAddEffect.Clear();

    foreach (var effect in effectsIUnitEventMutListRemoveEffect) {
      if (observers.TryGetValue(0, out List<IIUnitEventMutListEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIUnitEventMutListEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIUnitEventMutListEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIUnitEventMutListEffect(effect);
        }
      }
    }
    effectsIUnitEventMutListRemoveEffect.Clear();

    foreach (var effect in effectsIUnitEventMutListCreateEffect) {
      if (observers.TryGetValue(0, out List<IIUnitEventMutListEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIUnitEventMutListEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIUnitEventMutListEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIUnitEventMutListEffect(effect);
        }
      }
    }
    effectsIUnitEventMutListCreateEffect.Clear();

  }

    public int GetLevelMutSetHash(int id, int version, LevelMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public LevelMutSetIncarnation GetLevelMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsLevelMutSet[id].incarnation;
    }
    public LevelMutSet GetLevelMutSet(int id) {
      return new LevelMutSet(this, id);
    }
    public List<LevelMutSet> AllLevelMutSet() {
      List<LevelMutSet> result = new List<LevelMutSet>(rootIncarnation.incarnationsLevelMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsLevelMutSet.Keys) {
        result.Add(new LevelMutSet(this, id));
      }
      return result;
    }
    public bool LevelMutSetExists(int id) {
      return rootIncarnation.incarnationsLevelMutSet.ContainsKey(id);
    }
    public void CheckHasLevelMutSet(LevelMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasLevelMutSet(thing.id);
    }
    public void CheckHasLevelMutSet(int id) {
      if (!rootIncarnation.incarnationsLevelMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid LevelMutSet}: " + id);
      }
    }
    public LevelMutSet EffectLevelMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new LevelMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateLevelMutSet(id, rootIncarnation.version, incarnation);
      return new LevelMutSet(this, id);
    }
    public void EffectInternalCreateLevelMutSet(int id, int incarnationVersion, LevelMutSetIncarnation incarnation) {
      var effect = new LevelMutSetCreateEffect(id);
      rootIncarnation.incarnationsLevelMutSet
          .Add(
              id,
              new VersionAndIncarnation<LevelMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsLevelMutSetCreateEffect.Add(effect);
    }
    public void EffectLevelMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new LevelMutSetDeleteEffect(id);
      effectsLevelMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsLevelMutSet[id];
      rootIncarnation.incarnationsLevelMutSet.Remove(id);
    }

       
    public void EffectLevelMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasLevelMutSet(setId);
      CheckHasLevel(elementId);

      var effect = new LevelMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsLevelMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new LevelMutSetIncarnation(newMap);
        rootIncarnation.incarnationsLevelMutSet[setId] =
            new VersionAndIncarnation<LevelMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsLevelMutSetAddEffect.Add(effect);
    }
    public void EffectLevelMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasLevelMutSet(setId);
      CheckHasLevel(elementId);

      var effect = new LevelMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsLevelMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new LevelMutSetIncarnation(newMap);
        rootIncarnation.incarnationsLevelMutSet[setId] =
            new VersionAndIncarnation<LevelMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsLevelMutSetRemoveEffect.Add(effect);
    }

       
    public void AddLevelMutSetObserver(int id, ILevelMutSetEffectObserver observer) {
      List<ILevelMutSetEffectObserver> obsies;
      if (!observersForLevelMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ILevelMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForLevelMutSet[id] = obsies;
    }

    public void RemoveLevelMutSetObserver(int id, ILevelMutSetEffectObserver observer) {
      if (observersForLevelMutSet.ContainsKey(id)) {
        var list = observersForLevelMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForLevelMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastLevelMutSetEffects(
      SortedDictionary<int, List<ILevelMutSetEffectObserver>> observers) {
    foreach (var effect in effectsLevelMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ILevelMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLevelMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILevelMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLevelMutSetEffect(effect);
        }
        observersForLevelMutSet.Remove(effect.id);
      }
    }
    effectsLevelMutSetDeleteEffect.Clear();

    foreach (var effect in effectsLevelMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ILevelMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLevelMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILevelMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLevelMutSetEffect(effect);
        }
      }
    }
    effectsLevelMutSetAddEffect.Clear();

    foreach (var effect in effectsLevelMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ILevelMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLevelMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILevelMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLevelMutSetEffect(effect);
        }
      }
    }
    effectsLevelMutSetRemoveEffect.Clear();

    foreach (var effect in effectsLevelMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ILevelMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLevelMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILevelMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLevelMutSetEffect(effect);
        }
      }
    }
    effectsLevelMutSetCreateEffect.Clear();

  }

    public int GetDoomedUCWeakMutSetHash(int id, int version, DoomedUCWeakMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public DoomedUCWeakMutSetIncarnation GetDoomedUCWeakMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsDoomedUCWeakMutSet[id].incarnation;
    }
    public DoomedUCWeakMutSet GetDoomedUCWeakMutSet(int id) {
      return new DoomedUCWeakMutSet(this, id);
    }
    public List<DoomedUCWeakMutSet> AllDoomedUCWeakMutSet() {
      List<DoomedUCWeakMutSet> result = new List<DoomedUCWeakMutSet>(rootIncarnation.incarnationsDoomedUCWeakMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsDoomedUCWeakMutSet.Keys) {
        result.Add(new DoomedUCWeakMutSet(this, id));
      }
      return result;
    }
    public bool DoomedUCWeakMutSetExists(int id) {
      return rootIncarnation.incarnationsDoomedUCWeakMutSet.ContainsKey(id);
    }
    public void CheckHasDoomedUCWeakMutSet(DoomedUCWeakMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasDoomedUCWeakMutSet(thing.id);
    }
    public void CheckHasDoomedUCWeakMutSet(int id) {
      if (!rootIncarnation.incarnationsDoomedUCWeakMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid DoomedUCWeakMutSet}: " + id);
      }
    }
    public DoomedUCWeakMutSet EffectDoomedUCWeakMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new DoomedUCWeakMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateDoomedUCWeakMutSet(id, rootIncarnation.version, incarnation);
      return new DoomedUCWeakMutSet(this, id);
    }
    public void EffectInternalCreateDoomedUCWeakMutSet(int id, int incarnationVersion, DoomedUCWeakMutSetIncarnation incarnation) {
      var effect = new DoomedUCWeakMutSetCreateEffect(id);
      rootIncarnation.incarnationsDoomedUCWeakMutSet
          .Add(
              id,
              new VersionAndIncarnation<DoomedUCWeakMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsDoomedUCWeakMutSetCreateEffect.Add(effect);
    }
    public void EffectDoomedUCWeakMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new DoomedUCWeakMutSetDeleteEffect(id);
      effectsDoomedUCWeakMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsDoomedUCWeakMutSet[id];
      rootIncarnation.incarnationsDoomedUCWeakMutSet.Remove(id);
    }

       
    public void EffectDoomedUCWeakMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasDoomedUCWeakMutSet(setId);
      CheckHasDoomedUC(elementId);

      var effect = new DoomedUCWeakMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsDoomedUCWeakMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new DoomedUCWeakMutSetIncarnation(newMap);
        rootIncarnation.incarnationsDoomedUCWeakMutSet[setId] =
            new VersionAndIncarnation<DoomedUCWeakMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsDoomedUCWeakMutSetAddEffect.Add(effect);
    }
    public void EffectDoomedUCWeakMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasDoomedUCWeakMutSet(setId);
      CheckHasDoomedUC(elementId);

      var effect = new DoomedUCWeakMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsDoomedUCWeakMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new DoomedUCWeakMutSetIncarnation(newMap);
        rootIncarnation.incarnationsDoomedUCWeakMutSet[setId] =
            new VersionAndIncarnation<DoomedUCWeakMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsDoomedUCWeakMutSetRemoveEffect.Add(effect);
    }

       
    public void AddDoomedUCWeakMutSetObserver(int id, IDoomedUCWeakMutSetEffectObserver observer) {
      List<IDoomedUCWeakMutSetEffectObserver> obsies;
      if (!observersForDoomedUCWeakMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IDoomedUCWeakMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForDoomedUCWeakMutSet[id] = obsies;
    }

    public void RemoveDoomedUCWeakMutSetObserver(int id, IDoomedUCWeakMutSetEffectObserver observer) {
      if (observersForDoomedUCWeakMutSet.ContainsKey(id)) {
        var list = observersForDoomedUCWeakMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForDoomedUCWeakMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastDoomedUCWeakMutSetEffects(
      SortedDictionary<int, List<IDoomedUCWeakMutSetEffectObserver>> observers) {
    foreach (var effect in effectsDoomedUCWeakMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IDoomedUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDoomedUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDoomedUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDoomedUCWeakMutSetEffect(effect);
        }
        observersForDoomedUCWeakMutSet.Remove(effect.id);
      }
    }
    effectsDoomedUCWeakMutSetDeleteEffect.Clear();

    foreach (var effect in effectsDoomedUCWeakMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IDoomedUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDoomedUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDoomedUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDoomedUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsDoomedUCWeakMutSetAddEffect.Clear();

    foreach (var effect in effectsDoomedUCWeakMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IDoomedUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDoomedUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDoomedUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDoomedUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsDoomedUCWeakMutSetRemoveEffect.Clear();

    foreach (var effect in effectsDoomedUCWeakMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IDoomedUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDoomedUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDoomedUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDoomedUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsDoomedUCWeakMutSetCreateEffect.Clear();

  }

    public int GetMiredUCWeakMutSetHash(int id, int version, MiredUCWeakMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public MiredUCWeakMutSetIncarnation GetMiredUCWeakMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsMiredUCWeakMutSet[id].incarnation;
    }
    public MiredUCWeakMutSet GetMiredUCWeakMutSet(int id) {
      return new MiredUCWeakMutSet(this, id);
    }
    public List<MiredUCWeakMutSet> AllMiredUCWeakMutSet() {
      List<MiredUCWeakMutSet> result = new List<MiredUCWeakMutSet>(rootIncarnation.incarnationsMiredUCWeakMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsMiredUCWeakMutSet.Keys) {
        result.Add(new MiredUCWeakMutSet(this, id));
      }
      return result;
    }
    public bool MiredUCWeakMutSetExists(int id) {
      return rootIncarnation.incarnationsMiredUCWeakMutSet.ContainsKey(id);
    }
    public void CheckHasMiredUCWeakMutSet(MiredUCWeakMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasMiredUCWeakMutSet(thing.id);
    }
    public void CheckHasMiredUCWeakMutSet(int id) {
      if (!rootIncarnation.incarnationsMiredUCWeakMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid MiredUCWeakMutSet}: " + id);
      }
    }
    public MiredUCWeakMutSet EffectMiredUCWeakMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new MiredUCWeakMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateMiredUCWeakMutSet(id, rootIncarnation.version, incarnation);
      return new MiredUCWeakMutSet(this, id);
    }
    public void EffectInternalCreateMiredUCWeakMutSet(int id, int incarnationVersion, MiredUCWeakMutSetIncarnation incarnation) {
      var effect = new MiredUCWeakMutSetCreateEffect(id);
      rootIncarnation.incarnationsMiredUCWeakMutSet
          .Add(
              id,
              new VersionAndIncarnation<MiredUCWeakMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsMiredUCWeakMutSetCreateEffect.Add(effect);
    }
    public void EffectMiredUCWeakMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new MiredUCWeakMutSetDeleteEffect(id);
      effectsMiredUCWeakMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsMiredUCWeakMutSet[id];
      rootIncarnation.incarnationsMiredUCWeakMutSet.Remove(id);
    }

       
    public void EffectMiredUCWeakMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasMiredUCWeakMutSet(setId);
      CheckHasMiredUC(elementId);

      var effect = new MiredUCWeakMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsMiredUCWeakMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new MiredUCWeakMutSetIncarnation(newMap);
        rootIncarnation.incarnationsMiredUCWeakMutSet[setId] =
            new VersionAndIncarnation<MiredUCWeakMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsMiredUCWeakMutSetAddEffect.Add(effect);
    }
    public void EffectMiredUCWeakMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasMiredUCWeakMutSet(setId);
      CheckHasMiredUC(elementId);

      var effect = new MiredUCWeakMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsMiredUCWeakMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new MiredUCWeakMutSetIncarnation(newMap);
        rootIncarnation.incarnationsMiredUCWeakMutSet[setId] =
            new VersionAndIncarnation<MiredUCWeakMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsMiredUCWeakMutSetRemoveEffect.Add(effect);
    }

       
    public void AddMiredUCWeakMutSetObserver(int id, IMiredUCWeakMutSetEffectObserver observer) {
      List<IMiredUCWeakMutSetEffectObserver> obsies;
      if (!observersForMiredUCWeakMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IMiredUCWeakMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForMiredUCWeakMutSet[id] = obsies;
    }

    public void RemoveMiredUCWeakMutSetObserver(int id, IMiredUCWeakMutSetEffectObserver observer) {
      if (observersForMiredUCWeakMutSet.ContainsKey(id)) {
        var list = observersForMiredUCWeakMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForMiredUCWeakMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastMiredUCWeakMutSetEffects(
      SortedDictionary<int, List<IMiredUCWeakMutSetEffectObserver>> observers) {
    foreach (var effect in effectsMiredUCWeakMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IMiredUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMiredUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMiredUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMiredUCWeakMutSetEffect(effect);
        }
        observersForMiredUCWeakMutSet.Remove(effect.id);
      }
    }
    effectsMiredUCWeakMutSetDeleteEffect.Clear();

    foreach (var effect in effectsMiredUCWeakMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IMiredUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMiredUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMiredUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMiredUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsMiredUCWeakMutSetAddEffect.Clear();

    foreach (var effect in effectsMiredUCWeakMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IMiredUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMiredUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMiredUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMiredUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsMiredUCWeakMutSetRemoveEffect.Clear();

    foreach (var effect in effectsMiredUCWeakMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IMiredUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMiredUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMiredUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMiredUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsMiredUCWeakMutSetCreateEffect.Clear();

  }

    public int GetInvincibilityUCWeakMutSetHash(int id, int version, InvincibilityUCWeakMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public InvincibilityUCWeakMutSetIncarnation GetInvincibilityUCWeakMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsInvincibilityUCWeakMutSet[id].incarnation;
    }
    public InvincibilityUCWeakMutSet GetInvincibilityUCWeakMutSet(int id) {
      return new InvincibilityUCWeakMutSet(this, id);
    }
    public List<InvincibilityUCWeakMutSet> AllInvincibilityUCWeakMutSet() {
      List<InvincibilityUCWeakMutSet> result = new List<InvincibilityUCWeakMutSet>(rootIncarnation.incarnationsInvincibilityUCWeakMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsInvincibilityUCWeakMutSet.Keys) {
        result.Add(new InvincibilityUCWeakMutSet(this, id));
      }
      return result;
    }
    public bool InvincibilityUCWeakMutSetExists(int id) {
      return rootIncarnation.incarnationsInvincibilityUCWeakMutSet.ContainsKey(id);
    }
    public void CheckHasInvincibilityUCWeakMutSet(InvincibilityUCWeakMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasInvincibilityUCWeakMutSet(thing.id);
    }
    public void CheckHasInvincibilityUCWeakMutSet(int id) {
      if (!rootIncarnation.incarnationsInvincibilityUCWeakMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid InvincibilityUCWeakMutSet}: " + id);
      }
    }
    public InvincibilityUCWeakMutSet EffectInvincibilityUCWeakMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new InvincibilityUCWeakMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateInvincibilityUCWeakMutSet(id, rootIncarnation.version, incarnation);
      return new InvincibilityUCWeakMutSet(this, id);
    }
    public void EffectInternalCreateInvincibilityUCWeakMutSet(int id, int incarnationVersion, InvincibilityUCWeakMutSetIncarnation incarnation) {
      var effect = new InvincibilityUCWeakMutSetCreateEffect(id);
      rootIncarnation.incarnationsInvincibilityUCWeakMutSet
          .Add(
              id,
              new VersionAndIncarnation<InvincibilityUCWeakMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsInvincibilityUCWeakMutSetCreateEffect.Add(effect);
    }
    public void EffectInvincibilityUCWeakMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new InvincibilityUCWeakMutSetDeleteEffect(id);
      effectsInvincibilityUCWeakMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsInvincibilityUCWeakMutSet[id];
      rootIncarnation.incarnationsInvincibilityUCWeakMutSet.Remove(id);
    }

       
    public void EffectInvincibilityUCWeakMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasInvincibilityUCWeakMutSet(setId);
      CheckHasInvincibilityUC(elementId);

      var effect = new InvincibilityUCWeakMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsInvincibilityUCWeakMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new InvincibilityUCWeakMutSetIncarnation(newMap);
        rootIncarnation.incarnationsInvincibilityUCWeakMutSet[setId] =
            new VersionAndIncarnation<InvincibilityUCWeakMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsInvincibilityUCWeakMutSetAddEffect.Add(effect);
    }
    public void EffectInvincibilityUCWeakMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasInvincibilityUCWeakMutSet(setId);
      CheckHasInvincibilityUC(elementId);

      var effect = new InvincibilityUCWeakMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsInvincibilityUCWeakMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new InvincibilityUCWeakMutSetIncarnation(newMap);
        rootIncarnation.incarnationsInvincibilityUCWeakMutSet[setId] =
            new VersionAndIncarnation<InvincibilityUCWeakMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsInvincibilityUCWeakMutSetRemoveEffect.Add(effect);
    }

       
    public void AddInvincibilityUCWeakMutSetObserver(int id, IInvincibilityUCWeakMutSetEffectObserver observer) {
      List<IInvincibilityUCWeakMutSetEffectObserver> obsies;
      if (!observersForInvincibilityUCWeakMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IInvincibilityUCWeakMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForInvincibilityUCWeakMutSet[id] = obsies;
    }

    public void RemoveInvincibilityUCWeakMutSetObserver(int id, IInvincibilityUCWeakMutSetEffectObserver observer) {
      if (observersForInvincibilityUCWeakMutSet.ContainsKey(id)) {
        var list = observersForInvincibilityUCWeakMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForInvincibilityUCWeakMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastInvincibilityUCWeakMutSetEffects(
      SortedDictionary<int, List<IInvincibilityUCWeakMutSetEffectObserver>> observers) {
    foreach (var effect in effectsInvincibilityUCWeakMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IInvincibilityUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnInvincibilityUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IInvincibilityUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnInvincibilityUCWeakMutSetEffect(effect);
        }
        observersForInvincibilityUCWeakMutSet.Remove(effect.id);
      }
    }
    effectsInvincibilityUCWeakMutSetDeleteEffect.Clear();

    foreach (var effect in effectsInvincibilityUCWeakMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IInvincibilityUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnInvincibilityUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IInvincibilityUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnInvincibilityUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsInvincibilityUCWeakMutSetAddEffect.Clear();

    foreach (var effect in effectsInvincibilityUCWeakMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IInvincibilityUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnInvincibilityUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IInvincibilityUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnInvincibilityUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsInvincibilityUCWeakMutSetRemoveEffect.Clear();

    foreach (var effect in effectsInvincibilityUCWeakMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IInvincibilityUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnInvincibilityUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IInvincibilityUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnInvincibilityUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsInvincibilityUCWeakMutSetCreateEffect.Clear();

  }

    public int GetDefyingUCWeakMutSetHash(int id, int version, DefyingUCWeakMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public DefyingUCWeakMutSetIncarnation GetDefyingUCWeakMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsDefyingUCWeakMutSet[id].incarnation;
    }
    public DefyingUCWeakMutSet GetDefyingUCWeakMutSet(int id) {
      return new DefyingUCWeakMutSet(this, id);
    }
    public List<DefyingUCWeakMutSet> AllDefyingUCWeakMutSet() {
      List<DefyingUCWeakMutSet> result = new List<DefyingUCWeakMutSet>(rootIncarnation.incarnationsDefyingUCWeakMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsDefyingUCWeakMutSet.Keys) {
        result.Add(new DefyingUCWeakMutSet(this, id));
      }
      return result;
    }
    public bool DefyingUCWeakMutSetExists(int id) {
      return rootIncarnation.incarnationsDefyingUCWeakMutSet.ContainsKey(id);
    }
    public void CheckHasDefyingUCWeakMutSet(DefyingUCWeakMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasDefyingUCWeakMutSet(thing.id);
    }
    public void CheckHasDefyingUCWeakMutSet(int id) {
      if (!rootIncarnation.incarnationsDefyingUCWeakMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid DefyingUCWeakMutSet}: " + id);
      }
    }
    public DefyingUCWeakMutSet EffectDefyingUCWeakMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new DefyingUCWeakMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateDefyingUCWeakMutSet(id, rootIncarnation.version, incarnation);
      return new DefyingUCWeakMutSet(this, id);
    }
    public void EffectInternalCreateDefyingUCWeakMutSet(int id, int incarnationVersion, DefyingUCWeakMutSetIncarnation incarnation) {
      var effect = new DefyingUCWeakMutSetCreateEffect(id);
      rootIncarnation.incarnationsDefyingUCWeakMutSet
          .Add(
              id,
              new VersionAndIncarnation<DefyingUCWeakMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsDefyingUCWeakMutSetCreateEffect.Add(effect);
    }
    public void EffectDefyingUCWeakMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new DefyingUCWeakMutSetDeleteEffect(id);
      effectsDefyingUCWeakMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsDefyingUCWeakMutSet[id];
      rootIncarnation.incarnationsDefyingUCWeakMutSet.Remove(id);
    }

       
    public void EffectDefyingUCWeakMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasDefyingUCWeakMutSet(setId);
      CheckHasDefyingUC(elementId);

      var effect = new DefyingUCWeakMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsDefyingUCWeakMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new DefyingUCWeakMutSetIncarnation(newMap);
        rootIncarnation.incarnationsDefyingUCWeakMutSet[setId] =
            new VersionAndIncarnation<DefyingUCWeakMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsDefyingUCWeakMutSetAddEffect.Add(effect);
    }
    public void EffectDefyingUCWeakMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasDefyingUCWeakMutSet(setId);
      CheckHasDefyingUC(elementId);

      var effect = new DefyingUCWeakMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsDefyingUCWeakMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new DefyingUCWeakMutSetIncarnation(newMap);
        rootIncarnation.incarnationsDefyingUCWeakMutSet[setId] =
            new VersionAndIncarnation<DefyingUCWeakMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsDefyingUCWeakMutSetRemoveEffect.Add(effect);
    }

       
    public void AddDefyingUCWeakMutSetObserver(int id, IDefyingUCWeakMutSetEffectObserver observer) {
      List<IDefyingUCWeakMutSetEffectObserver> obsies;
      if (!observersForDefyingUCWeakMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IDefyingUCWeakMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForDefyingUCWeakMutSet[id] = obsies;
    }

    public void RemoveDefyingUCWeakMutSetObserver(int id, IDefyingUCWeakMutSetEffectObserver observer) {
      if (observersForDefyingUCWeakMutSet.ContainsKey(id)) {
        var list = observersForDefyingUCWeakMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForDefyingUCWeakMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastDefyingUCWeakMutSetEffects(
      SortedDictionary<int, List<IDefyingUCWeakMutSetEffectObserver>> observers) {
    foreach (var effect in effectsDefyingUCWeakMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IDefyingUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDefyingUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDefyingUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDefyingUCWeakMutSetEffect(effect);
        }
        observersForDefyingUCWeakMutSet.Remove(effect.id);
      }
    }
    effectsDefyingUCWeakMutSetDeleteEffect.Clear();

    foreach (var effect in effectsDefyingUCWeakMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IDefyingUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDefyingUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDefyingUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDefyingUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsDefyingUCWeakMutSetAddEffect.Clear();

    foreach (var effect in effectsDefyingUCWeakMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IDefyingUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDefyingUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDefyingUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDefyingUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsDefyingUCWeakMutSetRemoveEffect.Clear();

    foreach (var effect in effectsDefyingUCWeakMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IDefyingUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDefyingUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDefyingUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDefyingUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsDefyingUCWeakMutSetCreateEffect.Clear();

  }

    public int GetCounteringUCWeakMutSetHash(int id, int version, CounteringUCWeakMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public CounteringUCWeakMutSetIncarnation GetCounteringUCWeakMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsCounteringUCWeakMutSet[id].incarnation;
    }
    public CounteringUCWeakMutSet GetCounteringUCWeakMutSet(int id) {
      return new CounteringUCWeakMutSet(this, id);
    }
    public List<CounteringUCWeakMutSet> AllCounteringUCWeakMutSet() {
      List<CounteringUCWeakMutSet> result = new List<CounteringUCWeakMutSet>(rootIncarnation.incarnationsCounteringUCWeakMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsCounteringUCWeakMutSet.Keys) {
        result.Add(new CounteringUCWeakMutSet(this, id));
      }
      return result;
    }
    public bool CounteringUCWeakMutSetExists(int id) {
      return rootIncarnation.incarnationsCounteringUCWeakMutSet.ContainsKey(id);
    }
    public void CheckHasCounteringUCWeakMutSet(CounteringUCWeakMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasCounteringUCWeakMutSet(thing.id);
    }
    public void CheckHasCounteringUCWeakMutSet(int id) {
      if (!rootIncarnation.incarnationsCounteringUCWeakMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid CounteringUCWeakMutSet}: " + id);
      }
    }
    public CounteringUCWeakMutSet EffectCounteringUCWeakMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new CounteringUCWeakMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateCounteringUCWeakMutSet(id, rootIncarnation.version, incarnation);
      return new CounteringUCWeakMutSet(this, id);
    }
    public void EffectInternalCreateCounteringUCWeakMutSet(int id, int incarnationVersion, CounteringUCWeakMutSetIncarnation incarnation) {
      var effect = new CounteringUCWeakMutSetCreateEffect(id);
      rootIncarnation.incarnationsCounteringUCWeakMutSet
          .Add(
              id,
              new VersionAndIncarnation<CounteringUCWeakMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsCounteringUCWeakMutSetCreateEffect.Add(effect);
    }
    public void EffectCounteringUCWeakMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new CounteringUCWeakMutSetDeleteEffect(id);
      effectsCounteringUCWeakMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsCounteringUCWeakMutSet[id];
      rootIncarnation.incarnationsCounteringUCWeakMutSet.Remove(id);
    }

       
    public void EffectCounteringUCWeakMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasCounteringUCWeakMutSet(setId);
      CheckHasCounteringUC(elementId);

      var effect = new CounteringUCWeakMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsCounteringUCWeakMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new CounteringUCWeakMutSetIncarnation(newMap);
        rootIncarnation.incarnationsCounteringUCWeakMutSet[setId] =
            new VersionAndIncarnation<CounteringUCWeakMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsCounteringUCWeakMutSetAddEffect.Add(effect);
    }
    public void EffectCounteringUCWeakMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasCounteringUCWeakMutSet(setId);
      CheckHasCounteringUC(elementId);

      var effect = new CounteringUCWeakMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsCounteringUCWeakMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new CounteringUCWeakMutSetIncarnation(newMap);
        rootIncarnation.incarnationsCounteringUCWeakMutSet[setId] =
            new VersionAndIncarnation<CounteringUCWeakMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsCounteringUCWeakMutSetRemoveEffect.Add(effect);
    }

       
    public void AddCounteringUCWeakMutSetObserver(int id, ICounteringUCWeakMutSetEffectObserver observer) {
      List<ICounteringUCWeakMutSetEffectObserver> obsies;
      if (!observersForCounteringUCWeakMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ICounteringUCWeakMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForCounteringUCWeakMutSet[id] = obsies;
    }

    public void RemoveCounteringUCWeakMutSetObserver(int id, ICounteringUCWeakMutSetEffectObserver observer) {
      if (observersForCounteringUCWeakMutSet.ContainsKey(id)) {
        var list = observersForCounteringUCWeakMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForCounteringUCWeakMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastCounteringUCWeakMutSetEffects(
      SortedDictionary<int, List<ICounteringUCWeakMutSetEffectObserver>> observers) {
    foreach (var effect in effectsCounteringUCWeakMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ICounteringUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCounteringUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICounteringUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCounteringUCWeakMutSetEffect(effect);
        }
        observersForCounteringUCWeakMutSet.Remove(effect.id);
      }
    }
    effectsCounteringUCWeakMutSetDeleteEffect.Clear();

    foreach (var effect in effectsCounteringUCWeakMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ICounteringUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCounteringUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICounteringUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCounteringUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsCounteringUCWeakMutSetAddEffect.Clear();

    foreach (var effect in effectsCounteringUCWeakMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ICounteringUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCounteringUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICounteringUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCounteringUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsCounteringUCWeakMutSetRemoveEffect.Clear();

    foreach (var effect in effectsCounteringUCWeakMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ICounteringUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCounteringUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICounteringUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCounteringUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsCounteringUCWeakMutSetCreateEffect.Clear();

  }

    public int GetAttackAICapabilityUCWeakMutSetHash(int id, int version, AttackAICapabilityUCWeakMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public AttackAICapabilityUCWeakMutSetIncarnation GetAttackAICapabilityUCWeakMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsAttackAICapabilityUCWeakMutSet[id].incarnation;
    }
    public AttackAICapabilityUCWeakMutSet GetAttackAICapabilityUCWeakMutSet(int id) {
      return new AttackAICapabilityUCWeakMutSet(this, id);
    }
    public List<AttackAICapabilityUCWeakMutSet> AllAttackAICapabilityUCWeakMutSet() {
      List<AttackAICapabilityUCWeakMutSet> result = new List<AttackAICapabilityUCWeakMutSet>(rootIncarnation.incarnationsAttackAICapabilityUCWeakMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsAttackAICapabilityUCWeakMutSet.Keys) {
        result.Add(new AttackAICapabilityUCWeakMutSet(this, id));
      }
      return result;
    }
    public bool AttackAICapabilityUCWeakMutSetExists(int id) {
      return rootIncarnation.incarnationsAttackAICapabilityUCWeakMutSet.ContainsKey(id);
    }
    public void CheckHasAttackAICapabilityUCWeakMutSet(AttackAICapabilityUCWeakMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasAttackAICapabilityUCWeakMutSet(thing.id);
    }
    public void CheckHasAttackAICapabilityUCWeakMutSet(int id) {
      if (!rootIncarnation.incarnationsAttackAICapabilityUCWeakMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid AttackAICapabilityUCWeakMutSet}: " + id);
      }
    }
    public AttackAICapabilityUCWeakMutSet EffectAttackAICapabilityUCWeakMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new AttackAICapabilityUCWeakMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateAttackAICapabilityUCWeakMutSet(id, rootIncarnation.version, incarnation);
      return new AttackAICapabilityUCWeakMutSet(this, id);
    }
    public void EffectInternalCreateAttackAICapabilityUCWeakMutSet(int id, int incarnationVersion, AttackAICapabilityUCWeakMutSetIncarnation incarnation) {
      var effect = new AttackAICapabilityUCWeakMutSetCreateEffect(id);
      rootIncarnation.incarnationsAttackAICapabilityUCWeakMutSet
          .Add(
              id,
              new VersionAndIncarnation<AttackAICapabilityUCWeakMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsAttackAICapabilityUCWeakMutSetCreateEffect.Add(effect);
    }
    public void EffectAttackAICapabilityUCWeakMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new AttackAICapabilityUCWeakMutSetDeleteEffect(id);
      effectsAttackAICapabilityUCWeakMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsAttackAICapabilityUCWeakMutSet[id];
      rootIncarnation.incarnationsAttackAICapabilityUCWeakMutSet.Remove(id);
    }

       
    public void EffectAttackAICapabilityUCWeakMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasAttackAICapabilityUCWeakMutSet(setId);
      CheckHasAttackAICapabilityUC(elementId);

      var effect = new AttackAICapabilityUCWeakMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsAttackAICapabilityUCWeakMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new AttackAICapabilityUCWeakMutSetIncarnation(newMap);
        rootIncarnation.incarnationsAttackAICapabilityUCWeakMutSet[setId] =
            new VersionAndIncarnation<AttackAICapabilityUCWeakMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsAttackAICapabilityUCWeakMutSetAddEffect.Add(effect);
    }
    public void EffectAttackAICapabilityUCWeakMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasAttackAICapabilityUCWeakMutSet(setId);
      CheckHasAttackAICapabilityUC(elementId);

      var effect = new AttackAICapabilityUCWeakMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsAttackAICapabilityUCWeakMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new AttackAICapabilityUCWeakMutSetIncarnation(newMap);
        rootIncarnation.incarnationsAttackAICapabilityUCWeakMutSet[setId] =
            new VersionAndIncarnation<AttackAICapabilityUCWeakMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsAttackAICapabilityUCWeakMutSetRemoveEffect.Add(effect);
    }

       
    public void AddAttackAICapabilityUCWeakMutSetObserver(int id, IAttackAICapabilityUCWeakMutSetEffectObserver observer) {
      List<IAttackAICapabilityUCWeakMutSetEffectObserver> obsies;
      if (!observersForAttackAICapabilityUCWeakMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IAttackAICapabilityUCWeakMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForAttackAICapabilityUCWeakMutSet[id] = obsies;
    }

    public void RemoveAttackAICapabilityUCWeakMutSetObserver(int id, IAttackAICapabilityUCWeakMutSetEffectObserver observer) {
      if (observersForAttackAICapabilityUCWeakMutSet.ContainsKey(id)) {
        var list = observersForAttackAICapabilityUCWeakMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForAttackAICapabilityUCWeakMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastAttackAICapabilityUCWeakMutSetEffects(
      SortedDictionary<int, List<IAttackAICapabilityUCWeakMutSetEffectObserver>> observers) {
    foreach (var effect in effectsAttackAICapabilityUCWeakMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IAttackAICapabilityUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAttackAICapabilityUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAttackAICapabilityUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAttackAICapabilityUCWeakMutSetEffect(effect);
        }
        observersForAttackAICapabilityUCWeakMutSet.Remove(effect.id);
      }
    }
    effectsAttackAICapabilityUCWeakMutSetDeleteEffect.Clear();

    foreach (var effect in effectsAttackAICapabilityUCWeakMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IAttackAICapabilityUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAttackAICapabilityUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAttackAICapabilityUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAttackAICapabilityUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsAttackAICapabilityUCWeakMutSetAddEffect.Clear();

    foreach (var effect in effectsAttackAICapabilityUCWeakMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IAttackAICapabilityUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAttackAICapabilityUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAttackAICapabilityUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAttackAICapabilityUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsAttackAICapabilityUCWeakMutSetRemoveEffect.Clear();

    foreach (var effect in effectsAttackAICapabilityUCWeakMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IAttackAICapabilityUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAttackAICapabilityUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAttackAICapabilityUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAttackAICapabilityUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsAttackAICapabilityUCWeakMutSetCreateEffect.Clear();

  }

    public int GetLightningChargedUCWeakMutSetHash(int id, int version, LightningChargedUCWeakMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public LightningChargedUCWeakMutSetIncarnation GetLightningChargedUCWeakMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsLightningChargedUCWeakMutSet[id].incarnation;
    }
    public LightningChargedUCWeakMutSet GetLightningChargedUCWeakMutSet(int id) {
      return new LightningChargedUCWeakMutSet(this, id);
    }
    public List<LightningChargedUCWeakMutSet> AllLightningChargedUCWeakMutSet() {
      List<LightningChargedUCWeakMutSet> result = new List<LightningChargedUCWeakMutSet>(rootIncarnation.incarnationsLightningChargedUCWeakMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsLightningChargedUCWeakMutSet.Keys) {
        result.Add(new LightningChargedUCWeakMutSet(this, id));
      }
      return result;
    }
    public bool LightningChargedUCWeakMutSetExists(int id) {
      return rootIncarnation.incarnationsLightningChargedUCWeakMutSet.ContainsKey(id);
    }
    public void CheckHasLightningChargedUCWeakMutSet(LightningChargedUCWeakMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasLightningChargedUCWeakMutSet(thing.id);
    }
    public void CheckHasLightningChargedUCWeakMutSet(int id) {
      if (!rootIncarnation.incarnationsLightningChargedUCWeakMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid LightningChargedUCWeakMutSet}: " + id);
      }
    }
    public LightningChargedUCWeakMutSet EffectLightningChargedUCWeakMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new LightningChargedUCWeakMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateLightningChargedUCWeakMutSet(id, rootIncarnation.version, incarnation);
      return new LightningChargedUCWeakMutSet(this, id);
    }
    public void EffectInternalCreateLightningChargedUCWeakMutSet(int id, int incarnationVersion, LightningChargedUCWeakMutSetIncarnation incarnation) {
      var effect = new LightningChargedUCWeakMutSetCreateEffect(id);
      rootIncarnation.incarnationsLightningChargedUCWeakMutSet
          .Add(
              id,
              new VersionAndIncarnation<LightningChargedUCWeakMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsLightningChargedUCWeakMutSetCreateEffect.Add(effect);
    }
    public void EffectLightningChargedUCWeakMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new LightningChargedUCWeakMutSetDeleteEffect(id);
      effectsLightningChargedUCWeakMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsLightningChargedUCWeakMutSet[id];
      rootIncarnation.incarnationsLightningChargedUCWeakMutSet.Remove(id);
    }

       
    public void EffectLightningChargedUCWeakMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasLightningChargedUCWeakMutSet(setId);
      CheckHasLightningChargedUC(elementId);

      var effect = new LightningChargedUCWeakMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsLightningChargedUCWeakMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new LightningChargedUCWeakMutSetIncarnation(newMap);
        rootIncarnation.incarnationsLightningChargedUCWeakMutSet[setId] =
            new VersionAndIncarnation<LightningChargedUCWeakMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsLightningChargedUCWeakMutSetAddEffect.Add(effect);
    }
    public void EffectLightningChargedUCWeakMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasLightningChargedUCWeakMutSet(setId);
      CheckHasLightningChargedUC(elementId);

      var effect = new LightningChargedUCWeakMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsLightningChargedUCWeakMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new LightningChargedUCWeakMutSetIncarnation(newMap);
        rootIncarnation.incarnationsLightningChargedUCWeakMutSet[setId] =
            new VersionAndIncarnation<LightningChargedUCWeakMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsLightningChargedUCWeakMutSetRemoveEffect.Add(effect);
    }

       
    public void AddLightningChargedUCWeakMutSetObserver(int id, ILightningChargedUCWeakMutSetEffectObserver observer) {
      List<ILightningChargedUCWeakMutSetEffectObserver> obsies;
      if (!observersForLightningChargedUCWeakMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ILightningChargedUCWeakMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForLightningChargedUCWeakMutSet[id] = obsies;
    }

    public void RemoveLightningChargedUCWeakMutSetObserver(int id, ILightningChargedUCWeakMutSetEffectObserver observer) {
      if (observersForLightningChargedUCWeakMutSet.ContainsKey(id)) {
        var list = observersForLightningChargedUCWeakMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForLightningChargedUCWeakMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastLightningChargedUCWeakMutSetEffects(
      SortedDictionary<int, List<ILightningChargedUCWeakMutSetEffectObserver>> observers) {
    foreach (var effect in effectsLightningChargedUCWeakMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ILightningChargedUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLightningChargedUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILightningChargedUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLightningChargedUCWeakMutSetEffect(effect);
        }
        observersForLightningChargedUCWeakMutSet.Remove(effect.id);
      }
    }
    effectsLightningChargedUCWeakMutSetDeleteEffect.Clear();

    foreach (var effect in effectsLightningChargedUCWeakMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ILightningChargedUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLightningChargedUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILightningChargedUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLightningChargedUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsLightningChargedUCWeakMutSetAddEffect.Clear();

    foreach (var effect in effectsLightningChargedUCWeakMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ILightningChargedUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLightningChargedUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILightningChargedUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLightningChargedUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsLightningChargedUCWeakMutSetRemoveEffect.Clear();

    foreach (var effect in effectsLightningChargedUCWeakMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ILightningChargedUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLightningChargedUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILightningChargedUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLightningChargedUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsLightningChargedUCWeakMutSetCreateEffect.Clear();

  }

    public int GetTimeCloneAICapabilityUCWeakMutSetHash(int id, int version, TimeCloneAICapabilityUCWeakMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public TimeCloneAICapabilityUCWeakMutSetIncarnation GetTimeCloneAICapabilityUCWeakMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet[id].incarnation;
    }
    public TimeCloneAICapabilityUCWeakMutSet GetTimeCloneAICapabilityUCWeakMutSet(int id) {
      return new TimeCloneAICapabilityUCWeakMutSet(this, id);
    }
    public List<TimeCloneAICapabilityUCWeakMutSet> AllTimeCloneAICapabilityUCWeakMutSet() {
      List<TimeCloneAICapabilityUCWeakMutSet> result = new List<TimeCloneAICapabilityUCWeakMutSet>(rootIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet.Keys) {
        result.Add(new TimeCloneAICapabilityUCWeakMutSet(this, id));
      }
      return result;
    }
    public bool TimeCloneAICapabilityUCWeakMutSetExists(int id) {
      return rootIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet.ContainsKey(id);
    }
    public void CheckHasTimeCloneAICapabilityUCWeakMutSet(TimeCloneAICapabilityUCWeakMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasTimeCloneAICapabilityUCWeakMutSet(thing.id);
    }
    public void CheckHasTimeCloneAICapabilityUCWeakMutSet(int id) {
      if (!rootIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid TimeCloneAICapabilityUCWeakMutSet}: " + id);
      }
    }
    public TimeCloneAICapabilityUCWeakMutSet EffectTimeCloneAICapabilityUCWeakMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new TimeCloneAICapabilityUCWeakMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateTimeCloneAICapabilityUCWeakMutSet(id, rootIncarnation.version, incarnation);
      return new TimeCloneAICapabilityUCWeakMutSet(this, id);
    }
    public void EffectInternalCreateTimeCloneAICapabilityUCWeakMutSet(int id, int incarnationVersion, TimeCloneAICapabilityUCWeakMutSetIncarnation incarnation) {
      var effect = new TimeCloneAICapabilityUCWeakMutSetCreateEffect(id);
      rootIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet
          .Add(
              id,
              new VersionAndIncarnation<TimeCloneAICapabilityUCWeakMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsTimeCloneAICapabilityUCWeakMutSetCreateEffect.Add(effect);
    }
    public void EffectTimeCloneAICapabilityUCWeakMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new TimeCloneAICapabilityUCWeakMutSetDeleteEffect(id);
      effectsTimeCloneAICapabilityUCWeakMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet[id];
      rootIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet.Remove(id);
    }

       
    public void EffectTimeCloneAICapabilityUCWeakMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasTimeCloneAICapabilityUCWeakMutSet(setId);
      CheckHasTimeCloneAICapabilityUC(elementId);

      var effect = new TimeCloneAICapabilityUCWeakMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new TimeCloneAICapabilityUCWeakMutSetIncarnation(newMap);
        rootIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet[setId] =
            new VersionAndIncarnation<TimeCloneAICapabilityUCWeakMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsTimeCloneAICapabilityUCWeakMutSetAddEffect.Add(effect);
    }
    public void EffectTimeCloneAICapabilityUCWeakMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasTimeCloneAICapabilityUCWeakMutSet(setId);
      CheckHasTimeCloneAICapabilityUC(elementId);

      var effect = new TimeCloneAICapabilityUCWeakMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new TimeCloneAICapabilityUCWeakMutSetIncarnation(newMap);
        rootIncarnation.incarnationsTimeCloneAICapabilityUCWeakMutSet[setId] =
            new VersionAndIncarnation<TimeCloneAICapabilityUCWeakMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsTimeCloneAICapabilityUCWeakMutSetRemoveEffect.Add(effect);
    }

       
    public void AddTimeCloneAICapabilityUCWeakMutSetObserver(int id, ITimeCloneAICapabilityUCWeakMutSetEffectObserver observer) {
      List<ITimeCloneAICapabilityUCWeakMutSetEffectObserver> obsies;
      if (!observersForTimeCloneAICapabilityUCWeakMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ITimeCloneAICapabilityUCWeakMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForTimeCloneAICapabilityUCWeakMutSet[id] = obsies;
    }

    public void RemoveTimeCloneAICapabilityUCWeakMutSetObserver(int id, ITimeCloneAICapabilityUCWeakMutSetEffectObserver observer) {
      if (observersForTimeCloneAICapabilityUCWeakMutSet.ContainsKey(id)) {
        var list = observersForTimeCloneAICapabilityUCWeakMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForTimeCloneAICapabilityUCWeakMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastTimeCloneAICapabilityUCWeakMutSetEffects(
      SortedDictionary<int, List<ITimeCloneAICapabilityUCWeakMutSetEffectObserver>> observers) {
    foreach (var effect in effectsTimeCloneAICapabilityUCWeakMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ITimeCloneAICapabilityUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTimeCloneAICapabilityUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITimeCloneAICapabilityUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTimeCloneAICapabilityUCWeakMutSetEffect(effect);
        }
        observersForTimeCloneAICapabilityUCWeakMutSet.Remove(effect.id);
      }
    }
    effectsTimeCloneAICapabilityUCWeakMutSetDeleteEffect.Clear();

    foreach (var effect in effectsTimeCloneAICapabilityUCWeakMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ITimeCloneAICapabilityUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTimeCloneAICapabilityUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITimeCloneAICapabilityUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTimeCloneAICapabilityUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsTimeCloneAICapabilityUCWeakMutSetAddEffect.Clear();

    foreach (var effect in effectsTimeCloneAICapabilityUCWeakMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ITimeCloneAICapabilityUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTimeCloneAICapabilityUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITimeCloneAICapabilityUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTimeCloneAICapabilityUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsTimeCloneAICapabilityUCWeakMutSetRemoveEffect.Clear();

    foreach (var effect in effectsTimeCloneAICapabilityUCWeakMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ITimeCloneAICapabilityUCWeakMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTimeCloneAICapabilityUCWeakMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITimeCloneAICapabilityUCWeakMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTimeCloneAICapabilityUCWeakMutSetEffect(effect);
        }
      }
    }
    effectsTimeCloneAICapabilityUCWeakMutSetCreateEffect.Clear();

  }

    public int GetManaPotionStrongMutSetHash(int id, int version, ManaPotionStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public ManaPotionStrongMutSetIncarnation GetManaPotionStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsManaPotionStrongMutSet[id].incarnation;
    }
    public ManaPotionStrongMutSet GetManaPotionStrongMutSet(int id) {
      return new ManaPotionStrongMutSet(this, id);
    }
    public List<ManaPotionStrongMutSet> AllManaPotionStrongMutSet() {
      List<ManaPotionStrongMutSet> result = new List<ManaPotionStrongMutSet>(rootIncarnation.incarnationsManaPotionStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsManaPotionStrongMutSet.Keys) {
        result.Add(new ManaPotionStrongMutSet(this, id));
      }
      return result;
    }
    public bool ManaPotionStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsManaPotionStrongMutSet.ContainsKey(id);
    }
    public void CheckHasManaPotionStrongMutSet(ManaPotionStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasManaPotionStrongMutSet(thing.id);
    }
    public void CheckHasManaPotionStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsManaPotionStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid ManaPotionStrongMutSet}: " + id);
      }
    }
    public ManaPotionStrongMutSet EffectManaPotionStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new ManaPotionStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateManaPotionStrongMutSet(id, rootIncarnation.version, incarnation);
      return new ManaPotionStrongMutSet(this, id);
    }
    public void EffectInternalCreateManaPotionStrongMutSet(int id, int incarnationVersion, ManaPotionStrongMutSetIncarnation incarnation) {
      var effect = new ManaPotionStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsManaPotionStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<ManaPotionStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsManaPotionStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectManaPotionStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new ManaPotionStrongMutSetDeleteEffect(id);
      effectsManaPotionStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsManaPotionStrongMutSet[id];
      rootIncarnation.incarnationsManaPotionStrongMutSet.Remove(id);
    }

       
    public void EffectManaPotionStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasManaPotionStrongMutSet(setId);
      CheckHasManaPotion(elementId);

      var effect = new ManaPotionStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsManaPotionStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new ManaPotionStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsManaPotionStrongMutSet[setId] =
            new VersionAndIncarnation<ManaPotionStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsManaPotionStrongMutSetAddEffect.Add(effect);
    }
    public void EffectManaPotionStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasManaPotionStrongMutSet(setId);
      CheckHasManaPotion(elementId);

      var effect = new ManaPotionStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsManaPotionStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new ManaPotionStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsManaPotionStrongMutSet[setId] =
            new VersionAndIncarnation<ManaPotionStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsManaPotionStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddManaPotionStrongMutSetObserver(int id, IManaPotionStrongMutSetEffectObserver observer) {
      List<IManaPotionStrongMutSetEffectObserver> obsies;
      if (!observersForManaPotionStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IManaPotionStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForManaPotionStrongMutSet[id] = obsies;
    }

    public void RemoveManaPotionStrongMutSetObserver(int id, IManaPotionStrongMutSetEffectObserver observer) {
      if (observersForManaPotionStrongMutSet.ContainsKey(id)) {
        var list = observersForManaPotionStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForManaPotionStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastManaPotionStrongMutSetEffects(
      SortedDictionary<int, List<IManaPotionStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsManaPotionStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IManaPotionStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnManaPotionStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IManaPotionStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnManaPotionStrongMutSetEffect(effect);
        }
        observersForManaPotionStrongMutSet.Remove(effect.id);
      }
    }
    effectsManaPotionStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsManaPotionStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IManaPotionStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnManaPotionStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IManaPotionStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnManaPotionStrongMutSetEffect(effect);
        }
      }
    }
    effectsManaPotionStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsManaPotionStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IManaPotionStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnManaPotionStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IManaPotionStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnManaPotionStrongMutSetEffect(effect);
        }
      }
    }
    effectsManaPotionStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsManaPotionStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IManaPotionStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnManaPotionStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IManaPotionStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnManaPotionStrongMutSetEffect(effect);
        }
      }
    }
    effectsManaPotionStrongMutSetCreateEffect.Clear();

  }

    public int GetHealthPotionStrongMutSetHash(int id, int version, HealthPotionStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public HealthPotionStrongMutSetIncarnation GetHealthPotionStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsHealthPotionStrongMutSet[id].incarnation;
    }
    public HealthPotionStrongMutSet GetHealthPotionStrongMutSet(int id) {
      return new HealthPotionStrongMutSet(this, id);
    }
    public List<HealthPotionStrongMutSet> AllHealthPotionStrongMutSet() {
      List<HealthPotionStrongMutSet> result = new List<HealthPotionStrongMutSet>(rootIncarnation.incarnationsHealthPotionStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsHealthPotionStrongMutSet.Keys) {
        result.Add(new HealthPotionStrongMutSet(this, id));
      }
      return result;
    }
    public bool HealthPotionStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsHealthPotionStrongMutSet.ContainsKey(id);
    }
    public void CheckHasHealthPotionStrongMutSet(HealthPotionStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasHealthPotionStrongMutSet(thing.id);
    }
    public void CheckHasHealthPotionStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsHealthPotionStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid HealthPotionStrongMutSet}: " + id);
      }
    }
    public HealthPotionStrongMutSet EffectHealthPotionStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new HealthPotionStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateHealthPotionStrongMutSet(id, rootIncarnation.version, incarnation);
      return new HealthPotionStrongMutSet(this, id);
    }
    public void EffectInternalCreateHealthPotionStrongMutSet(int id, int incarnationVersion, HealthPotionStrongMutSetIncarnation incarnation) {
      var effect = new HealthPotionStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsHealthPotionStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<HealthPotionStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsHealthPotionStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectHealthPotionStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new HealthPotionStrongMutSetDeleteEffect(id);
      effectsHealthPotionStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsHealthPotionStrongMutSet[id];
      rootIncarnation.incarnationsHealthPotionStrongMutSet.Remove(id);
    }

       
    public void EffectHealthPotionStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasHealthPotionStrongMutSet(setId);
      CheckHasHealthPotion(elementId);

      var effect = new HealthPotionStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsHealthPotionStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new HealthPotionStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsHealthPotionStrongMutSet[setId] =
            new VersionAndIncarnation<HealthPotionStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsHealthPotionStrongMutSetAddEffect.Add(effect);
    }
    public void EffectHealthPotionStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasHealthPotionStrongMutSet(setId);
      CheckHasHealthPotion(elementId);

      var effect = new HealthPotionStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsHealthPotionStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new HealthPotionStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsHealthPotionStrongMutSet[setId] =
            new VersionAndIncarnation<HealthPotionStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsHealthPotionStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddHealthPotionStrongMutSetObserver(int id, IHealthPotionStrongMutSetEffectObserver observer) {
      List<IHealthPotionStrongMutSetEffectObserver> obsies;
      if (!observersForHealthPotionStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IHealthPotionStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForHealthPotionStrongMutSet[id] = obsies;
    }

    public void RemoveHealthPotionStrongMutSetObserver(int id, IHealthPotionStrongMutSetEffectObserver observer) {
      if (observersForHealthPotionStrongMutSet.ContainsKey(id)) {
        var list = observersForHealthPotionStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForHealthPotionStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastHealthPotionStrongMutSetEffects(
      SortedDictionary<int, List<IHealthPotionStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsHealthPotionStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IHealthPotionStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnHealthPotionStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IHealthPotionStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnHealthPotionStrongMutSetEffect(effect);
        }
        observersForHealthPotionStrongMutSet.Remove(effect.id);
      }
    }
    effectsHealthPotionStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsHealthPotionStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IHealthPotionStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnHealthPotionStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IHealthPotionStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnHealthPotionStrongMutSetEffect(effect);
        }
      }
    }
    effectsHealthPotionStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsHealthPotionStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IHealthPotionStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnHealthPotionStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IHealthPotionStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnHealthPotionStrongMutSetEffect(effect);
        }
      }
    }
    effectsHealthPotionStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsHealthPotionStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IHealthPotionStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnHealthPotionStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IHealthPotionStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnHealthPotionStrongMutSetEffect(effect);
        }
      }
    }
    effectsHealthPotionStrongMutSetCreateEffect.Clear();

  }

    public int GetSpeedRingStrongMutSetHash(int id, int version, SpeedRingStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public SpeedRingStrongMutSetIncarnation GetSpeedRingStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsSpeedRingStrongMutSet[id].incarnation;
    }
    public SpeedRingStrongMutSet GetSpeedRingStrongMutSet(int id) {
      return new SpeedRingStrongMutSet(this, id);
    }
    public List<SpeedRingStrongMutSet> AllSpeedRingStrongMutSet() {
      List<SpeedRingStrongMutSet> result = new List<SpeedRingStrongMutSet>(rootIncarnation.incarnationsSpeedRingStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsSpeedRingStrongMutSet.Keys) {
        result.Add(new SpeedRingStrongMutSet(this, id));
      }
      return result;
    }
    public bool SpeedRingStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsSpeedRingStrongMutSet.ContainsKey(id);
    }
    public void CheckHasSpeedRingStrongMutSet(SpeedRingStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasSpeedRingStrongMutSet(thing.id);
    }
    public void CheckHasSpeedRingStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsSpeedRingStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid SpeedRingStrongMutSet}: " + id);
      }
    }
    public SpeedRingStrongMutSet EffectSpeedRingStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new SpeedRingStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateSpeedRingStrongMutSet(id, rootIncarnation.version, incarnation);
      return new SpeedRingStrongMutSet(this, id);
    }
    public void EffectInternalCreateSpeedRingStrongMutSet(int id, int incarnationVersion, SpeedRingStrongMutSetIncarnation incarnation) {
      var effect = new SpeedRingStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsSpeedRingStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<SpeedRingStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsSpeedRingStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectSpeedRingStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new SpeedRingStrongMutSetDeleteEffect(id);
      effectsSpeedRingStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsSpeedRingStrongMutSet[id];
      rootIncarnation.incarnationsSpeedRingStrongMutSet.Remove(id);
    }

       
    public void EffectSpeedRingStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasSpeedRingStrongMutSet(setId);
      CheckHasSpeedRing(elementId);

      var effect = new SpeedRingStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsSpeedRingStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new SpeedRingStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsSpeedRingStrongMutSet[setId] =
            new VersionAndIncarnation<SpeedRingStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsSpeedRingStrongMutSetAddEffect.Add(effect);
    }
    public void EffectSpeedRingStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasSpeedRingStrongMutSet(setId);
      CheckHasSpeedRing(elementId);

      var effect = new SpeedRingStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsSpeedRingStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new SpeedRingStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsSpeedRingStrongMutSet[setId] =
            new VersionAndIncarnation<SpeedRingStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsSpeedRingStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddSpeedRingStrongMutSetObserver(int id, ISpeedRingStrongMutSetEffectObserver observer) {
      List<ISpeedRingStrongMutSetEffectObserver> obsies;
      if (!observersForSpeedRingStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ISpeedRingStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForSpeedRingStrongMutSet[id] = obsies;
    }

    public void RemoveSpeedRingStrongMutSetObserver(int id, ISpeedRingStrongMutSetEffectObserver observer) {
      if (observersForSpeedRingStrongMutSet.ContainsKey(id)) {
        var list = observersForSpeedRingStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForSpeedRingStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastSpeedRingStrongMutSetEffects(
      SortedDictionary<int, List<ISpeedRingStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsSpeedRingStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ISpeedRingStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSpeedRingStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISpeedRingStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSpeedRingStrongMutSetEffect(effect);
        }
        observersForSpeedRingStrongMutSet.Remove(effect.id);
      }
    }
    effectsSpeedRingStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsSpeedRingStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ISpeedRingStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSpeedRingStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISpeedRingStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSpeedRingStrongMutSetEffect(effect);
        }
      }
    }
    effectsSpeedRingStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsSpeedRingStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ISpeedRingStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSpeedRingStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISpeedRingStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSpeedRingStrongMutSetEffect(effect);
        }
      }
    }
    effectsSpeedRingStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsSpeedRingStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ISpeedRingStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSpeedRingStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISpeedRingStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSpeedRingStrongMutSetEffect(effect);
        }
      }
    }
    effectsSpeedRingStrongMutSetCreateEffect.Clear();

  }

    public int GetGlaiveStrongMutSetHash(int id, int version, GlaiveStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public GlaiveStrongMutSetIncarnation GetGlaiveStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsGlaiveStrongMutSet[id].incarnation;
    }
    public GlaiveStrongMutSet GetGlaiveStrongMutSet(int id) {
      return new GlaiveStrongMutSet(this, id);
    }
    public List<GlaiveStrongMutSet> AllGlaiveStrongMutSet() {
      List<GlaiveStrongMutSet> result = new List<GlaiveStrongMutSet>(rootIncarnation.incarnationsGlaiveStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsGlaiveStrongMutSet.Keys) {
        result.Add(new GlaiveStrongMutSet(this, id));
      }
      return result;
    }
    public bool GlaiveStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsGlaiveStrongMutSet.ContainsKey(id);
    }
    public void CheckHasGlaiveStrongMutSet(GlaiveStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasGlaiveStrongMutSet(thing.id);
    }
    public void CheckHasGlaiveStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsGlaiveStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid GlaiveStrongMutSet}: " + id);
      }
    }
    public GlaiveStrongMutSet EffectGlaiveStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new GlaiveStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateGlaiveStrongMutSet(id, rootIncarnation.version, incarnation);
      return new GlaiveStrongMutSet(this, id);
    }
    public void EffectInternalCreateGlaiveStrongMutSet(int id, int incarnationVersion, GlaiveStrongMutSetIncarnation incarnation) {
      var effect = new GlaiveStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsGlaiveStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<GlaiveStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsGlaiveStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectGlaiveStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new GlaiveStrongMutSetDeleteEffect(id);
      effectsGlaiveStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsGlaiveStrongMutSet[id];
      rootIncarnation.incarnationsGlaiveStrongMutSet.Remove(id);
    }

       
    public void EffectGlaiveStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasGlaiveStrongMutSet(setId);
      CheckHasGlaive(elementId);

      var effect = new GlaiveStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsGlaiveStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new GlaiveStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsGlaiveStrongMutSet[setId] =
            new VersionAndIncarnation<GlaiveStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsGlaiveStrongMutSetAddEffect.Add(effect);
    }
    public void EffectGlaiveStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasGlaiveStrongMutSet(setId);
      CheckHasGlaive(elementId);

      var effect = new GlaiveStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsGlaiveStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new GlaiveStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsGlaiveStrongMutSet[setId] =
            new VersionAndIncarnation<GlaiveStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsGlaiveStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddGlaiveStrongMutSetObserver(int id, IGlaiveStrongMutSetEffectObserver observer) {
      List<IGlaiveStrongMutSetEffectObserver> obsies;
      if (!observersForGlaiveStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IGlaiveStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForGlaiveStrongMutSet[id] = obsies;
    }

    public void RemoveGlaiveStrongMutSetObserver(int id, IGlaiveStrongMutSetEffectObserver observer) {
      if (observersForGlaiveStrongMutSet.ContainsKey(id)) {
        var list = observersForGlaiveStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForGlaiveStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastGlaiveStrongMutSetEffects(
      SortedDictionary<int, List<IGlaiveStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsGlaiveStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IGlaiveStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGlaiveStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGlaiveStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGlaiveStrongMutSetEffect(effect);
        }
        observersForGlaiveStrongMutSet.Remove(effect.id);
      }
    }
    effectsGlaiveStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsGlaiveStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IGlaiveStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGlaiveStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGlaiveStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGlaiveStrongMutSetEffect(effect);
        }
      }
    }
    effectsGlaiveStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsGlaiveStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IGlaiveStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGlaiveStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGlaiveStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGlaiveStrongMutSetEffect(effect);
        }
      }
    }
    effectsGlaiveStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsGlaiveStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IGlaiveStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGlaiveStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGlaiveStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGlaiveStrongMutSetEffect(effect);
        }
      }
    }
    effectsGlaiveStrongMutSetCreateEffect.Clear();

  }

    public int GetSlowRodStrongMutSetHash(int id, int version, SlowRodStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public SlowRodStrongMutSetIncarnation GetSlowRodStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsSlowRodStrongMutSet[id].incarnation;
    }
    public SlowRodStrongMutSet GetSlowRodStrongMutSet(int id) {
      return new SlowRodStrongMutSet(this, id);
    }
    public List<SlowRodStrongMutSet> AllSlowRodStrongMutSet() {
      List<SlowRodStrongMutSet> result = new List<SlowRodStrongMutSet>(rootIncarnation.incarnationsSlowRodStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsSlowRodStrongMutSet.Keys) {
        result.Add(new SlowRodStrongMutSet(this, id));
      }
      return result;
    }
    public bool SlowRodStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsSlowRodStrongMutSet.ContainsKey(id);
    }
    public void CheckHasSlowRodStrongMutSet(SlowRodStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasSlowRodStrongMutSet(thing.id);
    }
    public void CheckHasSlowRodStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsSlowRodStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid SlowRodStrongMutSet}: " + id);
      }
    }
    public SlowRodStrongMutSet EffectSlowRodStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new SlowRodStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateSlowRodStrongMutSet(id, rootIncarnation.version, incarnation);
      return new SlowRodStrongMutSet(this, id);
    }
    public void EffectInternalCreateSlowRodStrongMutSet(int id, int incarnationVersion, SlowRodStrongMutSetIncarnation incarnation) {
      var effect = new SlowRodStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsSlowRodStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<SlowRodStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsSlowRodStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectSlowRodStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new SlowRodStrongMutSetDeleteEffect(id);
      effectsSlowRodStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsSlowRodStrongMutSet[id];
      rootIncarnation.incarnationsSlowRodStrongMutSet.Remove(id);
    }

       
    public void EffectSlowRodStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasSlowRodStrongMutSet(setId);
      CheckHasSlowRod(elementId);

      var effect = new SlowRodStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsSlowRodStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new SlowRodStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsSlowRodStrongMutSet[setId] =
            new VersionAndIncarnation<SlowRodStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsSlowRodStrongMutSetAddEffect.Add(effect);
    }
    public void EffectSlowRodStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasSlowRodStrongMutSet(setId);
      CheckHasSlowRod(elementId);

      var effect = new SlowRodStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsSlowRodStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new SlowRodStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsSlowRodStrongMutSet[setId] =
            new VersionAndIncarnation<SlowRodStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsSlowRodStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddSlowRodStrongMutSetObserver(int id, ISlowRodStrongMutSetEffectObserver observer) {
      List<ISlowRodStrongMutSetEffectObserver> obsies;
      if (!observersForSlowRodStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ISlowRodStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForSlowRodStrongMutSet[id] = obsies;
    }

    public void RemoveSlowRodStrongMutSetObserver(int id, ISlowRodStrongMutSetEffectObserver observer) {
      if (observersForSlowRodStrongMutSet.ContainsKey(id)) {
        var list = observersForSlowRodStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForSlowRodStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastSlowRodStrongMutSetEffects(
      SortedDictionary<int, List<ISlowRodStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsSlowRodStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ISlowRodStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSlowRodStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISlowRodStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSlowRodStrongMutSetEffect(effect);
        }
        observersForSlowRodStrongMutSet.Remove(effect.id);
      }
    }
    effectsSlowRodStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsSlowRodStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ISlowRodStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSlowRodStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISlowRodStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSlowRodStrongMutSetEffect(effect);
        }
      }
    }
    effectsSlowRodStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsSlowRodStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ISlowRodStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSlowRodStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISlowRodStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSlowRodStrongMutSetEffect(effect);
        }
      }
    }
    effectsSlowRodStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsSlowRodStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ISlowRodStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSlowRodStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISlowRodStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSlowRodStrongMutSetEffect(effect);
        }
      }
    }
    effectsSlowRodStrongMutSetCreateEffect.Clear();

  }

    public int GetBlastRodStrongMutSetHash(int id, int version, BlastRodStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public BlastRodStrongMutSetIncarnation GetBlastRodStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsBlastRodStrongMutSet[id].incarnation;
    }
    public BlastRodStrongMutSet GetBlastRodStrongMutSet(int id) {
      return new BlastRodStrongMutSet(this, id);
    }
    public List<BlastRodStrongMutSet> AllBlastRodStrongMutSet() {
      List<BlastRodStrongMutSet> result = new List<BlastRodStrongMutSet>(rootIncarnation.incarnationsBlastRodStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsBlastRodStrongMutSet.Keys) {
        result.Add(new BlastRodStrongMutSet(this, id));
      }
      return result;
    }
    public bool BlastRodStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsBlastRodStrongMutSet.ContainsKey(id);
    }
    public void CheckHasBlastRodStrongMutSet(BlastRodStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasBlastRodStrongMutSet(thing.id);
    }
    public void CheckHasBlastRodStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsBlastRodStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid BlastRodStrongMutSet}: " + id);
      }
    }
    public BlastRodStrongMutSet EffectBlastRodStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new BlastRodStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateBlastRodStrongMutSet(id, rootIncarnation.version, incarnation);
      return new BlastRodStrongMutSet(this, id);
    }
    public void EffectInternalCreateBlastRodStrongMutSet(int id, int incarnationVersion, BlastRodStrongMutSetIncarnation incarnation) {
      var effect = new BlastRodStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsBlastRodStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<BlastRodStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsBlastRodStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectBlastRodStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new BlastRodStrongMutSetDeleteEffect(id);
      effectsBlastRodStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsBlastRodStrongMutSet[id];
      rootIncarnation.incarnationsBlastRodStrongMutSet.Remove(id);
    }

       
    public void EffectBlastRodStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasBlastRodStrongMutSet(setId);
      CheckHasBlastRod(elementId);

      var effect = new BlastRodStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsBlastRodStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new BlastRodStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsBlastRodStrongMutSet[setId] =
            new VersionAndIncarnation<BlastRodStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsBlastRodStrongMutSetAddEffect.Add(effect);
    }
    public void EffectBlastRodStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasBlastRodStrongMutSet(setId);
      CheckHasBlastRod(elementId);

      var effect = new BlastRodStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsBlastRodStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new BlastRodStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsBlastRodStrongMutSet[setId] =
            new VersionAndIncarnation<BlastRodStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsBlastRodStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddBlastRodStrongMutSetObserver(int id, IBlastRodStrongMutSetEffectObserver observer) {
      List<IBlastRodStrongMutSetEffectObserver> obsies;
      if (!observersForBlastRodStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IBlastRodStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForBlastRodStrongMutSet[id] = obsies;
    }

    public void RemoveBlastRodStrongMutSetObserver(int id, IBlastRodStrongMutSetEffectObserver observer) {
      if (observersForBlastRodStrongMutSet.ContainsKey(id)) {
        var list = observersForBlastRodStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForBlastRodStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastBlastRodStrongMutSetEffects(
      SortedDictionary<int, List<IBlastRodStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsBlastRodStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IBlastRodStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBlastRodStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBlastRodStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBlastRodStrongMutSetEffect(effect);
        }
        observersForBlastRodStrongMutSet.Remove(effect.id);
      }
    }
    effectsBlastRodStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsBlastRodStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IBlastRodStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBlastRodStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBlastRodStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBlastRodStrongMutSetEffect(effect);
        }
      }
    }
    effectsBlastRodStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsBlastRodStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IBlastRodStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBlastRodStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBlastRodStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBlastRodStrongMutSetEffect(effect);
        }
      }
    }
    effectsBlastRodStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsBlastRodStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IBlastRodStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBlastRodStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBlastRodStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBlastRodStrongMutSetEffect(effect);
        }
      }
    }
    effectsBlastRodStrongMutSetCreateEffect.Clear();

  }

    public int GetArmorStrongMutSetHash(int id, int version, ArmorStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public ArmorStrongMutSetIncarnation GetArmorStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsArmorStrongMutSet[id].incarnation;
    }
    public ArmorStrongMutSet GetArmorStrongMutSet(int id) {
      return new ArmorStrongMutSet(this, id);
    }
    public List<ArmorStrongMutSet> AllArmorStrongMutSet() {
      List<ArmorStrongMutSet> result = new List<ArmorStrongMutSet>(rootIncarnation.incarnationsArmorStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsArmorStrongMutSet.Keys) {
        result.Add(new ArmorStrongMutSet(this, id));
      }
      return result;
    }
    public bool ArmorStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsArmorStrongMutSet.ContainsKey(id);
    }
    public void CheckHasArmorStrongMutSet(ArmorStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasArmorStrongMutSet(thing.id);
    }
    public void CheckHasArmorStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsArmorStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid ArmorStrongMutSet}: " + id);
      }
    }
    public ArmorStrongMutSet EffectArmorStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new ArmorStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateArmorStrongMutSet(id, rootIncarnation.version, incarnation);
      return new ArmorStrongMutSet(this, id);
    }
    public void EffectInternalCreateArmorStrongMutSet(int id, int incarnationVersion, ArmorStrongMutSetIncarnation incarnation) {
      var effect = new ArmorStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsArmorStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<ArmorStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsArmorStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectArmorStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new ArmorStrongMutSetDeleteEffect(id);
      effectsArmorStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsArmorStrongMutSet[id];
      rootIncarnation.incarnationsArmorStrongMutSet.Remove(id);
    }

       
    public void EffectArmorStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasArmorStrongMutSet(setId);
      CheckHasArmor(elementId);

      var effect = new ArmorStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsArmorStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new ArmorStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsArmorStrongMutSet[setId] =
            new VersionAndIncarnation<ArmorStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsArmorStrongMutSetAddEffect.Add(effect);
    }
    public void EffectArmorStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasArmorStrongMutSet(setId);
      CheckHasArmor(elementId);

      var effect = new ArmorStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsArmorStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new ArmorStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsArmorStrongMutSet[setId] =
            new VersionAndIncarnation<ArmorStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsArmorStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddArmorStrongMutSetObserver(int id, IArmorStrongMutSetEffectObserver observer) {
      List<IArmorStrongMutSetEffectObserver> obsies;
      if (!observersForArmorStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IArmorStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForArmorStrongMutSet[id] = obsies;
    }

    public void RemoveArmorStrongMutSetObserver(int id, IArmorStrongMutSetEffectObserver observer) {
      if (observersForArmorStrongMutSet.ContainsKey(id)) {
        var list = observersForArmorStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForArmorStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastArmorStrongMutSetEffects(
      SortedDictionary<int, List<IArmorStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsArmorStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IArmorStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnArmorStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IArmorStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnArmorStrongMutSetEffect(effect);
        }
        observersForArmorStrongMutSet.Remove(effect.id);
      }
    }
    effectsArmorStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsArmorStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IArmorStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnArmorStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IArmorStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnArmorStrongMutSetEffect(effect);
        }
      }
    }
    effectsArmorStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsArmorStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IArmorStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnArmorStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IArmorStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnArmorStrongMutSetEffect(effect);
        }
      }
    }
    effectsArmorStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsArmorStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IArmorStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnArmorStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IArmorStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnArmorStrongMutSetEffect(effect);
        }
      }
    }
    effectsArmorStrongMutSetCreateEffect.Clear();

  }

    public int GetHoldPositionImpulseStrongMutSetHash(int id, int version, HoldPositionImpulseStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public HoldPositionImpulseStrongMutSetIncarnation GetHoldPositionImpulseStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsHoldPositionImpulseStrongMutSet[id].incarnation;
    }
    public HoldPositionImpulseStrongMutSet GetHoldPositionImpulseStrongMutSet(int id) {
      return new HoldPositionImpulseStrongMutSet(this, id);
    }
    public List<HoldPositionImpulseStrongMutSet> AllHoldPositionImpulseStrongMutSet() {
      List<HoldPositionImpulseStrongMutSet> result = new List<HoldPositionImpulseStrongMutSet>(rootIncarnation.incarnationsHoldPositionImpulseStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsHoldPositionImpulseStrongMutSet.Keys) {
        result.Add(new HoldPositionImpulseStrongMutSet(this, id));
      }
      return result;
    }
    public bool HoldPositionImpulseStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsHoldPositionImpulseStrongMutSet.ContainsKey(id);
    }
    public void CheckHasHoldPositionImpulseStrongMutSet(HoldPositionImpulseStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasHoldPositionImpulseStrongMutSet(thing.id);
    }
    public void CheckHasHoldPositionImpulseStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsHoldPositionImpulseStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid HoldPositionImpulseStrongMutSet}: " + id);
      }
    }
    public HoldPositionImpulseStrongMutSet EffectHoldPositionImpulseStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new HoldPositionImpulseStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateHoldPositionImpulseStrongMutSet(id, rootIncarnation.version, incarnation);
      return new HoldPositionImpulseStrongMutSet(this, id);
    }
    public void EffectInternalCreateHoldPositionImpulseStrongMutSet(int id, int incarnationVersion, HoldPositionImpulseStrongMutSetIncarnation incarnation) {
      var effect = new HoldPositionImpulseStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsHoldPositionImpulseStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<HoldPositionImpulseStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsHoldPositionImpulseStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectHoldPositionImpulseStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new HoldPositionImpulseStrongMutSetDeleteEffect(id);
      effectsHoldPositionImpulseStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsHoldPositionImpulseStrongMutSet[id];
      rootIncarnation.incarnationsHoldPositionImpulseStrongMutSet.Remove(id);
    }

       
    public void EffectHoldPositionImpulseStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasHoldPositionImpulseStrongMutSet(setId);
      CheckHasHoldPositionImpulse(elementId);

      var effect = new HoldPositionImpulseStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsHoldPositionImpulseStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new HoldPositionImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsHoldPositionImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<HoldPositionImpulseStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsHoldPositionImpulseStrongMutSetAddEffect.Add(effect);
    }
    public void EffectHoldPositionImpulseStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasHoldPositionImpulseStrongMutSet(setId);
      CheckHasHoldPositionImpulse(elementId);

      var effect = new HoldPositionImpulseStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsHoldPositionImpulseStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new HoldPositionImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsHoldPositionImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<HoldPositionImpulseStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsHoldPositionImpulseStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddHoldPositionImpulseStrongMutSetObserver(int id, IHoldPositionImpulseStrongMutSetEffectObserver observer) {
      List<IHoldPositionImpulseStrongMutSetEffectObserver> obsies;
      if (!observersForHoldPositionImpulseStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IHoldPositionImpulseStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForHoldPositionImpulseStrongMutSet[id] = obsies;
    }

    public void RemoveHoldPositionImpulseStrongMutSetObserver(int id, IHoldPositionImpulseStrongMutSetEffectObserver observer) {
      if (observersForHoldPositionImpulseStrongMutSet.ContainsKey(id)) {
        var list = observersForHoldPositionImpulseStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForHoldPositionImpulseStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastHoldPositionImpulseStrongMutSetEffects(
      SortedDictionary<int, List<IHoldPositionImpulseStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsHoldPositionImpulseStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IHoldPositionImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnHoldPositionImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IHoldPositionImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnHoldPositionImpulseStrongMutSetEffect(effect);
        }
        observersForHoldPositionImpulseStrongMutSet.Remove(effect.id);
      }
    }
    effectsHoldPositionImpulseStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsHoldPositionImpulseStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IHoldPositionImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnHoldPositionImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IHoldPositionImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnHoldPositionImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsHoldPositionImpulseStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsHoldPositionImpulseStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IHoldPositionImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnHoldPositionImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IHoldPositionImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnHoldPositionImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsHoldPositionImpulseStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsHoldPositionImpulseStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IHoldPositionImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnHoldPositionImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IHoldPositionImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnHoldPositionImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsHoldPositionImpulseStrongMutSetCreateEffect.Clear();

  }

    public int GetTemporaryCloneImpulseStrongMutSetHash(int id, int version, TemporaryCloneImpulseStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public TemporaryCloneImpulseStrongMutSetIncarnation GetTemporaryCloneImpulseStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet[id].incarnation;
    }
    public TemporaryCloneImpulseStrongMutSet GetTemporaryCloneImpulseStrongMutSet(int id) {
      return new TemporaryCloneImpulseStrongMutSet(this, id);
    }
    public List<TemporaryCloneImpulseStrongMutSet> AllTemporaryCloneImpulseStrongMutSet() {
      List<TemporaryCloneImpulseStrongMutSet> result = new List<TemporaryCloneImpulseStrongMutSet>(rootIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet.Keys) {
        result.Add(new TemporaryCloneImpulseStrongMutSet(this, id));
      }
      return result;
    }
    public bool TemporaryCloneImpulseStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet.ContainsKey(id);
    }
    public void CheckHasTemporaryCloneImpulseStrongMutSet(TemporaryCloneImpulseStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasTemporaryCloneImpulseStrongMutSet(thing.id);
    }
    public void CheckHasTemporaryCloneImpulseStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid TemporaryCloneImpulseStrongMutSet}: " + id);
      }
    }
    public TemporaryCloneImpulseStrongMutSet EffectTemporaryCloneImpulseStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new TemporaryCloneImpulseStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateTemporaryCloneImpulseStrongMutSet(id, rootIncarnation.version, incarnation);
      return new TemporaryCloneImpulseStrongMutSet(this, id);
    }
    public void EffectInternalCreateTemporaryCloneImpulseStrongMutSet(int id, int incarnationVersion, TemporaryCloneImpulseStrongMutSetIncarnation incarnation) {
      var effect = new TemporaryCloneImpulseStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<TemporaryCloneImpulseStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsTemporaryCloneImpulseStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectTemporaryCloneImpulseStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new TemporaryCloneImpulseStrongMutSetDeleteEffect(id);
      effectsTemporaryCloneImpulseStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet[id];
      rootIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet.Remove(id);
    }

       
    public void EffectTemporaryCloneImpulseStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasTemporaryCloneImpulseStrongMutSet(setId);
      CheckHasTemporaryCloneImpulse(elementId);

      var effect = new TemporaryCloneImpulseStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new TemporaryCloneImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<TemporaryCloneImpulseStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsTemporaryCloneImpulseStrongMutSetAddEffect.Add(effect);
    }
    public void EffectTemporaryCloneImpulseStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasTemporaryCloneImpulseStrongMutSet(setId);
      CheckHasTemporaryCloneImpulse(elementId);

      var effect = new TemporaryCloneImpulseStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new TemporaryCloneImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsTemporaryCloneImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<TemporaryCloneImpulseStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsTemporaryCloneImpulseStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddTemporaryCloneImpulseStrongMutSetObserver(int id, ITemporaryCloneImpulseStrongMutSetEffectObserver observer) {
      List<ITemporaryCloneImpulseStrongMutSetEffectObserver> obsies;
      if (!observersForTemporaryCloneImpulseStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ITemporaryCloneImpulseStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForTemporaryCloneImpulseStrongMutSet[id] = obsies;
    }

    public void RemoveTemporaryCloneImpulseStrongMutSetObserver(int id, ITemporaryCloneImpulseStrongMutSetEffectObserver observer) {
      if (observersForTemporaryCloneImpulseStrongMutSet.ContainsKey(id)) {
        var list = observersForTemporaryCloneImpulseStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForTemporaryCloneImpulseStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastTemporaryCloneImpulseStrongMutSetEffects(
      SortedDictionary<int, List<ITemporaryCloneImpulseStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsTemporaryCloneImpulseStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ITemporaryCloneImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTemporaryCloneImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITemporaryCloneImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTemporaryCloneImpulseStrongMutSetEffect(effect);
        }
        observersForTemporaryCloneImpulseStrongMutSet.Remove(effect.id);
      }
    }
    effectsTemporaryCloneImpulseStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsTemporaryCloneImpulseStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ITemporaryCloneImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTemporaryCloneImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITemporaryCloneImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTemporaryCloneImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsTemporaryCloneImpulseStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsTemporaryCloneImpulseStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ITemporaryCloneImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTemporaryCloneImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITemporaryCloneImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTemporaryCloneImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsTemporaryCloneImpulseStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsTemporaryCloneImpulseStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ITemporaryCloneImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTemporaryCloneImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITemporaryCloneImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTemporaryCloneImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsTemporaryCloneImpulseStrongMutSetCreateEffect.Clear();

  }

    public int GetSummonImpulseStrongMutSetHash(int id, int version, SummonImpulseStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public SummonImpulseStrongMutSetIncarnation GetSummonImpulseStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsSummonImpulseStrongMutSet[id].incarnation;
    }
    public SummonImpulseStrongMutSet GetSummonImpulseStrongMutSet(int id) {
      return new SummonImpulseStrongMutSet(this, id);
    }
    public List<SummonImpulseStrongMutSet> AllSummonImpulseStrongMutSet() {
      List<SummonImpulseStrongMutSet> result = new List<SummonImpulseStrongMutSet>(rootIncarnation.incarnationsSummonImpulseStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsSummonImpulseStrongMutSet.Keys) {
        result.Add(new SummonImpulseStrongMutSet(this, id));
      }
      return result;
    }
    public bool SummonImpulseStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsSummonImpulseStrongMutSet.ContainsKey(id);
    }
    public void CheckHasSummonImpulseStrongMutSet(SummonImpulseStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasSummonImpulseStrongMutSet(thing.id);
    }
    public void CheckHasSummonImpulseStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsSummonImpulseStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid SummonImpulseStrongMutSet}: " + id);
      }
    }
    public SummonImpulseStrongMutSet EffectSummonImpulseStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new SummonImpulseStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateSummonImpulseStrongMutSet(id, rootIncarnation.version, incarnation);
      return new SummonImpulseStrongMutSet(this, id);
    }
    public void EffectInternalCreateSummonImpulseStrongMutSet(int id, int incarnationVersion, SummonImpulseStrongMutSetIncarnation incarnation) {
      var effect = new SummonImpulseStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsSummonImpulseStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<SummonImpulseStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsSummonImpulseStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectSummonImpulseStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new SummonImpulseStrongMutSetDeleteEffect(id);
      effectsSummonImpulseStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsSummonImpulseStrongMutSet[id];
      rootIncarnation.incarnationsSummonImpulseStrongMutSet.Remove(id);
    }

       
    public void EffectSummonImpulseStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasSummonImpulseStrongMutSet(setId);
      CheckHasSummonImpulse(elementId);

      var effect = new SummonImpulseStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsSummonImpulseStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new SummonImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsSummonImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<SummonImpulseStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsSummonImpulseStrongMutSetAddEffect.Add(effect);
    }
    public void EffectSummonImpulseStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasSummonImpulseStrongMutSet(setId);
      CheckHasSummonImpulse(elementId);

      var effect = new SummonImpulseStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsSummonImpulseStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new SummonImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsSummonImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<SummonImpulseStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsSummonImpulseStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddSummonImpulseStrongMutSetObserver(int id, ISummonImpulseStrongMutSetEffectObserver observer) {
      List<ISummonImpulseStrongMutSetEffectObserver> obsies;
      if (!observersForSummonImpulseStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ISummonImpulseStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForSummonImpulseStrongMutSet[id] = obsies;
    }

    public void RemoveSummonImpulseStrongMutSetObserver(int id, ISummonImpulseStrongMutSetEffectObserver observer) {
      if (observersForSummonImpulseStrongMutSet.ContainsKey(id)) {
        var list = observersForSummonImpulseStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForSummonImpulseStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastSummonImpulseStrongMutSetEffects(
      SortedDictionary<int, List<ISummonImpulseStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsSummonImpulseStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ISummonImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSummonImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISummonImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSummonImpulseStrongMutSetEffect(effect);
        }
        observersForSummonImpulseStrongMutSet.Remove(effect.id);
      }
    }
    effectsSummonImpulseStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsSummonImpulseStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ISummonImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSummonImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISummonImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSummonImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsSummonImpulseStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsSummonImpulseStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ISummonImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSummonImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISummonImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSummonImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsSummonImpulseStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsSummonImpulseStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ISummonImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSummonImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISummonImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSummonImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsSummonImpulseStrongMutSetCreateEffect.Clear();

  }

    public int GetMireImpulseStrongMutSetHash(int id, int version, MireImpulseStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public MireImpulseStrongMutSetIncarnation GetMireImpulseStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsMireImpulseStrongMutSet[id].incarnation;
    }
    public MireImpulseStrongMutSet GetMireImpulseStrongMutSet(int id) {
      return new MireImpulseStrongMutSet(this, id);
    }
    public List<MireImpulseStrongMutSet> AllMireImpulseStrongMutSet() {
      List<MireImpulseStrongMutSet> result = new List<MireImpulseStrongMutSet>(rootIncarnation.incarnationsMireImpulseStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsMireImpulseStrongMutSet.Keys) {
        result.Add(new MireImpulseStrongMutSet(this, id));
      }
      return result;
    }
    public bool MireImpulseStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsMireImpulseStrongMutSet.ContainsKey(id);
    }
    public void CheckHasMireImpulseStrongMutSet(MireImpulseStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasMireImpulseStrongMutSet(thing.id);
    }
    public void CheckHasMireImpulseStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsMireImpulseStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid MireImpulseStrongMutSet}: " + id);
      }
    }
    public MireImpulseStrongMutSet EffectMireImpulseStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new MireImpulseStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateMireImpulseStrongMutSet(id, rootIncarnation.version, incarnation);
      return new MireImpulseStrongMutSet(this, id);
    }
    public void EffectInternalCreateMireImpulseStrongMutSet(int id, int incarnationVersion, MireImpulseStrongMutSetIncarnation incarnation) {
      var effect = new MireImpulseStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsMireImpulseStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<MireImpulseStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsMireImpulseStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectMireImpulseStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new MireImpulseStrongMutSetDeleteEffect(id);
      effectsMireImpulseStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsMireImpulseStrongMutSet[id];
      rootIncarnation.incarnationsMireImpulseStrongMutSet.Remove(id);
    }

       
    public void EffectMireImpulseStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasMireImpulseStrongMutSet(setId);
      CheckHasMireImpulse(elementId);

      var effect = new MireImpulseStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsMireImpulseStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new MireImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsMireImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<MireImpulseStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsMireImpulseStrongMutSetAddEffect.Add(effect);
    }
    public void EffectMireImpulseStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasMireImpulseStrongMutSet(setId);
      CheckHasMireImpulse(elementId);

      var effect = new MireImpulseStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsMireImpulseStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new MireImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsMireImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<MireImpulseStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsMireImpulseStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddMireImpulseStrongMutSetObserver(int id, IMireImpulseStrongMutSetEffectObserver observer) {
      List<IMireImpulseStrongMutSetEffectObserver> obsies;
      if (!observersForMireImpulseStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IMireImpulseStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForMireImpulseStrongMutSet[id] = obsies;
    }

    public void RemoveMireImpulseStrongMutSetObserver(int id, IMireImpulseStrongMutSetEffectObserver observer) {
      if (observersForMireImpulseStrongMutSet.ContainsKey(id)) {
        var list = observersForMireImpulseStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForMireImpulseStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastMireImpulseStrongMutSetEffects(
      SortedDictionary<int, List<IMireImpulseStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsMireImpulseStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IMireImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMireImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMireImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMireImpulseStrongMutSetEffect(effect);
        }
        observersForMireImpulseStrongMutSet.Remove(effect.id);
      }
    }
    effectsMireImpulseStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsMireImpulseStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IMireImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMireImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMireImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMireImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsMireImpulseStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsMireImpulseStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IMireImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMireImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMireImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMireImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsMireImpulseStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsMireImpulseStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IMireImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMireImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMireImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMireImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsMireImpulseStrongMutSetCreateEffect.Clear();

  }

    public int GetEvaporateImpulseStrongMutSetHash(int id, int version, EvaporateImpulseStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public EvaporateImpulseStrongMutSetIncarnation GetEvaporateImpulseStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsEvaporateImpulseStrongMutSet[id].incarnation;
    }
    public EvaporateImpulseStrongMutSet GetEvaporateImpulseStrongMutSet(int id) {
      return new EvaporateImpulseStrongMutSet(this, id);
    }
    public List<EvaporateImpulseStrongMutSet> AllEvaporateImpulseStrongMutSet() {
      List<EvaporateImpulseStrongMutSet> result = new List<EvaporateImpulseStrongMutSet>(rootIncarnation.incarnationsEvaporateImpulseStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsEvaporateImpulseStrongMutSet.Keys) {
        result.Add(new EvaporateImpulseStrongMutSet(this, id));
      }
      return result;
    }
    public bool EvaporateImpulseStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsEvaporateImpulseStrongMutSet.ContainsKey(id);
    }
    public void CheckHasEvaporateImpulseStrongMutSet(EvaporateImpulseStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasEvaporateImpulseStrongMutSet(thing.id);
    }
    public void CheckHasEvaporateImpulseStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsEvaporateImpulseStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid EvaporateImpulseStrongMutSet}: " + id);
      }
    }
    public EvaporateImpulseStrongMutSet EffectEvaporateImpulseStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new EvaporateImpulseStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateEvaporateImpulseStrongMutSet(id, rootIncarnation.version, incarnation);
      return new EvaporateImpulseStrongMutSet(this, id);
    }
    public void EffectInternalCreateEvaporateImpulseStrongMutSet(int id, int incarnationVersion, EvaporateImpulseStrongMutSetIncarnation incarnation) {
      var effect = new EvaporateImpulseStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsEvaporateImpulseStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<EvaporateImpulseStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsEvaporateImpulseStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectEvaporateImpulseStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new EvaporateImpulseStrongMutSetDeleteEffect(id);
      effectsEvaporateImpulseStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsEvaporateImpulseStrongMutSet[id];
      rootIncarnation.incarnationsEvaporateImpulseStrongMutSet.Remove(id);
    }

       
    public void EffectEvaporateImpulseStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasEvaporateImpulseStrongMutSet(setId);
      CheckHasEvaporateImpulse(elementId);

      var effect = new EvaporateImpulseStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsEvaporateImpulseStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new EvaporateImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsEvaporateImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<EvaporateImpulseStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsEvaporateImpulseStrongMutSetAddEffect.Add(effect);
    }
    public void EffectEvaporateImpulseStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasEvaporateImpulseStrongMutSet(setId);
      CheckHasEvaporateImpulse(elementId);

      var effect = new EvaporateImpulseStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsEvaporateImpulseStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new EvaporateImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsEvaporateImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<EvaporateImpulseStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsEvaporateImpulseStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddEvaporateImpulseStrongMutSetObserver(int id, IEvaporateImpulseStrongMutSetEffectObserver observer) {
      List<IEvaporateImpulseStrongMutSetEffectObserver> obsies;
      if (!observersForEvaporateImpulseStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IEvaporateImpulseStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForEvaporateImpulseStrongMutSet[id] = obsies;
    }

    public void RemoveEvaporateImpulseStrongMutSetObserver(int id, IEvaporateImpulseStrongMutSetEffectObserver observer) {
      if (observersForEvaporateImpulseStrongMutSet.ContainsKey(id)) {
        var list = observersForEvaporateImpulseStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForEvaporateImpulseStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastEvaporateImpulseStrongMutSetEffects(
      SortedDictionary<int, List<IEvaporateImpulseStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsEvaporateImpulseStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IEvaporateImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnEvaporateImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IEvaporateImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnEvaporateImpulseStrongMutSetEffect(effect);
        }
        observersForEvaporateImpulseStrongMutSet.Remove(effect.id);
      }
    }
    effectsEvaporateImpulseStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsEvaporateImpulseStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IEvaporateImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnEvaporateImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IEvaporateImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnEvaporateImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsEvaporateImpulseStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsEvaporateImpulseStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IEvaporateImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnEvaporateImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IEvaporateImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnEvaporateImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsEvaporateImpulseStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsEvaporateImpulseStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IEvaporateImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnEvaporateImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IEvaporateImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnEvaporateImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsEvaporateImpulseStrongMutSetCreateEffect.Clear();

  }

    public int GetMoveImpulseStrongMutSetHash(int id, int version, MoveImpulseStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public MoveImpulseStrongMutSetIncarnation GetMoveImpulseStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsMoveImpulseStrongMutSet[id].incarnation;
    }
    public MoveImpulseStrongMutSet GetMoveImpulseStrongMutSet(int id) {
      return new MoveImpulseStrongMutSet(this, id);
    }
    public List<MoveImpulseStrongMutSet> AllMoveImpulseStrongMutSet() {
      List<MoveImpulseStrongMutSet> result = new List<MoveImpulseStrongMutSet>(rootIncarnation.incarnationsMoveImpulseStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsMoveImpulseStrongMutSet.Keys) {
        result.Add(new MoveImpulseStrongMutSet(this, id));
      }
      return result;
    }
    public bool MoveImpulseStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsMoveImpulseStrongMutSet.ContainsKey(id);
    }
    public void CheckHasMoveImpulseStrongMutSet(MoveImpulseStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasMoveImpulseStrongMutSet(thing.id);
    }
    public void CheckHasMoveImpulseStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsMoveImpulseStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid MoveImpulseStrongMutSet}: " + id);
      }
    }
    public MoveImpulseStrongMutSet EffectMoveImpulseStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new MoveImpulseStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateMoveImpulseStrongMutSet(id, rootIncarnation.version, incarnation);
      return new MoveImpulseStrongMutSet(this, id);
    }
    public void EffectInternalCreateMoveImpulseStrongMutSet(int id, int incarnationVersion, MoveImpulseStrongMutSetIncarnation incarnation) {
      var effect = new MoveImpulseStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsMoveImpulseStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<MoveImpulseStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsMoveImpulseStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectMoveImpulseStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new MoveImpulseStrongMutSetDeleteEffect(id);
      effectsMoveImpulseStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsMoveImpulseStrongMutSet[id];
      rootIncarnation.incarnationsMoveImpulseStrongMutSet.Remove(id);
    }

       
    public void EffectMoveImpulseStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasMoveImpulseStrongMutSet(setId);
      CheckHasMoveImpulse(elementId);

      var effect = new MoveImpulseStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsMoveImpulseStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new MoveImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsMoveImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<MoveImpulseStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsMoveImpulseStrongMutSetAddEffect.Add(effect);
    }
    public void EffectMoveImpulseStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasMoveImpulseStrongMutSet(setId);
      CheckHasMoveImpulse(elementId);

      var effect = new MoveImpulseStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsMoveImpulseStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new MoveImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsMoveImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<MoveImpulseStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsMoveImpulseStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddMoveImpulseStrongMutSetObserver(int id, IMoveImpulseStrongMutSetEffectObserver observer) {
      List<IMoveImpulseStrongMutSetEffectObserver> obsies;
      if (!observersForMoveImpulseStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IMoveImpulseStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForMoveImpulseStrongMutSet[id] = obsies;
    }

    public void RemoveMoveImpulseStrongMutSetObserver(int id, IMoveImpulseStrongMutSetEffectObserver observer) {
      if (observersForMoveImpulseStrongMutSet.ContainsKey(id)) {
        var list = observersForMoveImpulseStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForMoveImpulseStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastMoveImpulseStrongMutSetEffects(
      SortedDictionary<int, List<IMoveImpulseStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsMoveImpulseStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IMoveImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMoveImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMoveImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMoveImpulseStrongMutSetEffect(effect);
        }
        observersForMoveImpulseStrongMutSet.Remove(effect.id);
      }
    }
    effectsMoveImpulseStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsMoveImpulseStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IMoveImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMoveImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMoveImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMoveImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsMoveImpulseStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsMoveImpulseStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IMoveImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMoveImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMoveImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMoveImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsMoveImpulseStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsMoveImpulseStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IMoveImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMoveImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMoveImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMoveImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsMoveImpulseStrongMutSetCreateEffect.Clear();

  }

    public int GetKamikazeJumpImpulseStrongMutSetHash(int id, int version, KamikazeJumpImpulseStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public KamikazeJumpImpulseStrongMutSetIncarnation GetKamikazeJumpImpulseStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet[id].incarnation;
    }
    public KamikazeJumpImpulseStrongMutSet GetKamikazeJumpImpulseStrongMutSet(int id) {
      return new KamikazeJumpImpulseStrongMutSet(this, id);
    }
    public List<KamikazeJumpImpulseStrongMutSet> AllKamikazeJumpImpulseStrongMutSet() {
      List<KamikazeJumpImpulseStrongMutSet> result = new List<KamikazeJumpImpulseStrongMutSet>(rootIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet.Keys) {
        result.Add(new KamikazeJumpImpulseStrongMutSet(this, id));
      }
      return result;
    }
    public bool KamikazeJumpImpulseStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet.ContainsKey(id);
    }
    public void CheckHasKamikazeJumpImpulseStrongMutSet(KamikazeJumpImpulseStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasKamikazeJumpImpulseStrongMutSet(thing.id);
    }
    public void CheckHasKamikazeJumpImpulseStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid KamikazeJumpImpulseStrongMutSet}: " + id);
      }
    }
    public KamikazeJumpImpulseStrongMutSet EffectKamikazeJumpImpulseStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new KamikazeJumpImpulseStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateKamikazeJumpImpulseStrongMutSet(id, rootIncarnation.version, incarnation);
      return new KamikazeJumpImpulseStrongMutSet(this, id);
    }
    public void EffectInternalCreateKamikazeJumpImpulseStrongMutSet(int id, int incarnationVersion, KamikazeJumpImpulseStrongMutSetIncarnation incarnation) {
      var effect = new KamikazeJumpImpulseStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<KamikazeJumpImpulseStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsKamikazeJumpImpulseStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectKamikazeJumpImpulseStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new KamikazeJumpImpulseStrongMutSetDeleteEffect(id);
      effectsKamikazeJumpImpulseStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet[id];
      rootIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet.Remove(id);
    }

       
    public void EffectKamikazeJumpImpulseStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasKamikazeJumpImpulseStrongMutSet(setId);
      CheckHasKamikazeJumpImpulse(elementId);

      var effect = new KamikazeJumpImpulseStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new KamikazeJumpImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<KamikazeJumpImpulseStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsKamikazeJumpImpulseStrongMutSetAddEffect.Add(effect);
    }
    public void EffectKamikazeJumpImpulseStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasKamikazeJumpImpulseStrongMutSet(setId);
      CheckHasKamikazeJumpImpulse(elementId);

      var effect = new KamikazeJumpImpulseStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new KamikazeJumpImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsKamikazeJumpImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<KamikazeJumpImpulseStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsKamikazeJumpImpulseStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddKamikazeJumpImpulseStrongMutSetObserver(int id, IKamikazeJumpImpulseStrongMutSetEffectObserver observer) {
      List<IKamikazeJumpImpulseStrongMutSetEffectObserver> obsies;
      if (!observersForKamikazeJumpImpulseStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IKamikazeJumpImpulseStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForKamikazeJumpImpulseStrongMutSet[id] = obsies;
    }

    public void RemoveKamikazeJumpImpulseStrongMutSetObserver(int id, IKamikazeJumpImpulseStrongMutSetEffectObserver observer) {
      if (observersForKamikazeJumpImpulseStrongMutSet.ContainsKey(id)) {
        var list = observersForKamikazeJumpImpulseStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForKamikazeJumpImpulseStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastKamikazeJumpImpulseStrongMutSetEffects(
      SortedDictionary<int, List<IKamikazeJumpImpulseStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsKamikazeJumpImpulseStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeJumpImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeJumpImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeJumpImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeJumpImpulseStrongMutSetEffect(effect);
        }
        observersForKamikazeJumpImpulseStrongMutSet.Remove(effect.id);
      }
    }
    effectsKamikazeJumpImpulseStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsKamikazeJumpImpulseStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeJumpImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeJumpImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeJumpImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeJumpImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsKamikazeJumpImpulseStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsKamikazeJumpImpulseStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeJumpImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeJumpImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeJumpImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeJumpImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsKamikazeJumpImpulseStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsKamikazeJumpImpulseStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeJumpImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeJumpImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeJumpImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeJumpImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsKamikazeJumpImpulseStrongMutSetCreateEffect.Clear();

  }

    public int GetKamikazeTargetImpulseStrongMutSetHash(int id, int version, KamikazeTargetImpulseStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public KamikazeTargetImpulseStrongMutSetIncarnation GetKamikazeTargetImpulseStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet[id].incarnation;
    }
    public KamikazeTargetImpulseStrongMutSet GetKamikazeTargetImpulseStrongMutSet(int id) {
      return new KamikazeTargetImpulseStrongMutSet(this, id);
    }
    public List<KamikazeTargetImpulseStrongMutSet> AllKamikazeTargetImpulseStrongMutSet() {
      List<KamikazeTargetImpulseStrongMutSet> result = new List<KamikazeTargetImpulseStrongMutSet>(rootIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet.Keys) {
        result.Add(new KamikazeTargetImpulseStrongMutSet(this, id));
      }
      return result;
    }
    public bool KamikazeTargetImpulseStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet.ContainsKey(id);
    }
    public void CheckHasKamikazeTargetImpulseStrongMutSet(KamikazeTargetImpulseStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasKamikazeTargetImpulseStrongMutSet(thing.id);
    }
    public void CheckHasKamikazeTargetImpulseStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid KamikazeTargetImpulseStrongMutSet}: " + id);
      }
    }
    public KamikazeTargetImpulseStrongMutSet EffectKamikazeTargetImpulseStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new KamikazeTargetImpulseStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateKamikazeTargetImpulseStrongMutSet(id, rootIncarnation.version, incarnation);
      return new KamikazeTargetImpulseStrongMutSet(this, id);
    }
    public void EffectInternalCreateKamikazeTargetImpulseStrongMutSet(int id, int incarnationVersion, KamikazeTargetImpulseStrongMutSetIncarnation incarnation) {
      var effect = new KamikazeTargetImpulseStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<KamikazeTargetImpulseStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsKamikazeTargetImpulseStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectKamikazeTargetImpulseStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new KamikazeTargetImpulseStrongMutSetDeleteEffect(id);
      effectsKamikazeTargetImpulseStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet[id];
      rootIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet.Remove(id);
    }

       
    public void EffectKamikazeTargetImpulseStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasKamikazeTargetImpulseStrongMutSet(setId);
      CheckHasKamikazeTargetImpulse(elementId);

      var effect = new KamikazeTargetImpulseStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new KamikazeTargetImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<KamikazeTargetImpulseStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsKamikazeTargetImpulseStrongMutSetAddEffect.Add(effect);
    }
    public void EffectKamikazeTargetImpulseStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasKamikazeTargetImpulseStrongMutSet(setId);
      CheckHasKamikazeTargetImpulse(elementId);

      var effect = new KamikazeTargetImpulseStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new KamikazeTargetImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsKamikazeTargetImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<KamikazeTargetImpulseStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsKamikazeTargetImpulseStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddKamikazeTargetImpulseStrongMutSetObserver(int id, IKamikazeTargetImpulseStrongMutSetEffectObserver observer) {
      List<IKamikazeTargetImpulseStrongMutSetEffectObserver> obsies;
      if (!observersForKamikazeTargetImpulseStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IKamikazeTargetImpulseStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForKamikazeTargetImpulseStrongMutSet[id] = obsies;
    }

    public void RemoveKamikazeTargetImpulseStrongMutSetObserver(int id, IKamikazeTargetImpulseStrongMutSetEffectObserver observer) {
      if (observersForKamikazeTargetImpulseStrongMutSet.ContainsKey(id)) {
        var list = observersForKamikazeTargetImpulseStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForKamikazeTargetImpulseStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastKamikazeTargetImpulseStrongMutSetEffects(
      SortedDictionary<int, List<IKamikazeTargetImpulseStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsKamikazeTargetImpulseStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeTargetImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeTargetImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeTargetImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeTargetImpulseStrongMutSetEffect(effect);
        }
        observersForKamikazeTargetImpulseStrongMutSet.Remove(effect.id);
      }
    }
    effectsKamikazeTargetImpulseStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsKamikazeTargetImpulseStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeTargetImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeTargetImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeTargetImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeTargetImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsKamikazeTargetImpulseStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsKamikazeTargetImpulseStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeTargetImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeTargetImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeTargetImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeTargetImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsKamikazeTargetImpulseStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsKamikazeTargetImpulseStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeTargetImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeTargetImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeTargetImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeTargetImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsKamikazeTargetImpulseStrongMutSetCreateEffect.Clear();

  }

    public int GetNoImpulseStrongMutSetHash(int id, int version, NoImpulseStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public NoImpulseStrongMutSetIncarnation GetNoImpulseStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsNoImpulseStrongMutSet[id].incarnation;
    }
    public NoImpulseStrongMutSet GetNoImpulseStrongMutSet(int id) {
      return new NoImpulseStrongMutSet(this, id);
    }
    public List<NoImpulseStrongMutSet> AllNoImpulseStrongMutSet() {
      List<NoImpulseStrongMutSet> result = new List<NoImpulseStrongMutSet>(rootIncarnation.incarnationsNoImpulseStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsNoImpulseStrongMutSet.Keys) {
        result.Add(new NoImpulseStrongMutSet(this, id));
      }
      return result;
    }
    public bool NoImpulseStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsNoImpulseStrongMutSet.ContainsKey(id);
    }
    public void CheckHasNoImpulseStrongMutSet(NoImpulseStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasNoImpulseStrongMutSet(thing.id);
    }
    public void CheckHasNoImpulseStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsNoImpulseStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid NoImpulseStrongMutSet}: " + id);
      }
    }
    public NoImpulseStrongMutSet EffectNoImpulseStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new NoImpulseStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateNoImpulseStrongMutSet(id, rootIncarnation.version, incarnation);
      return new NoImpulseStrongMutSet(this, id);
    }
    public void EffectInternalCreateNoImpulseStrongMutSet(int id, int incarnationVersion, NoImpulseStrongMutSetIncarnation incarnation) {
      var effect = new NoImpulseStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsNoImpulseStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<NoImpulseStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsNoImpulseStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectNoImpulseStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new NoImpulseStrongMutSetDeleteEffect(id);
      effectsNoImpulseStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsNoImpulseStrongMutSet[id];
      rootIncarnation.incarnationsNoImpulseStrongMutSet.Remove(id);
    }

       
    public void EffectNoImpulseStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasNoImpulseStrongMutSet(setId);
      CheckHasNoImpulse(elementId);

      var effect = new NoImpulseStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsNoImpulseStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new NoImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsNoImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<NoImpulseStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsNoImpulseStrongMutSetAddEffect.Add(effect);
    }
    public void EffectNoImpulseStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasNoImpulseStrongMutSet(setId);
      CheckHasNoImpulse(elementId);

      var effect = new NoImpulseStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsNoImpulseStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new NoImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsNoImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<NoImpulseStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsNoImpulseStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddNoImpulseStrongMutSetObserver(int id, INoImpulseStrongMutSetEffectObserver observer) {
      List<INoImpulseStrongMutSetEffectObserver> obsies;
      if (!observersForNoImpulseStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<INoImpulseStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForNoImpulseStrongMutSet[id] = obsies;
    }

    public void RemoveNoImpulseStrongMutSetObserver(int id, INoImpulseStrongMutSetEffectObserver observer) {
      if (observersForNoImpulseStrongMutSet.ContainsKey(id)) {
        var list = observersForNoImpulseStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForNoImpulseStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastNoImpulseStrongMutSetEffects(
      SortedDictionary<int, List<INoImpulseStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsNoImpulseStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<INoImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnNoImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<INoImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnNoImpulseStrongMutSetEffect(effect);
        }
        observersForNoImpulseStrongMutSet.Remove(effect.id);
      }
    }
    effectsNoImpulseStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsNoImpulseStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<INoImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnNoImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<INoImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnNoImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsNoImpulseStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsNoImpulseStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<INoImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnNoImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<INoImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnNoImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsNoImpulseStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsNoImpulseStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<INoImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnNoImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<INoImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnNoImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsNoImpulseStrongMutSetCreateEffect.Clear();

  }

    public int GetFireImpulseStrongMutSetHash(int id, int version, FireImpulseStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public FireImpulseStrongMutSetIncarnation GetFireImpulseStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsFireImpulseStrongMutSet[id].incarnation;
    }
    public FireImpulseStrongMutSet GetFireImpulseStrongMutSet(int id) {
      return new FireImpulseStrongMutSet(this, id);
    }
    public List<FireImpulseStrongMutSet> AllFireImpulseStrongMutSet() {
      List<FireImpulseStrongMutSet> result = new List<FireImpulseStrongMutSet>(rootIncarnation.incarnationsFireImpulseStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsFireImpulseStrongMutSet.Keys) {
        result.Add(new FireImpulseStrongMutSet(this, id));
      }
      return result;
    }
    public bool FireImpulseStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsFireImpulseStrongMutSet.ContainsKey(id);
    }
    public void CheckHasFireImpulseStrongMutSet(FireImpulseStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasFireImpulseStrongMutSet(thing.id);
    }
    public void CheckHasFireImpulseStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsFireImpulseStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid FireImpulseStrongMutSet}: " + id);
      }
    }
    public FireImpulseStrongMutSet EffectFireImpulseStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new FireImpulseStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateFireImpulseStrongMutSet(id, rootIncarnation.version, incarnation);
      return new FireImpulseStrongMutSet(this, id);
    }
    public void EffectInternalCreateFireImpulseStrongMutSet(int id, int incarnationVersion, FireImpulseStrongMutSetIncarnation incarnation) {
      var effect = new FireImpulseStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsFireImpulseStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<FireImpulseStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsFireImpulseStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectFireImpulseStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new FireImpulseStrongMutSetDeleteEffect(id);
      effectsFireImpulseStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsFireImpulseStrongMutSet[id];
      rootIncarnation.incarnationsFireImpulseStrongMutSet.Remove(id);
    }

       
    public void EffectFireImpulseStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasFireImpulseStrongMutSet(setId);
      CheckHasFireImpulse(elementId);

      var effect = new FireImpulseStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsFireImpulseStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new FireImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsFireImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<FireImpulseStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsFireImpulseStrongMutSetAddEffect.Add(effect);
    }
    public void EffectFireImpulseStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasFireImpulseStrongMutSet(setId);
      CheckHasFireImpulse(elementId);

      var effect = new FireImpulseStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsFireImpulseStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new FireImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsFireImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<FireImpulseStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsFireImpulseStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddFireImpulseStrongMutSetObserver(int id, IFireImpulseStrongMutSetEffectObserver observer) {
      List<IFireImpulseStrongMutSetEffectObserver> obsies;
      if (!observersForFireImpulseStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IFireImpulseStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForFireImpulseStrongMutSet[id] = obsies;
    }

    public void RemoveFireImpulseStrongMutSetObserver(int id, IFireImpulseStrongMutSetEffectObserver observer) {
      if (observersForFireImpulseStrongMutSet.ContainsKey(id)) {
        var list = observersForFireImpulseStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForFireImpulseStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastFireImpulseStrongMutSetEffects(
      SortedDictionary<int, List<IFireImpulseStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsFireImpulseStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IFireImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireImpulseStrongMutSetEffect(effect);
        }
        observersForFireImpulseStrongMutSet.Remove(effect.id);
      }
    }
    effectsFireImpulseStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsFireImpulseStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IFireImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsFireImpulseStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsFireImpulseStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IFireImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsFireImpulseStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsFireImpulseStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IFireImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsFireImpulseStrongMutSetCreateEffect.Clear();

  }

    public int GetDefyImpulseStrongMutSetHash(int id, int version, DefyImpulseStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public DefyImpulseStrongMutSetIncarnation GetDefyImpulseStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsDefyImpulseStrongMutSet[id].incarnation;
    }
    public DefyImpulseStrongMutSet GetDefyImpulseStrongMutSet(int id) {
      return new DefyImpulseStrongMutSet(this, id);
    }
    public List<DefyImpulseStrongMutSet> AllDefyImpulseStrongMutSet() {
      List<DefyImpulseStrongMutSet> result = new List<DefyImpulseStrongMutSet>(rootIncarnation.incarnationsDefyImpulseStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsDefyImpulseStrongMutSet.Keys) {
        result.Add(new DefyImpulseStrongMutSet(this, id));
      }
      return result;
    }
    public bool DefyImpulseStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsDefyImpulseStrongMutSet.ContainsKey(id);
    }
    public void CheckHasDefyImpulseStrongMutSet(DefyImpulseStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasDefyImpulseStrongMutSet(thing.id);
    }
    public void CheckHasDefyImpulseStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsDefyImpulseStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid DefyImpulseStrongMutSet}: " + id);
      }
    }
    public DefyImpulseStrongMutSet EffectDefyImpulseStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new DefyImpulseStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateDefyImpulseStrongMutSet(id, rootIncarnation.version, incarnation);
      return new DefyImpulseStrongMutSet(this, id);
    }
    public void EffectInternalCreateDefyImpulseStrongMutSet(int id, int incarnationVersion, DefyImpulseStrongMutSetIncarnation incarnation) {
      var effect = new DefyImpulseStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsDefyImpulseStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<DefyImpulseStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsDefyImpulseStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectDefyImpulseStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new DefyImpulseStrongMutSetDeleteEffect(id);
      effectsDefyImpulseStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsDefyImpulseStrongMutSet[id];
      rootIncarnation.incarnationsDefyImpulseStrongMutSet.Remove(id);
    }

       
    public void EffectDefyImpulseStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasDefyImpulseStrongMutSet(setId);
      CheckHasDefyImpulse(elementId);

      var effect = new DefyImpulseStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsDefyImpulseStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new DefyImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsDefyImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<DefyImpulseStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsDefyImpulseStrongMutSetAddEffect.Add(effect);
    }
    public void EffectDefyImpulseStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasDefyImpulseStrongMutSet(setId);
      CheckHasDefyImpulse(elementId);

      var effect = new DefyImpulseStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsDefyImpulseStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new DefyImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsDefyImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<DefyImpulseStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsDefyImpulseStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddDefyImpulseStrongMutSetObserver(int id, IDefyImpulseStrongMutSetEffectObserver observer) {
      List<IDefyImpulseStrongMutSetEffectObserver> obsies;
      if (!observersForDefyImpulseStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IDefyImpulseStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForDefyImpulseStrongMutSet[id] = obsies;
    }

    public void RemoveDefyImpulseStrongMutSetObserver(int id, IDefyImpulseStrongMutSetEffectObserver observer) {
      if (observersForDefyImpulseStrongMutSet.ContainsKey(id)) {
        var list = observersForDefyImpulseStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForDefyImpulseStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastDefyImpulseStrongMutSetEffects(
      SortedDictionary<int, List<IDefyImpulseStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsDefyImpulseStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IDefyImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDefyImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDefyImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDefyImpulseStrongMutSetEffect(effect);
        }
        observersForDefyImpulseStrongMutSet.Remove(effect.id);
      }
    }
    effectsDefyImpulseStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsDefyImpulseStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IDefyImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDefyImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDefyImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDefyImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsDefyImpulseStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsDefyImpulseStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IDefyImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDefyImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDefyImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDefyImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsDefyImpulseStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsDefyImpulseStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IDefyImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDefyImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDefyImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDefyImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsDefyImpulseStrongMutSetCreateEffect.Clear();

  }

    public int GetCounterImpulseStrongMutSetHash(int id, int version, CounterImpulseStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public CounterImpulseStrongMutSetIncarnation GetCounterImpulseStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsCounterImpulseStrongMutSet[id].incarnation;
    }
    public CounterImpulseStrongMutSet GetCounterImpulseStrongMutSet(int id) {
      return new CounterImpulseStrongMutSet(this, id);
    }
    public List<CounterImpulseStrongMutSet> AllCounterImpulseStrongMutSet() {
      List<CounterImpulseStrongMutSet> result = new List<CounterImpulseStrongMutSet>(rootIncarnation.incarnationsCounterImpulseStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsCounterImpulseStrongMutSet.Keys) {
        result.Add(new CounterImpulseStrongMutSet(this, id));
      }
      return result;
    }
    public bool CounterImpulseStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsCounterImpulseStrongMutSet.ContainsKey(id);
    }
    public void CheckHasCounterImpulseStrongMutSet(CounterImpulseStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasCounterImpulseStrongMutSet(thing.id);
    }
    public void CheckHasCounterImpulseStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsCounterImpulseStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid CounterImpulseStrongMutSet}: " + id);
      }
    }
    public CounterImpulseStrongMutSet EffectCounterImpulseStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new CounterImpulseStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateCounterImpulseStrongMutSet(id, rootIncarnation.version, incarnation);
      return new CounterImpulseStrongMutSet(this, id);
    }
    public void EffectInternalCreateCounterImpulseStrongMutSet(int id, int incarnationVersion, CounterImpulseStrongMutSetIncarnation incarnation) {
      var effect = new CounterImpulseStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsCounterImpulseStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<CounterImpulseStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsCounterImpulseStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectCounterImpulseStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new CounterImpulseStrongMutSetDeleteEffect(id);
      effectsCounterImpulseStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsCounterImpulseStrongMutSet[id];
      rootIncarnation.incarnationsCounterImpulseStrongMutSet.Remove(id);
    }

       
    public void EffectCounterImpulseStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasCounterImpulseStrongMutSet(setId);
      CheckHasCounterImpulse(elementId);

      var effect = new CounterImpulseStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsCounterImpulseStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new CounterImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsCounterImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<CounterImpulseStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsCounterImpulseStrongMutSetAddEffect.Add(effect);
    }
    public void EffectCounterImpulseStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasCounterImpulseStrongMutSet(setId);
      CheckHasCounterImpulse(elementId);

      var effect = new CounterImpulseStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsCounterImpulseStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new CounterImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsCounterImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<CounterImpulseStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsCounterImpulseStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddCounterImpulseStrongMutSetObserver(int id, ICounterImpulseStrongMutSetEffectObserver observer) {
      List<ICounterImpulseStrongMutSetEffectObserver> obsies;
      if (!observersForCounterImpulseStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ICounterImpulseStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForCounterImpulseStrongMutSet[id] = obsies;
    }

    public void RemoveCounterImpulseStrongMutSetObserver(int id, ICounterImpulseStrongMutSetEffectObserver observer) {
      if (observersForCounterImpulseStrongMutSet.ContainsKey(id)) {
        var list = observersForCounterImpulseStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForCounterImpulseStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastCounterImpulseStrongMutSetEffects(
      SortedDictionary<int, List<ICounterImpulseStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsCounterImpulseStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ICounterImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCounterImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICounterImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCounterImpulseStrongMutSetEffect(effect);
        }
        observersForCounterImpulseStrongMutSet.Remove(effect.id);
      }
    }
    effectsCounterImpulseStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsCounterImpulseStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ICounterImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCounterImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICounterImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCounterImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsCounterImpulseStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsCounterImpulseStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ICounterImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCounterImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICounterImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCounterImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsCounterImpulseStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsCounterImpulseStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ICounterImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCounterImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICounterImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCounterImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsCounterImpulseStrongMutSetCreateEffect.Clear();

  }

    public int GetUnleashBideImpulseStrongMutSetHash(int id, int version, UnleashBideImpulseStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public UnleashBideImpulseStrongMutSetIncarnation GetUnleashBideImpulseStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsUnleashBideImpulseStrongMutSet[id].incarnation;
    }
    public UnleashBideImpulseStrongMutSet GetUnleashBideImpulseStrongMutSet(int id) {
      return new UnleashBideImpulseStrongMutSet(this, id);
    }
    public List<UnleashBideImpulseStrongMutSet> AllUnleashBideImpulseStrongMutSet() {
      List<UnleashBideImpulseStrongMutSet> result = new List<UnleashBideImpulseStrongMutSet>(rootIncarnation.incarnationsUnleashBideImpulseStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsUnleashBideImpulseStrongMutSet.Keys) {
        result.Add(new UnleashBideImpulseStrongMutSet(this, id));
      }
      return result;
    }
    public bool UnleashBideImpulseStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsUnleashBideImpulseStrongMutSet.ContainsKey(id);
    }
    public void CheckHasUnleashBideImpulseStrongMutSet(UnleashBideImpulseStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasUnleashBideImpulseStrongMutSet(thing.id);
    }
    public void CheckHasUnleashBideImpulseStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsUnleashBideImpulseStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid UnleashBideImpulseStrongMutSet}: " + id);
      }
    }
    public UnleashBideImpulseStrongMutSet EffectUnleashBideImpulseStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new UnleashBideImpulseStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateUnleashBideImpulseStrongMutSet(id, rootIncarnation.version, incarnation);
      return new UnleashBideImpulseStrongMutSet(this, id);
    }
    public void EffectInternalCreateUnleashBideImpulseStrongMutSet(int id, int incarnationVersion, UnleashBideImpulseStrongMutSetIncarnation incarnation) {
      var effect = new UnleashBideImpulseStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsUnleashBideImpulseStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<UnleashBideImpulseStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsUnleashBideImpulseStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectUnleashBideImpulseStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new UnleashBideImpulseStrongMutSetDeleteEffect(id);
      effectsUnleashBideImpulseStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsUnleashBideImpulseStrongMutSet[id];
      rootIncarnation.incarnationsUnleashBideImpulseStrongMutSet.Remove(id);
    }

       
    public void EffectUnleashBideImpulseStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasUnleashBideImpulseStrongMutSet(setId);
      CheckHasUnleashBideImpulse(elementId);

      var effect = new UnleashBideImpulseStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsUnleashBideImpulseStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new UnleashBideImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsUnleashBideImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<UnleashBideImpulseStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsUnleashBideImpulseStrongMutSetAddEffect.Add(effect);
    }
    public void EffectUnleashBideImpulseStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasUnleashBideImpulseStrongMutSet(setId);
      CheckHasUnleashBideImpulse(elementId);

      var effect = new UnleashBideImpulseStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsUnleashBideImpulseStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new UnleashBideImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsUnleashBideImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<UnleashBideImpulseStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsUnleashBideImpulseStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddUnleashBideImpulseStrongMutSetObserver(int id, IUnleashBideImpulseStrongMutSetEffectObserver observer) {
      List<IUnleashBideImpulseStrongMutSetEffectObserver> obsies;
      if (!observersForUnleashBideImpulseStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IUnleashBideImpulseStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForUnleashBideImpulseStrongMutSet[id] = obsies;
    }

    public void RemoveUnleashBideImpulseStrongMutSetObserver(int id, IUnleashBideImpulseStrongMutSetEffectObserver observer) {
      if (observersForUnleashBideImpulseStrongMutSet.ContainsKey(id)) {
        var list = observersForUnleashBideImpulseStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForUnleashBideImpulseStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastUnleashBideImpulseStrongMutSetEffects(
      SortedDictionary<int, List<IUnleashBideImpulseStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsUnleashBideImpulseStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IUnleashBideImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUnleashBideImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUnleashBideImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUnleashBideImpulseStrongMutSetEffect(effect);
        }
        observersForUnleashBideImpulseStrongMutSet.Remove(effect.id);
      }
    }
    effectsUnleashBideImpulseStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsUnleashBideImpulseStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IUnleashBideImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUnleashBideImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUnleashBideImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUnleashBideImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsUnleashBideImpulseStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsUnleashBideImpulseStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IUnleashBideImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUnleashBideImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUnleashBideImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUnleashBideImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsUnleashBideImpulseStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsUnleashBideImpulseStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IUnleashBideImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUnleashBideImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUnleashBideImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUnleashBideImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsUnleashBideImpulseStrongMutSetCreateEffect.Clear();

  }

    public int GetContinueBidingImpulseStrongMutSetHash(int id, int version, ContinueBidingImpulseStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public ContinueBidingImpulseStrongMutSetIncarnation GetContinueBidingImpulseStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsContinueBidingImpulseStrongMutSet[id].incarnation;
    }
    public ContinueBidingImpulseStrongMutSet GetContinueBidingImpulseStrongMutSet(int id) {
      return new ContinueBidingImpulseStrongMutSet(this, id);
    }
    public List<ContinueBidingImpulseStrongMutSet> AllContinueBidingImpulseStrongMutSet() {
      List<ContinueBidingImpulseStrongMutSet> result = new List<ContinueBidingImpulseStrongMutSet>(rootIncarnation.incarnationsContinueBidingImpulseStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsContinueBidingImpulseStrongMutSet.Keys) {
        result.Add(new ContinueBidingImpulseStrongMutSet(this, id));
      }
      return result;
    }
    public bool ContinueBidingImpulseStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsContinueBidingImpulseStrongMutSet.ContainsKey(id);
    }
    public void CheckHasContinueBidingImpulseStrongMutSet(ContinueBidingImpulseStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasContinueBidingImpulseStrongMutSet(thing.id);
    }
    public void CheckHasContinueBidingImpulseStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsContinueBidingImpulseStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid ContinueBidingImpulseStrongMutSet}: " + id);
      }
    }
    public ContinueBidingImpulseStrongMutSet EffectContinueBidingImpulseStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new ContinueBidingImpulseStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateContinueBidingImpulseStrongMutSet(id, rootIncarnation.version, incarnation);
      return new ContinueBidingImpulseStrongMutSet(this, id);
    }
    public void EffectInternalCreateContinueBidingImpulseStrongMutSet(int id, int incarnationVersion, ContinueBidingImpulseStrongMutSetIncarnation incarnation) {
      var effect = new ContinueBidingImpulseStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsContinueBidingImpulseStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<ContinueBidingImpulseStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsContinueBidingImpulseStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectContinueBidingImpulseStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new ContinueBidingImpulseStrongMutSetDeleteEffect(id);
      effectsContinueBidingImpulseStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsContinueBidingImpulseStrongMutSet[id];
      rootIncarnation.incarnationsContinueBidingImpulseStrongMutSet.Remove(id);
    }

       
    public void EffectContinueBidingImpulseStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasContinueBidingImpulseStrongMutSet(setId);
      CheckHasContinueBidingImpulse(elementId);

      var effect = new ContinueBidingImpulseStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsContinueBidingImpulseStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new ContinueBidingImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsContinueBidingImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<ContinueBidingImpulseStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsContinueBidingImpulseStrongMutSetAddEffect.Add(effect);
    }
    public void EffectContinueBidingImpulseStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasContinueBidingImpulseStrongMutSet(setId);
      CheckHasContinueBidingImpulse(elementId);

      var effect = new ContinueBidingImpulseStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsContinueBidingImpulseStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new ContinueBidingImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsContinueBidingImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<ContinueBidingImpulseStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsContinueBidingImpulseStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddContinueBidingImpulseStrongMutSetObserver(int id, IContinueBidingImpulseStrongMutSetEffectObserver observer) {
      List<IContinueBidingImpulseStrongMutSetEffectObserver> obsies;
      if (!observersForContinueBidingImpulseStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IContinueBidingImpulseStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForContinueBidingImpulseStrongMutSet[id] = obsies;
    }

    public void RemoveContinueBidingImpulseStrongMutSetObserver(int id, IContinueBidingImpulseStrongMutSetEffectObserver observer) {
      if (observersForContinueBidingImpulseStrongMutSet.ContainsKey(id)) {
        var list = observersForContinueBidingImpulseStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForContinueBidingImpulseStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastContinueBidingImpulseStrongMutSetEffects(
      SortedDictionary<int, List<IContinueBidingImpulseStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsContinueBidingImpulseStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IContinueBidingImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnContinueBidingImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IContinueBidingImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnContinueBidingImpulseStrongMutSetEffect(effect);
        }
        observersForContinueBidingImpulseStrongMutSet.Remove(effect.id);
      }
    }
    effectsContinueBidingImpulseStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsContinueBidingImpulseStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IContinueBidingImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnContinueBidingImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IContinueBidingImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnContinueBidingImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsContinueBidingImpulseStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsContinueBidingImpulseStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IContinueBidingImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnContinueBidingImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IContinueBidingImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnContinueBidingImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsContinueBidingImpulseStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsContinueBidingImpulseStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IContinueBidingImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnContinueBidingImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IContinueBidingImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnContinueBidingImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsContinueBidingImpulseStrongMutSetCreateEffect.Clear();

  }

    public int GetStartBidingImpulseStrongMutSetHash(int id, int version, StartBidingImpulseStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public StartBidingImpulseStrongMutSetIncarnation GetStartBidingImpulseStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsStartBidingImpulseStrongMutSet[id].incarnation;
    }
    public StartBidingImpulseStrongMutSet GetStartBidingImpulseStrongMutSet(int id) {
      return new StartBidingImpulseStrongMutSet(this, id);
    }
    public List<StartBidingImpulseStrongMutSet> AllStartBidingImpulseStrongMutSet() {
      List<StartBidingImpulseStrongMutSet> result = new List<StartBidingImpulseStrongMutSet>(rootIncarnation.incarnationsStartBidingImpulseStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsStartBidingImpulseStrongMutSet.Keys) {
        result.Add(new StartBidingImpulseStrongMutSet(this, id));
      }
      return result;
    }
    public bool StartBidingImpulseStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsStartBidingImpulseStrongMutSet.ContainsKey(id);
    }
    public void CheckHasStartBidingImpulseStrongMutSet(StartBidingImpulseStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasStartBidingImpulseStrongMutSet(thing.id);
    }
    public void CheckHasStartBidingImpulseStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsStartBidingImpulseStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid StartBidingImpulseStrongMutSet}: " + id);
      }
    }
    public StartBidingImpulseStrongMutSet EffectStartBidingImpulseStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new StartBidingImpulseStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateStartBidingImpulseStrongMutSet(id, rootIncarnation.version, incarnation);
      return new StartBidingImpulseStrongMutSet(this, id);
    }
    public void EffectInternalCreateStartBidingImpulseStrongMutSet(int id, int incarnationVersion, StartBidingImpulseStrongMutSetIncarnation incarnation) {
      var effect = new StartBidingImpulseStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsStartBidingImpulseStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<StartBidingImpulseStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsStartBidingImpulseStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectStartBidingImpulseStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new StartBidingImpulseStrongMutSetDeleteEffect(id);
      effectsStartBidingImpulseStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsStartBidingImpulseStrongMutSet[id];
      rootIncarnation.incarnationsStartBidingImpulseStrongMutSet.Remove(id);
    }

       
    public void EffectStartBidingImpulseStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasStartBidingImpulseStrongMutSet(setId);
      CheckHasStartBidingImpulse(elementId);

      var effect = new StartBidingImpulseStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsStartBidingImpulseStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new StartBidingImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsStartBidingImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<StartBidingImpulseStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsStartBidingImpulseStrongMutSetAddEffect.Add(effect);
    }
    public void EffectStartBidingImpulseStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasStartBidingImpulseStrongMutSet(setId);
      CheckHasStartBidingImpulse(elementId);

      var effect = new StartBidingImpulseStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsStartBidingImpulseStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new StartBidingImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsStartBidingImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<StartBidingImpulseStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsStartBidingImpulseStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddStartBidingImpulseStrongMutSetObserver(int id, IStartBidingImpulseStrongMutSetEffectObserver observer) {
      List<IStartBidingImpulseStrongMutSetEffectObserver> obsies;
      if (!observersForStartBidingImpulseStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IStartBidingImpulseStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForStartBidingImpulseStrongMutSet[id] = obsies;
    }

    public void RemoveStartBidingImpulseStrongMutSetObserver(int id, IStartBidingImpulseStrongMutSetEffectObserver observer) {
      if (observersForStartBidingImpulseStrongMutSet.ContainsKey(id)) {
        var list = observersForStartBidingImpulseStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForStartBidingImpulseStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastStartBidingImpulseStrongMutSetEffects(
      SortedDictionary<int, List<IStartBidingImpulseStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsStartBidingImpulseStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IStartBidingImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnStartBidingImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IStartBidingImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnStartBidingImpulseStrongMutSetEffect(effect);
        }
        observersForStartBidingImpulseStrongMutSet.Remove(effect.id);
      }
    }
    effectsStartBidingImpulseStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsStartBidingImpulseStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IStartBidingImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnStartBidingImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IStartBidingImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnStartBidingImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsStartBidingImpulseStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsStartBidingImpulseStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IStartBidingImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnStartBidingImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IStartBidingImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnStartBidingImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsStartBidingImpulseStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsStartBidingImpulseStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IStartBidingImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnStartBidingImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IStartBidingImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnStartBidingImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsStartBidingImpulseStrongMutSetCreateEffect.Clear();

  }

    public int GetAttackImpulseStrongMutSetHash(int id, int version, AttackImpulseStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public AttackImpulseStrongMutSetIncarnation GetAttackImpulseStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsAttackImpulseStrongMutSet[id].incarnation;
    }
    public AttackImpulseStrongMutSet GetAttackImpulseStrongMutSet(int id) {
      return new AttackImpulseStrongMutSet(this, id);
    }
    public List<AttackImpulseStrongMutSet> AllAttackImpulseStrongMutSet() {
      List<AttackImpulseStrongMutSet> result = new List<AttackImpulseStrongMutSet>(rootIncarnation.incarnationsAttackImpulseStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsAttackImpulseStrongMutSet.Keys) {
        result.Add(new AttackImpulseStrongMutSet(this, id));
      }
      return result;
    }
    public bool AttackImpulseStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsAttackImpulseStrongMutSet.ContainsKey(id);
    }
    public void CheckHasAttackImpulseStrongMutSet(AttackImpulseStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasAttackImpulseStrongMutSet(thing.id);
    }
    public void CheckHasAttackImpulseStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsAttackImpulseStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid AttackImpulseStrongMutSet}: " + id);
      }
    }
    public AttackImpulseStrongMutSet EffectAttackImpulseStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new AttackImpulseStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateAttackImpulseStrongMutSet(id, rootIncarnation.version, incarnation);
      return new AttackImpulseStrongMutSet(this, id);
    }
    public void EffectInternalCreateAttackImpulseStrongMutSet(int id, int incarnationVersion, AttackImpulseStrongMutSetIncarnation incarnation) {
      var effect = new AttackImpulseStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsAttackImpulseStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<AttackImpulseStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsAttackImpulseStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectAttackImpulseStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new AttackImpulseStrongMutSetDeleteEffect(id);
      effectsAttackImpulseStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsAttackImpulseStrongMutSet[id];
      rootIncarnation.incarnationsAttackImpulseStrongMutSet.Remove(id);
    }

       
    public void EffectAttackImpulseStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasAttackImpulseStrongMutSet(setId);
      CheckHasAttackImpulse(elementId);

      var effect = new AttackImpulseStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsAttackImpulseStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new AttackImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsAttackImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<AttackImpulseStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsAttackImpulseStrongMutSetAddEffect.Add(effect);
    }
    public void EffectAttackImpulseStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasAttackImpulseStrongMutSet(setId);
      CheckHasAttackImpulse(elementId);

      var effect = new AttackImpulseStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsAttackImpulseStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new AttackImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsAttackImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<AttackImpulseStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsAttackImpulseStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddAttackImpulseStrongMutSetObserver(int id, IAttackImpulseStrongMutSetEffectObserver observer) {
      List<IAttackImpulseStrongMutSetEffectObserver> obsies;
      if (!observersForAttackImpulseStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IAttackImpulseStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForAttackImpulseStrongMutSet[id] = obsies;
    }

    public void RemoveAttackImpulseStrongMutSetObserver(int id, IAttackImpulseStrongMutSetEffectObserver observer) {
      if (observersForAttackImpulseStrongMutSet.ContainsKey(id)) {
        var list = observersForAttackImpulseStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForAttackImpulseStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastAttackImpulseStrongMutSetEffects(
      SortedDictionary<int, List<IAttackImpulseStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsAttackImpulseStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IAttackImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAttackImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAttackImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAttackImpulseStrongMutSetEffect(effect);
        }
        observersForAttackImpulseStrongMutSet.Remove(effect.id);
      }
    }
    effectsAttackImpulseStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsAttackImpulseStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IAttackImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAttackImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAttackImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAttackImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsAttackImpulseStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsAttackImpulseStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IAttackImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAttackImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAttackImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAttackImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsAttackImpulseStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsAttackImpulseStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IAttackImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAttackImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAttackImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAttackImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsAttackImpulseStrongMutSetCreateEffect.Clear();

  }

    public int GetPursueImpulseStrongMutSetHash(int id, int version, PursueImpulseStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public PursueImpulseStrongMutSetIncarnation GetPursueImpulseStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsPursueImpulseStrongMutSet[id].incarnation;
    }
    public PursueImpulseStrongMutSet GetPursueImpulseStrongMutSet(int id) {
      return new PursueImpulseStrongMutSet(this, id);
    }
    public List<PursueImpulseStrongMutSet> AllPursueImpulseStrongMutSet() {
      List<PursueImpulseStrongMutSet> result = new List<PursueImpulseStrongMutSet>(rootIncarnation.incarnationsPursueImpulseStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsPursueImpulseStrongMutSet.Keys) {
        result.Add(new PursueImpulseStrongMutSet(this, id));
      }
      return result;
    }
    public bool PursueImpulseStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsPursueImpulseStrongMutSet.ContainsKey(id);
    }
    public void CheckHasPursueImpulseStrongMutSet(PursueImpulseStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasPursueImpulseStrongMutSet(thing.id);
    }
    public void CheckHasPursueImpulseStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsPursueImpulseStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid PursueImpulseStrongMutSet}: " + id);
      }
    }
    public PursueImpulseStrongMutSet EffectPursueImpulseStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new PursueImpulseStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreatePursueImpulseStrongMutSet(id, rootIncarnation.version, incarnation);
      return new PursueImpulseStrongMutSet(this, id);
    }
    public void EffectInternalCreatePursueImpulseStrongMutSet(int id, int incarnationVersion, PursueImpulseStrongMutSetIncarnation incarnation) {
      var effect = new PursueImpulseStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsPursueImpulseStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<PursueImpulseStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsPursueImpulseStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectPursueImpulseStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new PursueImpulseStrongMutSetDeleteEffect(id);
      effectsPursueImpulseStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsPursueImpulseStrongMutSet[id];
      rootIncarnation.incarnationsPursueImpulseStrongMutSet.Remove(id);
    }

       
    public void EffectPursueImpulseStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasPursueImpulseStrongMutSet(setId);
      CheckHasPursueImpulse(elementId);

      var effect = new PursueImpulseStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsPursueImpulseStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new PursueImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsPursueImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<PursueImpulseStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsPursueImpulseStrongMutSetAddEffect.Add(effect);
    }
    public void EffectPursueImpulseStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasPursueImpulseStrongMutSet(setId);
      CheckHasPursueImpulse(elementId);

      var effect = new PursueImpulseStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsPursueImpulseStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new PursueImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsPursueImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<PursueImpulseStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsPursueImpulseStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddPursueImpulseStrongMutSetObserver(int id, IPursueImpulseStrongMutSetEffectObserver observer) {
      List<IPursueImpulseStrongMutSetEffectObserver> obsies;
      if (!observersForPursueImpulseStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IPursueImpulseStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForPursueImpulseStrongMutSet[id] = obsies;
    }

    public void RemovePursueImpulseStrongMutSetObserver(int id, IPursueImpulseStrongMutSetEffectObserver observer) {
      if (observersForPursueImpulseStrongMutSet.ContainsKey(id)) {
        var list = observersForPursueImpulseStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForPursueImpulseStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastPursueImpulseStrongMutSetEffects(
      SortedDictionary<int, List<IPursueImpulseStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsPursueImpulseStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IPursueImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnPursueImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IPursueImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnPursueImpulseStrongMutSetEffect(effect);
        }
        observersForPursueImpulseStrongMutSet.Remove(effect.id);
      }
    }
    effectsPursueImpulseStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsPursueImpulseStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IPursueImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnPursueImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IPursueImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnPursueImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsPursueImpulseStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsPursueImpulseStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IPursueImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnPursueImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IPursueImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnPursueImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsPursueImpulseStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsPursueImpulseStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IPursueImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnPursueImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IPursueImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnPursueImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsPursueImpulseStrongMutSetCreateEffect.Clear();

  }

    public int GetFireBombImpulseStrongMutSetHash(int id, int version, FireBombImpulseStrongMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public FireBombImpulseStrongMutSetIncarnation GetFireBombImpulseStrongMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsFireBombImpulseStrongMutSet[id].incarnation;
    }
    public FireBombImpulseStrongMutSet GetFireBombImpulseStrongMutSet(int id) {
      return new FireBombImpulseStrongMutSet(this, id);
    }
    public List<FireBombImpulseStrongMutSet> AllFireBombImpulseStrongMutSet() {
      List<FireBombImpulseStrongMutSet> result = new List<FireBombImpulseStrongMutSet>(rootIncarnation.incarnationsFireBombImpulseStrongMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsFireBombImpulseStrongMutSet.Keys) {
        result.Add(new FireBombImpulseStrongMutSet(this, id));
      }
      return result;
    }
    public bool FireBombImpulseStrongMutSetExists(int id) {
      return rootIncarnation.incarnationsFireBombImpulseStrongMutSet.ContainsKey(id);
    }
    public void CheckHasFireBombImpulseStrongMutSet(FireBombImpulseStrongMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasFireBombImpulseStrongMutSet(thing.id);
    }
    public void CheckHasFireBombImpulseStrongMutSet(int id) {
      if (!rootIncarnation.incarnationsFireBombImpulseStrongMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid FireBombImpulseStrongMutSet}: " + id);
      }
    }
    public FireBombImpulseStrongMutSet EffectFireBombImpulseStrongMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new FireBombImpulseStrongMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateFireBombImpulseStrongMutSet(id, rootIncarnation.version, incarnation);
      return new FireBombImpulseStrongMutSet(this, id);
    }
    public void EffectInternalCreateFireBombImpulseStrongMutSet(int id, int incarnationVersion, FireBombImpulseStrongMutSetIncarnation incarnation) {
      var effect = new FireBombImpulseStrongMutSetCreateEffect(id);
      rootIncarnation.incarnationsFireBombImpulseStrongMutSet
          .Add(
              id,
              new VersionAndIncarnation<FireBombImpulseStrongMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsFireBombImpulseStrongMutSetCreateEffect.Add(effect);
    }
    public void EffectFireBombImpulseStrongMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new FireBombImpulseStrongMutSetDeleteEffect(id);
      effectsFireBombImpulseStrongMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsFireBombImpulseStrongMutSet[id];
      rootIncarnation.incarnationsFireBombImpulseStrongMutSet.Remove(id);
    }

       
    public void EffectFireBombImpulseStrongMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasFireBombImpulseStrongMutSet(setId);
      CheckHasFireBombImpulse(elementId);

      var effect = new FireBombImpulseStrongMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsFireBombImpulseStrongMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new FireBombImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsFireBombImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<FireBombImpulseStrongMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsFireBombImpulseStrongMutSetAddEffect.Add(effect);
    }
    public void EffectFireBombImpulseStrongMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasFireBombImpulseStrongMutSet(setId);
      CheckHasFireBombImpulse(elementId);

      var effect = new FireBombImpulseStrongMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsFireBombImpulseStrongMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new FireBombImpulseStrongMutSetIncarnation(newMap);
        rootIncarnation.incarnationsFireBombImpulseStrongMutSet[setId] =
            new VersionAndIncarnation<FireBombImpulseStrongMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsFireBombImpulseStrongMutSetRemoveEffect.Add(effect);
    }

       
    public void AddFireBombImpulseStrongMutSetObserver(int id, IFireBombImpulseStrongMutSetEffectObserver observer) {
      List<IFireBombImpulseStrongMutSetEffectObserver> obsies;
      if (!observersForFireBombImpulseStrongMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IFireBombImpulseStrongMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForFireBombImpulseStrongMutSet[id] = obsies;
    }

    public void RemoveFireBombImpulseStrongMutSetObserver(int id, IFireBombImpulseStrongMutSetEffectObserver observer) {
      if (observersForFireBombImpulseStrongMutSet.ContainsKey(id)) {
        var list = observersForFireBombImpulseStrongMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForFireBombImpulseStrongMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastFireBombImpulseStrongMutSetEffects(
      SortedDictionary<int, List<IFireBombImpulseStrongMutSetEffectObserver>> observers) {
    foreach (var effect in effectsFireBombImpulseStrongMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IFireBombImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireBombImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireBombImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireBombImpulseStrongMutSetEffect(effect);
        }
        observersForFireBombImpulseStrongMutSet.Remove(effect.id);
      }
    }
    effectsFireBombImpulseStrongMutSetDeleteEffect.Clear();

    foreach (var effect in effectsFireBombImpulseStrongMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IFireBombImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireBombImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireBombImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireBombImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsFireBombImpulseStrongMutSetAddEffect.Clear();

    foreach (var effect in effectsFireBombImpulseStrongMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IFireBombImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireBombImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireBombImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireBombImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsFireBombImpulseStrongMutSetRemoveEffect.Clear();

    foreach (var effect in effectsFireBombImpulseStrongMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IFireBombImpulseStrongMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireBombImpulseStrongMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireBombImpulseStrongMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireBombImpulseStrongMutSetEffect(effect);
        }
      }
    }
    effectsFireBombImpulseStrongMutSetCreateEffect.Clear();

  }

    public int GetUnitMutSetHash(int id, int version, UnitMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public UnitMutSetIncarnation GetUnitMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsUnitMutSet[id].incarnation;
    }
    public UnitMutSet GetUnitMutSet(int id) {
      return new UnitMutSet(this, id);
    }
    public List<UnitMutSet> AllUnitMutSet() {
      List<UnitMutSet> result = new List<UnitMutSet>(rootIncarnation.incarnationsUnitMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsUnitMutSet.Keys) {
        result.Add(new UnitMutSet(this, id));
      }
      return result;
    }
    public bool UnitMutSetExists(int id) {
      return rootIncarnation.incarnationsUnitMutSet.ContainsKey(id);
    }
    public void CheckHasUnitMutSet(UnitMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasUnitMutSet(thing.id);
    }
    public void CheckHasUnitMutSet(int id) {
      if (!rootIncarnation.incarnationsUnitMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid UnitMutSet}: " + id);
      }
    }
    public UnitMutSet EffectUnitMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new UnitMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateUnitMutSet(id, rootIncarnation.version, incarnation);
      return new UnitMutSet(this, id);
    }
    public void EffectInternalCreateUnitMutSet(int id, int incarnationVersion, UnitMutSetIncarnation incarnation) {
      var effect = new UnitMutSetCreateEffect(id);
      rootIncarnation.incarnationsUnitMutSet
          .Add(
              id,
              new VersionAndIncarnation<UnitMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsUnitMutSetCreateEffect.Add(effect);
    }
    public void EffectUnitMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new UnitMutSetDeleteEffect(id);
      effectsUnitMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsUnitMutSet[id];
      rootIncarnation.incarnationsUnitMutSet.Remove(id);
    }

       
    public void EffectUnitMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasUnitMutSet(setId);
      CheckHasUnit(elementId);

      var effect = new UnitMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsUnitMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new UnitMutSetIncarnation(newMap);
        rootIncarnation.incarnationsUnitMutSet[setId] =
            new VersionAndIncarnation<UnitMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsUnitMutSetAddEffect.Add(effect);
    }
    public void EffectUnitMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasUnitMutSet(setId);
      CheckHasUnit(elementId);

      var effect = new UnitMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsUnitMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new UnitMutSetIncarnation(newMap);
        rootIncarnation.incarnationsUnitMutSet[setId] =
            new VersionAndIncarnation<UnitMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsUnitMutSetRemoveEffect.Add(effect);
    }

       
    public void AddUnitMutSetObserver(int id, IUnitMutSetEffectObserver observer) {
      List<IUnitMutSetEffectObserver> obsies;
      if (!observersForUnitMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IUnitMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForUnitMutSet[id] = obsies;
    }

    public void RemoveUnitMutSetObserver(int id, IUnitMutSetEffectObserver observer) {
      if (observersForUnitMutSet.ContainsKey(id)) {
        var list = observersForUnitMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForUnitMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastUnitMutSetEffects(
      SortedDictionary<int, List<IUnitMutSetEffectObserver>> observers) {
    foreach (var effect in effectsUnitMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IUnitMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUnitMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUnitMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUnitMutSetEffect(effect);
        }
        observersForUnitMutSet.Remove(effect.id);
      }
    }
    effectsUnitMutSetDeleteEffect.Clear();

    foreach (var effect in effectsUnitMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IUnitMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUnitMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUnitMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUnitMutSetEffect(effect);
        }
      }
    }
    effectsUnitMutSetAddEffect.Clear();

    foreach (var effect in effectsUnitMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IUnitMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUnitMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUnitMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUnitMutSetEffect(effect);
        }
      }
    }
    effectsUnitMutSetRemoveEffect.Clear();

    foreach (var effect in effectsUnitMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IUnitMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUnitMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUnitMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUnitMutSetEffect(effect);
        }
      }
    }
    effectsUnitMutSetCreateEffect.Clear();

  }

    public int GetSimplePresenceTriggerTTCMutSetHash(int id, int version, SimplePresenceTriggerTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public SimplePresenceTriggerTTCMutSetIncarnation GetSimplePresenceTriggerTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsSimplePresenceTriggerTTCMutSet[id].incarnation;
    }
    public SimplePresenceTriggerTTCMutSet GetSimplePresenceTriggerTTCMutSet(int id) {
      return new SimplePresenceTriggerTTCMutSet(this, id);
    }
    public List<SimplePresenceTriggerTTCMutSet> AllSimplePresenceTriggerTTCMutSet() {
      List<SimplePresenceTriggerTTCMutSet> result = new List<SimplePresenceTriggerTTCMutSet>(rootIncarnation.incarnationsSimplePresenceTriggerTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsSimplePresenceTriggerTTCMutSet.Keys) {
        result.Add(new SimplePresenceTriggerTTCMutSet(this, id));
      }
      return result;
    }
    public bool SimplePresenceTriggerTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsSimplePresenceTriggerTTCMutSet.ContainsKey(id);
    }
    public void CheckHasSimplePresenceTriggerTTCMutSet(SimplePresenceTriggerTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasSimplePresenceTriggerTTCMutSet(thing.id);
    }
    public void CheckHasSimplePresenceTriggerTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsSimplePresenceTriggerTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid SimplePresenceTriggerTTCMutSet}: " + id);
      }
    }
    public SimplePresenceTriggerTTCMutSet EffectSimplePresenceTriggerTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new SimplePresenceTriggerTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateSimplePresenceTriggerTTCMutSet(id, rootIncarnation.version, incarnation);
      return new SimplePresenceTriggerTTCMutSet(this, id);
    }
    public void EffectInternalCreateSimplePresenceTriggerTTCMutSet(int id, int incarnationVersion, SimplePresenceTriggerTTCMutSetIncarnation incarnation) {
      var effect = new SimplePresenceTriggerTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsSimplePresenceTriggerTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<SimplePresenceTriggerTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsSimplePresenceTriggerTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectSimplePresenceTriggerTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new SimplePresenceTriggerTTCMutSetDeleteEffect(id);
      effectsSimplePresenceTriggerTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsSimplePresenceTriggerTTCMutSet[id];
      rootIncarnation.incarnationsSimplePresenceTriggerTTCMutSet.Remove(id);
    }

       
    public void EffectSimplePresenceTriggerTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasSimplePresenceTriggerTTCMutSet(setId);
      CheckHasSimplePresenceTriggerTTC(elementId);

      var effect = new SimplePresenceTriggerTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsSimplePresenceTriggerTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new SimplePresenceTriggerTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsSimplePresenceTriggerTTCMutSet[setId] =
            new VersionAndIncarnation<SimplePresenceTriggerTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsSimplePresenceTriggerTTCMutSetAddEffect.Add(effect);
    }
    public void EffectSimplePresenceTriggerTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasSimplePresenceTriggerTTCMutSet(setId);
      CheckHasSimplePresenceTriggerTTC(elementId);

      var effect = new SimplePresenceTriggerTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsSimplePresenceTriggerTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new SimplePresenceTriggerTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsSimplePresenceTriggerTTCMutSet[setId] =
            new VersionAndIncarnation<SimplePresenceTriggerTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsSimplePresenceTriggerTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddSimplePresenceTriggerTTCMutSetObserver(int id, ISimplePresenceTriggerTTCMutSetEffectObserver observer) {
      List<ISimplePresenceTriggerTTCMutSetEffectObserver> obsies;
      if (!observersForSimplePresenceTriggerTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ISimplePresenceTriggerTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForSimplePresenceTriggerTTCMutSet[id] = obsies;
    }

    public void RemoveSimplePresenceTriggerTTCMutSetObserver(int id, ISimplePresenceTriggerTTCMutSetEffectObserver observer) {
      if (observersForSimplePresenceTriggerTTCMutSet.ContainsKey(id)) {
        var list = observersForSimplePresenceTriggerTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForSimplePresenceTriggerTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastSimplePresenceTriggerTTCMutSetEffects(
      SortedDictionary<int, List<ISimplePresenceTriggerTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsSimplePresenceTriggerTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ISimplePresenceTriggerTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSimplePresenceTriggerTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISimplePresenceTriggerTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSimplePresenceTriggerTTCMutSetEffect(effect);
        }
        observersForSimplePresenceTriggerTTCMutSet.Remove(effect.id);
      }
    }
    effectsSimplePresenceTriggerTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsSimplePresenceTriggerTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ISimplePresenceTriggerTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSimplePresenceTriggerTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISimplePresenceTriggerTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSimplePresenceTriggerTTCMutSetEffect(effect);
        }
      }
    }
    effectsSimplePresenceTriggerTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsSimplePresenceTriggerTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ISimplePresenceTriggerTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSimplePresenceTriggerTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISimplePresenceTriggerTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSimplePresenceTriggerTTCMutSetEffect(effect);
        }
      }
    }
    effectsSimplePresenceTriggerTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsSimplePresenceTriggerTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ISimplePresenceTriggerTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSimplePresenceTriggerTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISimplePresenceTriggerTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSimplePresenceTriggerTTCMutSetEffect(effect);
        }
      }
    }
    effectsSimplePresenceTriggerTTCMutSetCreateEffect.Clear();

  }

    public int GetItemTTCMutSetHash(int id, int version, ItemTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public ItemTTCMutSetIncarnation GetItemTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsItemTTCMutSet[id].incarnation;
    }
    public ItemTTCMutSet GetItemTTCMutSet(int id) {
      return new ItemTTCMutSet(this, id);
    }
    public List<ItemTTCMutSet> AllItemTTCMutSet() {
      List<ItemTTCMutSet> result = new List<ItemTTCMutSet>(rootIncarnation.incarnationsItemTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsItemTTCMutSet.Keys) {
        result.Add(new ItemTTCMutSet(this, id));
      }
      return result;
    }
    public bool ItemTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsItemTTCMutSet.ContainsKey(id);
    }
    public void CheckHasItemTTCMutSet(ItemTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasItemTTCMutSet(thing.id);
    }
    public void CheckHasItemTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsItemTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid ItemTTCMutSet}: " + id);
      }
    }
    public ItemTTCMutSet EffectItemTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new ItemTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateItemTTCMutSet(id, rootIncarnation.version, incarnation);
      return new ItemTTCMutSet(this, id);
    }
    public void EffectInternalCreateItemTTCMutSet(int id, int incarnationVersion, ItemTTCMutSetIncarnation incarnation) {
      var effect = new ItemTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsItemTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<ItemTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsItemTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectItemTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new ItemTTCMutSetDeleteEffect(id);
      effectsItemTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsItemTTCMutSet[id];
      rootIncarnation.incarnationsItemTTCMutSet.Remove(id);
    }

       
    public void EffectItemTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasItemTTCMutSet(setId);
      CheckHasItemTTC(elementId);

      var effect = new ItemTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsItemTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new ItemTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsItemTTCMutSet[setId] =
            new VersionAndIncarnation<ItemTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsItemTTCMutSetAddEffect.Add(effect);
    }
    public void EffectItemTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasItemTTCMutSet(setId);
      CheckHasItemTTC(elementId);

      var effect = new ItemTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsItemTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new ItemTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsItemTTCMutSet[setId] =
            new VersionAndIncarnation<ItemTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsItemTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddItemTTCMutSetObserver(int id, IItemTTCMutSetEffectObserver observer) {
      List<IItemTTCMutSetEffectObserver> obsies;
      if (!observersForItemTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IItemTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForItemTTCMutSet[id] = obsies;
    }

    public void RemoveItemTTCMutSetObserver(int id, IItemTTCMutSetEffectObserver observer) {
      if (observersForItemTTCMutSet.ContainsKey(id)) {
        var list = observersForItemTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForItemTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastItemTTCMutSetEffects(
      SortedDictionary<int, List<IItemTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsItemTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IItemTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnItemTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IItemTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnItemTTCMutSetEffect(effect);
        }
        observersForItemTTCMutSet.Remove(effect.id);
      }
    }
    effectsItemTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsItemTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IItemTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnItemTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IItemTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnItemTTCMutSetEffect(effect);
        }
      }
    }
    effectsItemTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsItemTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IItemTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnItemTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IItemTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnItemTTCMutSetEffect(effect);
        }
      }
    }
    effectsItemTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsItemTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IItemTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnItemTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IItemTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnItemTTCMutSetEffect(effect);
        }
      }
    }
    effectsItemTTCMutSetCreateEffect.Clear();

  }

    public int GetKamikazeTargetTTCMutSetHash(int id, int version, KamikazeTargetTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public KamikazeTargetTTCMutSetIncarnation GetKamikazeTargetTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsKamikazeTargetTTCMutSet[id].incarnation;
    }
    public KamikazeTargetTTCMutSet GetKamikazeTargetTTCMutSet(int id) {
      return new KamikazeTargetTTCMutSet(this, id);
    }
    public List<KamikazeTargetTTCMutSet> AllKamikazeTargetTTCMutSet() {
      List<KamikazeTargetTTCMutSet> result = new List<KamikazeTargetTTCMutSet>(rootIncarnation.incarnationsKamikazeTargetTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsKamikazeTargetTTCMutSet.Keys) {
        result.Add(new KamikazeTargetTTCMutSet(this, id));
      }
      return result;
    }
    public bool KamikazeTargetTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsKamikazeTargetTTCMutSet.ContainsKey(id);
    }
    public void CheckHasKamikazeTargetTTCMutSet(KamikazeTargetTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasKamikazeTargetTTCMutSet(thing.id);
    }
    public void CheckHasKamikazeTargetTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsKamikazeTargetTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid KamikazeTargetTTCMutSet}: " + id);
      }
    }
    public KamikazeTargetTTCMutSet EffectKamikazeTargetTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new KamikazeTargetTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateKamikazeTargetTTCMutSet(id, rootIncarnation.version, incarnation);
      return new KamikazeTargetTTCMutSet(this, id);
    }
    public void EffectInternalCreateKamikazeTargetTTCMutSet(int id, int incarnationVersion, KamikazeTargetTTCMutSetIncarnation incarnation) {
      var effect = new KamikazeTargetTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsKamikazeTargetTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<KamikazeTargetTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsKamikazeTargetTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectKamikazeTargetTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new KamikazeTargetTTCMutSetDeleteEffect(id);
      effectsKamikazeTargetTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsKamikazeTargetTTCMutSet[id];
      rootIncarnation.incarnationsKamikazeTargetTTCMutSet.Remove(id);
    }

       
    public void EffectKamikazeTargetTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasKamikazeTargetTTCMutSet(setId);
      CheckHasKamikazeTargetTTC(elementId);

      var effect = new KamikazeTargetTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsKamikazeTargetTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new KamikazeTargetTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsKamikazeTargetTTCMutSet[setId] =
            new VersionAndIncarnation<KamikazeTargetTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsKamikazeTargetTTCMutSetAddEffect.Add(effect);
    }
    public void EffectKamikazeTargetTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasKamikazeTargetTTCMutSet(setId);
      CheckHasKamikazeTargetTTC(elementId);

      var effect = new KamikazeTargetTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsKamikazeTargetTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new KamikazeTargetTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsKamikazeTargetTTCMutSet[setId] =
            new VersionAndIncarnation<KamikazeTargetTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsKamikazeTargetTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddKamikazeTargetTTCMutSetObserver(int id, IKamikazeTargetTTCMutSetEffectObserver observer) {
      List<IKamikazeTargetTTCMutSetEffectObserver> obsies;
      if (!observersForKamikazeTargetTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IKamikazeTargetTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForKamikazeTargetTTCMutSet[id] = obsies;
    }

    public void RemoveKamikazeTargetTTCMutSetObserver(int id, IKamikazeTargetTTCMutSetEffectObserver observer) {
      if (observersForKamikazeTargetTTCMutSet.ContainsKey(id)) {
        var list = observersForKamikazeTargetTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForKamikazeTargetTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastKamikazeTargetTTCMutSetEffects(
      SortedDictionary<int, List<IKamikazeTargetTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsKamikazeTargetTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeTargetTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeTargetTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeTargetTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeTargetTTCMutSetEffect(effect);
        }
        observersForKamikazeTargetTTCMutSet.Remove(effect.id);
      }
    }
    effectsKamikazeTargetTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsKamikazeTargetTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeTargetTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeTargetTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeTargetTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeTargetTTCMutSetEffect(effect);
        }
      }
    }
    effectsKamikazeTargetTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsKamikazeTargetTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeTargetTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeTargetTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeTargetTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeTargetTTCMutSetEffect(effect);
        }
      }
    }
    effectsKamikazeTargetTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsKamikazeTargetTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeTargetTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeTargetTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeTargetTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeTargetTTCMutSetEffect(effect);
        }
      }
    }
    effectsKamikazeTargetTTCMutSetCreateEffect.Clear();

  }

    public int GetWarperTTCMutSetHash(int id, int version, WarperTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public WarperTTCMutSetIncarnation GetWarperTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsWarperTTCMutSet[id].incarnation;
    }
    public WarperTTCMutSet GetWarperTTCMutSet(int id) {
      return new WarperTTCMutSet(this, id);
    }
    public List<WarperTTCMutSet> AllWarperTTCMutSet() {
      List<WarperTTCMutSet> result = new List<WarperTTCMutSet>(rootIncarnation.incarnationsWarperTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsWarperTTCMutSet.Keys) {
        result.Add(new WarperTTCMutSet(this, id));
      }
      return result;
    }
    public bool WarperTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsWarperTTCMutSet.ContainsKey(id);
    }
    public void CheckHasWarperTTCMutSet(WarperTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasWarperTTCMutSet(thing.id);
    }
    public void CheckHasWarperTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsWarperTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid WarperTTCMutSet}: " + id);
      }
    }
    public WarperTTCMutSet EffectWarperTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new WarperTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateWarperTTCMutSet(id, rootIncarnation.version, incarnation);
      return new WarperTTCMutSet(this, id);
    }
    public void EffectInternalCreateWarperTTCMutSet(int id, int incarnationVersion, WarperTTCMutSetIncarnation incarnation) {
      var effect = new WarperTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsWarperTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<WarperTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsWarperTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectWarperTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new WarperTTCMutSetDeleteEffect(id);
      effectsWarperTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsWarperTTCMutSet[id];
      rootIncarnation.incarnationsWarperTTCMutSet.Remove(id);
    }

       
    public void EffectWarperTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasWarperTTCMutSet(setId);
      CheckHasWarperTTC(elementId);

      var effect = new WarperTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsWarperTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new WarperTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsWarperTTCMutSet[setId] =
            new VersionAndIncarnation<WarperTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsWarperTTCMutSetAddEffect.Add(effect);
    }
    public void EffectWarperTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasWarperTTCMutSet(setId);
      CheckHasWarperTTC(elementId);

      var effect = new WarperTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsWarperTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new WarperTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsWarperTTCMutSet[setId] =
            new VersionAndIncarnation<WarperTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsWarperTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddWarperTTCMutSetObserver(int id, IWarperTTCMutSetEffectObserver observer) {
      List<IWarperTTCMutSetEffectObserver> obsies;
      if (!observersForWarperTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IWarperTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForWarperTTCMutSet[id] = obsies;
    }

    public void RemoveWarperTTCMutSetObserver(int id, IWarperTTCMutSetEffectObserver observer) {
      if (observersForWarperTTCMutSet.ContainsKey(id)) {
        var list = observersForWarperTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForWarperTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastWarperTTCMutSetEffects(
      SortedDictionary<int, List<IWarperTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsWarperTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IWarperTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWarperTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWarperTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWarperTTCMutSetEffect(effect);
        }
        observersForWarperTTCMutSet.Remove(effect.id);
      }
    }
    effectsWarperTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsWarperTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IWarperTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWarperTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWarperTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWarperTTCMutSetEffect(effect);
        }
      }
    }
    effectsWarperTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsWarperTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IWarperTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWarperTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWarperTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWarperTTCMutSetEffect(effect);
        }
      }
    }
    effectsWarperTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsWarperTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IWarperTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWarperTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWarperTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWarperTTCMutSetEffect(effect);
        }
      }
    }
    effectsWarperTTCMutSetCreateEffect.Clear();

  }

    public int GetTimeAnchorTTCMutSetHash(int id, int version, TimeAnchorTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public TimeAnchorTTCMutSetIncarnation GetTimeAnchorTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsTimeAnchorTTCMutSet[id].incarnation;
    }
    public TimeAnchorTTCMutSet GetTimeAnchorTTCMutSet(int id) {
      return new TimeAnchorTTCMutSet(this, id);
    }
    public List<TimeAnchorTTCMutSet> AllTimeAnchorTTCMutSet() {
      List<TimeAnchorTTCMutSet> result = new List<TimeAnchorTTCMutSet>(rootIncarnation.incarnationsTimeAnchorTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsTimeAnchorTTCMutSet.Keys) {
        result.Add(new TimeAnchorTTCMutSet(this, id));
      }
      return result;
    }
    public bool TimeAnchorTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsTimeAnchorTTCMutSet.ContainsKey(id);
    }
    public void CheckHasTimeAnchorTTCMutSet(TimeAnchorTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasTimeAnchorTTCMutSet(thing.id);
    }
    public void CheckHasTimeAnchorTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsTimeAnchorTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid TimeAnchorTTCMutSet}: " + id);
      }
    }
    public TimeAnchorTTCMutSet EffectTimeAnchorTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new TimeAnchorTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateTimeAnchorTTCMutSet(id, rootIncarnation.version, incarnation);
      return new TimeAnchorTTCMutSet(this, id);
    }
    public void EffectInternalCreateTimeAnchorTTCMutSet(int id, int incarnationVersion, TimeAnchorTTCMutSetIncarnation incarnation) {
      var effect = new TimeAnchorTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsTimeAnchorTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<TimeAnchorTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsTimeAnchorTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectTimeAnchorTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new TimeAnchorTTCMutSetDeleteEffect(id);
      effectsTimeAnchorTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsTimeAnchorTTCMutSet[id];
      rootIncarnation.incarnationsTimeAnchorTTCMutSet.Remove(id);
    }

       
    public void EffectTimeAnchorTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasTimeAnchorTTCMutSet(setId);
      CheckHasTimeAnchorTTC(elementId);

      var effect = new TimeAnchorTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsTimeAnchorTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new TimeAnchorTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsTimeAnchorTTCMutSet[setId] =
            new VersionAndIncarnation<TimeAnchorTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsTimeAnchorTTCMutSetAddEffect.Add(effect);
    }
    public void EffectTimeAnchorTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasTimeAnchorTTCMutSet(setId);
      CheckHasTimeAnchorTTC(elementId);

      var effect = new TimeAnchorTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsTimeAnchorTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new TimeAnchorTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsTimeAnchorTTCMutSet[setId] =
            new VersionAndIncarnation<TimeAnchorTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsTimeAnchorTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddTimeAnchorTTCMutSetObserver(int id, ITimeAnchorTTCMutSetEffectObserver observer) {
      List<ITimeAnchorTTCMutSetEffectObserver> obsies;
      if (!observersForTimeAnchorTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ITimeAnchorTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForTimeAnchorTTCMutSet[id] = obsies;
    }

    public void RemoveTimeAnchorTTCMutSetObserver(int id, ITimeAnchorTTCMutSetEffectObserver observer) {
      if (observersForTimeAnchorTTCMutSet.ContainsKey(id)) {
        var list = observersForTimeAnchorTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForTimeAnchorTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastTimeAnchorTTCMutSetEffects(
      SortedDictionary<int, List<ITimeAnchorTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsTimeAnchorTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ITimeAnchorTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTimeAnchorTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITimeAnchorTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTimeAnchorTTCMutSetEffect(effect);
        }
        observersForTimeAnchorTTCMutSet.Remove(effect.id);
      }
    }
    effectsTimeAnchorTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsTimeAnchorTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ITimeAnchorTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTimeAnchorTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITimeAnchorTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTimeAnchorTTCMutSetEffect(effect);
        }
      }
    }
    effectsTimeAnchorTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsTimeAnchorTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ITimeAnchorTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTimeAnchorTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITimeAnchorTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTimeAnchorTTCMutSetEffect(effect);
        }
      }
    }
    effectsTimeAnchorTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsTimeAnchorTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ITimeAnchorTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTimeAnchorTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITimeAnchorTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTimeAnchorTTCMutSetEffect(effect);
        }
      }
    }
    effectsTimeAnchorTTCMutSetCreateEffect.Clear();

  }

    public int GetFireBombTTCMutSetHash(int id, int version, FireBombTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public FireBombTTCMutSetIncarnation GetFireBombTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsFireBombTTCMutSet[id].incarnation;
    }
    public FireBombTTCMutSet GetFireBombTTCMutSet(int id) {
      return new FireBombTTCMutSet(this, id);
    }
    public List<FireBombTTCMutSet> AllFireBombTTCMutSet() {
      List<FireBombTTCMutSet> result = new List<FireBombTTCMutSet>(rootIncarnation.incarnationsFireBombTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsFireBombTTCMutSet.Keys) {
        result.Add(new FireBombTTCMutSet(this, id));
      }
      return result;
    }
    public bool FireBombTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsFireBombTTCMutSet.ContainsKey(id);
    }
    public void CheckHasFireBombTTCMutSet(FireBombTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasFireBombTTCMutSet(thing.id);
    }
    public void CheckHasFireBombTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsFireBombTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid FireBombTTCMutSet}: " + id);
      }
    }
    public FireBombTTCMutSet EffectFireBombTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new FireBombTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateFireBombTTCMutSet(id, rootIncarnation.version, incarnation);
      return new FireBombTTCMutSet(this, id);
    }
    public void EffectInternalCreateFireBombTTCMutSet(int id, int incarnationVersion, FireBombTTCMutSetIncarnation incarnation) {
      var effect = new FireBombTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsFireBombTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<FireBombTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsFireBombTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectFireBombTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new FireBombTTCMutSetDeleteEffect(id);
      effectsFireBombTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsFireBombTTCMutSet[id];
      rootIncarnation.incarnationsFireBombTTCMutSet.Remove(id);
    }

       
    public void EffectFireBombTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasFireBombTTCMutSet(setId);
      CheckHasFireBombTTC(elementId);

      var effect = new FireBombTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsFireBombTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new FireBombTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsFireBombTTCMutSet[setId] =
            new VersionAndIncarnation<FireBombTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsFireBombTTCMutSetAddEffect.Add(effect);
    }
    public void EffectFireBombTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasFireBombTTCMutSet(setId);
      CheckHasFireBombTTC(elementId);

      var effect = new FireBombTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsFireBombTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new FireBombTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsFireBombTTCMutSet[setId] =
            new VersionAndIncarnation<FireBombTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsFireBombTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddFireBombTTCMutSetObserver(int id, IFireBombTTCMutSetEffectObserver observer) {
      List<IFireBombTTCMutSetEffectObserver> obsies;
      if (!observersForFireBombTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IFireBombTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForFireBombTTCMutSet[id] = obsies;
    }

    public void RemoveFireBombTTCMutSetObserver(int id, IFireBombTTCMutSetEffectObserver observer) {
      if (observersForFireBombTTCMutSet.ContainsKey(id)) {
        var list = observersForFireBombTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForFireBombTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastFireBombTTCMutSetEffects(
      SortedDictionary<int, List<IFireBombTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsFireBombTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IFireBombTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireBombTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireBombTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireBombTTCMutSetEffect(effect);
        }
        observersForFireBombTTCMutSet.Remove(effect.id);
      }
    }
    effectsFireBombTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsFireBombTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IFireBombTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireBombTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireBombTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireBombTTCMutSetEffect(effect);
        }
      }
    }
    effectsFireBombTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsFireBombTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IFireBombTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireBombTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireBombTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireBombTTCMutSetEffect(effect);
        }
      }
    }
    effectsFireBombTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsFireBombTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IFireBombTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireBombTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireBombTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireBombTTCMutSetEffect(effect);
        }
      }
    }
    effectsFireBombTTCMutSetCreateEffect.Clear();

  }

    public int GetMarkerTTCMutSetHash(int id, int version, MarkerTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public MarkerTTCMutSetIncarnation GetMarkerTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsMarkerTTCMutSet[id].incarnation;
    }
    public MarkerTTCMutSet GetMarkerTTCMutSet(int id) {
      return new MarkerTTCMutSet(this, id);
    }
    public List<MarkerTTCMutSet> AllMarkerTTCMutSet() {
      List<MarkerTTCMutSet> result = new List<MarkerTTCMutSet>(rootIncarnation.incarnationsMarkerTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsMarkerTTCMutSet.Keys) {
        result.Add(new MarkerTTCMutSet(this, id));
      }
      return result;
    }
    public bool MarkerTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsMarkerTTCMutSet.ContainsKey(id);
    }
    public void CheckHasMarkerTTCMutSet(MarkerTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasMarkerTTCMutSet(thing.id);
    }
    public void CheckHasMarkerTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsMarkerTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid MarkerTTCMutSet}: " + id);
      }
    }
    public MarkerTTCMutSet EffectMarkerTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new MarkerTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateMarkerTTCMutSet(id, rootIncarnation.version, incarnation);
      return new MarkerTTCMutSet(this, id);
    }
    public void EffectInternalCreateMarkerTTCMutSet(int id, int incarnationVersion, MarkerTTCMutSetIncarnation incarnation) {
      var effect = new MarkerTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsMarkerTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<MarkerTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsMarkerTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectMarkerTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new MarkerTTCMutSetDeleteEffect(id);
      effectsMarkerTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsMarkerTTCMutSet[id];
      rootIncarnation.incarnationsMarkerTTCMutSet.Remove(id);
    }

       
    public void EffectMarkerTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasMarkerTTCMutSet(setId);
      CheckHasMarkerTTC(elementId);

      var effect = new MarkerTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsMarkerTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new MarkerTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsMarkerTTCMutSet[setId] =
            new VersionAndIncarnation<MarkerTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsMarkerTTCMutSetAddEffect.Add(effect);
    }
    public void EffectMarkerTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasMarkerTTCMutSet(setId);
      CheckHasMarkerTTC(elementId);

      var effect = new MarkerTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsMarkerTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new MarkerTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsMarkerTTCMutSet[setId] =
            new VersionAndIncarnation<MarkerTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsMarkerTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddMarkerTTCMutSetObserver(int id, IMarkerTTCMutSetEffectObserver observer) {
      List<IMarkerTTCMutSetEffectObserver> obsies;
      if (!observersForMarkerTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IMarkerTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForMarkerTTCMutSet[id] = obsies;
    }

    public void RemoveMarkerTTCMutSetObserver(int id, IMarkerTTCMutSetEffectObserver observer) {
      if (observersForMarkerTTCMutSet.ContainsKey(id)) {
        var list = observersForMarkerTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForMarkerTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastMarkerTTCMutSetEffects(
      SortedDictionary<int, List<IMarkerTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsMarkerTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IMarkerTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMarkerTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMarkerTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMarkerTTCMutSetEffect(effect);
        }
        observersForMarkerTTCMutSet.Remove(effect.id);
      }
    }
    effectsMarkerTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsMarkerTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IMarkerTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMarkerTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMarkerTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMarkerTTCMutSetEffect(effect);
        }
      }
    }
    effectsMarkerTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsMarkerTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IMarkerTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMarkerTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMarkerTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMarkerTTCMutSetEffect(effect);
        }
      }
    }
    effectsMarkerTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsMarkerTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IMarkerTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMarkerTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMarkerTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMarkerTTCMutSetEffect(effect);
        }
      }
    }
    effectsMarkerTTCMutSetCreateEffect.Clear();

  }

    public int GetLevelLinkTTCMutSetHash(int id, int version, LevelLinkTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public LevelLinkTTCMutSetIncarnation GetLevelLinkTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsLevelLinkTTCMutSet[id].incarnation;
    }
    public LevelLinkTTCMutSet GetLevelLinkTTCMutSet(int id) {
      return new LevelLinkTTCMutSet(this, id);
    }
    public List<LevelLinkTTCMutSet> AllLevelLinkTTCMutSet() {
      List<LevelLinkTTCMutSet> result = new List<LevelLinkTTCMutSet>(rootIncarnation.incarnationsLevelLinkTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsLevelLinkTTCMutSet.Keys) {
        result.Add(new LevelLinkTTCMutSet(this, id));
      }
      return result;
    }
    public bool LevelLinkTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsLevelLinkTTCMutSet.ContainsKey(id);
    }
    public void CheckHasLevelLinkTTCMutSet(LevelLinkTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasLevelLinkTTCMutSet(thing.id);
    }
    public void CheckHasLevelLinkTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsLevelLinkTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid LevelLinkTTCMutSet}: " + id);
      }
    }
    public LevelLinkTTCMutSet EffectLevelLinkTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new LevelLinkTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateLevelLinkTTCMutSet(id, rootIncarnation.version, incarnation);
      return new LevelLinkTTCMutSet(this, id);
    }
    public void EffectInternalCreateLevelLinkTTCMutSet(int id, int incarnationVersion, LevelLinkTTCMutSetIncarnation incarnation) {
      var effect = new LevelLinkTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsLevelLinkTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<LevelLinkTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsLevelLinkTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectLevelLinkTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new LevelLinkTTCMutSetDeleteEffect(id);
      effectsLevelLinkTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsLevelLinkTTCMutSet[id];
      rootIncarnation.incarnationsLevelLinkTTCMutSet.Remove(id);
    }

       
    public void EffectLevelLinkTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasLevelLinkTTCMutSet(setId);
      CheckHasLevelLinkTTC(elementId);

      var effect = new LevelLinkTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsLevelLinkTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new LevelLinkTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsLevelLinkTTCMutSet[setId] =
            new VersionAndIncarnation<LevelLinkTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsLevelLinkTTCMutSetAddEffect.Add(effect);
    }
    public void EffectLevelLinkTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasLevelLinkTTCMutSet(setId);
      CheckHasLevelLinkTTC(elementId);

      var effect = new LevelLinkTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsLevelLinkTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new LevelLinkTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsLevelLinkTTCMutSet[setId] =
            new VersionAndIncarnation<LevelLinkTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsLevelLinkTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddLevelLinkTTCMutSetObserver(int id, ILevelLinkTTCMutSetEffectObserver observer) {
      List<ILevelLinkTTCMutSetEffectObserver> obsies;
      if (!observersForLevelLinkTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ILevelLinkTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForLevelLinkTTCMutSet[id] = obsies;
    }

    public void RemoveLevelLinkTTCMutSetObserver(int id, ILevelLinkTTCMutSetEffectObserver observer) {
      if (observersForLevelLinkTTCMutSet.ContainsKey(id)) {
        var list = observersForLevelLinkTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForLevelLinkTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastLevelLinkTTCMutSetEffects(
      SortedDictionary<int, List<ILevelLinkTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsLevelLinkTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ILevelLinkTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLevelLinkTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILevelLinkTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLevelLinkTTCMutSetEffect(effect);
        }
        observersForLevelLinkTTCMutSet.Remove(effect.id);
      }
    }
    effectsLevelLinkTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsLevelLinkTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ILevelLinkTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLevelLinkTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILevelLinkTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLevelLinkTTCMutSetEffect(effect);
        }
      }
    }
    effectsLevelLinkTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsLevelLinkTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ILevelLinkTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLevelLinkTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILevelLinkTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLevelLinkTTCMutSetEffect(effect);
        }
      }
    }
    effectsLevelLinkTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsLevelLinkTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ILevelLinkTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLevelLinkTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILevelLinkTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLevelLinkTTCMutSetEffect(effect);
        }
      }
    }
    effectsLevelLinkTTCMutSetCreateEffect.Clear();

  }

    public int GetMudTTCMutSetHash(int id, int version, MudTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public MudTTCMutSetIncarnation GetMudTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsMudTTCMutSet[id].incarnation;
    }
    public MudTTCMutSet GetMudTTCMutSet(int id) {
      return new MudTTCMutSet(this, id);
    }
    public List<MudTTCMutSet> AllMudTTCMutSet() {
      List<MudTTCMutSet> result = new List<MudTTCMutSet>(rootIncarnation.incarnationsMudTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsMudTTCMutSet.Keys) {
        result.Add(new MudTTCMutSet(this, id));
      }
      return result;
    }
    public bool MudTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsMudTTCMutSet.ContainsKey(id);
    }
    public void CheckHasMudTTCMutSet(MudTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasMudTTCMutSet(thing.id);
    }
    public void CheckHasMudTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsMudTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid MudTTCMutSet}: " + id);
      }
    }
    public MudTTCMutSet EffectMudTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new MudTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateMudTTCMutSet(id, rootIncarnation.version, incarnation);
      return new MudTTCMutSet(this, id);
    }
    public void EffectInternalCreateMudTTCMutSet(int id, int incarnationVersion, MudTTCMutSetIncarnation incarnation) {
      var effect = new MudTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsMudTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<MudTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsMudTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectMudTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new MudTTCMutSetDeleteEffect(id);
      effectsMudTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsMudTTCMutSet[id];
      rootIncarnation.incarnationsMudTTCMutSet.Remove(id);
    }

       
    public void EffectMudTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasMudTTCMutSet(setId);
      CheckHasMudTTC(elementId);

      var effect = new MudTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsMudTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new MudTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsMudTTCMutSet[setId] =
            new VersionAndIncarnation<MudTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsMudTTCMutSetAddEffect.Add(effect);
    }
    public void EffectMudTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasMudTTCMutSet(setId);
      CheckHasMudTTC(elementId);

      var effect = new MudTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsMudTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new MudTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsMudTTCMutSet[setId] =
            new VersionAndIncarnation<MudTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsMudTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddMudTTCMutSetObserver(int id, IMudTTCMutSetEffectObserver observer) {
      List<IMudTTCMutSetEffectObserver> obsies;
      if (!observersForMudTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IMudTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForMudTTCMutSet[id] = obsies;
    }

    public void RemoveMudTTCMutSetObserver(int id, IMudTTCMutSetEffectObserver observer) {
      if (observersForMudTTCMutSet.ContainsKey(id)) {
        var list = observersForMudTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForMudTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastMudTTCMutSetEffects(
      SortedDictionary<int, List<IMudTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsMudTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IMudTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMudTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMudTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMudTTCMutSetEffect(effect);
        }
        observersForMudTTCMutSet.Remove(effect.id);
      }
    }
    effectsMudTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsMudTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IMudTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMudTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMudTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMudTTCMutSetEffect(effect);
        }
      }
    }
    effectsMudTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsMudTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IMudTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMudTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMudTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMudTTCMutSetEffect(effect);
        }
      }
    }
    effectsMudTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsMudTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IMudTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMudTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMudTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMudTTCMutSetEffect(effect);
        }
      }
    }
    effectsMudTTCMutSetCreateEffect.Clear();

  }

    public int GetDirtTTCMutSetHash(int id, int version, DirtTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public DirtTTCMutSetIncarnation GetDirtTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsDirtTTCMutSet[id].incarnation;
    }
    public DirtTTCMutSet GetDirtTTCMutSet(int id) {
      return new DirtTTCMutSet(this, id);
    }
    public List<DirtTTCMutSet> AllDirtTTCMutSet() {
      List<DirtTTCMutSet> result = new List<DirtTTCMutSet>(rootIncarnation.incarnationsDirtTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsDirtTTCMutSet.Keys) {
        result.Add(new DirtTTCMutSet(this, id));
      }
      return result;
    }
    public bool DirtTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsDirtTTCMutSet.ContainsKey(id);
    }
    public void CheckHasDirtTTCMutSet(DirtTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasDirtTTCMutSet(thing.id);
    }
    public void CheckHasDirtTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsDirtTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid DirtTTCMutSet}: " + id);
      }
    }
    public DirtTTCMutSet EffectDirtTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new DirtTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateDirtTTCMutSet(id, rootIncarnation.version, incarnation);
      return new DirtTTCMutSet(this, id);
    }
    public void EffectInternalCreateDirtTTCMutSet(int id, int incarnationVersion, DirtTTCMutSetIncarnation incarnation) {
      var effect = new DirtTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsDirtTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<DirtTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsDirtTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectDirtTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new DirtTTCMutSetDeleteEffect(id);
      effectsDirtTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsDirtTTCMutSet[id];
      rootIncarnation.incarnationsDirtTTCMutSet.Remove(id);
    }

       
    public void EffectDirtTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasDirtTTCMutSet(setId);
      CheckHasDirtTTC(elementId);

      var effect = new DirtTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsDirtTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new DirtTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsDirtTTCMutSet[setId] =
            new VersionAndIncarnation<DirtTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsDirtTTCMutSetAddEffect.Add(effect);
    }
    public void EffectDirtTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasDirtTTCMutSet(setId);
      CheckHasDirtTTC(elementId);

      var effect = new DirtTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsDirtTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new DirtTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsDirtTTCMutSet[setId] =
            new VersionAndIncarnation<DirtTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsDirtTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddDirtTTCMutSetObserver(int id, IDirtTTCMutSetEffectObserver observer) {
      List<IDirtTTCMutSetEffectObserver> obsies;
      if (!observersForDirtTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IDirtTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForDirtTTCMutSet[id] = obsies;
    }

    public void RemoveDirtTTCMutSetObserver(int id, IDirtTTCMutSetEffectObserver observer) {
      if (observersForDirtTTCMutSet.ContainsKey(id)) {
        var list = observersForDirtTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForDirtTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastDirtTTCMutSetEffects(
      SortedDictionary<int, List<IDirtTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsDirtTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IDirtTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDirtTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDirtTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDirtTTCMutSetEffect(effect);
        }
        observersForDirtTTCMutSet.Remove(effect.id);
      }
    }
    effectsDirtTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsDirtTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IDirtTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDirtTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDirtTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDirtTTCMutSetEffect(effect);
        }
      }
    }
    effectsDirtTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsDirtTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IDirtTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDirtTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDirtTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDirtTTCMutSetEffect(effect);
        }
      }
    }
    effectsDirtTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsDirtTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IDirtTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDirtTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDirtTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDirtTTCMutSetEffect(effect);
        }
      }
    }
    effectsDirtTTCMutSetCreateEffect.Clear();

  }

    public int GetObsidianTTCMutSetHash(int id, int version, ObsidianTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public ObsidianTTCMutSetIncarnation GetObsidianTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsObsidianTTCMutSet[id].incarnation;
    }
    public ObsidianTTCMutSet GetObsidianTTCMutSet(int id) {
      return new ObsidianTTCMutSet(this, id);
    }
    public List<ObsidianTTCMutSet> AllObsidianTTCMutSet() {
      List<ObsidianTTCMutSet> result = new List<ObsidianTTCMutSet>(rootIncarnation.incarnationsObsidianTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsObsidianTTCMutSet.Keys) {
        result.Add(new ObsidianTTCMutSet(this, id));
      }
      return result;
    }
    public bool ObsidianTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsObsidianTTCMutSet.ContainsKey(id);
    }
    public void CheckHasObsidianTTCMutSet(ObsidianTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasObsidianTTCMutSet(thing.id);
    }
    public void CheckHasObsidianTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsObsidianTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid ObsidianTTCMutSet}: " + id);
      }
    }
    public ObsidianTTCMutSet EffectObsidianTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new ObsidianTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateObsidianTTCMutSet(id, rootIncarnation.version, incarnation);
      return new ObsidianTTCMutSet(this, id);
    }
    public void EffectInternalCreateObsidianTTCMutSet(int id, int incarnationVersion, ObsidianTTCMutSetIncarnation incarnation) {
      var effect = new ObsidianTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsObsidianTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<ObsidianTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsObsidianTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectObsidianTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new ObsidianTTCMutSetDeleteEffect(id);
      effectsObsidianTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsObsidianTTCMutSet[id];
      rootIncarnation.incarnationsObsidianTTCMutSet.Remove(id);
    }

       
    public void EffectObsidianTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasObsidianTTCMutSet(setId);
      CheckHasObsidianTTC(elementId);

      var effect = new ObsidianTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsObsidianTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new ObsidianTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsObsidianTTCMutSet[setId] =
            new VersionAndIncarnation<ObsidianTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsObsidianTTCMutSetAddEffect.Add(effect);
    }
    public void EffectObsidianTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasObsidianTTCMutSet(setId);
      CheckHasObsidianTTC(elementId);

      var effect = new ObsidianTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsObsidianTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new ObsidianTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsObsidianTTCMutSet[setId] =
            new VersionAndIncarnation<ObsidianTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsObsidianTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddObsidianTTCMutSetObserver(int id, IObsidianTTCMutSetEffectObserver observer) {
      List<IObsidianTTCMutSetEffectObserver> obsies;
      if (!observersForObsidianTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IObsidianTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForObsidianTTCMutSet[id] = obsies;
    }

    public void RemoveObsidianTTCMutSetObserver(int id, IObsidianTTCMutSetEffectObserver observer) {
      if (observersForObsidianTTCMutSet.ContainsKey(id)) {
        var list = observersForObsidianTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForObsidianTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastObsidianTTCMutSetEffects(
      SortedDictionary<int, List<IObsidianTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsObsidianTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IObsidianTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnObsidianTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IObsidianTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnObsidianTTCMutSetEffect(effect);
        }
        observersForObsidianTTCMutSet.Remove(effect.id);
      }
    }
    effectsObsidianTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsObsidianTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IObsidianTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnObsidianTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IObsidianTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnObsidianTTCMutSetEffect(effect);
        }
      }
    }
    effectsObsidianTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsObsidianTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IObsidianTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnObsidianTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IObsidianTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnObsidianTTCMutSetEffect(effect);
        }
      }
    }
    effectsObsidianTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsObsidianTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IObsidianTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnObsidianTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IObsidianTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnObsidianTTCMutSetEffect(effect);
        }
      }
    }
    effectsObsidianTTCMutSetCreateEffect.Clear();

  }

    public int GetDownStairsTTCMutSetHash(int id, int version, DownStairsTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public DownStairsTTCMutSetIncarnation GetDownStairsTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsDownStairsTTCMutSet[id].incarnation;
    }
    public DownStairsTTCMutSet GetDownStairsTTCMutSet(int id) {
      return new DownStairsTTCMutSet(this, id);
    }
    public List<DownStairsTTCMutSet> AllDownStairsTTCMutSet() {
      List<DownStairsTTCMutSet> result = new List<DownStairsTTCMutSet>(rootIncarnation.incarnationsDownStairsTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsDownStairsTTCMutSet.Keys) {
        result.Add(new DownStairsTTCMutSet(this, id));
      }
      return result;
    }
    public bool DownStairsTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsDownStairsTTCMutSet.ContainsKey(id);
    }
    public void CheckHasDownStairsTTCMutSet(DownStairsTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasDownStairsTTCMutSet(thing.id);
    }
    public void CheckHasDownStairsTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsDownStairsTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid DownStairsTTCMutSet}: " + id);
      }
    }
    public DownStairsTTCMutSet EffectDownStairsTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new DownStairsTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateDownStairsTTCMutSet(id, rootIncarnation.version, incarnation);
      return new DownStairsTTCMutSet(this, id);
    }
    public void EffectInternalCreateDownStairsTTCMutSet(int id, int incarnationVersion, DownStairsTTCMutSetIncarnation incarnation) {
      var effect = new DownStairsTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsDownStairsTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<DownStairsTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsDownStairsTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectDownStairsTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new DownStairsTTCMutSetDeleteEffect(id);
      effectsDownStairsTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsDownStairsTTCMutSet[id];
      rootIncarnation.incarnationsDownStairsTTCMutSet.Remove(id);
    }

       
    public void EffectDownStairsTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasDownStairsTTCMutSet(setId);
      CheckHasDownStairsTTC(elementId);

      var effect = new DownStairsTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsDownStairsTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new DownStairsTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsDownStairsTTCMutSet[setId] =
            new VersionAndIncarnation<DownStairsTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsDownStairsTTCMutSetAddEffect.Add(effect);
    }
    public void EffectDownStairsTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasDownStairsTTCMutSet(setId);
      CheckHasDownStairsTTC(elementId);

      var effect = new DownStairsTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsDownStairsTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new DownStairsTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsDownStairsTTCMutSet[setId] =
            new VersionAndIncarnation<DownStairsTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsDownStairsTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddDownStairsTTCMutSetObserver(int id, IDownStairsTTCMutSetEffectObserver observer) {
      List<IDownStairsTTCMutSetEffectObserver> obsies;
      if (!observersForDownStairsTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IDownStairsTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForDownStairsTTCMutSet[id] = obsies;
    }

    public void RemoveDownStairsTTCMutSetObserver(int id, IDownStairsTTCMutSetEffectObserver observer) {
      if (observersForDownStairsTTCMutSet.ContainsKey(id)) {
        var list = observersForDownStairsTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForDownStairsTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastDownStairsTTCMutSetEffects(
      SortedDictionary<int, List<IDownStairsTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsDownStairsTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IDownStairsTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDownStairsTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDownStairsTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDownStairsTTCMutSetEffect(effect);
        }
        observersForDownStairsTTCMutSet.Remove(effect.id);
      }
    }
    effectsDownStairsTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsDownStairsTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IDownStairsTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDownStairsTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDownStairsTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDownStairsTTCMutSetEffect(effect);
        }
      }
    }
    effectsDownStairsTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsDownStairsTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IDownStairsTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDownStairsTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDownStairsTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDownStairsTTCMutSetEffect(effect);
        }
      }
    }
    effectsDownStairsTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsDownStairsTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IDownStairsTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDownStairsTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDownStairsTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDownStairsTTCMutSetEffect(effect);
        }
      }
    }
    effectsDownStairsTTCMutSetCreateEffect.Clear();

  }

    public int GetUpStairsTTCMutSetHash(int id, int version, UpStairsTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public UpStairsTTCMutSetIncarnation GetUpStairsTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsUpStairsTTCMutSet[id].incarnation;
    }
    public UpStairsTTCMutSet GetUpStairsTTCMutSet(int id) {
      return new UpStairsTTCMutSet(this, id);
    }
    public List<UpStairsTTCMutSet> AllUpStairsTTCMutSet() {
      List<UpStairsTTCMutSet> result = new List<UpStairsTTCMutSet>(rootIncarnation.incarnationsUpStairsTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsUpStairsTTCMutSet.Keys) {
        result.Add(new UpStairsTTCMutSet(this, id));
      }
      return result;
    }
    public bool UpStairsTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsUpStairsTTCMutSet.ContainsKey(id);
    }
    public void CheckHasUpStairsTTCMutSet(UpStairsTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasUpStairsTTCMutSet(thing.id);
    }
    public void CheckHasUpStairsTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsUpStairsTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid UpStairsTTCMutSet}: " + id);
      }
    }
    public UpStairsTTCMutSet EffectUpStairsTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new UpStairsTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateUpStairsTTCMutSet(id, rootIncarnation.version, incarnation);
      return new UpStairsTTCMutSet(this, id);
    }
    public void EffectInternalCreateUpStairsTTCMutSet(int id, int incarnationVersion, UpStairsTTCMutSetIncarnation incarnation) {
      var effect = new UpStairsTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsUpStairsTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<UpStairsTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsUpStairsTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectUpStairsTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new UpStairsTTCMutSetDeleteEffect(id);
      effectsUpStairsTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsUpStairsTTCMutSet[id];
      rootIncarnation.incarnationsUpStairsTTCMutSet.Remove(id);
    }

       
    public void EffectUpStairsTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasUpStairsTTCMutSet(setId);
      CheckHasUpStairsTTC(elementId);

      var effect = new UpStairsTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsUpStairsTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new UpStairsTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsUpStairsTTCMutSet[setId] =
            new VersionAndIncarnation<UpStairsTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsUpStairsTTCMutSetAddEffect.Add(effect);
    }
    public void EffectUpStairsTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasUpStairsTTCMutSet(setId);
      CheckHasUpStairsTTC(elementId);

      var effect = new UpStairsTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsUpStairsTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new UpStairsTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsUpStairsTTCMutSet[setId] =
            new VersionAndIncarnation<UpStairsTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsUpStairsTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddUpStairsTTCMutSetObserver(int id, IUpStairsTTCMutSetEffectObserver observer) {
      List<IUpStairsTTCMutSetEffectObserver> obsies;
      if (!observersForUpStairsTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IUpStairsTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForUpStairsTTCMutSet[id] = obsies;
    }

    public void RemoveUpStairsTTCMutSetObserver(int id, IUpStairsTTCMutSetEffectObserver observer) {
      if (observersForUpStairsTTCMutSet.ContainsKey(id)) {
        var list = observersForUpStairsTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForUpStairsTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastUpStairsTTCMutSetEffects(
      SortedDictionary<int, List<IUpStairsTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsUpStairsTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IUpStairsTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUpStairsTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUpStairsTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUpStairsTTCMutSetEffect(effect);
        }
        observersForUpStairsTTCMutSet.Remove(effect.id);
      }
    }
    effectsUpStairsTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsUpStairsTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IUpStairsTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUpStairsTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUpStairsTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUpStairsTTCMutSetEffect(effect);
        }
      }
    }
    effectsUpStairsTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsUpStairsTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IUpStairsTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUpStairsTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUpStairsTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUpStairsTTCMutSetEffect(effect);
        }
      }
    }
    effectsUpStairsTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsUpStairsTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IUpStairsTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnUpStairsTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IUpStairsTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnUpStairsTTCMutSetEffect(effect);
        }
      }
    }
    effectsUpStairsTTCMutSetCreateEffect.Clear();

  }

    public int GetWallTTCMutSetHash(int id, int version, WallTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public WallTTCMutSetIncarnation GetWallTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsWallTTCMutSet[id].incarnation;
    }
    public WallTTCMutSet GetWallTTCMutSet(int id) {
      return new WallTTCMutSet(this, id);
    }
    public List<WallTTCMutSet> AllWallTTCMutSet() {
      List<WallTTCMutSet> result = new List<WallTTCMutSet>(rootIncarnation.incarnationsWallTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsWallTTCMutSet.Keys) {
        result.Add(new WallTTCMutSet(this, id));
      }
      return result;
    }
    public bool WallTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsWallTTCMutSet.ContainsKey(id);
    }
    public void CheckHasWallTTCMutSet(WallTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasWallTTCMutSet(thing.id);
    }
    public void CheckHasWallTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsWallTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid WallTTCMutSet}: " + id);
      }
    }
    public WallTTCMutSet EffectWallTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new WallTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateWallTTCMutSet(id, rootIncarnation.version, incarnation);
      return new WallTTCMutSet(this, id);
    }
    public void EffectInternalCreateWallTTCMutSet(int id, int incarnationVersion, WallTTCMutSetIncarnation incarnation) {
      var effect = new WallTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsWallTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<WallTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsWallTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectWallTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new WallTTCMutSetDeleteEffect(id);
      effectsWallTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsWallTTCMutSet[id];
      rootIncarnation.incarnationsWallTTCMutSet.Remove(id);
    }

       
    public void EffectWallTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasWallTTCMutSet(setId);
      CheckHasWallTTC(elementId);

      var effect = new WallTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsWallTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new WallTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsWallTTCMutSet[setId] =
            new VersionAndIncarnation<WallTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsWallTTCMutSetAddEffect.Add(effect);
    }
    public void EffectWallTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasWallTTCMutSet(setId);
      CheckHasWallTTC(elementId);

      var effect = new WallTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsWallTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new WallTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsWallTTCMutSet[setId] =
            new VersionAndIncarnation<WallTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsWallTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddWallTTCMutSetObserver(int id, IWallTTCMutSetEffectObserver observer) {
      List<IWallTTCMutSetEffectObserver> obsies;
      if (!observersForWallTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IWallTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForWallTTCMutSet[id] = obsies;
    }

    public void RemoveWallTTCMutSetObserver(int id, IWallTTCMutSetEffectObserver observer) {
      if (observersForWallTTCMutSet.ContainsKey(id)) {
        var list = observersForWallTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForWallTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastWallTTCMutSetEffects(
      SortedDictionary<int, List<IWallTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsWallTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IWallTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWallTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWallTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWallTTCMutSetEffect(effect);
        }
        observersForWallTTCMutSet.Remove(effect.id);
      }
    }
    effectsWallTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsWallTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IWallTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWallTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWallTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWallTTCMutSetEffect(effect);
        }
      }
    }
    effectsWallTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsWallTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IWallTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWallTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWallTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWallTTCMutSetEffect(effect);
        }
      }
    }
    effectsWallTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsWallTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IWallTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWallTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWallTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWallTTCMutSetEffect(effect);
        }
      }
    }
    effectsWallTTCMutSetCreateEffect.Clear();

  }

    public int GetBloodTTCMutSetHash(int id, int version, BloodTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public BloodTTCMutSetIncarnation GetBloodTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsBloodTTCMutSet[id].incarnation;
    }
    public BloodTTCMutSet GetBloodTTCMutSet(int id) {
      return new BloodTTCMutSet(this, id);
    }
    public List<BloodTTCMutSet> AllBloodTTCMutSet() {
      List<BloodTTCMutSet> result = new List<BloodTTCMutSet>(rootIncarnation.incarnationsBloodTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsBloodTTCMutSet.Keys) {
        result.Add(new BloodTTCMutSet(this, id));
      }
      return result;
    }
    public bool BloodTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsBloodTTCMutSet.ContainsKey(id);
    }
    public void CheckHasBloodTTCMutSet(BloodTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasBloodTTCMutSet(thing.id);
    }
    public void CheckHasBloodTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsBloodTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid BloodTTCMutSet}: " + id);
      }
    }
    public BloodTTCMutSet EffectBloodTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new BloodTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateBloodTTCMutSet(id, rootIncarnation.version, incarnation);
      return new BloodTTCMutSet(this, id);
    }
    public void EffectInternalCreateBloodTTCMutSet(int id, int incarnationVersion, BloodTTCMutSetIncarnation incarnation) {
      var effect = new BloodTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsBloodTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<BloodTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsBloodTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectBloodTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new BloodTTCMutSetDeleteEffect(id);
      effectsBloodTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsBloodTTCMutSet[id];
      rootIncarnation.incarnationsBloodTTCMutSet.Remove(id);
    }

       
    public void EffectBloodTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasBloodTTCMutSet(setId);
      CheckHasBloodTTC(elementId);

      var effect = new BloodTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsBloodTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new BloodTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsBloodTTCMutSet[setId] =
            new VersionAndIncarnation<BloodTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsBloodTTCMutSetAddEffect.Add(effect);
    }
    public void EffectBloodTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasBloodTTCMutSet(setId);
      CheckHasBloodTTC(elementId);

      var effect = new BloodTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsBloodTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new BloodTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsBloodTTCMutSet[setId] =
            new VersionAndIncarnation<BloodTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsBloodTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddBloodTTCMutSetObserver(int id, IBloodTTCMutSetEffectObserver observer) {
      List<IBloodTTCMutSetEffectObserver> obsies;
      if (!observersForBloodTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IBloodTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForBloodTTCMutSet[id] = obsies;
    }

    public void RemoveBloodTTCMutSetObserver(int id, IBloodTTCMutSetEffectObserver observer) {
      if (observersForBloodTTCMutSet.ContainsKey(id)) {
        var list = observersForBloodTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForBloodTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastBloodTTCMutSetEffects(
      SortedDictionary<int, List<IBloodTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsBloodTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IBloodTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBloodTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBloodTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBloodTTCMutSetEffect(effect);
        }
        observersForBloodTTCMutSet.Remove(effect.id);
      }
    }
    effectsBloodTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsBloodTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IBloodTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBloodTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBloodTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBloodTTCMutSetEffect(effect);
        }
      }
    }
    effectsBloodTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsBloodTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IBloodTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBloodTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBloodTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBloodTTCMutSetEffect(effect);
        }
      }
    }
    effectsBloodTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsBloodTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IBloodTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBloodTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBloodTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBloodTTCMutSetEffect(effect);
        }
      }
    }
    effectsBloodTTCMutSetCreateEffect.Clear();

  }

    public int GetRocksTTCMutSetHash(int id, int version, RocksTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public RocksTTCMutSetIncarnation GetRocksTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsRocksTTCMutSet[id].incarnation;
    }
    public RocksTTCMutSet GetRocksTTCMutSet(int id) {
      return new RocksTTCMutSet(this, id);
    }
    public List<RocksTTCMutSet> AllRocksTTCMutSet() {
      List<RocksTTCMutSet> result = new List<RocksTTCMutSet>(rootIncarnation.incarnationsRocksTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsRocksTTCMutSet.Keys) {
        result.Add(new RocksTTCMutSet(this, id));
      }
      return result;
    }
    public bool RocksTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsRocksTTCMutSet.ContainsKey(id);
    }
    public void CheckHasRocksTTCMutSet(RocksTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasRocksTTCMutSet(thing.id);
    }
    public void CheckHasRocksTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsRocksTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid RocksTTCMutSet}: " + id);
      }
    }
    public RocksTTCMutSet EffectRocksTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new RocksTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateRocksTTCMutSet(id, rootIncarnation.version, incarnation);
      return new RocksTTCMutSet(this, id);
    }
    public void EffectInternalCreateRocksTTCMutSet(int id, int incarnationVersion, RocksTTCMutSetIncarnation incarnation) {
      var effect = new RocksTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsRocksTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<RocksTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsRocksTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectRocksTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new RocksTTCMutSetDeleteEffect(id);
      effectsRocksTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsRocksTTCMutSet[id];
      rootIncarnation.incarnationsRocksTTCMutSet.Remove(id);
    }

       
    public void EffectRocksTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasRocksTTCMutSet(setId);
      CheckHasRocksTTC(elementId);

      var effect = new RocksTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsRocksTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new RocksTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsRocksTTCMutSet[setId] =
            new VersionAndIncarnation<RocksTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsRocksTTCMutSetAddEffect.Add(effect);
    }
    public void EffectRocksTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasRocksTTCMutSet(setId);
      CheckHasRocksTTC(elementId);

      var effect = new RocksTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsRocksTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new RocksTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsRocksTTCMutSet[setId] =
            new VersionAndIncarnation<RocksTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsRocksTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddRocksTTCMutSetObserver(int id, IRocksTTCMutSetEffectObserver observer) {
      List<IRocksTTCMutSetEffectObserver> obsies;
      if (!observersForRocksTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IRocksTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForRocksTTCMutSet[id] = obsies;
    }

    public void RemoveRocksTTCMutSetObserver(int id, IRocksTTCMutSetEffectObserver observer) {
      if (observersForRocksTTCMutSet.ContainsKey(id)) {
        var list = observersForRocksTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForRocksTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastRocksTTCMutSetEffects(
      SortedDictionary<int, List<IRocksTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsRocksTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IRocksTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRocksTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRocksTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRocksTTCMutSetEffect(effect);
        }
        observersForRocksTTCMutSet.Remove(effect.id);
      }
    }
    effectsRocksTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsRocksTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IRocksTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRocksTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRocksTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRocksTTCMutSetEffect(effect);
        }
      }
    }
    effectsRocksTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsRocksTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IRocksTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRocksTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRocksTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRocksTTCMutSetEffect(effect);
        }
      }
    }
    effectsRocksTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsRocksTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IRocksTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRocksTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRocksTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRocksTTCMutSetEffect(effect);
        }
      }
    }
    effectsRocksTTCMutSetCreateEffect.Clear();

  }

    public int GetTreeTTCMutSetHash(int id, int version, TreeTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public TreeTTCMutSetIncarnation GetTreeTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsTreeTTCMutSet[id].incarnation;
    }
    public TreeTTCMutSet GetTreeTTCMutSet(int id) {
      return new TreeTTCMutSet(this, id);
    }
    public List<TreeTTCMutSet> AllTreeTTCMutSet() {
      List<TreeTTCMutSet> result = new List<TreeTTCMutSet>(rootIncarnation.incarnationsTreeTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsTreeTTCMutSet.Keys) {
        result.Add(new TreeTTCMutSet(this, id));
      }
      return result;
    }
    public bool TreeTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsTreeTTCMutSet.ContainsKey(id);
    }
    public void CheckHasTreeTTCMutSet(TreeTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasTreeTTCMutSet(thing.id);
    }
    public void CheckHasTreeTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsTreeTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid TreeTTCMutSet}: " + id);
      }
    }
    public TreeTTCMutSet EffectTreeTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new TreeTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateTreeTTCMutSet(id, rootIncarnation.version, incarnation);
      return new TreeTTCMutSet(this, id);
    }
    public void EffectInternalCreateTreeTTCMutSet(int id, int incarnationVersion, TreeTTCMutSetIncarnation incarnation) {
      var effect = new TreeTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsTreeTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<TreeTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsTreeTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectTreeTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new TreeTTCMutSetDeleteEffect(id);
      effectsTreeTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsTreeTTCMutSet[id];
      rootIncarnation.incarnationsTreeTTCMutSet.Remove(id);
    }

       
    public void EffectTreeTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasTreeTTCMutSet(setId);
      CheckHasTreeTTC(elementId);

      var effect = new TreeTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsTreeTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new TreeTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsTreeTTCMutSet[setId] =
            new VersionAndIncarnation<TreeTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsTreeTTCMutSetAddEffect.Add(effect);
    }
    public void EffectTreeTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasTreeTTCMutSet(setId);
      CheckHasTreeTTC(elementId);

      var effect = new TreeTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsTreeTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new TreeTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsTreeTTCMutSet[setId] =
            new VersionAndIncarnation<TreeTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsTreeTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddTreeTTCMutSetObserver(int id, ITreeTTCMutSetEffectObserver observer) {
      List<ITreeTTCMutSetEffectObserver> obsies;
      if (!observersForTreeTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ITreeTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForTreeTTCMutSet[id] = obsies;
    }

    public void RemoveTreeTTCMutSetObserver(int id, ITreeTTCMutSetEffectObserver observer) {
      if (observersForTreeTTCMutSet.ContainsKey(id)) {
        var list = observersForTreeTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForTreeTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastTreeTTCMutSetEffects(
      SortedDictionary<int, List<ITreeTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsTreeTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ITreeTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTreeTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITreeTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTreeTTCMutSetEffect(effect);
        }
        observersForTreeTTCMutSet.Remove(effect.id);
      }
    }
    effectsTreeTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsTreeTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ITreeTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTreeTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITreeTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTreeTTCMutSetEffect(effect);
        }
      }
    }
    effectsTreeTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsTreeTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ITreeTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTreeTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITreeTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTreeTTCMutSetEffect(effect);
        }
      }
    }
    effectsTreeTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsTreeTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ITreeTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTreeTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITreeTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTreeTTCMutSetEffect(effect);
        }
      }
    }
    effectsTreeTTCMutSetCreateEffect.Clear();

  }

    public int GetWaterTTCMutSetHash(int id, int version, WaterTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public WaterTTCMutSetIncarnation GetWaterTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsWaterTTCMutSet[id].incarnation;
    }
    public WaterTTCMutSet GetWaterTTCMutSet(int id) {
      return new WaterTTCMutSet(this, id);
    }
    public List<WaterTTCMutSet> AllWaterTTCMutSet() {
      List<WaterTTCMutSet> result = new List<WaterTTCMutSet>(rootIncarnation.incarnationsWaterTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsWaterTTCMutSet.Keys) {
        result.Add(new WaterTTCMutSet(this, id));
      }
      return result;
    }
    public bool WaterTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsWaterTTCMutSet.ContainsKey(id);
    }
    public void CheckHasWaterTTCMutSet(WaterTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasWaterTTCMutSet(thing.id);
    }
    public void CheckHasWaterTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsWaterTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid WaterTTCMutSet}: " + id);
      }
    }
    public WaterTTCMutSet EffectWaterTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new WaterTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateWaterTTCMutSet(id, rootIncarnation.version, incarnation);
      return new WaterTTCMutSet(this, id);
    }
    public void EffectInternalCreateWaterTTCMutSet(int id, int incarnationVersion, WaterTTCMutSetIncarnation incarnation) {
      var effect = new WaterTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsWaterTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<WaterTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsWaterTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectWaterTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new WaterTTCMutSetDeleteEffect(id);
      effectsWaterTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsWaterTTCMutSet[id];
      rootIncarnation.incarnationsWaterTTCMutSet.Remove(id);
    }

       
    public void EffectWaterTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasWaterTTCMutSet(setId);
      CheckHasWaterTTC(elementId);

      var effect = new WaterTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsWaterTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new WaterTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsWaterTTCMutSet[setId] =
            new VersionAndIncarnation<WaterTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsWaterTTCMutSetAddEffect.Add(effect);
    }
    public void EffectWaterTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasWaterTTCMutSet(setId);
      CheckHasWaterTTC(elementId);

      var effect = new WaterTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsWaterTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new WaterTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsWaterTTCMutSet[setId] =
            new VersionAndIncarnation<WaterTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsWaterTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddWaterTTCMutSetObserver(int id, IWaterTTCMutSetEffectObserver observer) {
      List<IWaterTTCMutSetEffectObserver> obsies;
      if (!observersForWaterTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IWaterTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForWaterTTCMutSet[id] = obsies;
    }

    public void RemoveWaterTTCMutSetObserver(int id, IWaterTTCMutSetEffectObserver observer) {
      if (observersForWaterTTCMutSet.ContainsKey(id)) {
        var list = observersForWaterTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForWaterTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastWaterTTCMutSetEffects(
      SortedDictionary<int, List<IWaterTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsWaterTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IWaterTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWaterTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWaterTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWaterTTCMutSetEffect(effect);
        }
        observersForWaterTTCMutSet.Remove(effect.id);
      }
    }
    effectsWaterTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsWaterTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IWaterTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWaterTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWaterTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWaterTTCMutSetEffect(effect);
        }
      }
    }
    effectsWaterTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsWaterTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IWaterTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWaterTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWaterTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWaterTTCMutSetEffect(effect);
        }
      }
    }
    effectsWaterTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsWaterTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IWaterTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWaterTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWaterTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWaterTTCMutSetEffect(effect);
        }
      }
    }
    effectsWaterTTCMutSetCreateEffect.Clear();

  }

    public int GetFloorTTCMutSetHash(int id, int version, FloorTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public FloorTTCMutSetIncarnation GetFloorTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsFloorTTCMutSet[id].incarnation;
    }
    public FloorTTCMutSet GetFloorTTCMutSet(int id) {
      return new FloorTTCMutSet(this, id);
    }
    public List<FloorTTCMutSet> AllFloorTTCMutSet() {
      List<FloorTTCMutSet> result = new List<FloorTTCMutSet>(rootIncarnation.incarnationsFloorTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsFloorTTCMutSet.Keys) {
        result.Add(new FloorTTCMutSet(this, id));
      }
      return result;
    }
    public bool FloorTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsFloorTTCMutSet.ContainsKey(id);
    }
    public void CheckHasFloorTTCMutSet(FloorTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasFloorTTCMutSet(thing.id);
    }
    public void CheckHasFloorTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsFloorTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid FloorTTCMutSet}: " + id);
      }
    }
    public FloorTTCMutSet EffectFloorTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new FloorTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateFloorTTCMutSet(id, rootIncarnation.version, incarnation);
      return new FloorTTCMutSet(this, id);
    }
    public void EffectInternalCreateFloorTTCMutSet(int id, int incarnationVersion, FloorTTCMutSetIncarnation incarnation) {
      var effect = new FloorTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsFloorTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<FloorTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsFloorTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectFloorTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new FloorTTCMutSetDeleteEffect(id);
      effectsFloorTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsFloorTTCMutSet[id];
      rootIncarnation.incarnationsFloorTTCMutSet.Remove(id);
    }

       
    public void EffectFloorTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasFloorTTCMutSet(setId);
      CheckHasFloorTTC(elementId);

      var effect = new FloorTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsFloorTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new FloorTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsFloorTTCMutSet[setId] =
            new VersionAndIncarnation<FloorTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsFloorTTCMutSetAddEffect.Add(effect);
    }
    public void EffectFloorTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasFloorTTCMutSet(setId);
      CheckHasFloorTTC(elementId);

      var effect = new FloorTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsFloorTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new FloorTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsFloorTTCMutSet[setId] =
            new VersionAndIncarnation<FloorTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsFloorTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddFloorTTCMutSetObserver(int id, IFloorTTCMutSetEffectObserver observer) {
      List<IFloorTTCMutSetEffectObserver> obsies;
      if (!observersForFloorTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IFloorTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForFloorTTCMutSet[id] = obsies;
    }

    public void RemoveFloorTTCMutSetObserver(int id, IFloorTTCMutSetEffectObserver observer) {
      if (observersForFloorTTCMutSet.ContainsKey(id)) {
        var list = observersForFloorTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForFloorTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastFloorTTCMutSetEffects(
      SortedDictionary<int, List<IFloorTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsFloorTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IFloorTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFloorTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFloorTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFloorTTCMutSetEffect(effect);
        }
        observersForFloorTTCMutSet.Remove(effect.id);
      }
    }
    effectsFloorTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsFloorTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IFloorTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFloorTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFloorTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFloorTTCMutSetEffect(effect);
        }
      }
    }
    effectsFloorTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsFloorTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IFloorTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFloorTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFloorTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFloorTTCMutSetEffect(effect);
        }
      }
    }
    effectsFloorTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsFloorTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IFloorTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFloorTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFloorTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFloorTTCMutSetEffect(effect);
        }
      }
    }
    effectsFloorTTCMutSetCreateEffect.Clear();

  }

    public int GetCaveWallTTCMutSetHash(int id, int version, CaveWallTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public CaveWallTTCMutSetIncarnation GetCaveWallTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsCaveWallTTCMutSet[id].incarnation;
    }
    public CaveWallTTCMutSet GetCaveWallTTCMutSet(int id) {
      return new CaveWallTTCMutSet(this, id);
    }
    public List<CaveWallTTCMutSet> AllCaveWallTTCMutSet() {
      List<CaveWallTTCMutSet> result = new List<CaveWallTTCMutSet>(rootIncarnation.incarnationsCaveWallTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsCaveWallTTCMutSet.Keys) {
        result.Add(new CaveWallTTCMutSet(this, id));
      }
      return result;
    }
    public bool CaveWallTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsCaveWallTTCMutSet.ContainsKey(id);
    }
    public void CheckHasCaveWallTTCMutSet(CaveWallTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasCaveWallTTCMutSet(thing.id);
    }
    public void CheckHasCaveWallTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsCaveWallTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid CaveWallTTCMutSet}: " + id);
      }
    }
    public CaveWallTTCMutSet EffectCaveWallTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new CaveWallTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateCaveWallTTCMutSet(id, rootIncarnation.version, incarnation);
      return new CaveWallTTCMutSet(this, id);
    }
    public void EffectInternalCreateCaveWallTTCMutSet(int id, int incarnationVersion, CaveWallTTCMutSetIncarnation incarnation) {
      var effect = new CaveWallTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsCaveWallTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<CaveWallTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsCaveWallTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectCaveWallTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new CaveWallTTCMutSetDeleteEffect(id);
      effectsCaveWallTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsCaveWallTTCMutSet[id];
      rootIncarnation.incarnationsCaveWallTTCMutSet.Remove(id);
    }

       
    public void EffectCaveWallTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasCaveWallTTCMutSet(setId);
      CheckHasCaveWallTTC(elementId);

      var effect = new CaveWallTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsCaveWallTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new CaveWallTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsCaveWallTTCMutSet[setId] =
            new VersionAndIncarnation<CaveWallTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsCaveWallTTCMutSetAddEffect.Add(effect);
    }
    public void EffectCaveWallTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasCaveWallTTCMutSet(setId);
      CheckHasCaveWallTTC(elementId);

      var effect = new CaveWallTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsCaveWallTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new CaveWallTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsCaveWallTTCMutSet[setId] =
            new VersionAndIncarnation<CaveWallTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsCaveWallTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddCaveWallTTCMutSetObserver(int id, ICaveWallTTCMutSetEffectObserver observer) {
      List<ICaveWallTTCMutSetEffectObserver> obsies;
      if (!observersForCaveWallTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ICaveWallTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForCaveWallTTCMutSet[id] = obsies;
    }

    public void RemoveCaveWallTTCMutSetObserver(int id, ICaveWallTTCMutSetEffectObserver observer) {
      if (observersForCaveWallTTCMutSet.ContainsKey(id)) {
        var list = observersForCaveWallTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForCaveWallTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastCaveWallTTCMutSetEffects(
      SortedDictionary<int, List<ICaveWallTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsCaveWallTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ICaveWallTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCaveWallTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICaveWallTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCaveWallTTCMutSetEffect(effect);
        }
        observersForCaveWallTTCMutSet.Remove(effect.id);
      }
    }
    effectsCaveWallTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsCaveWallTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ICaveWallTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCaveWallTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICaveWallTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCaveWallTTCMutSetEffect(effect);
        }
      }
    }
    effectsCaveWallTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsCaveWallTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ICaveWallTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCaveWallTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICaveWallTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCaveWallTTCMutSetEffect(effect);
        }
      }
    }
    effectsCaveWallTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsCaveWallTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ICaveWallTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCaveWallTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICaveWallTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCaveWallTTCMutSetEffect(effect);
        }
      }
    }
    effectsCaveWallTTCMutSetCreateEffect.Clear();

  }

    public int GetCaveTTCMutSetHash(int id, int version, CaveTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public CaveTTCMutSetIncarnation GetCaveTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsCaveTTCMutSet[id].incarnation;
    }
    public CaveTTCMutSet GetCaveTTCMutSet(int id) {
      return new CaveTTCMutSet(this, id);
    }
    public List<CaveTTCMutSet> AllCaveTTCMutSet() {
      List<CaveTTCMutSet> result = new List<CaveTTCMutSet>(rootIncarnation.incarnationsCaveTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsCaveTTCMutSet.Keys) {
        result.Add(new CaveTTCMutSet(this, id));
      }
      return result;
    }
    public bool CaveTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsCaveTTCMutSet.ContainsKey(id);
    }
    public void CheckHasCaveTTCMutSet(CaveTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasCaveTTCMutSet(thing.id);
    }
    public void CheckHasCaveTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsCaveTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid CaveTTCMutSet}: " + id);
      }
    }
    public CaveTTCMutSet EffectCaveTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new CaveTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateCaveTTCMutSet(id, rootIncarnation.version, incarnation);
      return new CaveTTCMutSet(this, id);
    }
    public void EffectInternalCreateCaveTTCMutSet(int id, int incarnationVersion, CaveTTCMutSetIncarnation incarnation) {
      var effect = new CaveTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsCaveTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<CaveTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsCaveTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectCaveTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new CaveTTCMutSetDeleteEffect(id);
      effectsCaveTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsCaveTTCMutSet[id];
      rootIncarnation.incarnationsCaveTTCMutSet.Remove(id);
    }

       
    public void EffectCaveTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasCaveTTCMutSet(setId);
      CheckHasCaveTTC(elementId);

      var effect = new CaveTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsCaveTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new CaveTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsCaveTTCMutSet[setId] =
            new VersionAndIncarnation<CaveTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsCaveTTCMutSetAddEffect.Add(effect);
    }
    public void EffectCaveTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasCaveTTCMutSet(setId);
      CheckHasCaveTTC(elementId);

      var effect = new CaveTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsCaveTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new CaveTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsCaveTTCMutSet[setId] =
            new VersionAndIncarnation<CaveTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsCaveTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddCaveTTCMutSetObserver(int id, ICaveTTCMutSetEffectObserver observer) {
      List<ICaveTTCMutSetEffectObserver> obsies;
      if (!observersForCaveTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ICaveTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForCaveTTCMutSet[id] = obsies;
    }

    public void RemoveCaveTTCMutSetObserver(int id, ICaveTTCMutSetEffectObserver observer) {
      if (observersForCaveTTCMutSet.ContainsKey(id)) {
        var list = observersForCaveTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForCaveTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastCaveTTCMutSetEffects(
      SortedDictionary<int, List<ICaveTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsCaveTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ICaveTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCaveTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICaveTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCaveTTCMutSetEffect(effect);
        }
        observersForCaveTTCMutSet.Remove(effect.id);
      }
    }
    effectsCaveTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsCaveTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ICaveTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCaveTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICaveTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCaveTTCMutSetEffect(effect);
        }
      }
    }
    effectsCaveTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsCaveTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ICaveTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCaveTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICaveTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCaveTTCMutSetEffect(effect);
        }
      }
    }
    effectsCaveTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsCaveTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ICaveTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCaveTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICaveTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCaveTTCMutSetEffect(effect);
        }
      }
    }
    effectsCaveTTCMutSetCreateEffect.Clear();

  }

    public int GetFallsTTCMutSetHash(int id, int version, FallsTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public FallsTTCMutSetIncarnation GetFallsTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsFallsTTCMutSet[id].incarnation;
    }
    public FallsTTCMutSet GetFallsTTCMutSet(int id) {
      return new FallsTTCMutSet(this, id);
    }
    public List<FallsTTCMutSet> AllFallsTTCMutSet() {
      List<FallsTTCMutSet> result = new List<FallsTTCMutSet>(rootIncarnation.incarnationsFallsTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsFallsTTCMutSet.Keys) {
        result.Add(new FallsTTCMutSet(this, id));
      }
      return result;
    }
    public bool FallsTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsFallsTTCMutSet.ContainsKey(id);
    }
    public void CheckHasFallsTTCMutSet(FallsTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasFallsTTCMutSet(thing.id);
    }
    public void CheckHasFallsTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsFallsTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid FallsTTCMutSet}: " + id);
      }
    }
    public FallsTTCMutSet EffectFallsTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new FallsTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateFallsTTCMutSet(id, rootIncarnation.version, incarnation);
      return new FallsTTCMutSet(this, id);
    }
    public void EffectInternalCreateFallsTTCMutSet(int id, int incarnationVersion, FallsTTCMutSetIncarnation incarnation) {
      var effect = new FallsTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsFallsTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<FallsTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsFallsTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectFallsTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new FallsTTCMutSetDeleteEffect(id);
      effectsFallsTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsFallsTTCMutSet[id];
      rootIncarnation.incarnationsFallsTTCMutSet.Remove(id);
    }

       
    public void EffectFallsTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasFallsTTCMutSet(setId);
      CheckHasFallsTTC(elementId);

      var effect = new FallsTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsFallsTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new FallsTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsFallsTTCMutSet[setId] =
            new VersionAndIncarnation<FallsTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsFallsTTCMutSetAddEffect.Add(effect);
    }
    public void EffectFallsTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasFallsTTCMutSet(setId);
      CheckHasFallsTTC(elementId);

      var effect = new FallsTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsFallsTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new FallsTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsFallsTTCMutSet[setId] =
            new VersionAndIncarnation<FallsTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsFallsTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddFallsTTCMutSetObserver(int id, IFallsTTCMutSetEffectObserver observer) {
      List<IFallsTTCMutSetEffectObserver> obsies;
      if (!observersForFallsTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IFallsTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForFallsTTCMutSet[id] = obsies;
    }

    public void RemoveFallsTTCMutSetObserver(int id, IFallsTTCMutSetEffectObserver observer) {
      if (observersForFallsTTCMutSet.ContainsKey(id)) {
        var list = observersForFallsTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForFallsTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastFallsTTCMutSetEffects(
      SortedDictionary<int, List<IFallsTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsFallsTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IFallsTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFallsTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFallsTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFallsTTCMutSetEffect(effect);
        }
        observersForFallsTTCMutSet.Remove(effect.id);
      }
    }
    effectsFallsTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsFallsTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IFallsTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFallsTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFallsTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFallsTTCMutSetEffect(effect);
        }
      }
    }
    effectsFallsTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsFallsTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IFallsTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFallsTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFallsTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFallsTTCMutSetEffect(effect);
        }
      }
    }
    effectsFallsTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsFallsTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IFallsTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFallsTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFallsTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFallsTTCMutSetEffect(effect);
        }
      }
    }
    effectsFallsTTCMutSetCreateEffect.Clear();

  }

    public int GetFireTTCMutSetHash(int id, int version, FireTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public FireTTCMutSetIncarnation GetFireTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsFireTTCMutSet[id].incarnation;
    }
    public FireTTCMutSet GetFireTTCMutSet(int id) {
      return new FireTTCMutSet(this, id);
    }
    public List<FireTTCMutSet> AllFireTTCMutSet() {
      List<FireTTCMutSet> result = new List<FireTTCMutSet>(rootIncarnation.incarnationsFireTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsFireTTCMutSet.Keys) {
        result.Add(new FireTTCMutSet(this, id));
      }
      return result;
    }
    public bool FireTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsFireTTCMutSet.ContainsKey(id);
    }
    public void CheckHasFireTTCMutSet(FireTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasFireTTCMutSet(thing.id);
    }
    public void CheckHasFireTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsFireTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid FireTTCMutSet}: " + id);
      }
    }
    public FireTTCMutSet EffectFireTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new FireTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateFireTTCMutSet(id, rootIncarnation.version, incarnation);
      return new FireTTCMutSet(this, id);
    }
    public void EffectInternalCreateFireTTCMutSet(int id, int incarnationVersion, FireTTCMutSetIncarnation incarnation) {
      var effect = new FireTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsFireTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<FireTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsFireTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectFireTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new FireTTCMutSetDeleteEffect(id);
      effectsFireTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsFireTTCMutSet[id];
      rootIncarnation.incarnationsFireTTCMutSet.Remove(id);
    }

       
    public void EffectFireTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasFireTTCMutSet(setId);
      CheckHasFireTTC(elementId);

      var effect = new FireTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsFireTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new FireTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsFireTTCMutSet[setId] =
            new VersionAndIncarnation<FireTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsFireTTCMutSetAddEffect.Add(effect);
    }
    public void EffectFireTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasFireTTCMutSet(setId);
      CheckHasFireTTC(elementId);

      var effect = new FireTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsFireTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new FireTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsFireTTCMutSet[setId] =
            new VersionAndIncarnation<FireTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsFireTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddFireTTCMutSetObserver(int id, IFireTTCMutSetEffectObserver observer) {
      List<IFireTTCMutSetEffectObserver> obsies;
      if (!observersForFireTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IFireTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForFireTTCMutSet[id] = obsies;
    }

    public void RemoveFireTTCMutSetObserver(int id, IFireTTCMutSetEffectObserver observer) {
      if (observersForFireTTCMutSet.ContainsKey(id)) {
        var list = observersForFireTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForFireTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastFireTTCMutSetEffects(
      SortedDictionary<int, List<IFireTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsFireTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IFireTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireTTCMutSetEffect(effect);
        }
        observersForFireTTCMutSet.Remove(effect.id);
      }
    }
    effectsFireTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsFireTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IFireTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireTTCMutSetEffect(effect);
        }
      }
    }
    effectsFireTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsFireTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IFireTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireTTCMutSetEffect(effect);
        }
      }
    }
    effectsFireTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsFireTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IFireTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnFireTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IFireTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnFireTTCMutSetEffect(effect);
        }
      }
    }
    effectsFireTTCMutSetCreateEffect.Clear();

  }

    public int GetObsidianFloorTTCMutSetHash(int id, int version, ObsidianFloorTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public ObsidianFloorTTCMutSetIncarnation GetObsidianFloorTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsObsidianFloorTTCMutSet[id].incarnation;
    }
    public ObsidianFloorTTCMutSet GetObsidianFloorTTCMutSet(int id) {
      return new ObsidianFloorTTCMutSet(this, id);
    }
    public List<ObsidianFloorTTCMutSet> AllObsidianFloorTTCMutSet() {
      List<ObsidianFloorTTCMutSet> result = new List<ObsidianFloorTTCMutSet>(rootIncarnation.incarnationsObsidianFloorTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsObsidianFloorTTCMutSet.Keys) {
        result.Add(new ObsidianFloorTTCMutSet(this, id));
      }
      return result;
    }
    public bool ObsidianFloorTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsObsidianFloorTTCMutSet.ContainsKey(id);
    }
    public void CheckHasObsidianFloorTTCMutSet(ObsidianFloorTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasObsidianFloorTTCMutSet(thing.id);
    }
    public void CheckHasObsidianFloorTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsObsidianFloorTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid ObsidianFloorTTCMutSet}: " + id);
      }
    }
    public ObsidianFloorTTCMutSet EffectObsidianFloorTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new ObsidianFloorTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateObsidianFloorTTCMutSet(id, rootIncarnation.version, incarnation);
      return new ObsidianFloorTTCMutSet(this, id);
    }
    public void EffectInternalCreateObsidianFloorTTCMutSet(int id, int incarnationVersion, ObsidianFloorTTCMutSetIncarnation incarnation) {
      var effect = new ObsidianFloorTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsObsidianFloorTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<ObsidianFloorTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsObsidianFloorTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectObsidianFloorTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new ObsidianFloorTTCMutSetDeleteEffect(id);
      effectsObsidianFloorTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsObsidianFloorTTCMutSet[id];
      rootIncarnation.incarnationsObsidianFloorTTCMutSet.Remove(id);
    }

       
    public void EffectObsidianFloorTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasObsidianFloorTTCMutSet(setId);
      CheckHasObsidianFloorTTC(elementId);

      var effect = new ObsidianFloorTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsObsidianFloorTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new ObsidianFloorTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsObsidianFloorTTCMutSet[setId] =
            new VersionAndIncarnation<ObsidianFloorTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsObsidianFloorTTCMutSetAddEffect.Add(effect);
    }
    public void EffectObsidianFloorTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasObsidianFloorTTCMutSet(setId);
      CheckHasObsidianFloorTTC(elementId);

      var effect = new ObsidianFloorTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsObsidianFloorTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new ObsidianFloorTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsObsidianFloorTTCMutSet[setId] =
            new VersionAndIncarnation<ObsidianFloorTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsObsidianFloorTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddObsidianFloorTTCMutSetObserver(int id, IObsidianFloorTTCMutSetEffectObserver observer) {
      List<IObsidianFloorTTCMutSetEffectObserver> obsies;
      if (!observersForObsidianFloorTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IObsidianFloorTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForObsidianFloorTTCMutSet[id] = obsies;
    }

    public void RemoveObsidianFloorTTCMutSetObserver(int id, IObsidianFloorTTCMutSetEffectObserver observer) {
      if (observersForObsidianFloorTTCMutSet.ContainsKey(id)) {
        var list = observersForObsidianFloorTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForObsidianFloorTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastObsidianFloorTTCMutSetEffects(
      SortedDictionary<int, List<IObsidianFloorTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsObsidianFloorTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IObsidianFloorTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnObsidianFloorTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IObsidianFloorTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnObsidianFloorTTCMutSetEffect(effect);
        }
        observersForObsidianFloorTTCMutSet.Remove(effect.id);
      }
    }
    effectsObsidianFloorTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsObsidianFloorTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IObsidianFloorTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnObsidianFloorTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IObsidianFloorTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnObsidianFloorTTCMutSetEffect(effect);
        }
      }
    }
    effectsObsidianFloorTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsObsidianFloorTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IObsidianFloorTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnObsidianFloorTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IObsidianFloorTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnObsidianFloorTTCMutSetEffect(effect);
        }
      }
    }
    effectsObsidianFloorTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsObsidianFloorTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IObsidianFloorTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnObsidianFloorTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IObsidianFloorTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnObsidianFloorTTCMutSetEffect(effect);
        }
      }
    }
    effectsObsidianFloorTTCMutSetCreateEffect.Clear();

  }

    public int GetMagmaTTCMutSetHash(int id, int version, MagmaTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public MagmaTTCMutSetIncarnation GetMagmaTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsMagmaTTCMutSet[id].incarnation;
    }
    public MagmaTTCMutSet GetMagmaTTCMutSet(int id) {
      return new MagmaTTCMutSet(this, id);
    }
    public List<MagmaTTCMutSet> AllMagmaTTCMutSet() {
      List<MagmaTTCMutSet> result = new List<MagmaTTCMutSet>(rootIncarnation.incarnationsMagmaTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsMagmaTTCMutSet.Keys) {
        result.Add(new MagmaTTCMutSet(this, id));
      }
      return result;
    }
    public bool MagmaTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsMagmaTTCMutSet.ContainsKey(id);
    }
    public void CheckHasMagmaTTCMutSet(MagmaTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasMagmaTTCMutSet(thing.id);
    }
    public void CheckHasMagmaTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsMagmaTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid MagmaTTCMutSet}: " + id);
      }
    }
    public MagmaTTCMutSet EffectMagmaTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new MagmaTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateMagmaTTCMutSet(id, rootIncarnation.version, incarnation);
      return new MagmaTTCMutSet(this, id);
    }
    public void EffectInternalCreateMagmaTTCMutSet(int id, int incarnationVersion, MagmaTTCMutSetIncarnation incarnation) {
      var effect = new MagmaTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsMagmaTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<MagmaTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsMagmaTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectMagmaTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new MagmaTTCMutSetDeleteEffect(id);
      effectsMagmaTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsMagmaTTCMutSet[id];
      rootIncarnation.incarnationsMagmaTTCMutSet.Remove(id);
    }

       
    public void EffectMagmaTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasMagmaTTCMutSet(setId);
      CheckHasMagmaTTC(elementId);

      var effect = new MagmaTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsMagmaTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new MagmaTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsMagmaTTCMutSet[setId] =
            new VersionAndIncarnation<MagmaTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsMagmaTTCMutSetAddEffect.Add(effect);
    }
    public void EffectMagmaTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasMagmaTTCMutSet(setId);
      CheckHasMagmaTTC(elementId);

      var effect = new MagmaTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsMagmaTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new MagmaTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsMagmaTTCMutSet[setId] =
            new VersionAndIncarnation<MagmaTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsMagmaTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddMagmaTTCMutSetObserver(int id, IMagmaTTCMutSetEffectObserver observer) {
      List<IMagmaTTCMutSetEffectObserver> obsies;
      if (!observersForMagmaTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IMagmaTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForMagmaTTCMutSet[id] = obsies;
    }

    public void RemoveMagmaTTCMutSetObserver(int id, IMagmaTTCMutSetEffectObserver observer) {
      if (observersForMagmaTTCMutSet.ContainsKey(id)) {
        var list = observersForMagmaTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForMagmaTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastMagmaTTCMutSetEffects(
      SortedDictionary<int, List<IMagmaTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsMagmaTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IMagmaTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMagmaTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMagmaTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMagmaTTCMutSetEffect(effect);
        }
        observersForMagmaTTCMutSet.Remove(effect.id);
      }
    }
    effectsMagmaTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsMagmaTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IMagmaTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMagmaTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMagmaTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMagmaTTCMutSetEffect(effect);
        }
      }
    }
    effectsMagmaTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsMagmaTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IMagmaTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMagmaTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMagmaTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMagmaTTCMutSetEffect(effect);
        }
      }
    }
    effectsMagmaTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsMagmaTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IMagmaTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMagmaTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMagmaTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMagmaTTCMutSetEffect(effect);
        }
      }
    }
    effectsMagmaTTCMutSetCreateEffect.Clear();

  }

    public int GetCliffTTCMutSetHash(int id, int version, CliffTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public CliffTTCMutSetIncarnation GetCliffTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsCliffTTCMutSet[id].incarnation;
    }
    public CliffTTCMutSet GetCliffTTCMutSet(int id) {
      return new CliffTTCMutSet(this, id);
    }
    public List<CliffTTCMutSet> AllCliffTTCMutSet() {
      List<CliffTTCMutSet> result = new List<CliffTTCMutSet>(rootIncarnation.incarnationsCliffTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsCliffTTCMutSet.Keys) {
        result.Add(new CliffTTCMutSet(this, id));
      }
      return result;
    }
    public bool CliffTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsCliffTTCMutSet.ContainsKey(id);
    }
    public void CheckHasCliffTTCMutSet(CliffTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasCliffTTCMutSet(thing.id);
    }
    public void CheckHasCliffTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsCliffTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid CliffTTCMutSet}: " + id);
      }
    }
    public CliffTTCMutSet EffectCliffTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new CliffTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateCliffTTCMutSet(id, rootIncarnation.version, incarnation);
      return new CliffTTCMutSet(this, id);
    }
    public void EffectInternalCreateCliffTTCMutSet(int id, int incarnationVersion, CliffTTCMutSetIncarnation incarnation) {
      var effect = new CliffTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsCliffTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<CliffTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsCliffTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectCliffTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new CliffTTCMutSetDeleteEffect(id);
      effectsCliffTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsCliffTTCMutSet[id];
      rootIncarnation.incarnationsCliffTTCMutSet.Remove(id);
    }

       
    public void EffectCliffTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasCliffTTCMutSet(setId);
      CheckHasCliffTTC(elementId);

      var effect = new CliffTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsCliffTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new CliffTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsCliffTTCMutSet[setId] =
            new VersionAndIncarnation<CliffTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsCliffTTCMutSetAddEffect.Add(effect);
    }
    public void EffectCliffTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasCliffTTCMutSet(setId);
      CheckHasCliffTTC(elementId);

      var effect = new CliffTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsCliffTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new CliffTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsCliffTTCMutSet[setId] =
            new VersionAndIncarnation<CliffTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsCliffTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddCliffTTCMutSetObserver(int id, ICliffTTCMutSetEffectObserver observer) {
      List<ICliffTTCMutSetEffectObserver> obsies;
      if (!observersForCliffTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ICliffTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForCliffTTCMutSet[id] = obsies;
    }

    public void RemoveCliffTTCMutSetObserver(int id, ICliffTTCMutSetEffectObserver observer) {
      if (observersForCliffTTCMutSet.ContainsKey(id)) {
        var list = observersForCliffTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForCliffTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastCliffTTCMutSetEffects(
      SortedDictionary<int, List<ICliffTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsCliffTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ICliffTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCliffTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICliffTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCliffTTCMutSetEffect(effect);
        }
        observersForCliffTTCMutSet.Remove(effect.id);
      }
    }
    effectsCliffTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsCliffTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ICliffTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCliffTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICliffTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCliffTTCMutSetEffect(effect);
        }
      }
    }
    effectsCliffTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsCliffTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ICliffTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCliffTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICliffTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCliffTTCMutSetEffect(effect);
        }
      }
    }
    effectsCliffTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsCliffTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ICliffTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCliffTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICliffTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCliffTTCMutSetEffect(effect);
        }
      }
    }
    effectsCliffTTCMutSetCreateEffect.Clear();

  }

    public int GetRavaNestTTCMutSetHash(int id, int version, RavaNestTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public RavaNestTTCMutSetIncarnation GetRavaNestTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsRavaNestTTCMutSet[id].incarnation;
    }
    public RavaNestTTCMutSet GetRavaNestTTCMutSet(int id) {
      return new RavaNestTTCMutSet(this, id);
    }
    public List<RavaNestTTCMutSet> AllRavaNestTTCMutSet() {
      List<RavaNestTTCMutSet> result = new List<RavaNestTTCMutSet>(rootIncarnation.incarnationsRavaNestTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsRavaNestTTCMutSet.Keys) {
        result.Add(new RavaNestTTCMutSet(this, id));
      }
      return result;
    }
    public bool RavaNestTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsRavaNestTTCMutSet.ContainsKey(id);
    }
    public void CheckHasRavaNestTTCMutSet(RavaNestTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasRavaNestTTCMutSet(thing.id);
    }
    public void CheckHasRavaNestTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsRavaNestTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid RavaNestTTCMutSet}: " + id);
      }
    }
    public RavaNestTTCMutSet EffectRavaNestTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new RavaNestTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateRavaNestTTCMutSet(id, rootIncarnation.version, incarnation);
      return new RavaNestTTCMutSet(this, id);
    }
    public void EffectInternalCreateRavaNestTTCMutSet(int id, int incarnationVersion, RavaNestTTCMutSetIncarnation incarnation) {
      var effect = new RavaNestTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsRavaNestTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<RavaNestTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsRavaNestTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectRavaNestTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new RavaNestTTCMutSetDeleteEffect(id);
      effectsRavaNestTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsRavaNestTTCMutSet[id];
      rootIncarnation.incarnationsRavaNestTTCMutSet.Remove(id);
    }

       
    public void EffectRavaNestTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasRavaNestTTCMutSet(setId);
      CheckHasRavaNestTTC(elementId);

      var effect = new RavaNestTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsRavaNestTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new RavaNestTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsRavaNestTTCMutSet[setId] =
            new VersionAndIncarnation<RavaNestTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsRavaNestTTCMutSetAddEffect.Add(effect);
    }
    public void EffectRavaNestTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasRavaNestTTCMutSet(setId);
      CheckHasRavaNestTTC(elementId);

      var effect = new RavaNestTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsRavaNestTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new RavaNestTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsRavaNestTTCMutSet[setId] =
            new VersionAndIncarnation<RavaNestTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsRavaNestTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddRavaNestTTCMutSetObserver(int id, IRavaNestTTCMutSetEffectObserver observer) {
      List<IRavaNestTTCMutSetEffectObserver> obsies;
      if (!observersForRavaNestTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IRavaNestTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForRavaNestTTCMutSet[id] = obsies;
    }

    public void RemoveRavaNestTTCMutSetObserver(int id, IRavaNestTTCMutSetEffectObserver observer) {
      if (observersForRavaNestTTCMutSet.ContainsKey(id)) {
        var list = observersForRavaNestTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForRavaNestTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastRavaNestTTCMutSetEffects(
      SortedDictionary<int, List<IRavaNestTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsRavaNestTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IRavaNestTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRavaNestTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRavaNestTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRavaNestTTCMutSetEffect(effect);
        }
        observersForRavaNestTTCMutSet.Remove(effect.id);
      }
    }
    effectsRavaNestTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsRavaNestTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IRavaNestTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRavaNestTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRavaNestTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRavaNestTTCMutSetEffect(effect);
        }
      }
    }
    effectsRavaNestTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsRavaNestTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IRavaNestTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRavaNestTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRavaNestTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRavaNestTTCMutSetEffect(effect);
        }
      }
    }
    effectsRavaNestTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsRavaNestTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IRavaNestTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnRavaNestTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IRavaNestTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnRavaNestTTCMutSetEffect(effect);
        }
      }
    }
    effectsRavaNestTTCMutSetCreateEffect.Clear();

  }

    public int GetCliffLandingTTCMutSetHash(int id, int version, CliffLandingTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public CliffLandingTTCMutSetIncarnation GetCliffLandingTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsCliffLandingTTCMutSet[id].incarnation;
    }
    public CliffLandingTTCMutSet GetCliffLandingTTCMutSet(int id) {
      return new CliffLandingTTCMutSet(this, id);
    }
    public List<CliffLandingTTCMutSet> AllCliffLandingTTCMutSet() {
      List<CliffLandingTTCMutSet> result = new List<CliffLandingTTCMutSet>(rootIncarnation.incarnationsCliffLandingTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsCliffLandingTTCMutSet.Keys) {
        result.Add(new CliffLandingTTCMutSet(this, id));
      }
      return result;
    }
    public bool CliffLandingTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsCliffLandingTTCMutSet.ContainsKey(id);
    }
    public void CheckHasCliffLandingTTCMutSet(CliffLandingTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasCliffLandingTTCMutSet(thing.id);
    }
    public void CheckHasCliffLandingTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsCliffLandingTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid CliffLandingTTCMutSet}: " + id);
      }
    }
    public CliffLandingTTCMutSet EffectCliffLandingTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new CliffLandingTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateCliffLandingTTCMutSet(id, rootIncarnation.version, incarnation);
      return new CliffLandingTTCMutSet(this, id);
    }
    public void EffectInternalCreateCliffLandingTTCMutSet(int id, int incarnationVersion, CliffLandingTTCMutSetIncarnation incarnation) {
      var effect = new CliffLandingTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsCliffLandingTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<CliffLandingTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsCliffLandingTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectCliffLandingTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new CliffLandingTTCMutSetDeleteEffect(id);
      effectsCliffLandingTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsCliffLandingTTCMutSet[id];
      rootIncarnation.incarnationsCliffLandingTTCMutSet.Remove(id);
    }

       
    public void EffectCliffLandingTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasCliffLandingTTCMutSet(setId);
      CheckHasCliffLandingTTC(elementId);

      var effect = new CliffLandingTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsCliffLandingTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new CliffLandingTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsCliffLandingTTCMutSet[setId] =
            new VersionAndIncarnation<CliffLandingTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsCliffLandingTTCMutSetAddEffect.Add(effect);
    }
    public void EffectCliffLandingTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasCliffLandingTTCMutSet(setId);
      CheckHasCliffLandingTTC(elementId);

      var effect = new CliffLandingTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsCliffLandingTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new CliffLandingTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsCliffLandingTTCMutSet[setId] =
            new VersionAndIncarnation<CliffLandingTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsCliffLandingTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddCliffLandingTTCMutSetObserver(int id, ICliffLandingTTCMutSetEffectObserver observer) {
      List<ICliffLandingTTCMutSetEffectObserver> obsies;
      if (!observersForCliffLandingTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ICliffLandingTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForCliffLandingTTCMutSet[id] = obsies;
    }

    public void RemoveCliffLandingTTCMutSetObserver(int id, ICliffLandingTTCMutSetEffectObserver observer) {
      if (observersForCliffLandingTTCMutSet.ContainsKey(id)) {
        var list = observersForCliffLandingTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForCliffLandingTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastCliffLandingTTCMutSetEffects(
      SortedDictionary<int, List<ICliffLandingTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsCliffLandingTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ICliffLandingTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCliffLandingTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICliffLandingTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCliffLandingTTCMutSetEffect(effect);
        }
        observersForCliffLandingTTCMutSet.Remove(effect.id);
      }
    }
    effectsCliffLandingTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsCliffLandingTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ICliffLandingTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCliffLandingTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICliffLandingTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCliffLandingTTCMutSetEffect(effect);
        }
      }
    }
    effectsCliffLandingTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsCliffLandingTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ICliffLandingTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCliffLandingTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICliffLandingTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCliffLandingTTCMutSetEffect(effect);
        }
      }
    }
    effectsCliffLandingTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsCliffLandingTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ICliffLandingTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCliffLandingTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICliffLandingTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCliffLandingTTCMutSetEffect(effect);
        }
      }
    }
    effectsCliffLandingTTCMutSetCreateEffect.Clear();

  }

    public int GetStoneTTCMutSetHash(int id, int version, StoneTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public StoneTTCMutSetIncarnation GetStoneTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsStoneTTCMutSet[id].incarnation;
    }
    public StoneTTCMutSet GetStoneTTCMutSet(int id) {
      return new StoneTTCMutSet(this, id);
    }
    public List<StoneTTCMutSet> AllStoneTTCMutSet() {
      List<StoneTTCMutSet> result = new List<StoneTTCMutSet>(rootIncarnation.incarnationsStoneTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsStoneTTCMutSet.Keys) {
        result.Add(new StoneTTCMutSet(this, id));
      }
      return result;
    }
    public bool StoneTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsStoneTTCMutSet.ContainsKey(id);
    }
    public void CheckHasStoneTTCMutSet(StoneTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasStoneTTCMutSet(thing.id);
    }
    public void CheckHasStoneTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsStoneTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid StoneTTCMutSet}: " + id);
      }
    }
    public StoneTTCMutSet EffectStoneTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new StoneTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateStoneTTCMutSet(id, rootIncarnation.version, incarnation);
      return new StoneTTCMutSet(this, id);
    }
    public void EffectInternalCreateStoneTTCMutSet(int id, int incarnationVersion, StoneTTCMutSetIncarnation incarnation) {
      var effect = new StoneTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsStoneTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<StoneTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsStoneTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectStoneTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new StoneTTCMutSetDeleteEffect(id);
      effectsStoneTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsStoneTTCMutSet[id];
      rootIncarnation.incarnationsStoneTTCMutSet.Remove(id);
    }

       
    public void EffectStoneTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasStoneTTCMutSet(setId);
      CheckHasStoneTTC(elementId);

      var effect = new StoneTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsStoneTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new StoneTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsStoneTTCMutSet[setId] =
            new VersionAndIncarnation<StoneTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsStoneTTCMutSetAddEffect.Add(effect);
    }
    public void EffectStoneTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasStoneTTCMutSet(setId);
      CheckHasStoneTTC(elementId);

      var effect = new StoneTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsStoneTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new StoneTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsStoneTTCMutSet[setId] =
            new VersionAndIncarnation<StoneTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsStoneTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddStoneTTCMutSetObserver(int id, IStoneTTCMutSetEffectObserver observer) {
      List<IStoneTTCMutSetEffectObserver> obsies;
      if (!observersForStoneTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IStoneTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForStoneTTCMutSet[id] = obsies;
    }

    public void RemoveStoneTTCMutSetObserver(int id, IStoneTTCMutSetEffectObserver observer) {
      if (observersForStoneTTCMutSet.ContainsKey(id)) {
        var list = observersForStoneTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForStoneTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastStoneTTCMutSetEffects(
      SortedDictionary<int, List<IStoneTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsStoneTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IStoneTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnStoneTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IStoneTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnStoneTTCMutSetEffect(effect);
        }
        observersForStoneTTCMutSet.Remove(effect.id);
      }
    }
    effectsStoneTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsStoneTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IStoneTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnStoneTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IStoneTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnStoneTTCMutSetEffect(effect);
        }
      }
    }
    effectsStoneTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsStoneTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IStoneTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnStoneTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IStoneTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnStoneTTCMutSetEffect(effect);
        }
      }
    }
    effectsStoneTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsStoneTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IStoneTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnStoneTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IStoneTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnStoneTTCMutSetEffect(effect);
        }
      }
    }
    effectsStoneTTCMutSetCreateEffect.Clear();

  }

    public int GetGrassTTCMutSetHash(int id, int version, GrassTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public GrassTTCMutSetIncarnation GetGrassTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsGrassTTCMutSet[id].incarnation;
    }
    public GrassTTCMutSet GetGrassTTCMutSet(int id) {
      return new GrassTTCMutSet(this, id);
    }
    public List<GrassTTCMutSet> AllGrassTTCMutSet() {
      List<GrassTTCMutSet> result = new List<GrassTTCMutSet>(rootIncarnation.incarnationsGrassTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsGrassTTCMutSet.Keys) {
        result.Add(new GrassTTCMutSet(this, id));
      }
      return result;
    }
    public bool GrassTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsGrassTTCMutSet.ContainsKey(id);
    }
    public void CheckHasGrassTTCMutSet(GrassTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasGrassTTCMutSet(thing.id);
    }
    public void CheckHasGrassTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsGrassTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid GrassTTCMutSet}: " + id);
      }
    }
    public GrassTTCMutSet EffectGrassTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new GrassTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateGrassTTCMutSet(id, rootIncarnation.version, incarnation);
      return new GrassTTCMutSet(this, id);
    }
    public void EffectInternalCreateGrassTTCMutSet(int id, int incarnationVersion, GrassTTCMutSetIncarnation incarnation) {
      var effect = new GrassTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsGrassTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<GrassTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsGrassTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectGrassTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new GrassTTCMutSetDeleteEffect(id);
      effectsGrassTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsGrassTTCMutSet[id];
      rootIncarnation.incarnationsGrassTTCMutSet.Remove(id);
    }

       
    public void EffectGrassTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasGrassTTCMutSet(setId);
      CheckHasGrassTTC(elementId);

      var effect = new GrassTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsGrassTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new GrassTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsGrassTTCMutSet[setId] =
            new VersionAndIncarnation<GrassTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsGrassTTCMutSetAddEffect.Add(effect);
    }
    public void EffectGrassTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasGrassTTCMutSet(setId);
      CheckHasGrassTTC(elementId);

      var effect = new GrassTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsGrassTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new GrassTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsGrassTTCMutSet[setId] =
            new VersionAndIncarnation<GrassTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsGrassTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddGrassTTCMutSetObserver(int id, IGrassTTCMutSetEffectObserver observer) {
      List<IGrassTTCMutSetEffectObserver> obsies;
      if (!observersForGrassTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IGrassTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForGrassTTCMutSet[id] = obsies;
    }

    public void RemoveGrassTTCMutSetObserver(int id, IGrassTTCMutSetEffectObserver observer) {
      if (observersForGrassTTCMutSet.ContainsKey(id)) {
        var list = observersForGrassTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForGrassTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastGrassTTCMutSetEffects(
      SortedDictionary<int, List<IGrassTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsGrassTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IGrassTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGrassTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGrassTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGrassTTCMutSetEffect(effect);
        }
        observersForGrassTTCMutSet.Remove(effect.id);
      }
    }
    effectsGrassTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsGrassTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IGrassTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGrassTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGrassTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGrassTTCMutSetEffect(effect);
        }
      }
    }
    effectsGrassTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsGrassTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IGrassTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGrassTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGrassTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGrassTTCMutSetEffect(effect);
        }
      }
    }
    effectsGrassTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsGrassTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IGrassTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGrassTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGrassTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGrassTTCMutSetEffect(effect);
        }
      }
    }
    effectsGrassTTCMutSetCreateEffect.Clear();

  }

    public int GetIncendianFallsLevelLinkerTTCMutSetHash(int id, int version, IncendianFallsLevelLinkerTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public IncendianFallsLevelLinkerTTCMutSetIncarnation GetIncendianFallsLevelLinkerTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet[id].incarnation;
    }
    public IncendianFallsLevelLinkerTTCMutSet GetIncendianFallsLevelLinkerTTCMutSet(int id) {
      return new IncendianFallsLevelLinkerTTCMutSet(this, id);
    }
    public List<IncendianFallsLevelLinkerTTCMutSet> AllIncendianFallsLevelLinkerTTCMutSet() {
      List<IncendianFallsLevelLinkerTTCMutSet> result = new List<IncendianFallsLevelLinkerTTCMutSet>(rootIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet.Keys) {
        result.Add(new IncendianFallsLevelLinkerTTCMutSet(this, id));
      }
      return result;
    }
    public bool IncendianFallsLevelLinkerTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet.ContainsKey(id);
    }
    public void CheckHasIncendianFallsLevelLinkerTTCMutSet(IncendianFallsLevelLinkerTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasIncendianFallsLevelLinkerTTCMutSet(thing.id);
    }
    public void CheckHasIncendianFallsLevelLinkerTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid IncendianFallsLevelLinkerTTCMutSet}: " + id);
      }
    }
    public IncendianFallsLevelLinkerTTCMutSet EffectIncendianFallsLevelLinkerTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new IncendianFallsLevelLinkerTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateIncendianFallsLevelLinkerTTCMutSet(id, rootIncarnation.version, incarnation);
      return new IncendianFallsLevelLinkerTTCMutSet(this, id);
    }
    public void EffectInternalCreateIncendianFallsLevelLinkerTTCMutSet(int id, int incarnationVersion, IncendianFallsLevelLinkerTTCMutSetIncarnation incarnation) {
      var effect = new IncendianFallsLevelLinkerTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<IncendianFallsLevelLinkerTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsIncendianFallsLevelLinkerTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectIncendianFallsLevelLinkerTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new IncendianFallsLevelLinkerTTCMutSetDeleteEffect(id);
      effectsIncendianFallsLevelLinkerTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet[id];
      rootIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet.Remove(id);
    }

       
    public void EffectIncendianFallsLevelLinkerTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasIncendianFallsLevelLinkerTTCMutSet(setId);
      CheckHasIncendianFallsLevelLinkerTTC(elementId);

      var effect = new IncendianFallsLevelLinkerTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new IncendianFallsLevelLinkerTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet[setId] =
            new VersionAndIncarnation<IncendianFallsLevelLinkerTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsIncendianFallsLevelLinkerTTCMutSetAddEffect.Add(effect);
    }
    public void EffectIncendianFallsLevelLinkerTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasIncendianFallsLevelLinkerTTCMutSet(setId);
      CheckHasIncendianFallsLevelLinkerTTC(elementId);

      var effect = new IncendianFallsLevelLinkerTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new IncendianFallsLevelLinkerTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsIncendianFallsLevelLinkerTTCMutSet[setId] =
            new VersionAndIncarnation<IncendianFallsLevelLinkerTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsIncendianFallsLevelLinkerTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddIncendianFallsLevelLinkerTTCMutSetObserver(int id, IIncendianFallsLevelLinkerTTCMutSetEffectObserver observer) {
      List<IIncendianFallsLevelLinkerTTCMutSetEffectObserver> obsies;
      if (!observersForIncendianFallsLevelLinkerTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IIncendianFallsLevelLinkerTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForIncendianFallsLevelLinkerTTCMutSet[id] = obsies;
    }

    public void RemoveIncendianFallsLevelLinkerTTCMutSetObserver(int id, IIncendianFallsLevelLinkerTTCMutSetEffectObserver observer) {
      if (observersForIncendianFallsLevelLinkerTTCMutSet.ContainsKey(id)) {
        var list = observersForIncendianFallsLevelLinkerTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForIncendianFallsLevelLinkerTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastIncendianFallsLevelLinkerTTCMutSetEffects(
      SortedDictionary<int, List<IIncendianFallsLevelLinkerTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsIncendianFallsLevelLinkerTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IIncendianFallsLevelLinkerTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIncendianFallsLevelLinkerTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIncendianFallsLevelLinkerTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIncendianFallsLevelLinkerTTCMutSetEffect(effect);
        }
        observersForIncendianFallsLevelLinkerTTCMutSet.Remove(effect.id);
      }
    }
    effectsIncendianFallsLevelLinkerTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsIncendianFallsLevelLinkerTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IIncendianFallsLevelLinkerTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIncendianFallsLevelLinkerTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIncendianFallsLevelLinkerTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIncendianFallsLevelLinkerTTCMutSetEffect(effect);
        }
      }
    }
    effectsIncendianFallsLevelLinkerTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsIncendianFallsLevelLinkerTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IIncendianFallsLevelLinkerTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIncendianFallsLevelLinkerTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIncendianFallsLevelLinkerTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIncendianFallsLevelLinkerTTCMutSetEffect(effect);
        }
      }
    }
    effectsIncendianFallsLevelLinkerTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsIncendianFallsLevelLinkerTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IIncendianFallsLevelLinkerTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnIncendianFallsLevelLinkerTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IIncendianFallsLevelLinkerTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnIncendianFallsLevelLinkerTTCMutSetEffect(effect);
        }
      }
    }
    effectsIncendianFallsLevelLinkerTTCMutSetCreateEffect.Clear();

  }

    public int GetEmberDeepLevelLinkerTTCMutSetHash(int id, int version, EmberDeepLevelLinkerTTCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public EmberDeepLevelLinkerTTCMutSetIncarnation GetEmberDeepLevelLinkerTTCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet[id].incarnation;
    }
    public EmberDeepLevelLinkerTTCMutSet GetEmberDeepLevelLinkerTTCMutSet(int id) {
      return new EmberDeepLevelLinkerTTCMutSet(this, id);
    }
    public List<EmberDeepLevelLinkerTTCMutSet> AllEmberDeepLevelLinkerTTCMutSet() {
      List<EmberDeepLevelLinkerTTCMutSet> result = new List<EmberDeepLevelLinkerTTCMutSet>(rootIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet.Keys) {
        result.Add(new EmberDeepLevelLinkerTTCMutSet(this, id));
      }
      return result;
    }
    public bool EmberDeepLevelLinkerTTCMutSetExists(int id) {
      return rootIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet.ContainsKey(id);
    }
    public void CheckHasEmberDeepLevelLinkerTTCMutSet(EmberDeepLevelLinkerTTCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasEmberDeepLevelLinkerTTCMutSet(thing.id);
    }
    public void CheckHasEmberDeepLevelLinkerTTCMutSet(int id) {
      if (!rootIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid EmberDeepLevelLinkerTTCMutSet}: " + id);
      }
    }
    public EmberDeepLevelLinkerTTCMutSet EffectEmberDeepLevelLinkerTTCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new EmberDeepLevelLinkerTTCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateEmberDeepLevelLinkerTTCMutSet(id, rootIncarnation.version, incarnation);
      return new EmberDeepLevelLinkerTTCMutSet(this, id);
    }
    public void EffectInternalCreateEmberDeepLevelLinkerTTCMutSet(int id, int incarnationVersion, EmberDeepLevelLinkerTTCMutSetIncarnation incarnation) {
      var effect = new EmberDeepLevelLinkerTTCMutSetCreateEffect(id);
      rootIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet
          .Add(
              id,
              new VersionAndIncarnation<EmberDeepLevelLinkerTTCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsEmberDeepLevelLinkerTTCMutSetCreateEffect.Add(effect);
    }
    public void EffectEmberDeepLevelLinkerTTCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new EmberDeepLevelLinkerTTCMutSetDeleteEffect(id);
      effectsEmberDeepLevelLinkerTTCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet[id];
      rootIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet.Remove(id);
    }

       
    public void EffectEmberDeepLevelLinkerTTCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasEmberDeepLevelLinkerTTCMutSet(setId);
      CheckHasEmberDeepLevelLinkerTTC(elementId);

      var effect = new EmberDeepLevelLinkerTTCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new EmberDeepLevelLinkerTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet[setId] =
            new VersionAndIncarnation<EmberDeepLevelLinkerTTCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsEmberDeepLevelLinkerTTCMutSetAddEffect.Add(effect);
    }
    public void EffectEmberDeepLevelLinkerTTCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasEmberDeepLevelLinkerTTCMutSet(setId);
      CheckHasEmberDeepLevelLinkerTTC(elementId);

      var effect = new EmberDeepLevelLinkerTTCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new EmberDeepLevelLinkerTTCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsEmberDeepLevelLinkerTTCMutSet[setId] =
            new VersionAndIncarnation<EmberDeepLevelLinkerTTCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsEmberDeepLevelLinkerTTCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddEmberDeepLevelLinkerTTCMutSetObserver(int id, IEmberDeepLevelLinkerTTCMutSetEffectObserver observer) {
      List<IEmberDeepLevelLinkerTTCMutSetEffectObserver> obsies;
      if (!observersForEmberDeepLevelLinkerTTCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IEmberDeepLevelLinkerTTCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForEmberDeepLevelLinkerTTCMutSet[id] = obsies;
    }

    public void RemoveEmberDeepLevelLinkerTTCMutSetObserver(int id, IEmberDeepLevelLinkerTTCMutSetEffectObserver observer) {
      if (observersForEmberDeepLevelLinkerTTCMutSet.ContainsKey(id)) {
        var list = observersForEmberDeepLevelLinkerTTCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForEmberDeepLevelLinkerTTCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastEmberDeepLevelLinkerTTCMutSetEffects(
      SortedDictionary<int, List<IEmberDeepLevelLinkerTTCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsEmberDeepLevelLinkerTTCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IEmberDeepLevelLinkerTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnEmberDeepLevelLinkerTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IEmberDeepLevelLinkerTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnEmberDeepLevelLinkerTTCMutSetEffect(effect);
        }
        observersForEmberDeepLevelLinkerTTCMutSet.Remove(effect.id);
      }
    }
    effectsEmberDeepLevelLinkerTTCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsEmberDeepLevelLinkerTTCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IEmberDeepLevelLinkerTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnEmberDeepLevelLinkerTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IEmberDeepLevelLinkerTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnEmberDeepLevelLinkerTTCMutSetEffect(effect);
        }
      }
    }
    effectsEmberDeepLevelLinkerTTCMutSetAddEffect.Clear();

    foreach (var effect in effectsEmberDeepLevelLinkerTTCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IEmberDeepLevelLinkerTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnEmberDeepLevelLinkerTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IEmberDeepLevelLinkerTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnEmberDeepLevelLinkerTTCMutSetEffect(effect);
        }
      }
    }
    effectsEmberDeepLevelLinkerTTCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsEmberDeepLevelLinkerTTCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IEmberDeepLevelLinkerTTCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnEmberDeepLevelLinkerTTCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IEmberDeepLevelLinkerTTCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnEmberDeepLevelLinkerTTCMutSetEffect(effect);
        }
      }
    }
    effectsEmberDeepLevelLinkerTTCMutSetCreateEffect.Clear();

  }

    public int GetTutorialDefyCounterUCMutSetHash(int id, int version, TutorialDefyCounterUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public TutorialDefyCounterUCMutSetIncarnation GetTutorialDefyCounterUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsTutorialDefyCounterUCMutSet[id].incarnation;
    }
    public TutorialDefyCounterUCMutSet GetTutorialDefyCounterUCMutSet(int id) {
      return new TutorialDefyCounterUCMutSet(this, id);
    }
    public List<TutorialDefyCounterUCMutSet> AllTutorialDefyCounterUCMutSet() {
      List<TutorialDefyCounterUCMutSet> result = new List<TutorialDefyCounterUCMutSet>(rootIncarnation.incarnationsTutorialDefyCounterUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsTutorialDefyCounterUCMutSet.Keys) {
        result.Add(new TutorialDefyCounterUCMutSet(this, id));
      }
      return result;
    }
    public bool TutorialDefyCounterUCMutSetExists(int id) {
      return rootIncarnation.incarnationsTutorialDefyCounterUCMutSet.ContainsKey(id);
    }
    public void CheckHasTutorialDefyCounterUCMutSet(TutorialDefyCounterUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasTutorialDefyCounterUCMutSet(thing.id);
    }
    public void CheckHasTutorialDefyCounterUCMutSet(int id) {
      if (!rootIncarnation.incarnationsTutorialDefyCounterUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid TutorialDefyCounterUCMutSet}: " + id);
      }
    }
    public TutorialDefyCounterUCMutSet EffectTutorialDefyCounterUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new TutorialDefyCounterUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateTutorialDefyCounterUCMutSet(id, rootIncarnation.version, incarnation);
      return new TutorialDefyCounterUCMutSet(this, id);
    }
    public void EffectInternalCreateTutorialDefyCounterUCMutSet(int id, int incarnationVersion, TutorialDefyCounterUCMutSetIncarnation incarnation) {
      var effect = new TutorialDefyCounterUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsTutorialDefyCounterUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<TutorialDefyCounterUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsTutorialDefyCounterUCMutSetCreateEffect.Add(effect);
    }
    public void EffectTutorialDefyCounterUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new TutorialDefyCounterUCMutSetDeleteEffect(id);
      effectsTutorialDefyCounterUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsTutorialDefyCounterUCMutSet[id];
      rootIncarnation.incarnationsTutorialDefyCounterUCMutSet.Remove(id);
    }

       
    public void EffectTutorialDefyCounterUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasTutorialDefyCounterUCMutSet(setId);
      CheckHasTutorialDefyCounterUC(elementId);

      var effect = new TutorialDefyCounterUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsTutorialDefyCounterUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new TutorialDefyCounterUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsTutorialDefyCounterUCMutSet[setId] =
            new VersionAndIncarnation<TutorialDefyCounterUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsTutorialDefyCounterUCMutSetAddEffect.Add(effect);
    }
    public void EffectTutorialDefyCounterUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasTutorialDefyCounterUCMutSet(setId);
      CheckHasTutorialDefyCounterUC(elementId);

      var effect = new TutorialDefyCounterUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsTutorialDefyCounterUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new TutorialDefyCounterUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsTutorialDefyCounterUCMutSet[setId] =
            new VersionAndIncarnation<TutorialDefyCounterUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsTutorialDefyCounterUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddTutorialDefyCounterUCMutSetObserver(int id, ITutorialDefyCounterUCMutSetEffectObserver observer) {
      List<ITutorialDefyCounterUCMutSetEffectObserver> obsies;
      if (!observersForTutorialDefyCounterUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ITutorialDefyCounterUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForTutorialDefyCounterUCMutSet[id] = obsies;
    }

    public void RemoveTutorialDefyCounterUCMutSetObserver(int id, ITutorialDefyCounterUCMutSetEffectObserver observer) {
      if (observersForTutorialDefyCounterUCMutSet.ContainsKey(id)) {
        var list = observersForTutorialDefyCounterUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForTutorialDefyCounterUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastTutorialDefyCounterUCMutSetEffects(
      SortedDictionary<int, List<ITutorialDefyCounterUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsTutorialDefyCounterUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ITutorialDefyCounterUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTutorialDefyCounterUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITutorialDefyCounterUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTutorialDefyCounterUCMutSetEffect(effect);
        }
        observersForTutorialDefyCounterUCMutSet.Remove(effect.id);
      }
    }
    effectsTutorialDefyCounterUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsTutorialDefyCounterUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ITutorialDefyCounterUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTutorialDefyCounterUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITutorialDefyCounterUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTutorialDefyCounterUCMutSetEffect(effect);
        }
      }
    }
    effectsTutorialDefyCounterUCMutSetAddEffect.Clear();

    foreach (var effect in effectsTutorialDefyCounterUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ITutorialDefyCounterUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTutorialDefyCounterUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITutorialDefyCounterUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTutorialDefyCounterUCMutSetEffect(effect);
        }
      }
    }
    effectsTutorialDefyCounterUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsTutorialDefyCounterUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ITutorialDefyCounterUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTutorialDefyCounterUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITutorialDefyCounterUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTutorialDefyCounterUCMutSetEffect(effect);
        }
      }
    }
    effectsTutorialDefyCounterUCMutSetCreateEffect.Clear();

  }

    public int GetLightningChargingUCMutSetHash(int id, int version, LightningChargingUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public LightningChargingUCMutSetIncarnation GetLightningChargingUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsLightningChargingUCMutSet[id].incarnation;
    }
    public LightningChargingUCMutSet GetLightningChargingUCMutSet(int id) {
      return new LightningChargingUCMutSet(this, id);
    }
    public List<LightningChargingUCMutSet> AllLightningChargingUCMutSet() {
      List<LightningChargingUCMutSet> result = new List<LightningChargingUCMutSet>(rootIncarnation.incarnationsLightningChargingUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsLightningChargingUCMutSet.Keys) {
        result.Add(new LightningChargingUCMutSet(this, id));
      }
      return result;
    }
    public bool LightningChargingUCMutSetExists(int id) {
      return rootIncarnation.incarnationsLightningChargingUCMutSet.ContainsKey(id);
    }
    public void CheckHasLightningChargingUCMutSet(LightningChargingUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasLightningChargingUCMutSet(thing.id);
    }
    public void CheckHasLightningChargingUCMutSet(int id) {
      if (!rootIncarnation.incarnationsLightningChargingUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid LightningChargingUCMutSet}: " + id);
      }
    }
    public LightningChargingUCMutSet EffectLightningChargingUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new LightningChargingUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateLightningChargingUCMutSet(id, rootIncarnation.version, incarnation);
      return new LightningChargingUCMutSet(this, id);
    }
    public void EffectInternalCreateLightningChargingUCMutSet(int id, int incarnationVersion, LightningChargingUCMutSetIncarnation incarnation) {
      var effect = new LightningChargingUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsLightningChargingUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<LightningChargingUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsLightningChargingUCMutSetCreateEffect.Add(effect);
    }
    public void EffectLightningChargingUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new LightningChargingUCMutSetDeleteEffect(id);
      effectsLightningChargingUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsLightningChargingUCMutSet[id];
      rootIncarnation.incarnationsLightningChargingUCMutSet.Remove(id);
    }

       
    public void EffectLightningChargingUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasLightningChargingUCMutSet(setId);
      CheckHasLightningChargingUC(elementId);

      var effect = new LightningChargingUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsLightningChargingUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new LightningChargingUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsLightningChargingUCMutSet[setId] =
            new VersionAndIncarnation<LightningChargingUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsLightningChargingUCMutSetAddEffect.Add(effect);
    }
    public void EffectLightningChargingUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasLightningChargingUCMutSet(setId);
      CheckHasLightningChargingUC(elementId);

      var effect = new LightningChargingUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsLightningChargingUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new LightningChargingUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsLightningChargingUCMutSet[setId] =
            new VersionAndIncarnation<LightningChargingUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsLightningChargingUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddLightningChargingUCMutSetObserver(int id, ILightningChargingUCMutSetEffectObserver observer) {
      List<ILightningChargingUCMutSetEffectObserver> obsies;
      if (!observersForLightningChargingUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ILightningChargingUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForLightningChargingUCMutSet[id] = obsies;
    }

    public void RemoveLightningChargingUCMutSetObserver(int id, ILightningChargingUCMutSetEffectObserver observer) {
      if (observersForLightningChargingUCMutSet.ContainsKey(id)) {
        var list = observersForLightningChargingUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForLightningChargingUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastLightningChargingUCMutSetEffects(
      SortedDictionary<int, List<ILightningChargingUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsLightningChargingUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ILightningChargingUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLightningChargingUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILightningChargingUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLightningChargingUCMutSetEffect(effect);
        }
        observersForLightningChargingUCMutSet.Remove(effect.id);
      }
    }
    effectsLightningChargingUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsLightningChargingUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ILightningChargingUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLightningChargingUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILightningChargingUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLightningChargingUCMutSetEffect(effect);
        }
      }
    }
    effectsLightningChargingUCMutSetAddEffect.Clear();

    foreach (var effect in effectsLightningChargingUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ILightningChargingUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLightningChargingUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILightningChargingUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLightningChargingUCMutSetEffect(effect);
        }
      }
    }
    effectsLightningChargingUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsLightningChargingUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ILightningChargingUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLightningChargingUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILightningChargingUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLightningChargingUCMutSetEffect(effect);
        }
      }
    }
    effectsLightningChargingUCMutSetCreateEffect.Clear();

  }

    public int GetWanderAICapabilityUCMutSetHash(int id, int version, WanderAICapabilityUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public WanderAICapabilityUCMutSetIncarnation GetWanderAICapabilityUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsWanderAICapabilityUCMutSet[id].incarnation;
    }
    public WanderAICapabilityUCMutSet GetWanderAICapabilityUCMutSet(int id) {
      return new WanderAICapabilityUCMutSet(this, id);
    }
    public List<WanderAICapabilityUCMutSet> AllWanderAICapabilityUCMutSet() {
      List<WanderAICapabilityUCMutSet> result = new List<WanderAICapabilityUCMutSet>(rootIncarnation.incarnationsWanderAICapabilityUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsWanderAICapabilityUCMutSet.Keys) {
        result.Add(new WanderAICapabilityUCMutSet(this, id));
      }
      return result;
    }
    public bool WanderAICapabilityUCMutSetExists(int id) {
      return rootIncarnation.incarnationsWanderAICapabilityUCMutSet.ContainsKey(id);
    }
    public void CheckHasWanderAICapabilityUCMutSet(WanderAICapabilityUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasWanderAICapabilityUCMutSet(thing.id);
    }
    public void CheckHasWanderAICapabilityUCMutSet(int id) {
      if (!rootIncarnation.incarnationsWanderAICapabilityUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid WanderAICapabilityUCMutSet}: " + id);
      }
    }
    public WanderAICapabilityUCMutSet EffectWanderAICapabilityUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new WanderAICapabilityUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateWanderAICapabilityUCMutSet(id, rootIncarnation.version, incarnation);
      return new WanderAICapabilityUCMutSet(this, id);
    }
    public void EffectInternalCreateWanderAICapabilityUCMutSet(int id, int incarnationVersion, WanderAICapabilityUCMutSetIncarnation incarnation) {
      var effect = new WanderAICapabilityUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsWanderAICapabilityUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<WanderAICapabilityUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsWanderAICapabilityUCMutSetCreateEffect.Add(effect);
    }
    public void EffectWanderAICapabilityUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new WanderAICapabilityUCMutSetDeleteEffect(id);
      effectsWanderAICapabilityUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsWanderAICapabilityUCMutSet[id];
      rootIncarnation.incarnationsWanderAICapabilityUCMutSet.Remove(id);
    }

       
    public void EffectWanderAICapabilityUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasWanderAICapabilityUCMutSet(setId);
      CheckHasWanderAICapabilityUC(elementId);

      var effect = new WanderAICapabilityUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsWanderAICapabilityUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new WanderAICapabilityUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsWanderAICapabilityUCMutSet[setId] =
            new VersionAndIncarnation<WanderAICapabilityUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsWanderAICapabilityUCMutSetAddEffect.Add(effect);
    }
    public void EffectWanderAICapabilityUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasWanderAICapabilityUCMutSet(setId);
      CheckHasWanderAICapabilityUC(elementId);

      var effect = new WanderAICapabilityUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsWanderAICapabilityUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new WanderAICapabilityUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsWanderAICapabilityUCMutSet[setId] =
            new VersionAndIncarnation<WanderAICapabilityUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsWanderAICapabilityUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddWanderAICapabilityUCMutSetObserver(int id, IWanderAICapabilityUCMutSetEffectObserver observer) {
      List<IWanderAICapabilityUCMutSetEffectObserver> obsies;
      if (!observersForWanderAICapabilityUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IWanderAICapabilityUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForWanderAICapabilityUCMutSet[id] = obsies;
    }

    public void RemoveWanderAICapabilityUCMutSetObserver(int id, IWanderAICapabilityUCMutSetEffectObserver observer) {
      if (observersForWanderAICapabilityUCMutSet.ContainsKey(id)) {
        var list = observersForWanderAICapabilityUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForWanderAICapabilityUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastWanderAICapabilityUCMutSetEffects(
      SortedDictionary<int, List<IWanderAICapabilityUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsWanderAICapabilityUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IWanderAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWanderAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWanderAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWanderAICapabilityUCMutSetEffect(effect);
        }
        observersForWanderAICapabilityUCMutSet.Remove(effect.id);
      }
    }
    effectsWanderAICapabilityUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsWanderAICapabilityUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IWanderAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWanderAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWanderAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWanderAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsWanderAICapabilityUCMutSetAddEffect.Clear();

    foreach (var effect in effectsWanderAICapabilityUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IWanderAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWanderAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWanderAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWanderAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsWanderAICapabilityUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsWanderAICapabilityUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IWanderAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnWanderAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IWanderAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnWanderAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsWanderAICapabilityUCMutSetCreateEffect.Clear();

  }

    public int GetTemporaryCloneAICapabilityUCMutSetHash(int id, int version, TemporaryCloneAICapabilityUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public TemporaryCloneAICapabilityUCMutSetIncarnation GetTemporaryCloneAICapabilityUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet[id].incarnation;
    }
    public TemporaryCloneAICapabilityUCMutSet GetTemporaryCloneAICapabilityUCMutSet(int id) {
      return new TemporaryCloneAICapabilityUCMutSet(this, id);
    }
    public List<TemporaryCloneAICapabilityUCMutSet> AllTemporaryCloneAICapabilityUCMutSet() {
      List<TemporaryCloneAICapabilityUCMutSet> result = new List<TemporaryCloneAICapabilityUCMutSet>(rootIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet.Keys) {
        result.Add(new TemporaryCloneAICapabilityUCMutSet(this, id));
      }
      return result;
    }
    public bool TemporaryCloneAICapabilityUCMutSetExists(int id) {
      return rootIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet.ContainsKey(id);
    }
    public void CheckHasTemporaryCloneAICapabilityUCMutSet(TemporaryCloneAICapabilityUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasTemporaryCloneAICapabilityUCMutSet(thing.id);
    }
    public void CheckHasTemporaryCloneAICapabilityUCMutSet(int id) {
      if (!rootIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid TemporaryCloneAICapabilityUCMutSet}: " + id);
      }
    }
    public TemporaryCloneAICapabilityUCMutSet EffectTemporaryCloneAICapabilityUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new TemporaryCloneAICapabilityUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateTemporaryCloneAICapabilityUCMutSet(id, rootIncarnation.version, incarnation);
      return new TemporaryCloneAICapabilityUCMutSet(this, id);
    }
    public void EffectInternalCreateTemporaryCloneAICapabilityUCMutSet(int id, int incarnationVersion, TemporaryCloneAICapabilityUCMutSetIncarnation incarnation) {
      var effect = new TemporaryCloneAICapabilityUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<TemporaryCloneAICapabilityUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsTemporaryCloneAICapabilityUCMutSetCreateEffect.Add(effect);
    }
    public void EffectTemporaryCloneAICapabilityUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new TemporaryCloneAICapabilityUCMutSetDeleteEffect(id);
      effectsTemporaryCloneAICapabilityUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet[id];
      rootIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet.Remove(id);
    }

       
    public void EffectTemporaryCloneAICapabilityUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasTemporaryCloneAICapabilityUCMutSet(setId);
      CheckHasTemporaryCloneAICapabilityUC(elementId);

      var effect = new TemporaryCloneAICapabilityUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new TemporaryCloneAICapabilityUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet[setId] =
            new VersionAndIncarnation<TemporaryCloneAICapabilityUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsTemporaryCloneAICapabilityUCMutSetAddEffect.Add(effect);
    }
    public void EffectTemporaryCloneAICapabilityUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasTemporaryCloneAICapabilityUCMutSet(setId);
      CheckHasTemporaryCloneAICapabilityUC(elementId);

      var effect = new TemporaryCloneAICapabilityUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new TemporaryCloneAICapabilityUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsTemporaryCloneAICapabilityUCMutSet[setId] =
            new VersionAndIncarnation<TemporaryCloneAICapabilityUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsTemporaryCloneAICapabilityUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddTemporaryCloneAICapabilityUCMutSetObserver(int id, ITemporaryCloneAICapabilityUCMutSetEffectObserver observer) {
      List<ITemporaryCloneAICapabilityUCMutSetEffectObserver> obsies;
      if (!observersForTemporaryCloneAICapabilityUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ITemporaryCloneAICapabilityUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForTemporaryCloneAICapabilityUCMutSet[id] = obsies;
    }

    public void RemoveTemporaryCloneAICapabilityUCMutSetObserver(int id, ITemporaryCloneAICapabilityUCMutSetEffectObserver observer) {
      if (observersForTemporaryCloneAICapabilityUCMutSet.ContainsKey(id)) {
        var list = observersForTemporaryCloneAICapabilityUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForTemporaryCloneAICapabilityUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastTemporaryCloneAICapabilityUCMutSetEffects(
      SortedDictionary<int, List<ITemporaryCloneAICapabilityUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsTemporaryCloneAICapabilityUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ITemporaryCloneAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTemporaryCloneAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITemporaryCloneAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTemporaryCloneAICapabilityUCMutSetEffect(effect);
        }
        observersForTemporaryCloneAICapabilityUCMutSet.Remove(effect.id);
      }
    }
    effectsTemporaryCloneAICapabilityUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsTemporaryCloneAICapabilityUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ITemporaryCloneAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTemporaryCloneAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITemporaryCloneAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTemporaryCloneAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsTemporaryCloneAICapabilityUCMutSetAddEffect.Clear();

    foreach (var effect in effectsTemporaryCloneAICapabilityUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ITemporaryCloneAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTemporaryCloneAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITemporaryCloneAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTemporaryCloneAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsTemporaryCloneAICapabilityUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsTemporaryCloneAICapabilityUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ITemporaryCloneAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTemporaryCloneAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITemporaryCloneAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTemporaryCloneAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsTemporaryCloneAICapabilityUCMutSetCreateEffect.Clear();

  }

    public int GetSummonAICapabilityUCMutSetHash(int id, int version, SummonAICapabilityUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public SummonAICapabilityUCMutSetIncarnation GetSummonAICapabilityUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsSummonAICapabilityUCMutSet[id].incarnation;
    }
    public SummonAICapabilityUCMutSet GetSummonAICapabilityUCMutSet(int id) {
      return new SummonAICapabilityUCMutSet(this, id);
    }
    public List<SummonAICapabilityUCMutSet> AllSummonAICapabilityUCMutSet() {
      List<SummonAICapabilityUCMutSet> result = new List<SummonAICapabilityUCMutSet>(rootIncarnation.incarnationsSummonAICapabilityUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsSummonAICapabilityUCMutSet.Keys) {
        result.Add(new SummonAICapabilityUCMutSet(this, id));
      }
      return result;
    }
    public bool SummonAICapabilityUCMutSetExists(int id) {
      return rootIncarnation.incarnationsSummonAICapabilityUCMutSet.ContainsKey(id);
    }
    public void CheckHasSummonAICapabilityUCMutSet(SummonAICapabilityUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasSummonAICapabilityUCMutSet(thing.id);
    }
    public void CheckHasSummonAICapabilityUCMutSet(int id) {
      if (!rootIncarnation.incarnationsSummonAICapabilityUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid SummonAICapabilityUCMutSet}: " + id);
      }
    }
    public SummonAICapabilityUCMutSet EffectSummonAICapabilityUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new SummonAICapabilityUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateSummonAICapabilityUCMutSet(id, rootIncarnation.version, incarnation);
      return new SummonAICapabilityUCMutSet(this, id);
    }
    public void EffectInternalCreateSummonAICapabilityUCMutSet(int id, int incarnationVersion, SummonAICapabilityUCMutSetIncarnation incarnation) {
      var effect = new SummonAICapabilityUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsSummonAICapabilityUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<SummonAICapabilityUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsSummonAICapabilityUCMutSetCreateEffect.Add(effect);
    }
    public void EffectSummonAICapabilityUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new SummonAICapabilityUCMutSetDeleteEffect(id);
      effectsSummonAICapabilityUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsSummonAICapabilityUCMutSet[id];
      rootIncarnation.incarnationsSummonAICapabilityUCMutSet.Remove(id);
    }

       
    public void EffectSummonAICapabilityUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasSummonAICapabilityUCMutSet(setId);
      CheckHasSummonAICapabilityUC(elementId);

      var effect = new SummonAICapabilityUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsSummonAICapabilityUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new SummonAICapabilityUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsSummonAICapabilityUCMutSet[setId] =
            new VersionAndIncarnation<SummonAICapabilityUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsSummonAICapabilityUCMutSetAddEffect.Add(effect);
    }
    public void EffectSummonAICapabilityUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasSummonAICapabilityUCMutSet(setId);
      CheckHasSummonAICapabilityUC(elementId);

      var effect = new SummonAICapabilityUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsSummonAICapabilityUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new SummonAICapabilityUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsSummonAICapabilityUCMutSet[setId] =
            new VersionAndIncarnation<SummonAICapabilityUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsSummonAICapabilityUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddSummonAICapabilityUCMutSetObserver(int id, ISummonAICapabilityUCMutSetEffectObserver observer) {
      List<ISummonAICapabilityUCMutSetEffectObserver> obsies;
      if (!observersForSummonAICapabilityUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ISummonAICapabilityUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForSummonAICapabilityUCMutSet[id] = obsies;
    }

    public void RemoveSummonAICapabilityUCMutSetObserver(int id, ISummonAICapabilityUCMutSetEffectObserver observer) {
      if (observersForSummonAICapabilityUCMutSet.ContainsKey(id)) {
        var list = observersForSummonAICapabilityUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForSummonAICapabilityUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastSummonAICapabilityUCMutSetEffects(
      SortedDictionary<int, List<ISummonAICapabilityUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsSummonAICapabilityUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ISummonAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSummonAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISummonAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSummonAICapabilityUCMutSetEffect(effect);
        }
        observersForSummonAICapabilityUCMutSet.Remove(effect.id);
      }
    }
    effectsSummonAICapabilityUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsSummonAICapabilityUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ISummonAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSummonAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISummonAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSummonAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsSummonAICapabilityUCMutSetAddEffect.Clear();

    foreach (var effect in effectsSummonAICapabilityUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ISummonAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSummonAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISummonAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSummonAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsSummonAICapabilityUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsSummonAICapabilityUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ISummonAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSummonAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISummonAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSummonAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsSummonAICapabilityUCMutSetCreateEffect.Clear();

  }

    public int GetKamikazeAICapabilityUCMutSetHash(int id, int version, KamikazeAICapabilityUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public KamikazeAICapabilityUCMutSetIncarnation GetKamikazeAICapabilityUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsKamikazeAICapabilityUCMutSet[id].incarnation;
    }
    public KamikazeAICapabilityUCMutSet GetKamikazeAICapabilityUCMutSet(int id) {
      return new KamikazeAICapabilityUCMutSet(this, id);
    }
    public List<KamikazeAICapabilityUCMutSet> AllKamikazeAICapabilityUCMutSet() {
      List<KamikazeAICapabilityUCMutSet> result = new List<KamikazeAICapabilityUCMutSet>(rootIncarnation.incarnationsKamikazeAICapabilityUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsKamikazeAICapabilityUCMutSet.Keys) {
        result.Add(new KamikazeAICapabilityUCMutSet(this, id));
      }
      return result;
    }
    public bool KamikazeAICapabilityUCMutSetExists(int id) {
      return rootIncarnation.incarnationsKamikazeAICapabilityUCMutSet.ContainsKey(id);
    }
    public void CheckHasKamikazeAICapabilityUCMutSet(KamikazeAICapabilityUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasKamikazeAICapabilityUCMutSet(thing.id);
    }
    public void CheckHasKamikazeAICapabilityUCMutSet(int id) {
      if (!rootIncarnation.incarnationsKamikazeAICapabilityUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid KamikazeAICapabilityUCMutSet}: " + id);
      }
    }
    public KamikazeAICapabilityUCMutSet EffectKamikazeAICapabilityUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new KamikazeAICapabilityUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateKamikazeAICapabilityUCMutSet(id, rootIncarnation.version, incarnation);
      return new KamikazeAICapabilityUCMutSet(this, id);
    }
    public void EffectInternalCreateKamikazeAICapabilityUCMutSet(int id, int incarnationVersion, KamikazeAICapabilityUCMutSetIncarnation incarnation) {
      var effect = new KamikazeAICapabilityUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsKamikazeAICapabilityUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<KamikazeAICapabilityUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsKamikazeAICapabilityUCMutSetCreateEffect.Add(effect);
    }
    public void EffectKamikazeAICapabilityUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new KamikazeAICapabilityUCMutSetDeleteEffect(id);
      effectsKamikazeAICapabilityUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsKamikazeAICapabilityUCMutSet[id];
      rootIncarnation.incarnationsKamikazeAICapabilityUCMutSet.Remove(id);
    }

       
    public void EffectKamikazeAICapabilityUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasKamikazeAICapabilityUCMutSet(setId);
      CheckHasKamikazeAICapabilityUC(elementId);

      var effect = new KamikazeAICapabilityUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsKamikazeAICapabilityUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new KamikazeAICapabilityUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsKamikazeAICapabilityUCMutSet[setId] =
            new VersionAndIncarnation<KamikazeAICapabilityUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsKamikazeAICapabilityUCMutSetAddEffect.Add(effect);
    }
    public void EffectKamikazeAICapabilityUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasKamikazeAICapabilityUCMutSet(setId);
      CheckHasKamikazeAICapabilityUC(elementId);

      var effect = new KamikazeAICapabilityUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsKamikazeAICapabilityUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new KamikazeAICapabilityUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsKamikazeAICapabilityUCMutSet[setId] =
            new VersionAndIncarnation<KamikazeAICapabilityUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsKamikazeAICapabilityUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddKamikazeAICapabilityUCMutSetObserver(int id, IKamikazeAICapabilityUCMutSetEffectObserver observer) {
      List<IKamikazeAICapabilityUCMutSetEffectObserver> obsies;
      if (!observersForKamikazeAICapabilityUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IKamikazeAICapabilityUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForKamikazeAICapabilityUCMutSet[id] = obsies;
    }

    public void RemoveKamikazeAICapabilityUCMutSetObserver(int id, IKamikazeAICapabilityUCMutSetEffectObserver observer) {
      if (observersForKamikazeAICapabilityUCMutSet.ContainsKey(id)) {
        var list = observersForKamikazeAICapabilityUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForKamikazeAICapabilityUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastKamikazeAICapabilityUCMutSetEffects(
      SortedDictionary<int, List<IKamikazeAICapabilityUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsKamikazeAICapabilityUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeAICapabilityUCMutSetEffect(effect);
        }
        observersForKamikazeAICapabilityUCMutSet.Remove(effect.id);
      }
    }
    effectsKamikazeAICapabilityUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsKamikazeAICapabilityUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsKamikazeAICapabilityUCMutSetAddEffect.Clear();

    foreach (var effect in effectsKamikazeAICapabilityUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsKamikazeAICapabilityUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsKamikazeAICapabilityUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsKamikazeAICapabilityUCMutSetCreateEffect.Clear();

  }

    public int GetGuardAICapabilityUCMutSetHash(int id, int version, GuardAICapabilityUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public GuardAICapabilityUCMutSetIncarnation GetGuardAICapabilityUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsGuardAICapabilityUCMutSet[id].incarnation;
    }
    public GuardAICapabilityUCMutSet GetGuardAICapabilityUCMutSet(int id) {
      return new GuardAICapabilityUCMutSet(this, id);
    }
    public List<GuardAICapabilityUCMutSet> AllGuardAICapabilityUCMutSet() {
      List<GuardAICapabilityUCMutSet> result = new List<GuardAICapabilityUCMutSet>(rootIncarnation.incarnationsGuardAICapabilityUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsGuardAICapabilityUCMutSet.Keys) {
        result.Add(new GuardAICapabilityUCMutSet(this, id));
      }
      return result;
    }
    public bool GuardAICapabilityUCMutSetExists(int id) {
      return rootIncarnation.incarnationsGuardAICapabilityUCMutSet.ContainsKey(id);
    }
    public void CheckHasGuardAICapabilityUCMutSet(GuardAICapabilityUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasGuardAICapabilityUCMutSet(thing.id);
    }
    public void CheckHasGuardAICapabilityUCMutSet(int id) {
      if (!rootIncarnation.incarnationsGuardAICapabilityUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid GuardAICapabilityUCMutSet}: " + id);
      }
    }
    public GuardAICapabilityUCMutSet EffectGuardAICapabilityUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new GuardAICapabilityUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateGuardAICapabilityUCMutSet(id, rootIncarnation.version, incarnation);
      return new GuardAICapabilityUCMutSet(this, id);
    }
    public void EffectInternalCreateGuardAICapabilityUCMutSet(int id, int incarnationVersion, GuardAICapabilityUCMutSetIncarnation incarnation) {
      var effect = new GuardAICapabilityUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsGuardAICapabilityUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<GuardAICapabilityUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsGuardAICapabilityUCMutSetCreateEffect.Add(effect);
    }
    public void EffectGuardAICapabilityUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new GuardAICapabilityUCMutSetDeleteEffect(id);
      effectsGuardAICapabilityUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsGuardAICapabilityUCMutSet[id];
      rootIncarnation.incarnationsGuardAICapabilityUCMutSet.Remove(id);
    }

       
    public void EffectGuardAICapabilityUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasGuardAICapabilityUCMutSet(setId);
      CheckHasGuardAICapabilityUC(elementId);

      var effect = new GuardAICapabilityUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsGuardAICapabilityUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new GuardAICapabilityUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsGuardAICapabilityUCMutSet[setId] =
            new VersionAndIncarnation<GuardAICapabilityUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsGuardAICapabilityUCMutSetAddEffect.Add(effect);
    }
    public void EffectGuardAICapabilityUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasGuardAICapabilityUCMutSet(setId);
      CheckHasGuardAICapabilityUC(elementId);

      var effect = new GuardAICapabilityUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsGuardAICapabilityUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new GuardAICapabilityUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsGuardAICapabilityUCMutSet[setId] =
            new VersionAndIncarnation<GuardAICapabilityUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsGuardAICapabilityUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddGuardAICapabilityUCMutSetObserver(int id, IGuardAICapabilityUCMutSetEffectObserver observer) {
      List<IGuardAICapabilityUCMutSetEffectObserver> obsies;
      if (!observersForGuardAICapabilityUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IGuardAICapabilityUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForGuardAICapabilityUCMutSet[id] = obsies;
    }

    public void RemoveGuardAICapabilityUCMutSetObserver(int id, IGuardAICapabilityUCMutSetEffectObserver observer) {
      if (observersForGuardAICapabilityUCMutSet.ContainsKey(id)) {
        var list = observersForGuardAICapabilityUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForGuardAICapabilityUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastGuardAICapabilityUCMutSetEffects(
      SortedDictionary<int, List<IGuardAICapabilityUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsGuardAICapabilityUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IGuardAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGuardAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGuardAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGuardAICapabilityUCMutSetEffect(effect);
        }
        observersForGuardAICapabilityUCMutSet.Remove(effect.id);
      }
    }
    effectsGuardAICapabilityUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsGuardAICapabilityUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IGuardAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGuardAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGuardAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGuardAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsGuardAICapabilityUCMutSetAddEffect.Clear();

    foreach (var effect in effectsGuardAICapabilityUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IGuardAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGuardAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGuardAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGuardAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsGuardAICapabilityUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsGuardAICapabilityUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IGuardAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGuardAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGuardAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGuardAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsGuardAICapabilityUCMutSetCreateEffect.Clear();

  }

    public int GetTimeCloneAICapabilityUCMutSetHash(int id, int version, TimeCloneAICapabilityUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public TimeCloneAICapabilityUCMutSetIncarnation GetTimeCloneAICapabilityUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsTimeCloneAICapabilityUCMutSet[id].incarnation;
    }
    public TimeCloneAICapabilityUCMutSet GetTimeCloneAICapabilityUCMutSet(int id) {
      return new TimeCloneAICapabilityUCMutSet(this, id);
    }
    public List<TimeCloneAICapabilityUCMutSet> AllTimeCloneAICapabilityUCMutSet() {
      List<TimeCloneAICapabilityUCMutSet> result = new List<TimeCloneAICapabilityUCMutSet>(rootIncarnation.incarnationsTimeCloneAICapabilityUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsTimeCloneAICapabilityUCMutSet.Keys) {
        result.Add(new TimeCloneAICapabilityUCMutSet(this, id));
      }
      return result;
    }
    public bool TimeCloneAICapabilityUCMutSetExists(int id) {
      return rootIncarnation.incarnationsTimeCloneAICapabilityUCMutSet.ContainsKey(id);
    }
    public void CheckHasTimeCloneAICapabilityUCMutSet(TimeCloneAICapabilityUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasTimeCloneAICapabilityUCMutSet(thing.id);
    }
    public void CheckHasTimeCloneAICapabilityUCMutSet(int id) {
      if (!rootIncarnation.incarnationsTimeCloneAICapabilityUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid TimeCloneAICapabilityUCMutSet}: " + id);
      }
    }
    public TimeCloneAICapabilityUCMutSet EffectTimeCloneAICapabilityUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new TimeCloneAICapabilityUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateTimeCloneAICapabilityUCMutSet(id, rootIncarnation.version, incarnation);
      return new TimeCloneAICapabilityUCMutSet(this, id);
    }
    public void EffectInternalCreateTimeCloneAICapabilityUCMutSet(int id, int incarnationVersion, TimeCloneAICapabilityUCMutSetIncarnation incarnation) {
      var effect = new TimeCloneAICapabilityUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsTimeCloneAICapabilityUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<TimeCloneAICapabilityUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsTimeCloneAICapabilityUCMutSetCreateEffect.Add(effect);
    }
    public void EffectTimeCloneAICapabilityUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new TimeCloneAICapabilityUCMutSetDeleteEffect(id);
      effectsTimeCloneAICapabilityUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsTimeCloneAICapabilityUCMutSet[id];
      rootIncarnation.incarnationsTimeCloneAICapabilityUCMutSet.Remove(id);
    }

       
    public void EffectTimeCloneAICapabilityUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasTimeCloneAICapabilityUCMutSet(setId);
      CheckHasTimeCloneAICapabilityUC(elementId);

      var effect = new TimeCloneAICapabilityUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsTimeCloneAICapabilityUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new TimeCloneAICapabilityUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsTimeCloneAICapabilityUCMutSet[setId] =
            new VersionAndIncarnation<TimeCloneAICapabilityUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsTimeCloneAICapabilityUCMutSetAddEffect.Add(effect);
    }
    public void EffectTimeCloneAICapabilityUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasTimeCloneAICapabilityUCMutSet(setId);
      CheckHasTimeCloneAICapabilityUC(elementId);

      var effect = new TimeCloneAICapabilityUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsTimeCloneAICapabilityUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new TimeCloneAICapabilityUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsTimeCloneAICapabilityUCMutSet[setId] =
            new VersionAndIncarnation<TimeCloneAICapabilityUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsTimeCloneAICapabilityUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddTimeCloneAICapabilityUCMutSetObserver(int id, ITimeCloneAICapabilityUCMutSetEffectObserver observer) {
      List<ITimeCloneAICapabilityUCMutSetEffectObserver> obsies;
      if (!observersForTimeCloneAICapabilityUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ITimeCloneAICapabilityUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForTimeCloneAICapabilityUCMutSet[id] = obsies;
    }

    public void RemoveTimeCloneAICapabilityUCMutSetObserver(int id, ITimeCloneAICapabilityUCMutSetEffectObserver observer) {
      if (observersForTimeCloneAICapabilityUCMutSet.ContainsKey(id)) {
        var list = observersForTimeCloneAICapabilityUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForTimeCloneAICapabilityUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastTimeCloneAICapabilityUCMutSetEffects(
      SortedDictionary<int, List<ITimeCloneAICapabilityUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsTimeCloneAICapabilityUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ITimeCloneAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTimeCloneAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITimeCloneAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTimeCloneAICapabilityUCMutSetEffect(effect);
        }
        observersForTimeCloneAICapabilityUCMutSet.Remove(effect.id);
      }
    }
    effectsTimeCloneAICapabilityUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsTimeCloneAICapabilityUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ITimeCloneAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTimeCloneAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITimeCloneAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTimeCloneAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsTimeCloneAICapabilityUCMutSetAddEffect.Clear();

    foreach (var effect in effectsTimeCloneAICapabilityUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ITimeCloneAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTimeCloneAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITimeCloneAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTimeCloneAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsTimeCloneAICapabilityUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsTimeCloneAICapabilityUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ITimeCloneAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTimeCloneAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITimeCloneAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTimeCloneAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsTimeCloneAICapabilityUCMutSetCreateEffect.Clear();

  }

    public int GetDoomedUCMutSetHash(int id, int version, DoomedUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public DoomedUCMutSetIncarnation GetDoomedUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsDoomedUCMutSet[id].incarnation;
    }
    public DoomedUCMutSet GetDoomedUCMutSet(int id) {
      return new DoomedUCMutSet(this, id);
    }
    public List<DoomedUCMutSet> AllDoomedUCMutSet() {
      List<DoomedUCMutSet> result = new List<DoomedUCMutSet>(rootIncarnation.incarnationsDoomedUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsDoomedUCMutSet.Keys) {
        result.Add(new DoomedUCMutSet(this, id));
      }
      return result;
    }
    public bool DoomedUCMutSetExists(int id) {
      return rootIncarnation.incarnationsDoomedUCMutSet.ContainsKey(id);
    }
    public void CheckHasDoomedUCMutSet(DoomedUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasDoomedUCMutSet(thing.id);
    }
    public void CheckHasDoomedUCMutSet(int id) {
      if (!rootIncarnation.incarnationsDoomedUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid DoomedUCMutSet}: " + id);
      }
    }
    public DoomedUCMutSet EffectDoomedUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new DoomedUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateDoomedUCMutSet(id, rootIncarnation.version, incarnation);
      return new DoomedUCMutSet(this, id);
    }
    public void EffectInternalCreateDoomedUCMutSet(int id, int incarnationVersion, DoomedUCMutSetIncarnation incarnation) {
      var effect = new DoomedUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsDoomedUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<DoomedUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsDoomedUCMutSetCreateEffect.Add(effect);
    }
    public void EffectDoomedUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new DoomedUCMutSetDeleteEffect(id);
      effectsDoomedUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsDoomedUCMutSet[id];
      rootIncarnation.incarnationsDoomedUCMutSet.Remove(id);
    }

       
    public void EffectDoomedUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasDoomedUCMutSet(setId);
      CheckHasDoomedUC(elementId);

      var effect = new DoomedUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsDoomedUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new DoomedUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsDoomedUCMutSet[setId] =
            new VersionAndIncarnation<DoomedUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsDoomedUCMutSetAddEffect.Add(effect);
    }
    public void EffectDoomedUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasDoomedUCMutSet(setId);
      CheckHasDoomedUC(elementId);

      var effect = new DoomedUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsDoomedUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new DoomedUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsDoomedUCMutSet[setId] =
            new VersionAndIncarnation<DoomedUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsDoomedUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddDoomedUCMutSetObserver(int id, IDoomedUCMutSetEffectObserver observer) {
      List<IDoomedUCMutSetEffectObserver> obsies;
      if (!observersForDoomedUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IDoomedUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForDoomedUCMutSet[id] = obsies;
    }

    public void RemoveDoomedUCMutSetObserver(int id, IDoomedUCMutSetEffectObserver observer) {
      if (observersForDoomedUCMutSet.ContainsKey(id)) {
        var list = observersForDoomedUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForDoomedUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastDoomedUCMutSetEffects(
      SortedDictionary<int, List<IDoomedUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsDoomedUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IDoomedUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDoomedUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDoomedUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDoomedUCMutSetEffect(effect);
        }
        observersForDoomedUCMutSet.Remove(effect.id);
      }
    }
    effectsDoomedUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsDoomedUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IDoomedUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDoomedUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDoomedUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDoomedUCMutSetEffect(effect);
        }
      }
    }
    effectsDoomedUCMutSetAddEffect.Clear();

    foreach (var effect in effectsDoomedUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IDoomedUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDoomedUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDoomedUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDoomedUCMutSetEffect(effect);
        }
      }
    }
    effectsDoomedUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsDoomedUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IDoomedUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDoomedUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDoomedUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDoomedUCMutSetEffect(effect);
        }
      }
    }
    effectsDoomedUCMutSetCreateEffect.Clear();

  }

    public int GetMiredUCMutSetHash(int id, int version, MiredUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public MiredUCMutSetIncarnation GetMiredUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsMiredUCMutSet[id].incarnation;
    }
    public MiredUCMutSet GetMiredUCMutSet(int id) {
      return new MiredUCMutSet(this, id);
    }
    public List<MiredUCMutSet> AllMiredUCMutSet() {
      List<MiredUCMutSet> result = new List<MiredUCMutSet>(rootIncarnation.incarnationsMiredUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsMiredUCMutSet.Keys) {
        result.Add(new MiredUCMutSet(this, id));
      }
      return result;
    }
    public bool MiredUCMutSetExists(int id) {
      return rootIncarnation.incarnationsMiredUCMutSet.ContainsKey(id);
    }
    public void CheckHasMiredUCMutSet(MiredUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasMiredUCMutSet(thing.id);
    }
    public void CheckHasMiredUCMutSet(int id) {
      if (!rootIncarnation.incarnationsMiredUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid MiredUCMutSet}: " + id);
      }
    }
    public MiredUCMutSet EffectMiredUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new MiredUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateMiredUCMutSet(id, rootIncarnation.version, incarnation);
      return new MiredUCMutSet(this, id);
    }
    public void EffectInternalCreateMiredUCMutSet(int id, int incarnationVersion, MiredUCMutSetIncarnation incarnation) {
      var effect = new MiredUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsMiredUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<MiredUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsMiredUCMutSetCreateEffect.Add(effect);
    }
    public void EffectMiredUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new MiredUCMutSetDeleteEffect(id);
      effectsMiredUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsMiredUCMutSet[id];
      rootIncarnation.incarnationsMiredUCMutSet.Remove(id);
    }

       
    public void EffectMiredUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasMiredUCMutSet(setId);
      CheckHasMiredUC(elementId);

      var effect = new MiredUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsMiredUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new MiredUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsMiredUCMutSet[setId] =
            new VersionAndIncarnation<MiredUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsMiredUCMutSetAddEffect.Add(effect);
    }
    public void EffectMiredUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasMiredUCMutSet(setId);
      CheckHasMiredUC(elementId);

      var effect = new MiredUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsMiredUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new MiredUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsMiredUCMutSet[setId] =
            new VersionAndIncarnation<MiredUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsMiredUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddMiredUCMutSetObserver(int id, IMiredUCMutSetEffectObserver observer) {
      List<IMiredUCMutSetEffectObserver> obsies;
      if (!observersForMiredUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IMiredUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForMiredUCMutSet[id] = obsies;
    }

    public void RemoveMiredUCMutSetObserver(int id, IMiredUCMutSetEffectObserver observer) {
      if (observersForMiredUCMutSet.ContainsKey(id)) {
        var list = observersForMiredUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForMiredUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastMiredUCMutSetEffects(
      SortedDictionary<int, List<IMiredUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsMiredUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IMiredUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMiredUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMiredUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMiredUCMutSetEffect(effect);
        }
        observersForMiredUCMutSet.Remove(effect.id);
      }
    }
    effectsMiredUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsMiredUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IMiredUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMiredUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMiredUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMiredUCMutSetEffect(effect);
        }
      }
    }
    effectsMiredUCMutSetAddEffect.Clear();

    foreach (var effect in effectsMiredUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IMiredUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMiredUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMiredUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMiredUCMutSetEffect(effect);
        }
      }
    }
    effectsMiredUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsMiredUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IMiredUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnMiredUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IMiredUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnMiredUCMutSetEffect(effect);
        }
      }
    }
    effectsMiredUCMutSetCreateEffect.Clear();

  }

    public int GetAttackAICapabilityUCMutSetHash(int id, int version, AttackAICapabilityUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public AttackAICapabilityUCMutSetIncarnation GetAttackAICapabilityUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsAttackAICapabilityUCMutSet[id].incarnation;
    }
    public AttackAICapabilityUCMutSet GetAttackAICapabilityUCMutSet(int id) {
      return new AttackAICapabilityUCMutSet(this, id);
    }
    public List<AttackAICapabilityUCMutSet> AllAttackAICapabilityUCMutSet() {
      List<AttackAICapabilityUCMutSet> result = new List<AttackAICapabilityUCMutSet>(rootIncarnation.incarnationsAttackAICapabilityUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsAttackAICapabilityUCMutSet.Keys) {
        result.Add(new AttackAICapabilityUCMutSet(this, id));
      }
      return result;
    }
    public bool AttackAICapabilityUCMutSetExists(int id) {
      return rootIncarnation.incarnationsAttackAICapabilityUCMutSet.ContainsKey(id);
    }
    public void CheckHasAttackAICapabilityUCMutSet(AttackAICapabilityUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasAttackAICapabilityUCMutSet(thing.id);
    }
    public void CheckHasAttackAICapabilityUCMutSet(int id) {
      if (!rootIncarnation.incarnationsAttackAICapabilityUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid AttackAICapabilityUCMutSet}: " + id);
      }
    }
    public AttackAICapabilityUCMutSet EffectAttackAICapabilityUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new AttackAICapabilityUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateAttackAICapabilityUCMutSet(id, rootIncarnation.version, incarnation);
      return new AttackAICapabilityUCMutSet(this, id);
    }
    public void EffectInternalCreateAttackAICapabilityUCMutSet(int id, int incarnationVersion, AttackAICapabilityUCMutSetIncarnation incarnation) {
      var effect = new AttackAICapabilityUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsAttackAICapabilityUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<AttackAICapabilityUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsAttackAICapabilityUCMutSetCreateEffect.Add(effect);
    }
    public void EffectAttackAICapabilityUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new AttackAICapabilityUCMutSetDeleteEffect(id);
      effectsAttackAICapabilityUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsAttackAICapabilityUCMutSet[id];
      rootIncarnation.incarnationsAttackAICapabilityUCMutSet.Remove(id);
    }

       
    public void EffectAttackAICapabilityUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasAttackAICapabilityUCMutSet(setId);
      CheckHasAttackAICapabilityUC(elementId);

      var effect = new AttackAICapabilityUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsAttackAICapabilityUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new AttackAICapabilityUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsAttackAICapabilityUCMutSet[setId] =
            new VersionAndIncarnation<AttackAICapabilityUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsAttackAICapabilityUCMutSetAddEffect.Add(effect);
    }
    public void EffectAttackAICapabilityUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasAttackAICapabilityUCMutSet(setId);
      CheckHasAttackAICapabilityUC(elementId);

      var effect = new AttackAICapabilityUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsAttackAICapabilityUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new AttackAICapabilityUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsAttackAICapabilityUCMutSet[setId] =
            new VersionAndIncarnation<AttackAICapabilityUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsAttackAICapabilityUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddAttackAICapabilityUCMutSetObserver(int id, IAttackAICapabilityUCMutSetEffectObserver observer) {
      List<IAttackAICapabilityUCMutSetEffectObserver> obsies;
      if (!observersForAttackAICapabilityUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IAttackAICapabilityUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForAttackAICapabilityUCMutSet[id] = obsies;
    }

    public void RemoveAttackAICapabilityUCMutSetObserver(int id, IAttackAICapabilityUCMutSetEffectObserver observer) {
      if (observersForAttackAICapabilityUCMutSet.ContainsKey(id)) {
        var list = observersForAttackAICapabilityUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForAttackAICapabilityUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastAttackAICapabilityUCMutSetEffects(
      SortedDictionary<int, List<IAttackAICapabilityUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsAttackAICapabilityUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IAttackAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAttackAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAttackAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAttackAICapabilityUCMutSetEffect(effect);
        }
        observersForAttackAICapabilityUCMutSet.Remove(effect.id);
      }
    }
    effectsAttackAICapabilityUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsAttackAICapabilityUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IAttackAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAttackAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAttackAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAttackAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsAttackAICapabilityUCMutSetAddEffect.Clear();

    foreach (var effect in effectsAttackAICapabilityUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IAttackAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAttackAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAttackAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAttackAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsAttackAICapabilityUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsAttackAICapabilityUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IAttackAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnAttackAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IAttackAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnAttackAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsAttackAICapabilityUCMutSetCreateEffect.Clear();

  }

    public int GetCounteringUCMutSetHash(int id, int version, CounteringUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public CounteringUCMutSetIncarnation GetCounteringUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsCounteringUCMutSet[id].incarnation;
    }
    public CounteringUCMutSet GetCounteringUCMutSet(int id) {
      return new CounteringUCMutSet(this, id);
    }
    public List<CounteringUCMutSet> AllCounteringUCMutSet() {
      List<CounteringUCMutSet> result = new List<CounteringUCMutSet>(rootIncarnation.incarnationsCounteringUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsCounteringUCMutSet.Keys) {
        result.Add(new CounteringUCMutSet(this, id));
      }
      return result;
    }
    public bool CounteringUCMutSetExists(int id) {
      return rootIncarnation.incarnationsCounteringUCMutSet.ContainsKey(id);
    }
    public void CheckHasCounteringUCMutSet(CounteringUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasCounteringUCMutSet(thing.id);
    }
    public void CheckHasCounteringUCMutSet(int id) {
      if (!rootIncarnation.incarnationsCounteringUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid CounteringUCMutSet}: " + id);
      }
    }
    public CounteringUCMutSet EffectCounteringUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new CounteringUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateCounteringUCMutSet(id, rootIncarnation.version, incarnation);
      return new CounteringUCMutSet(this, id);
    }
    public void EffectInternalCreateCounteringUCMutSet(int id, int incarnationVersion, CounteringUCMutSetIncarnation incarnation) {
      var effect = new CounteringUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsCounteringUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<CounteringUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsCounteringUCMutSetCreateEffect.Add(effect);
    }
    public void EffectCounteringUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new CounteringUCMutSetDeleteEffect(id);
      effectsCounteringUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsCounteringUCMutSet[id];
      rootIncarnation.incarnationsCounteringUCMutSet.Remove(id);
    }

       
    public void EffectCounteringUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasCounteringUCMutSet(setId);
      CheckHasCounteringUC(elementId);

      var effect = new CounteringUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsCounteringUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new CounteringUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsCounteringUCMutSet[setId] =
            new VersionAndIncarnation<CounteringUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsCounteringUCMutSetAddEffect.Add(effect);
    }
    public void EffectCounteringUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasCounteringUCMutSet(setId);
      CheckHasCounteringUC(elementId);

      var effect = new CounteringUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsCounteringUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new CounteringUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsCounteringUCMutSet[setId] =
            new VersionAndIncarnation<CounteringUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsCounteringUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddCounteringUCMutSetObserver(int id, ICounteringUCMutSetEffectObserver observer) {
      List<ICounteringUCMutSetEffectObserver> obsies;
      if (!observersForCounteringUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ICounteringUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForCounteringUCMutSet[id] = obsies;
    }

    public void RemoveCounteringUCMutSetObserver(int id, ICounteringUCMutSetEffectObserver observer) {
      if (observersForCounteringUCMutSet.ContainsKey(id)) {
        var list = observersForCounteringUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForCounteringUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastCounteringUCMutSetEffects(
      SortedDictionary<int, List<ICounteringUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsCounteringUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ICounteringUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCounteringUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICounteringUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCounteringUCMutSetEffect(effect);
        }
        observersForCounteringUCMutSet.Remove(effect.id);
      }
    }
    effectsCounteringUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsCounteringUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ICounteringUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCounteringUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICounteringUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCounteringUCMutSetEffect(effect);
        }
      }
    }
    effectsCounteringUCMutSetAddEffect.Clear();

    foreach (var effect in effectsCounteringUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ICounteringUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCounteringUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICounteringUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCounteringUCMutSetEffect(effect);
        }
      }
    }
    effectsCounteringUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsCounteringUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ICounteringUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnCounteringUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ICounteringUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnCounteringUCMutSetEffect(effect);
        }
      }
    }
    effectsCounteringUCMutSetCreateEffect.Clear();

  }

    public int GetLightningChargedUCMutSetHash(int id, int version, LightningChargedUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public LightningChargedUCMutSetIncarnation GetLightningChargedUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsLightningChargedUCMutSet[id].incarnation;
    }
    public LightningChargedUCMutSet GetLightningChargedUCMutSet(int id) {
      return new LightningChargedUCMutSet(this, id);
    }
    public List<LightningChargedUCMutSet> AllLightningChargedUCMutSet() {
      List<LightningChargedUCMutSet> result = new List<LightningChargedUCMutSet>(rootIncarnation.incarnationsLightningChargedUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsLightningChargedUCMutSet.Keys) {
        result.Add(new LightningChargedUCMutSet(this, id));
      }
      return result;
    }
    public bool LightningChargedUCMutSetExists(int id) {
      return rootIncarnation.incarnationsLightningChargedUCMutSet.ContainsKey(id);
    }
    public void CheckHasLightningChargedUCMutSet(LightningChargedUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasLightningChargedUCMutSet(thing.id);
    }
    public void CheckHasLightningChargedUCMutSet(int id) {
      if (!rootIncarnation.incarnationsLightningChargedUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid LightningChargedUCMutSet}: " + id);
      }
    }
    public LightningChargedUCMutSet EffectLightningChargedUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new LightningChargedUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateLightningChargedUCMutSet(id, rootIncarnation.version, incarnation);
      return new LightningChargedUCMutSet(this, id);
    }
    public void EffectInternalCreateLightningChargedUCMutSet(int id, int incarnationVersion, LightningChargedUCMutSetIncarnation incarnation) {
      var effect = new LightningChargedUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsLightningChargedUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<LightningChargedUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsLightningChargedUCMutSetCreateEffect.Add(effect);
    }
    public void EffectLightningChargedUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new LightningChargedUCMutSetDeleteEffect(id);
      effectsLightningChargedUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsLightningChargedUCMutSet[id];
      rootIncarnation.incarnationsLightningChargedUCMutSet.Remove(id);
    }

       
    public void EffectLightningChargedUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasLightningChargedUCMutSet(setId);
      CheckHasLightningChargedUC(elementId);

      var effect = new LightningChargedUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsLightningChargedUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new LightningChargedUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsLightningChargedUCMutSet[setId] =
            new VersionAndIncarnation<LightningChargedUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsLightningChargedUCMutSetAddEffect.Add(effect);
    }
    public void EffectLightningChargedUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasLightningChargedUCMutSet(setId);
      CheckHasLightningChargedUC(elementId);

      var effect = new LightningChargedUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsLightningChargedUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new LightningChargedUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsLightningChargedUCMutSet[setId] =
            new VersionAndIncarnation<LightningChargedUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsLightningChargedUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddLightningChargedUCMutSetObserver(int id, ILightningChargedUCMutSetEffectObserver observer) {
      List<ILightningChargedUCMutSetEffectObserver> obsies;
      if (!observersForLightningChargedUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ILightningChargedUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForLightningChargedUCMutSet[id] = obsies;
    }

    public void RemoveLightningChargedUCMutSetObserver(int id, ILightningChargedUCMutSetEffectObserver observer) {
      if (observersForLightningChargedUCMutSet.ContainsKey(id)) {
        var list = observersForLightningChargedUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForLightningChargedUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastLightningChargedUCMutSetEffects(
      SortedDictionary<int, List<ILightningChargedUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsLightningChargedUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ILightningChargedUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLightningChargedUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILightningChargedUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLightningChargedUCMutSetEffect(effect);
        }
        observersForLightningChargedUCMutSet.Remove(effect.id);
      }
    }
    effectsLightningChargedUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsLightningChargedUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ILightningChargedUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLightningChargedUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILightningChargedUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLightningChargedUCMutSetEffect(effect);
        }
      }
    }
    effectsLightningChargedUCMutSetAddEffect.Clear();

    foreach (var effect in effectsLightningChargedUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ILightningChargedUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLightningChargedUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILightningChargedUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLightningChargedUCMutSetEffect(effect);
        }
      }
    }
    effectsLightningChargedUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsLightningChargedUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ILightningChargedUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnLightningChargedUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ILightningChargedUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnLightningChargedUCMutSetEffect(effect);
        }
      }
    }
    effectsLightningChargedUCMutSetCreateEffect.Clear();

  }

    public int GetInvincibilityUCMutSetHash(int id, int version, InvincibilityUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public InvincibilityUCMutSetIncarnation GetInvincibilityUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsInvincibilityUCMutSet[id].incarnation;
    }
    public InvincibilityUCMutSet GetInvincibilityUCMutSet(int id) {
      return new InvincibilityUCMutSet(this, id);
    }
    public List<InvincibilityUCMutSet> AllInvincibilityUCMutSet() {
      List<InvincibilityUCMutSet> result = new List<InvincibilityUCMutSet>(rootIncarnation.incarnationsInvincibilityUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsInvincibilityUCMutSet.Keys) {
        result.Add(new InvincibilityUCMutSet(this, id));
      }
      return result;
    }
    public bool InvincibilityUCMutSetExists(int id) {
      return rootIncarnation.incarnationsInvincibilityUCMutSet.ContainsKey(id);
    }
    public void CheckHasInvincibilityUCMutSet(InvincibilityUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasInvincibilityUCMutSet(thing.id);
    }
    public void CheckHasInvincibilityUCMutSet(int id) {
      if (!rootIncarnation.incarnationsInvincibilityUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid InvincibilityUCMutSet}: " + id);
      }
    }
    public InvincibilityUCMutSet EffectInvincibilityUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new InvincibilityUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateInvincibilityUCMutSet(id, rootIncarnation.version, incarnation);
      return new InvincibilityUCMutSet(this, id);
    }
    public void EffectInternalCreateInvincibilityUCMutSet(int id, int incarnationVersion, InvincibilityUCMutSetIncarnation incarnation) {
      var effect = new InvincibilityUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsInvincibilityUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<InvincibilityUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsInvincibilityUCMutSetCreateEffect.Add(effect);
    }
    public void EffectInvincibilityUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new InvincibilityUCMutSetDeleteEffect(id);
      effectsInvincibilityUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsInvincibilityUCMutSet[id];
      rootIncarnation.incarnationsInvincibilityUCMutSet.Remove(id);
    }

       
    public void EffectInvincibilityUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasInvincibilityUCMutSet(setId);
      CheckHasInvincibilityUC(elementId);

      var effect = new InvincibilityUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsInvincibilityUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new InvincibilityUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsInvincibilityUCMutSet[setId] =
            new VersionAndIncarnation<InvincibilityUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsInvincibilityUCMutSetAddEffect.Add(effect);
    }
    public void EffectInvincibilityUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasInvincibilityUCMutSet(setId);
      CheckHasInvincibilityUC(elementId);

      var effect = new InvincibilityUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsInvincibilityUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new InvincibilityUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsInvincibilityUCMutSet[setId] =
            new VersionAndIncarnation<InvincibilityUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsInvincibilityUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddInvincibilityUCMutSetObserver(int id, IInvincibilityUCMutSetEffectObserver observer) {
      List<IInvincibilityUCMutSetEffectObserver> obsies;
      if (!observersForInvincibilityUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IInvincibilityUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForInvincibilityUCMutSet[id] = obsies;
    }

    public void RemoveInvincibilityUCMutSetObserver(int id, IInvincibilityUCMutSetEffectObserver observer) {
      if (observersForInvincibilityUCMutSet.ContainsKey(id)) {
        var list = observersForInvincibilityUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForInvincibilityUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastInvincibilityUCMutSetEffects(
      SortedDictionary<int, List<IInvincibilityUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsInvincibilityUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IInvincibilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnInvincibilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IInvincibilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnInvincibilityUCMutSetEffect(effect);
        }
        observersForInvincibilityUCMutSet.Remove(effect.id);
      }
    }
    effectsInvincibilityUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsInvincibilityUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IInvincibilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnInvincibilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IInvincibilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnInvincibilityUCMutSetEffect(effect);
        }
      }
    }
    effectsInvincibilityUCMutSetAddEffect.Clear();

    foreach (var effect in effectsInvincibilityUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IInvincibilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnInvincibilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IInvincibilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnInvincibilityUCMutSetEffect(effect);
        }
      }
    }
    effectsInvincibilityUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsInvincibilityUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IInvincibilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnInvincibilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IInvincibilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnInvincibilityUCMutSetEffect(effect);
        }
      }
    }
    effectsInvincibilityUCMutSetCreateEffect.Clear();

  }

    public int GetDefyingUCMutSetHash(int id, int version, DefyingUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public DefyingUCMutSetIncarnation GetDefyingUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsDefyingUCMutSet[id].incarnation;
    }
    public DefyingUCMutSet GetDefyingUCMutSet(int id) {
      return new DefyingUCMutSet(this, id);
    }
    public List<DefyingUCMutSet> AllDefyingUCMutSet() {
      List<DefyingUCMutSet> result = new List<DefyingUCMutSet>(rootIncarnation.incarnationsDefyingUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsDefyingUCMutSet.Keys) {
        result.Add(new DefyingUCMutSet(this, id));
      }
      return result;
    }
    public bool DefyingUCMutSetExists(int id) {
      return rootIncarnation.incarnationsDefyingUCMutSet.ContainsKey(id);
    }
    public void CheckHasDefyingUCMutSet(DefyingUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasDefyingUCMutSet(thing.id);
    }
    public void CheckHasDefyingUCMutSet(int id) {
      if (!rootIncarnation.incarnationsDefyingUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid DefyingUCMutSet}: " + id);
      }
    }
    public DefyingUCMutSet EffectDefyingUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new DefyingUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateDefyingUCMutSet(id, rootIncarnation.version, incarnation);
      return new DefyingUCMutSet(this, id);
    }
    public void EffectInternalCreateDefyingUCMutSet(int id, int incarnationVersion, DefyingUCMutSetIncarnation incarnation) {
      var effect = new DefyingUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsDefyingUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<DefyingUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsDefyingUCMutSetCreateEffect.Add(effect);
    }
    public void EffectDefyingUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new DefyingUCMutSetDeleteEffect(id);
      effectsDefyingUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsDefyingUCMutSet[id];
      rootIncarnation.incarnationsDefyingUCMutSet.Remove(id);
    }

       
    public void EffectDefyingUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasDefyingUCMutSet(setId);
      CheckHasDefyingUC(elementId);

      var effect = new DefyingUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsDefyingUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new DefyingUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsDefyingUCMutSet[setId] =
            new VersionAndIncarnation<DefyingUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsDefyingUCMutSetAddEffect.Add(effect);
    }
    public void EffectDefyingUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasDefyingUCMutSet(setId);
      CheckHasDefyingUC(elementId);

      var effect = new DefyingUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsDefyingUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new DefyingUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsDefyingUCMutSet[setId] =
            new VersionAndIncarnation<DefyingUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsDefyingUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddDefyingUCMutSetObserver(int id, IDefyingUCMutSetEffectObserver observer) {
      List<IDefyingUCMutSetEffectObserver> obsies;
      if (!observersForDefyingUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IDefyingUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForDefyingUCMutSet[id] = obsies;
    }

    public void RemoveDefyingUCMutSetObserver(int id, IDefyingUCMutSetEffectObserver observer) {
      if (observersForDefyingUCMutSet.ContainsKey(id)) {
        var list = observersForDefyingUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForDefyingUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastDefyingUCMutSetEffects(
      SortedDictionary<int, List<IDefyingUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsDefyingUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IDefyingUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDefyingUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDefyingUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDefyingUCMutSetEffect(effect);
        }
        observersForDefyingUCMutSet.Remove(effect.id);
      }
    }
    effectsDefyingUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsDefyingUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IDefyingUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDefyingUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDefyingUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDefyingUCMutSetEffect(effect);
        }
      }
    }
    effectsDefyingUCMutSetAddEffect.Clear();

    foreach (var effect in effectsDefyingUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IDefyingUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDefyingUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDefyingUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDefyingUCMutSetEffect(effect);
        }
      }
    }
    effectsDefyingUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsDefyingUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IDefyingUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnDefyingUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IDefyingUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnDefyingUCMutSetEffect(effect);
        }
      }
    }
    effectsDefyingUCMutSetCreateEffect.Clear();

  }

    public int GetBideAICapabilityUCMutSetHash(int id, int version, BideAICapabilityUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public BideAICapabilityUCMutSetIncarnation GetBideAICapabilityUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsBideAICapabilityUCMutSet[id].incarnation;
    }
    public BideAICapabilityUCMutSet GetBideAICapabilityUCMutSet(int id) {
      return new BideAICapabilityUCMutSet(this, id);
    }
    public List<BideAICapabilityUCMutSet> AllBideAICapabilityUCMutSet() {
      List<BideAICapabilityUCMutSet> result = new List<BideAICapabilityUCMutSet>(rootIncarnation.incarnationsBideAICapabilityUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsBideAICapabilityUCMutSet.Keys) {
        result.Add(new BideAICapabilityUCMutSet(this, id));
      }
      return result;
    }
    public bool BideAICapabilityUCMutSetExists(int id) {
      return rootIncarnation.incarnationsBideAICapabilityUCMutSet.ContainsKey(id);
    }
    public void CheckHasBideAICapabilityUCMutSet(BideAICapabilityUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasBideAICapabilityUCMutSet(thing.id);
    }
    public void CheckHasBideAICapabilityUCMutSet(int id) {
      if (!rootIncarnation.incarnationsBideAICapabilityUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid BideAICapabilityUCMutSet}: " + id);
      }
    }
    public BideAICapabilityUCMutSet EffectBideAICapabilityUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new BideAICapabilityUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateBideAICapabilityUCMutSet(id, rootIncarnation.version, incarnation);
      return new BideAICapabilityUCMutSet(this, id);
    }
    public void EffectInternalCreateBideAICapabilityUCMutSet(int id, int incarnationVersion, BideAICapabilityUCMutSetIncarnation incarnation) {
      var effect = new BideAICapabilityUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsBideAICapabilityUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<BideAICapabilityUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsBideAICapabilityUCMutSetCreateEffect.Add(effect);
    }
    public void EffectBideAICapabilityUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new BideAICapabilityUCMutSetDeleteEffect(id);
      effectsBideAICapabilityUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsBideAICapabilityUCMutSet[id];
      rootIncarnation.incarnationsBideAICapabilityUCMutSet.Remove(id);
    }

       
    public void EffectBideAICapabilityUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasBideAICapabilityUCMutSet(setId);
      CheckHasBideAICapabilityUC(elementId);

      var effect = new BideAICapabilityUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsBideAICapabilityUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new BideAICapabilityUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsBideAICapabilityUCMutSet[setId] =
            new VersionAndIncarnation<BideAICapabilityUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsBideAICapabilityUCMutSetAddEffect.Add(effect);
    }
    public void EffectBideAICapabilityUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasBideAICapabilityUCMutSet(setId);
      CheckHasBideAICapabilityUC(elementId);

      var effect = new BideAICapabilityUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsBideAICapabilityUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new BideAICapabilityUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsBideAICapabilityUCMutSet[setId] =
            new VersionAndIncarnation<BideAICapabilityUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsBideAICapabilityUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddBideAICapabilityUCMutSetObserver(int id, IBideAICapabilityUCMutSetEffectObserver observer) {
      List<IBideAICapabilityUCMutSetEffectObserver> obsies;
      if (!observersForBideAICapabilityUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IBideAICapabilityUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForBideAICapabilityUCMutSet[id] = obsies;
    }

    public void RemoveBideAICapabilityUCMutSetObserver(int id, IBideAICapabilityUCMutSetEffectObserver observer) {
      if (observersForBideAICapabilityUCMutSet.ContainsKey(id)) {
        var list = observersForBideAICapabilityUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForBideAICapabilityUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastBideAICapabilityUCMutSetEffects(
      SortedDictionary<int, List<IBideAICapabilityUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsBideAICapabilityUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IBideAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBideAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBideAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBideAICapabilityUCMutSetEffect(effect);
        }
        observersForBideAICapabilityUCMutSet.Remove(effect.id);
      }
    }
    effectsBideAICapabilityUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsBideAICapabilityUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IBideAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBideAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBideAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBideAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsBideAICapabilityUCMutSetAddEffect.Clear();

    foreach (var effect in effectsBideAICapabilityUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IBideAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBideAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBideAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBideAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsBideAICapabilityUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsBideAICapabilityUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IBideAICapabilityUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBideAICapabilityUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBideAICapabilityUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBideAICapabilityUCMutSetEffect(effect);
        }
      }
    }
    effectsBideAICapabilityUCMutSetCreateEffect.Clear();

  }

    public int GetBaseMovementTimeUCMutSetHash(int id, int version, BaseMovementTimeUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public BaseMovementTimeUCMutSetIncarnation GetBaseMovementTimeUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsBaseMovementTimeUCMutSet[id].incarnation;
    }
    public BaseMovementTimeUCMutSet GetBaseMovementTimeUCMutSet(int id) {
      return new BaseMovementTimeUCMutSet(this, id);
    }
    public List<BaseMovementTimeUCMutSet> AllBaseMovementTimeUCMutSet() {
      List<BaseMovementTimeUCMutSet> result = new List<BaseMovementTimeUCMutSet>(rootIncarnation.incarnationsBaseMovementTimeUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsBaseMovementTimeUCMutSet.Keys) {
        result.Add(new BaseMovementTimeUCMutSet(this, id));
      }
      return result;
    }
    public bool BaseMovementTimeUCMutSetExists(int id) {
      return rootIncarnation.incarnationsBaseMovementTimeUCMutSet.ContainsKey(id);
    }
    public void CheckHasBaseMovementTimeUCMutSet(BaseMovementTimeUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasBaseMovementTimeUCMutSet(thing.id);
    }
    public void CheckHasBaseMovementTimeUCMutSet(int id) {
      if (!rootIncarnation.incarnationsBaseMovementTimeUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid BaseMovementTimeUCMutSet}: " + id);
      }
    }
    public BaseMovementTimeUCMutSet EffectBaseMovementTimeUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new BaseMovementTimeUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateBaseMovementTimeUCMutSet(id, rootIncarnation.version, incarnation);
      return new BaseMovementTimeUCMutSet(this, id);
    }
    public void EffectInternalCreateBaseMovementTimeUCMutSet(int id, int incarnationVersion, BaseMovementTimeUCMutSetIncarnation incarnation) {
      var effect = new BaseMovementTimeUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsBaseMovementTimeUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<BaseMovementTimeUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsBaseMovementTimeUCMutSetCreateEffect.Add(effect);
    }
    public void EffectBaseMovementTimeUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new BaseMovementTimeUCMutSetDeleteEffect(id);
      effectsBaseMovementTimeUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsBaseMovementTimeUCMutSet[id];
      rootIncarnation.incarnationsBaseMovementTimeUCMutSet.Remove(id);
    }

       
    public void EffectBaseMovementTimeUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasBaseMovementTimeUCMutSet(setId);
      CheckHasBaseMovementTimeUC(elementId);

      var effect = new BaseMovementTimeUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsBaseMovementTimeUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new BaseMovementTimeUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsBaseMovementTimeUCMutSet[setId] =
            new VersionAndIncarnation<BaseMovementTimeUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsBaseMovementTimeUCMutSetAddEffect.Add(effect);
    }
    public void EffectBaseMovementTimeUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasBaseMovementTimeUCMutSet(setId);
      CheckHasBaseMovementTimeUC(elementId);

      var effect = new BaseMovementTimeUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsBaseMovementTimeUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new BaseMovementTimeUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsBaseMovementTimeUCMutSet[setId] =
            new VersionAndIncarnation<BaseMovementTimeUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsBaseMovementTimeUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddBaseMovementTimeUCMutSetObserver(int id, IBaseMovementTimeUCMutSetEffectObserver observer) {
      List<IBaseMovementTimeUCMutSetEffectObserver> obsies;
      if (!observersForBaseMovementTimeUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IBaseMovementTimeUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForBaseMovementTimeUCMutSet[id] = obsies;
    }

    public void RemoveBaseMovementTimeUCMutSetObserver(int id, IBaseMovementTimeUCMutSetEffectObserver observer) {
      if (observersForBaseMovementTimeUCMutSet.ContainsKey(id)) {
        var list = observersForBaseMovementTimeUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForBaseMovementTimeUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastBaseMovementTimeUCMutSetEffects(
      SortedDictionary<int, List<IBaseMovementTimeUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsBaseMovementTimeUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IBaseMovementTimeUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseMovementTimeUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseMovementTimeUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseMovementTimeUCMutSetEffect(effect);
        }
        observersForBaseMovementTimeUCMutSet.Remove(effect.id);
      }
    }
    effectsBaseMovementTimeUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsBaseMovementTimeUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IBaseMovementTimeUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseMovementTimeUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseMovementTimeUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseMovementTimeUCMutSetEffect(effect);
        }
      }
    }
    effectsBaseMovementTimeUCMutSetAddEffect.Clear();

    foreach (var effect in effectsBaseMovementTimeUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IBaseMovementTimeUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseMovementTimeUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseMovementTimeUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseMovementTimeUCMutSetEffect(effect);
        }
      }
    }
    effectsBaseMovementTimeUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsBaseMovementTimeUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IBaseMovementTimeUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseMovementTimeUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseMovementTimeUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseMovementTimeUCMutSetEffect(effect);
        }
      }
    }
    effectsBaseMovementTimeUCMutSetCreateEffect.Clear();

  }

    public int GetBaseCombatTimeUCMutSetHash(int id, int version, BaseCombatTimeUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public BaseCombatTimeUCMutSetIncarnation GetBaseCombatTimeUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsBaseCombatTimeUCMutSet[id].incarnation;
    }
    public BaseCombatTimeUCMutSet GetBaseCombatTimeUCMutSet(int id) {
      return new BaseCombatTimeUCMutSet(this, id);
    }
    public List<BaseCombatTimeUCMutSet> AllBaseCombatTimeUCMutSet() {
      List<BaseCombatTimeUCMutSet> result = new List<BaseCombatTimeUCMutSet>(rootIncarnation.incarnationsBaseCombatTimeUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsBaseCombatTimeUCMutSet.Keys) {
        result.Add(new BaseCombatTimeUCMutSet(this, id));
      }
      return result;
    }
    public bool BaseCombatTimeUCMutSetExists(int id) {
      return rootIncarnation.incarnationsBaseCombatTimeUCMutSet.ContainsKey(id);
    }
    public void CheckHasBaseCombatTimeUCMutSet(BaseCombatTimeUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasBaseCombatTimeUCMutSet(thing.id);
    }
    public void CheckHasBaseCombatTimeUCMutSet(int id) {
      if (!rootIncarnation.incarnationsBaseCombatTimeUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid BaseCombatTimeUCMutSet}: " + id);
      }
    }
    public BaseCombatTimeUCMutSet EffectBaseCombatTimeUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new BaseCombatTimeUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateBaseCombatTimeUCMutSet(id, rootIncarnation.version, incarnation);
      return new BaseCombatTimeUCMutSet(this, id);
    }
    public void EffectInternalCreateBaseCombatTimeUCMutSet(int id, int incarnationVersion, BaseCombatTimeUCMutSetIncarnation incarnation) {
      var effect = new BaseCombatTimeUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsBaseCombatTimeUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<BaseCombatTimeUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsBaseCombatTimeUCMutSetCreateEffect.Add(effect);
    }
    public void EffectBaseCombatTimeUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new BaseCombatTimeUCMutSetDeleteEffect(id);
      effectsBaseCombatTimeUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsBaseCombatTimeUCMutSet[id];
      rootIncarnation.incarnationsBaseCombatTimeUCMutSet.Remove(id);
    }

       
    public void EffectBaseCombatTimeUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasBaseCombatTimeUCMutSet(setId);
      CheckHasBaseCombatTimeUC(elementId);

      var effect = new BaseCombatTimeUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsBaseCombatTimeUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new BaseCombatTimeUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsBaseCombatTimeUCMutSet[setId] =
            new VersionAndIncarnation<BaseCombatTimeUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsBaseCombatTimeUCMutSetAddEffect.Add(effect);
    }
    public void EffectBaseCombatTimeUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasBaseCombatTimeUCMutSet(setId);
      CheckHasBaseCombatTimeUC(elementId);

      var effect = new BaseCombatTimeUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsBaseCombatTimeUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new BaseCombatTimeUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsBaseCombatTimeUCMutSet[setId] =
            new VersionAndIncarnation<BaseCombatTimeUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsBaseCombatTimeUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddBaseCombatTimeUCMutSetObserver(int id, IBaseCombatTimeUCMutSetEffectObserver observer) {
      List<IBaseCombatTimeUCMutSetEffectObserver> obsies;
      if (!observersForBaseCombatTimeUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IBaseCombatTimeUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForBaseCombatTimeUCMutSet[id] = obsies;
    }

    public void RemoveBaseCombatTimeUCMutSetObserver(int id, IBaseCombatTimeUCMutSetEffectObserver observer) {
      if (observersForBaseCombatTimeUCMutSet.ContainsKey(id)) {
        var list = observersForBaseCombatTimeUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForBaseCombatTimeUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastBaseCombatTimeUCMutSetEffects(
      SortedDictionary<int, List<IBaseCombatTimeUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsBaseCombatTimeUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IBaseCombatTimeUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseCombatTimeUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseCombatTimeUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseCombatTimeUCMutSetEffect(effect);
        }
        observersForBaseCombatTimeUCMutSet.Remove(effect.id);
      }
    }
    effectsBaseCombatTimeUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsBaseCombatTimeUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IBaseCombatTimeUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseCombatTimeUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseCombatTimeUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseCombatTimeUCMutSetEffect(effect);
        }
      }
    }
    effectsBaseCombatTimeUCMutSetAddEffect.Clear();

    foreach (var effect in effectsBaseCombatTimeUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IBaseCombatTimeUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseCombatTimeUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseCombatTimeUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseCombatTimeUCMutSetEffect(effect);
        }
      }
    }
    effectsBaseCombatTimeUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsBaseCombatTimeUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IBaseCombatTimeUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseCombatTimeUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseCombatTimeUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseCombatTimeUCMutSetEffect(effect);
        }
      }
    }
    effectsBaseCombatTimeUCMutSetCreateEffect.Clear();

  }

    public int GetManaPotionMutSetHash(int id, int version, ManaPotionMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public ManaPotionMutSetIncarnation GetManaPotionMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsManaPotionMutSet[id].incarnation;
    }
    public ManaPotionMutSet GetManaPotionMutSet(int id) {
      return new ManaPotionMutSet(this, id);
    }
    public List<ManaPotionMutSet> AllManaPotionMutSet() {
      List<ManaPotionMutSet> result = new List<ManaPotionMutSet>(rootIncarnation.incarnationsManaPotionMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsManaPotionMutSet.Keys) {
        result.Add(new ManaPotionMutSet(this, id));
      }
      return result;
    }
    public bool ManaPotionMutSetExists(int id) {
      return rootIncarnation.incarnationsManaPotionMutSet.ContainsKey(id);
    }
    public void CheckHasManaPotionMutSet(ManaPotionMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasManaPotionMutSet(thing.id);
    }
    public void CheckHasManaPotionMutSet(int id) {
      if (!rootIncarnation.incarnationsManaPotionMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid ManaPotionMutSet}: " + id);
      }
    }
    public ManaPotionMutSet EffectManaPotionMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new ManaPotionMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateManaPotionMutSet(id, rootIncarnation.version, incarnation);
      return new ManaPotionMutSet(this, id);
    }
    public void EffectInternalCreateManaPotionMutSet(int id, int incarnationVersion, ManaPotionMutSetIncarnation incarnation) {
      var effect = new ManaPotionMutSetCreateEffect(id);
      rootIncarnation.incarnationsManaPotionMutSet
          .Add(
              id,
              new VersionAndIncarnation<ManaPotionMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsManaPotionMutSetCreateEffect.Add(effect);
    }
    public void EffectManaPotionMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new ManaPotionMutSetDeleteEffect(id);
      effectsManaPotionMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsManaPotionMutSet[id];
      rootIncarnation.incarnationsManaPotionMutSet.Remove(id);
    }

       
    public void EffectManaPotionMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasManaPotionMutSet(setId);
      CheckHasManaPotion(elementId);

      var effect = new ManaPotionMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsManaPotionMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new ManaPotionMutSetIncarnation(newMap);
        rootIncarnation.incarnationsManaPotionMutSet[setId] =
            new VersionAndIncarnation<ManaPotionMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsManaPotionMutSetAddEffect.Add(effect);
    }
    public void EffectManaPotionMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasManaPotionMutSet(setId);
      CheckHasManaPotion(elementId);

      var effect = new ManaPotionMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsManaPotionMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new ManaPotionMutSetIncarnation(newMap);
        rootIncarnation.incarnationsManaPotionMutSet[setId] =
            new VersionAndIncarnation<ManaPotionMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsManaPotionMutSetRemoveEffect.Add(effect);
    }

       
    public void AddManaPotionMutSetObserver(int id, IManaPotionMutSetEffectObserver observer) {
      List<IManaPotionMutSetEffectObserver> obsies;
      if (!observersForManaPotionMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IManaPotionMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForManaPotionMutSet[id] = obsies;
    }

    public void RemoveManaPotionMutSetObserver(int id, IManaPotionMutSetEffectObserver observer) {
      if (observersForManaPotionMutSet.ContainsKey(id)) {
        var list = observersForManaPotionMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForManaPotionMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastManaPotionMutSetEffects(
      SortedDictionary<int, List<IManaPotionMutSetEffectObserver>> observers) {
    foreach (var effect in effectsManaPotionMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IManaPotionMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnManaPotionMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IManaPotionMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnManaPotionMutSetEffect(effect);
        }
        observersForManaPotionMutSet.Remove(effect.id);
      }
    }
    effectsManaPotionMutSetDeleteEffect.Clear();

    foreach (var effect in effectsManaPotionMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IManaPotionMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnManaPotionMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IManaPotionMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnManaPotionMutSetEffect(effect);
        }
      }
    }
    effectsManaPotionMutSetAddEffect.Clear();

    foreach (var effect in effectsManaPotionMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IManaPotionMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnManaPotionMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IManaPotionMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnManaPotionMutSetEffect(effect);
        }
      }
    }
    effectsManaPotionMutSetRemoveEffect.Clear();

    foreach (var effect in effectsManaPotionMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IManaPotionMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnManaPotionMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IManaPotionMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnManaPotionMutSetEffect(effect);
        }
      }
    }
    effectsManaPotionMutSetCreateEffect.Clear();

  }

    public int GetHealthPotionMutSetHash(int id, int version, HealthPotionMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public HealthPotionMutSetIncarnation GetHealthPotionMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsHealthPotionMutSet[id].incarnation;
    }
    public HealthPotionMutSet GetHealthPotionMutSet(int id) {
      return new HealthPotionMutSet(this, id);
    }
    public List<HealthPotionMutSet> AllHealthPotionMutSet() {
      List<HealthPotionMutSet> result = new List<HealthPotionMutSet>(rootIncarnation.incarnationsHealthPotionMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsHealthPotionMutSet.Keys) {
        result.Add(new HealthPotionMutSet(this, id));
      }
      return result;
    }
    public bool HealthPotionMutSetExists(int id) {
      return rootIncarnation.incarnationsHealthPotionMutSet.ContainsKey(id);
    }
    public void CheckHasHealthPotionMutSet(HealthPotionMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasHealthPotionMutSet(thing.id);
    }
    public void CheckHasHealthPotionMutSet(int id) {
      if (!rootIncarnation.incarnationsHealthPotionMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid HealthPotionMutSet}: " + id);
      }
    }
    public HealthPotionMutSet EffectHealthPotionMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new HealthPotionMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateHealthPotionMutSet(id, rootIncarnation.version, incarnation);
      return new HealthPotionMutSet(this, id);
    }
    public void EffectInternalCreateHealthPotionMutSet(int id, int incarnationVersion, HealthPotionMutSetIncarnation incarnation) {
      var effect = new HealthPotionMutSetCreateEffect(id);
      rootIncarnation.incarnationsHealthPotionMutSet
          .Add(
              id,
              new VersionAndIncarnation<HealthPotionMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsHealthPotionMutSetCreateEffect.Add(effect);
    }
    public void EffectHealthPotionMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new HealthPotionMutSetDeleteEffect(id);
      effectsHealthPotionMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsHealthPotionMutSet[id];
      rootIncarnation.incarnationsHealthPotionMutSet.Remove(id);
    }

       
    public void EffectHealthPotionMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasHealthPotionMutSet(setId);
      CheckHasHealthPotion(elementId);

      var effect = new HealthPotionMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsHealthPotionMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new HealthPotionMutSetIncarnation(newMap);
        rootIncarnation.incarnationsHealthPotionMutSet[setId] =
            new VersionAndIncarnation<HealthPotionMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsHealthPotionMutSetAddEffect.Add(effect);
    }
    public void EffectHealthPotionMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasHealthPotionMutSet(setId);
      CheckHasHealthPotion(elementId);

      var effect = new HealthPotionMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsHealthPotionMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new HealthPotionMutSetIncarnation(newMap);
        rootIncarnation.incarnationsHealthPotionMutSet[setId] =
            new VersionAndIncarnation<HealthPotionMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsHealthPotionMutSetRemoveEffect.Add(effect);
    }

       
    public void AddHealthPotionMutSetObserver(int id, IHealthPotionMutSetEffectObserver observer) {
      List<IHealthPotionMutSetEffectObserver> obsies;
      if (!observersForHealthPotionMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IHealthPotionMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForHealthPotionMutSet[id] = obsies;
    }

    public void RemoveHealthPotionMutSetObserver(int id, IHealthPotionMutSetEffectObserver observer) {
      if (observersForHealthPotionMutSet.ContainsKey(id)) {
        var list = observersForHealthPotionMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForHealthPotionMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastHealthPotionMutSetEffects(
      SortedDictionary<int, List<IHealthPotionMutSetEffectObserver>> observers) {
    foreach (var effect in effectsHealthPotionMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IHealthPotionMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnHealthPotionMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IHealthPotionMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnHealthPotionMutSetEffect(effect);
        }
        observersForHealthPotionMutSet.Remove(effect.id);
      }
    }
    effectsHealthPotionMutSetDeleteEffect.Clear();

    foreach (var effect in effectsHealthPotionMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IHealthPotionMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnHealthPotionMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IHealthPotionMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnHealthPotionMutSetEffect(effect);
        }
      }
    }
    effectsHealthPotionMutSetAddEffect.Clear();

    foreach (var effect in effectsHealthPotionMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IHealthPotionMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnHealthPotionMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IHealthPotionMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnHealthPotionMutSetEffect(effect);
        }
      }
    }
    effectsHealthPotionMutSetRemoveEffect.Clear();

    foreach (var effect in effectsHealthPotionMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IHealthPotionMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnHealthPotionMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IHealthPotionMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnHealthPotionMutSetEffect(effect);
        }
      }
    }
    effectsHealthPotionMutSetCreateEffect.Clear();

  }

    public int GetSpeedRingMutSetHash(int id, int version, SpeedRingMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public SpeedRingMutSetIncarnation GetSpeedRingMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsSpeedRingMutSet[id].incarnation;
    }
    public SpeedRingMutSet GetSpeedRingMutSet(int id) {
      return new SpeedRingMutSet(this, id);
    }
    public List<SpeedRingMutSet> AllSpeedRingMutSet() {
      List<SpeedRingMutSet> result = new List<SpeedRingMutSet>(rootIncarnation.incarnationsSpeedRingMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsSpeedRingMutSet.Keys) {
        result.Add(new SpeedRingMutSet(this, id));
      }
      return result;
    }
    public bool SpeedRingMutSetExists(int id) {
      return rootIncarnation.incarnationsSpeedRingMutSet.ContainsKey(id);
    }
    public void CheckHasSpeedRingMutSet(SpeedRingMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasSpeedRingMutSet(thing.id);
    }
    public void CheckHasSpeedRingMutSet(int id) {
      if (!rootIncarnation.incarnationsSpeedRingMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid SpeedRingMutSet}: " + id);
      }
    }
    public SpeedRingMutSet EffectSpeedRingMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new SpeedRingMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateSpeedRingMutSet(id, rootIncarnation.version, incarnation);
      return new SpeedRingMutSet(this, id);
    }
    public void EffectInternalCreateSpeedRingMutSet(int id, int incarnationVersion, SpeedRingMutSetIncarnation incarnation) {
      var effect = new SpeedRingMutSetCreateEffect(id);
      rootIncarnation.incarnationsSpeedRingMutSet
          .Add(
              id,
              new VersionAndIncarnation<SpeedRingMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsSpeedRingMutSetCreateEffect.Add(effect);
    }
    public void EffectSpeedRingMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new SpeedRingMutSetDeleteEffect(id);
      effectsSpeedRingMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsSpeedRingMutSet[id];
      rootIncarnation.incarnationsSpeedRingMutSet.Remove(id);
    }

       
    public void EffectSpeedRingMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasSpeedRingMutSet(setId);
      CheckHasSpeedRing(elementId);

      var effect = new SpeedRingMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsSpeedRingMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new SpeedRingMutSetIncarnation(newMap);
        rootIncarnation.incarnationsSpeedRingMutSet[setId] =
            new VersionAndIncarnation<SpeedRingMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsSpeedRingMutSetAddEffect.Add(effect);
    }
    public void EffectSpeedRingMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasSpeedRingMutSet(setId);
      CheckHasSpeedRing(elementId);

      var effect = new SpeedRingMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsSpeedRingMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new SpeedRingMutSetIncarnation(newMap);
        rootIncarnation.incarnationsSpeedRingMutSet[setId] =
            new VersionAndIncarnation<SpeedRingMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsSpeedRingMutSetRemoveEffect.Add(effect);
    }

       
    public void AddSpeedRingMutSetObserver(int id, ISpeedRingMutSetEffectObserver observer) {
      List<ISpeedRingMutSetEffectObserver> obsies;
      if (!observersForSpeedRingMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ISpeedRingMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForSpeedRingMutSet[id] = obsies;
    }

    public void RemoveSpeedRingMutSetObserver(int id, ISpeedRingMutSetEffectObserver observer) {
      if (observersForSpeedRingMutSet.ContainsKey(id)) {
        var list = observersForSpeedRingMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForSpeedRingMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastSpeedRingMutSetEffects(
      SortedDictionary<int, List<ISpeedRingMutSetEffectObserver>> observers) {
    foreach (var effect in effectsSpeedRingMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ISpeedRingMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSpeedRingMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISpeedRingMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSpeedRingMutSetEffect(effect);
        }
        observersForSpeedRingMutSet.Remove(effect.id);
      }
    }
    effectsSpeedRingMutSetDeleteEffect.Clear();

    foreach (var effect in effectsSpeedRingMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ISpeedRingMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSpeedRingMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISpeedRingMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSpeedRingMutSetEffect(effect);
        }
      }
    }
    effectsSpeedRingMutSetAddEffect.Clear();

    foreach (var effect in effectsSpeedRingMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ISpeedRingMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSpeedRingMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISpeedRingMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSpeedRingMutSetEffect(effect);
        }
      }
    }
    effectsSpeedRingMutSetRemoveEffect.Clear();

    foreach (var effect in effectsSpeedRingMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ISpeedRingMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSpeedRingMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISpeedRingMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSpeedRingMutSetEffect(effect);
        }
      }
    }
    effectsSpeedRingMutSetCreateEffect.Clear();

  }

    public int GetGlaiveMutSetHash(int id, int version, GlaiveMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public GlaiveMutSetIncarnation GetGlaiveMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsGlaiveMutSet[id].incarnation;
    }
    public GlaiveMutSet GetGlaiveMutSet(int id) {
      return new GlaiveMutSet(this, id);
    }
    public List<GlaiveMutSet> AllGlaiveMutSet() {
      List<GlaiveMutSet> result = new List<GlaiveMutSet>(rootIncarnation.incarnationsGlaiveMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsGlaiveMutSet.Keys) {
        result.Add(new GlaiveMutSet(this, id));
      }
      return result;
    }
    public bool GlaiveMutSetExists(int id) {
      return rootIncarnation.incarnationsGlaiveMutSet.ContainsKey(id);
    }
    public void CheckHasGlaiveMutSet(GlaiveMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasGlaiveMutSet(thing.id);
    }
    public void CheckHasGlaiveMutSet(int id) {
      if (!rootIncarnation.incarnationsGlaiveMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid GlaiveMutSet}: " + id);
      }
    }
    public GlaiveMutSet EffectGlaiveMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new GlaiveMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateGlaiveMutSet(id, rootIncarnation.version, incarnation);
      return new GlaiveMutSet(this, id);
    }
    public void EffectInternalCreateGlaiveMutSet(int id, int incarnationVersion, GlaiveMutSetIncarnation incarnation) {
      var effect = new GlaiveMutSetCreateEffect(id);
      rootIncarnation.incarnationsGlaiveMutSet
          .Add(
              id,
              new VersionAndIncarnation<GlaiveMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsGlaiveMutSetCreateEffect.Add(effect);
    }
    public void EffectGlaiveMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new GlaiveMutSetDeleteEffect(id);
      effectsGlaiveMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsGlaiveMutSet[id];
      rootIncarnation.incarnationsGlaiveMutSet.Remove(id);
    }

       
    public void EffectGlaiveMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasGlaiveMutSet(setId);
      CheckHasGlaive(elementId);

      var effect = new GlaiveMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsGlaiveMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new GlaiveMutSetIncarnation(newMap);
        rootIncarnation.incarnationsGlaiveMutSet[setId] =
            new VersionAndIncarnation<GlaiveMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsGlaiveMutSetAddEffect.Add(effect);
    }
    public void EffectGlaiveMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasGlaiveMutSet(setId);
      CheckHasGlaive(elementId);

      var effect = new GlaiveMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsGlaiveMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new GlaiveMutSetIncarnation(newMap);
        rootIncarnation.incarnationsGlaiveMutSet[setId] =
            new VersionAndIncarnation<GlaiveMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsGlaiveMutSetRemoveEffect.Add(effect);
    }

       
    public void AddGlaiveMutSetObserver(int id, IGlaiveMutSetEffectObserver observer) {
      List<IGlaiveMutSetEffectObserver> obsies;
      if (!observersForGlaiveMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IGlaiveMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForGlaiveMutSet[id] = obsies;
    }

    public void RemoveGlaiveMutSetObserver(int id, IGlaiveMutSetEffectObserver observer) {
      if (observersForGlaiveMutSet.ContainsKey(id)) {
        var list = observersForGlaiveMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForGlaiveMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastGlaiveMutSetEffects(
      SortedDictionary<int, List<IGlaiveMutSetEffectObserver>> observers) {
    foreach (var effect in effectsGlaiveMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IGlaiveMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGlaiveMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGlaiveMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGlaiveMutSetEffect(effect);
        }
        observersForGlaiveMutSet.Remove(effect.id);
      }
    }
    effectsGlaiveMutSetDeleteEffect.Clear();

    foreach (var effect in effectsGlaiveMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IGlaiveMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGlaiveMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGlaiveMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGlaiveMutSetEffect(effect);
        }
      }
    }
    effectsGlaiveMutSetAddEffect.Clear();

    foreach (var effect in effectsGlaiveMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IGlaiveMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGlaiveMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGlaiveMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGlaiveMutSetEffect(effect);
        }
      }
    }
    effectsGlaiveMutSetRemoveEffect.Clear();

    foreach (var effect in effectsGlaiveMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IGlaiveMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnGlaiveMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IGlaiveMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnGlaiveMutSetEffect(effect);
        }
      }
    }
    effectsGlaiveMutSetCreateEffect.Clear();

  }

    public int GetSlowRodMutSetHash(int id, int version, SlowRodMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public SlowRodMutSetIncarnation GetSlowRodMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsSlowRodMutSet[id].incarnation;
    }
    public SlowRodMutSet GetSlowRodMutSet(int id) {
      return new SlowRodMutSet(this, id);
    }
    public List<SlowRodMutSet> AllSlowRodMutSet() {
      List<SlowRodMutSet> result = new List<SlowRodMutSet>(rootIncarnation.incarnationsSlowRodMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsSlowRodMutSet.Keys) {
        result.Add(new SlowRodMutSet(this, id));
      }
      return result;
    }
    public bool SlowRodMutSetExists(int id) {
      return rootIncarnation.incarnationsSlowRodMutSet.ContainsKey(id);
    }
    public void CheckHasSlowRodMutSet(SlowRodMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasSlowRodMutSet(thing.id);
    }
    public void CheckHasSlowRodMutSet(int id) {
      if (!rootIncarnation.incarnationsSlowRodMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid SlowRodMutSet}: " + id);
      }
    }
    public SlowRodMutSet EffectSlowRodMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new SlowRodMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateSlowRodMutSet(id, rootIncarnation.version, incarnation);
      return new SlowRodMutSet(this, id);
    }
    public void EffectInternalCreateSlowRodMutSet(int id, int incarnationVersion, SlowRodMutSetIncarnation incarnation) {
      var effect = new SlowRodMutSetCreateEffect(id);
      rootIncarnation.incarnationsSlowRodMutSet
          .Add(
              id,
              new VersionAndIncarnation<SlowRodMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsSlowRodMutSetCreateEffect.Add(effect);
    }
    public void EffectSlowRodMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new SlowRodMutSetDeleteEffect(id);
      effectsSlowRodMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsSlowRodMutSet[id];
      rootIncarnation.incarnationsSlowRodMutSet.Remove(id);
    }

       
    public void EffectSlowRodMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasSlowRodMutSet(setId);
      CheckHasSlowRod(elementId);

      var effect = new SlowRodMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsSlowRodMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new SlowRodMutSetIncarnation(newMap);
        rootIncarnation.incarnationsSlowRodMutSet[setId] =
            new VersionAndIncarnation<SlowRodMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsSlowRodMutSetAddEffect.Add(effect);
    }
    public void EffectSlowRodMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasSlowRodMutSet(setId);
      CheckHasSlowRod(elementId);

      var effect = new SlowRodMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsSlowRodMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new SlowRodMutSetIncarnation(newMap);
        rootIncarnation.incarnationsSlowRodMutSet[setId] =
            new VersionAndIncarnation<SlowRodMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsSlowRodMutSetRemoveEffect.Add(effect);
    }

       
    public void AddSlowRodMutSetObserver(int id, ISlowRodMutSetEffectObserver observer) {
      List<ISlowRodMutSetEffectObserver> obsies;
      if (!observersForSlowRodMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ISlowRodMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForSlowRodMutSet[id] = obsies;
    }

    public void RemoveSlowRodMutSetObserver(int id, ISlowRodMutSetEffectObserver observer) {
      if (observersForSlowRodMutSet.ContainsKey(id)) {
        var list = observersForSlowRodMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForSlowRodMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastSlowRodMutSetEffects(
      SortedDictionary<int, List<ISlowRodMutSetEffectObserver>> observers) {
    foreach (var effect in effectsSlowRodMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ISlowRodMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSlowRodMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISlowRodMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSlowRodMutSetEffect(effect);
        }
        observersForSlowRodMutSet.Remove(effect.id);
      }
    }
    effectsSlowRodMutSetDeleteEffect.Clear();

    foreach (var effect in effectsSlowRodMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ISlowRodMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSlowRodMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISlowRodMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSlowRodMutSetEffect(effect);
        }
      }
    }
    effectsSlowRodMutSetAddEffect.Clear();

    foreach (var effect in effectsSlowRodMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ISlowRodMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSlowRodMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISlowRodMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSlowRodMutSetEffect(effect);
        }
      }
    }
    effectsSlowRodMutSetRemoveEffect.Clear();

    foreach (var effect in effectsSlowRodMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ISlowRodMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSlowRodMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISlowRodMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSlowRodMutSetEffect(effect);
        }
      }
    }
    effectsSlowRodMutSetCreateEffect.Clear();

  }

    public int GetBlastRodMutSetHash(int id, int version, BlastRodMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public BlastRodMutSetIncarnation GetBlastRodMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsBlastRodMutSet[id].incarnation;
    }
    public BlastRodMutSet GetBlastRodMutSet(int id) {
      return new BlastRodMutSet(this, id);
    }
    public List<BlastRodMutSet> AllBlastRodMutSet() {
      List<BlastRodMutSet> result = new List<BlastRodMutSet>(rootIncarnation.incarnationsBlastRodMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsBlastRodMutSet.Keys) {
        result.Add(new BlastRodMutSet(this, id));
      }
      return result;
    }
    public bool BlastRodMutSetExists(int id) {
      return rootIncarnation.incarnationsBlastRodMutSet.ContainsKey(id);
    }
    public void CheckHasBlastRodMutSet(BlastRodMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasBlastRodMutSet(thing.id);
    }
    public void CheckHasBlastRodMutSet(int id) {
      if (!rootIncarnation.incarnationsBlastRodMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid BlastRodMutSet}: " + id);
      }
    }
    public BlastRodMutSet EffectBlastRodMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new BlastRodMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateBlastRodMutSet(id, rootIncarnation.version, incarnation);
      return new BlastRodMutSet(this, id);
    }
    public void EffectInternalCreateBlastRodMutSet(int id, int incarnationVersion, BlastRodMutSetIncarnation incarnation) {
      var effect = new BlastRodMutSetCreateEffect(id);
      rootIncarnation.incarnationsBlastRodMutSet
          .Add(
              id,
              new VersionAndIncarnation<BlastRodMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsBlastRodMutSetCreateEffect.Add(effect);
    }
    public void EffectBlastRodMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new BlastRodMutSetDeleteEffect(id);
      effectsBlastRodMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsBlastRodMutSet[id];
      rootIncarnation.incarnationsBlastRodMutSet.Remove(id);
    }

       
    public void EffectBlastRodMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasBlastRodMutSet(setId);
      CheckHasBlastRod(elementId);

      var effect = new BlastRodMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsBlastRodMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new BlastRodMutSetIncarnation(newMap);
        rootIncarnation.incarnationsBlastRodMutSet[setId] =
            new VersionAndIncarnation<BlastRodMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsBlastRodMutSetAddEffect.Add(effect);
    }
    public void EffectBlastRodMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasBlastRodMutSet(setId);
      CheckHasBlastRod(elementId);

      var effect = new BlastRodMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsBlastRodMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new BlastRodMutSetIncarnation(newMap);
        rootIncarnation.incarnationsBlastRodMutSet[setId] =
            new VersionAndIncarnation<BlastRodMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsBlastRodMutSetRemoveEffect.Add(effect);
    }

       
    public void AddBlastRodMutSetObserver(int id, IBlastRodMutSetEffectObserver observer) {
      List<IBlastRodMutSetEffectObserver> obsies;
      if (!observersForBlastRodMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IBlastRodMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForBlastRodMutSet[id] = obsies;
    }

    public void RemoveBlastRodMutSetObserver(int id, IBlastRodMutSetEffectObserver observer) {
      if (observersForBlastRodMutSet.ContainsKey(id)) {
        var list = observersForBlastRodMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForBlastRodMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastBlastRodMutSetEffects(
      SortedDictionary<int, List<IBlastRodMutSetEffectObserver>> observers) {
    foreach (var effect in effectsBlastRodMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IBlastRodMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBlastRodMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBlastRodMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBlastRodMutSetEffect(effect);
        }
        observersForBlastRodMutSet.Remove(effect.id);
      }
    }
    effectsBlastRodMutSetDeleteEffect.Clear();

    foreach (var effect in effectsBlastRodMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IBlastRodMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBlastRodMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBlastRodMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBlastRodMutSetEffect(effect);
        }
      }
    }
    effectsBlastRodMutSetAddEffect.Clear();

    foreach (var effect in effectsBlastRodMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IBlastRodMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBlastRodMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBlastRodMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBlastRodMutSetEffect(effect);
        }
      }
    }
    effectsBlastRodMutSetRemoveEffect.Clear();

    foreach (var effect in effectsBlastRodMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IBlastRodMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBlastRodMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBlastRodMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBlastRodMutSetEffect(effect);
        }
      }
    }
    effectsBlastRodMutSetCreateEffect.Clear();

  }

    public int GetArmorMutSetHash(int id, int version, ArmorMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public ArmorMutSetIncarnation GetArmorMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsArmorMutSet[id].incarnation;
    }
    public ArmorMutSet GetArmorMutSet(int id) {
      return new ArmorMutSet(this, id);
    }
    public List<ArmorMutSet> AllArmorMutSet() {
      List<ArmorMutSet> result = new List<ArmorMutSet>(rootIncarnation.incarnationsArmorMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsArmorMutSet.Keys) {
        result.Add(new ArmorMutSet(this, id));
      }
      return result;
    }
    public bool ArmorMutSetExists(int id) {
      return rootIncarnation.incarnationsArmorMutSet.ContainsKey(id);
    }
    public void CheckHasArmorMutSet(ArmorMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasArmorMutSet(thing.id);
    }
    public void CheckHasArmorMutSet(int id) {
      if (!rootIncarnation.incarnationsArmorMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid ArmorMutSet}: " + id);
      }
    }
    public ArmorMutSet EffectArmorMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new ArmorMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateArmorMutSet(id, rootIncarnation.version, incarnation);
      return new ArmorMutSet(this, id);
    }
    public void EffectInternalCreateArmorMutSet(int id, int incarnationVersion, ArmorMutSetIncarnation incarnation) {
      var effect = new ArmorMutSetCreateEffect(id);
      rootIncarnation.incarnationsArmorMutSet
          .Add(
              id,
              new VersionAndIncarnation<ArmorMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsArmorMutSetCreateEffect.Add(effect);
    }
    public void EffectArmorMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new ArmorMutSetDeleteEffect(id);
      effectsArmorMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsArmorMutSet[id];
      rootIncarnation.incarnationsArmorMutSet.Remove(id);
    }

       
    public void EffectArmorMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasArmorMutSet(setId);
      CheckHasArmor(elementId);

      var effect = new ArmorMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsArmorMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new ArmorMutSetIncarnation(newMap);
        rootIncarnation.incarnationsArmorMutSet[setId] =
            new VersionAndIncarnation<ArmorMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsArmorMutSetAddEffect.Add(effect);
    }
    public void EffectArmorMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasArmorMutSet(setId);
      CheckHasArmor(elementId);

      var effect = new ArmorMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsArmorMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new ArmorMutSetIncarnation(newMap);
        rootIncarnation.incarnationsArmorMutSet[setId] =
            new VersionAndIncarnation<ArmorMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsArmorMutSetRemoveEffect.Add(effect);
    }

       
    public void AddArmorMutSetObserver(int id, IArmorMutSetEffectObserver observer) {
      List<IArmorMutSetEffectObserver> obsies;
      if (!observersForArmorMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IArmorMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForArmorMutSet[id] = obsies;
    }

    public void RemoveArmorMutSetObserver(int id, IArmorMutSetEffectObserver observer) {
      if (observersForArmorMutSet.ContainsKey(id)) {
        var list = observersForArmorMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForArmorMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastArmorMutSetEffects(
      SortedDictionary<int, List<IArmorMutSetEffectObserver>> observers) {
    foreach (var effect in effectsArmorMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IArmorMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnArmorMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IArmorMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnArmorMutSetEffect(effect);
        }
        observersForArmorMutSet.Remove(effect.id);
      }
    }
    effectsArmorMutSetDeleteEffect.Clear();

    foreach (var effect in effectsArmorMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IArmorMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnArmorMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IArmorMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnArmorMutSetEffect(effect);
        }
      }
    }
    effectsArmorMutSetAddEffect.Clear();

    foreach (var effect in effectsArmorMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IArmorMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnArmorMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IArmorMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnArmorMutSetEffect(effect);
        }
      }
    }
    effectsArmorMutSetRemoveEffect.Clear();

    foreach (var effect in effectsArmorMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IArmorMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnArmorMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IArmorMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnArmorMutSetEffect(effect);
        }
      }
    }
    effectsArmorMutSetCreateEffect.Clear();

  }

    public int GetSorcerousUCMutSetHash(int id, int version, SorcerousUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public SorcerousUCMutSetIncarnation GetSorcerousUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsSorcerousUCMutSet[id].incarnation;
    }
    public SorcerousUCMutSet GetSorcerousUCMutSet(int id) {
      return new SorcerousUCMutSet(this, id);
    }
    public List<SorcerousUCMutSet> AllSorcerousUCMutSet() {
      List<SorcerousUCMutSet> result = new List<SorcerousUCMutSet>(rootIncarnation.incarnationsSorcerousUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsSorcerousUCMutSet.Keys) {
        result.Add(new SorcerousUCMutSet(this, id));
      }
      return result;
    }
    public bool SorcerousUCMutSetExists(int id) {
      return rootIncarnation.incarnationsSorcerousUCMutSet.ContainsKey(id);
    }
    public void CheckHasSorcerousUCMutSet(SorcerousUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasSorcerousUCMutSet(thing.id);
    }
    public void CheckHasSorcerousUCMutSet(int id) {
      if (!rootIncarnation.incarnationsSorcerousUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid SorcerousUCMutSet}: " + id);
      }
    }
    public SorcerousUCMutSet EffectSorcerousUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new SorcerousUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateSorcerousUCMutSet(id, rootIncarnation.version, incarnation);
      return new SorcerousUCMutSet(this, id);
    }
    public void EffectInternalCreateSorcerousUCMutSet(int id, int incarnationVersion, SorcerousUCMutSetIncarnation incarnation) {
      var effect = new SorcerousUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsSorcerousUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<SorcerousUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsSorcerousUCMutSetCreateEffect.Add(effect);
    }
    public void EffectSorcerousUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new SorcerousUCMutSetDeleteEffect(id);
      effectsSorcerousUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsSorcerousUCMutSet[id];
      rootIncarnation.incarnationsSorcerousUCMutSet.Remove(id);
    }

       
    public void EffectSorcerousUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasSorcerousUCMutSet(setId);
      CheckHasSorcerousUC(elementId);

      var effect = new SorcerousUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsSorcerousUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new SorcerousUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsSorcerousUCMutSet[setId] =
            new VersionAndIncarnation<SorcerousUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsSorcerousUCMutSetAddEffect.Add(effect);
    }
    public void EffectSorcerousUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasSorcerousUCMutSet(setId);
      CheckHasSorcerousUC(elementId);

      var effect = new SorcerousUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsSorcerousUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new SorcerousUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsSorcerousUCMutSet[setId] =
            new VersionAndIncarnation<SorcerousUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsSorcerousUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddSorcerousUCMutSetObserver(int id, ISorcerousUCMutSetEffectObserver observer) {
      List<ISorcerousUCMutSetEffectObserver> obsies;
      if (!observersForSorcerousUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<ISorcerousUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForSorcerousUCMutSet[id] = obsies;
    }

    public void RemoveSorcerousUCMutSetObserver(int id, ISorcerousUCMutSetEffectObserver observer) {
      if (observersForSorcerousUCMutSet.ContainsKey(id)) {
        var list = observersForSorcerousUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForSorcerousUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastSorcerousUCMutSetEffects(
      SortedDictionary<int, List<ISorcerousUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsSorcerousUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<ISorcerousUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSorcerousUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISorcerousUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSorcerousUCMutSetEffect(effect);
        }
        observersForSorcerousUCMutSet.Remove(effect.id);
      }
    }
    effectsSorcerousUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsSorcerousUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<ISorcerousUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSorcerousUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISorcerousUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSorcerousUCMutSetEffect(effect);
        }
      }
    }
    effectsSorcerousUCMutSetAddEffect.Clear();

    foreach (var effect in effectsSorcerousUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<ISorcerousUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSorcerousUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISorcerousUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSorcerousUCMutSetEffect(effect);
        }
      }
    }
    effectsSorcerousUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsSorcerousUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<ISorcerousUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnSorcerousUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ISorcerousUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnSorcerousUCMutSetEffect(effect);
        }
      }
    }
    effectsSorcerousUCMutSetCreateEffect.Clear();

  }

    public int GetBaseOffenseUCMutSetHash(int id, int version, BaseOffenseUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public BaseOffenseUCMutSetIncarnation GetBaseOffenseUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsBaseOffenseUCMutSet[id].incarnation;
    }
    public BaseOffenseUCMutSet GetBaseOffenseUCMutSet(int id) {
      return new BaseOffenseUCMutSet(this, id);
    }
    public List<BaseOffenseUCMutSet> AllBaseOffenseUCMutSet() {
      List<BaseOffenseUCMutSet> result = new List<BaseOffenseUCMutSet>(rootIncarnation.incarnationsBaseOffenseUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsBaseOffenseUCMutSet.Keys) {
        result.Add(new BaseOffenseUCMutSet(this, id));
      }
      return result;
    }
    public bool BaseOffenseUCMutSetExists(int id) {
      return rootIncarnation.incarnationsBaseOffenseUCMutSet.ContainsKey(id);
    }
    public void CheckHasBaseOffenseUCMutSet(BaseOffenseUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasBaseOffenseUCMutSet(thing.id);
    }
    public void CheckHasBaseOffenseUCMutSet(int id) {
      if (!rootIncarnation.incarnationsBaseOffenseUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid BaseOffenseUCMutSet}: " + id);
      }
    }
    public BaseOffenseUCMutSet EffectBaseOffenseUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new BaseOffenseUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateBaseOffenseUCMutSet(id, rootIncarnation.version, incarnation);
      return new BaseOffenseUCMutSet(this, id);
    }
    public void EffectInternalCreateBaseOffenseUCMutSet(int id, int incarnationVersion, BaseOffenseUCMutSetIncarnation incarnation) {
      var effect = new BaseOffenseUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsBaseOffenseUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<BaseOffenseUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsBaseOffenseUCMutSetCreateEffect.Add(effect);
    }
    public void EffectBaseOffenseUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new BaseOffenseUCMutSetDeleteEffect(id);
      effectsBaseOffenseUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsBaseOffenseUCMutSet[id];
      rootIncarnation.incarnationsBaseOffenseUCMutSet.Remove(id);
    }

       
    public void EffectBaseOffenseUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasBaseOffenseUCMutSet(setId);
      CheckHasBaseOffenseUC(elementId);

      var effect = new BaseOffenseUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsBaseOffenseUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new BaseOffenseUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsBaseOffenseUCMutSet[setId] =
            new VersionAndIncarnation<BaseOffenseUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsBaseOffenseUCMutSetAddEffect.Add(effect);
    }
    public void EffectBaseOffenseUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasBaseOffenseUCMutSet(setId);
      CheckHasBaseOffenseUC(elementId);

      var effect = new BaseOffenseUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsBaseOffenseUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new BaseOffenseUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsBaseOffenseUCMutSet[setId] =
            new VersionAndIncarnation<BaseOffenseUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsBaseOffenseUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddBaseOffenseUCMutSetObserver(int id, IBaseOffenseUCMutSetEffectObserver observer) {
      List<IBaseOffenseUCMutSetEffectObserver> obsies;
      if (!observersForBaseOffenseUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IBaseOffenseUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForBaseOffenseUCMutSet[id] = obsies;
    }

    public void RemoveBaseOffenseUCMutSetObserver(int id, IBaseOffenseUCMutSetEffectObserver observer) {
      if (observersForBaseOffenseUCMutSet.ContainsKey(id)) {
        var list = observersForBaseOffenseUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForBaseOffenseUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastBaseOffenseUCMutSetEffects(
      SortedDictionary<int, List<IBaseOffenseUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsBaseOffenseUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IBaseOffenseUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseOffenseUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseOffenseUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseOffenseUCMutSetEffect(effect);
        }
        observersForBaseOffenseUCMutSet.Remove(effect.id);
      }
    }
    effectsBaseOffenseUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsBaseOffenseUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IBaseOffenseUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseOffenseUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseOffenseUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseOffenseUCMutSetEffect(effect);
        }
      }
    }
    effectsBaseOffenseUCMutSetAddEffect.Clear();

    foreach (var effect in effectsBaseOffenseUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IBaseOffenseUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseOffenseUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseOffenseUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseOffenseUCMutSetEffect(effect);
        }
      }
    }
    effectsBaseOffenseUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsBaseOffenseUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IBaseOffenseUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseOffenseUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseOffenseUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseOffenseUCMutSetEffect(effect);
        }
      }
    }
    effectsBaseOffenseUCMutSetCreateEffect.Clear();

  }

    public int GetBaseDefenseUCMutSetHash(int id, int version, BaseDefenseUCMutSetIncarnation incarnation) {
      int result = id * version;
      foreach (var element in incarnation.set) {
        result += id * version * element.GetDeterministicHashCode();
      }
      return result;
    }
    public BaseDefenseUCMutSetIncarnation GetBaseDefenseUCMutSetIncarnation(int id) {
      return rootIncarnation.incarnationsBaseDefenseUCMutSet[id].incarnation;
    }
    public BaseDefenseUCMutSet GetBaseDefenseUCMutSet(int id) {
      return new BaseDefenseUCMutSet(this, id);
    }
    public List<BaseDefenseUCMutSet> AllBaseDefenseUCMutSet() {
      List<BaseDefenseUCMutSet> result = new List<BaseDefenseUCMutSet>(rootIncarnation.incarnationsBaseDefenseUCMutSet.Count);
      foreach (var id in rootIncarnation.incarnationsBaseDefenseUCMutSet.Keys) {
        result.Add(new BaseDefenseUCMutSet(this, id));
      }
      return result;
    }
    public bool BaseDefenseUCMutSetExists(int id) {
      return rootIncarnation.incarnationsBaseDefenseUCMutSet.ContainsKey(id);
    }
    public void CheckHasBaseDefenseUCMutSet(BaseDefenseUCMutSet thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasBaseDefenseUCMutSet(thing.id);
    }
    public void CheckHasBaseDefenseUCMutSet(int id) {
      if (!rootIncarnation.incarnationsBaseDefenseUCMutSet.ContainsKey(id)) {
        throw new System.Exception("Invalid BaseDefenseUCMutSet}: " + id);
      }
    }
    public BaseDefenseUCMutSet EffectBaseDefenseUCMutSetCreate() {
      CheckUnlocked();
      var id = NewId();
      var incarnation = new BaseDefenseUCMutSetIncarnation(new SortedSet<int>());
      EffectInternalCreateBaseDefenseUCMutSet(id, rootIncarnation.version, incarnation);
      return new BaseDefenseUCMutSet(this, id);
    }
    public void EffectInternalCreateBaseDefenseUCMutSet(int id, int incarnationVersion, BaseDefenseUCMutSetIncarnation incarnation) {
      var effect = new BaseDefenseUCMutSetCreateEffect(id);
      rootIncarnation.incarnationsBaseDefenseUCMutSet
          .Add(
              id,
              new VersionAndIncarnation<BaseDefenseUCMutSetIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsBaseDefenseUCMutSetCreateEffect.Add(effect);
    }
    public void EffectBaseDefenseUCMutSetDelete(int id) {
      CheckUnlocked();
      var effect = new BaseDefenseUCMutSetDeleteEffect(id);
      effectsBaseDefenseUCMutSetDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsBaseDefenseUCMutSet[id];
      rootIncarnation.incarnationsBaseDefenseUCMutSet.Remove(id);
    }

       
    public void EffectBaseDefenseUCMutSetAdd(int setId, int elementId) {
      CheckUnlocked();
      CheckHasBaseDefenseUCMutSet(setId);
      CheckHasBaseDefenseUC(elementId);

      var effect = new BaseDefenseUCMutSetAddEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsBaseDefenseUCMutSet[setId];
      if (oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element already exists!");
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Add(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Add(elementId);
        var newIncarnation = new BaseDefenseUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsBaseDefenseUCMutSet[setId] =
            new VersionAndIncarnation<BaseDefenseUCMutSetIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsBaseDefenseUCMutSetAddEffect.Add(effect);
    }
    public void EffectBaseDefenseUCMutSetRemove(int setId, int elementId) {
      CheckUnlocked();
      CheckHasBaseDefenseUCMutSet(setId);
      CheckHasBaseDefenseUC(elementId);

      var effect = new BaseDefenseUCMutSetRemoveEffect(setId, elementId);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsBaseDefenseUCMutSet[setId];
      if (!oldIncarnationAndVersion.incarnation.set.Contains(elementId)) {
        throw new Exception("Element not found! " + elementId);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.set.Remove(elementId);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.set;
        var newMap = new SortedSet<int>(oldMap);
        newMap.Remove(elementId);
        var newIncarnation = new BaseDefenseUCMutSetIncarnation(newMap);
        rootIncarnation.incarnationsBaseDefenseUCMutSet[setId] =
            new VersionAndIncarnation<BaseDefenseUCMutSetIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsBaseDefenseUCMutSetRemoveEffect.Add(effect);
    }

       
    public void AddBaseDefenseUCMutSetObserver(int id, IBaseDefenseUCMutSetEffectObserver observer) {
      List<IBaseDefenseUCMutSetEffectObserver> obsies;
      if (!observersForBaseDefenseUCMutSet.TryGetValue(id, out obsies)) {
        obsies = new List<IBaseDefenseUCMutSetEffectObserver>();
      }
      obsies.Add(observer);
      observersForBaseDefenseUCMutSet[id] = obsies;
    }

    public void RemoveBaseDefenseUCMutSetObserver(int id, IBaseDefenseUCMutSetEffectObserver observer) {
      if (observersForBaseDefenseUCMutSet.ContainsKey(id)) {
        var list = observersForBaseDefenseUCMutSet[id];
        list.Remove(observer);
        if (list.Count == 0) {
          observersForBaseDefenseUCMutSet.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }
       
  public void BroadcastBaseDefenseUCMutSetEffects(
      SortedDictionary<int, List<IBaseDefenseUCMutSetEffectObserver>> observers) {
    foreach (var effect in effectsBaseDefenseUCMutSetDeleteEffect) {
      if (observers.TryGetValue(0, out List<IBaseDefenseUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseDefenseUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseDefenseUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseDefenseUCMutSetEffect(effect);
        }
        observersForBaseDefenseUCMutSet.Remove(effect.id);
      }
    }
    effectsBaseDefenseUCMutSetDeleteEffect.Clear();

    foreach (var effect in effectsBaseDefenseUCMutSetAddEffect) {
      if (observers.TryGetValue(0, out List<IBaseDefenseUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseDefenseUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseDefenseUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseDefenseUCMutSetEffect(effect);
        }
      }
    }
    effectsBaseDefenseUCMutSetAddEffect.Clear();

    foreach (var effect in effectsBaseDefenseUCMutSetRemoveEffect) {
      if (observers.TryGetValue(0, out List<IBaseDefenseUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseDefenseUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseDefenseUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseDefenseUCMutSetEffect(effect);
        }
      }
    }
    effectsBaseDefenseUCMutSetRemoveEffect.Clear();

    foreach (var effect in effectsBaseDefenseUCMutSetCreateEffect) {
      if (observers.TryGetValue(0, out List<IBaseDefenseUCMutSetEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnBaseDefenseUCMutSetEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IBaseDefenseUCMutSetEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnBaseDefenseUCMutSetEffect(effect);
        }
      }
    }
    effectsBaseDefenseUCMutSetCreateEffect.Clear();

  }

    public int GetTerrainTileByLocationMutMapHash(int id, int version, TerrainTileByLocationMutMapIncarnation incarnation) {
      int result = id * version;
      foreach (var entry in incarnation.map) {
        result += id * version * entry.Key.GetDeterministicHashCode() * entry.Value.GetDeterministicHashCode();
      }
      return result;
    }
    public TerrainTileByLocationMutMapIncarnation GetTerrainTileByLocationMutMapIncarnation(int id) {
      return rootIncarnation.incarnationsTerrainTileByLocationMutMap[id].incarnation;
    }
    public TerrainTileByLocationMutMap GetTerrainTileByLocationMutMap(int id) {
      return new TerrainTileByLocationMutMap(this, id);
    }
    public List<TerrainTileByLocationMutMap> AllTerrainTileByLocationMutMap() {
      List<TerrainTileByLocationMutMap> result = new List<TerrainTileByLocationMutMap>(rootIncarnation.incarnationsTerrainTileByLocationMutMap.Count);
      foreach (var id in rootIncarnation.incarnationsTerrainTileByLocationMutMap.Keys) {
        result.Add(new TerrainTileByLocationMutMap(this, id));
      }
      return result;
    }
    public bool TerrainTileByLocationMutMapExists(int id) {
      return rootIncarnation.incarnationsTerrainTileByLocationMutMap.ContainsKey(id);
    }
    public void CheckHasTerrainTileByLocationMutMap(TerrainTileByLocationMutMap thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasTerrainTileByLocationMutMap(thing.id);
    }
    public void CheckHasTerrainTileByLocationMutMap(int id) {
      if (!rootIncarnation.incarnationsTerrainTileByLocationMutMap.ContainsKey(id)) {
        throw new System.Exception("Invalid TerrainTileByLocationMutMap}: " + id);
      }
    }
    public TerrainTileByLocationMutMap EffectTerrainTileByLocationMutMapCreate() {
      CheckUnlocked();
      var id = NewId();
      EffectInternalCreateTerrainTileByLocationMutMap(
          id,
          rootIncarnation.version,
          new TerrainTileByLocationMutMapIncarnation(
              new SortedDictionary<Location, int>()));
      return new TerrainTileByLocationMutMap(this, id);
    }
       
    public void EffectInternalCreateTerrainTileByLocationMutMap(int id, int incarnationVersion, TerrainTileByLocationMutMapIncarnation incarnation) {
      var effect = new TerrainTileByLocationMutMapCreateEffect(id);
      rootIncarnation.incarnationsTerrainTileByLocationMutMap
          .Add(
              id,
              new VersionAndIncarnation<TerrainTileByLocationMutMapIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsTerrainTileByLocationMutMapCreateEffect.Add(effect);
    }
    public void EffectTerrainTileByLocationMutMapDelete(int id) {
      CheckUnlocked();
      var effect = new TerrainTileByLocationMutMapDeleteEffect(id);
      effectsTerrainTileByLocationMutMapDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsTerrainTileByLocationMutMap[id];
      rootIncarnation.incarnationsTerrainTileByLocationMutMap.Remove(id);
    }
    public void EffectTerrainTileByLocationMutMapAdd(int mapId, Location key, int value) {
      CheckUnlocked();
      CheckHasTerrainTileByLocationMutMap(mapId);
      CheckHasTerrainTile(value);

      var effect = new TerrainTileByLocationMutMapAddEffect(mapId, key, value);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsTerrainTileByLocationMutMap[mapId];
      if (oldIncarnationAndVersion.incarnation.map.ContainsKey(key)) {
        throw new Exception("Key exists! " + key);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.map.Add(key, value);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.map;
        var newMap = new SortedDictionary<Location, int>(oldMap);
        newMap.Add(key, value);
        var newIncarnation = new TerrainTileByLocationMutMapIncarnation(newMap);
        rootIncarnation.incarnationsTerrainTileByLocationMutMap[mapId] =
            new VersionAndIncarnation<TerrainTileByLocationMutMapIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsTerrainTileByLocationMutMapAddEffect.Add(effect);
    }
       
    public void EffectTerrainTileByLocationMutMapRemove(int mapId, Location key) {
      CheckUnlocked();
      CheckHasTerrainTileByLocationMutMap(mapId);

      var effect = new TerrainTileByLocationMutMapRemoveEffect(mapId, key);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsTerrainTileByLocationMutMap[mapId];
      if (!oldIncarnationAndVersion.incarnation.map.ContainsKey(key)) {
        throw new Exception("Key doesnt exist! " + key);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        var oldValue = oldIncarnationAndVersion.incarnation.map[key];
        oldIncarnationAndVersion.incarnation.map.Remove(key);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.map;
        var newMap = new SortedDictionary<Location, int>(oldMap);
        newMap.Remove(key);
        var newIncarnation = new TerrainTileByLocationMutMapIncarnation(newMap);
        rootIncarnation.incarnationsTerrainTileByLocationMutMap[mapId] =
            new VersionAndIncarnation<TerrainTileByLocationMutMapIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsTerrainTileByLocationMutMapRemoveEffect.Add(effect);
    }
    public void AddTerrainTileByLocationMutMapObserver(int id, ITerrainTileByLocationMutMapEffectObserver observer) {
      List<ITerrainTileByLocationMutMapEffectObserver> obsies;
      if (!observersForTerrainTileByLocationMutMap.TryGetValue(id, out obsies)) {
        obsies = new List<ITerrainTileByLocationMutMapEffectObserver>();
      }
      obsies.Add(observer);
      observersForTerrainTileByLocationMutMap[id] = obsies;
    }

    public void RemoveTerrainTileByLocationMutMapObserver(int id, ITerrainTileByLocationMutMapEffectObserver observer) {
      if (observersForTerrainTileByLocationMutMap.ContainsKey(id)) {
        var map = observersForTerrainTileByLocationMutMap[id];
        map.Remove(observer);
        if (map.Count == 0) {
          observersForTerrainTileByLocationMutMap.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }

  public void BroadcastTerrainTileByLocationMutMapEffects(
      SortedDictionary<int, List<ITerrainTileByLocationMutMapEffectObserver>> observers) {
    foreach (var effect in effectsTerrainTileByLocationMutMapDeleteEffect) {
      if (observers.TryGetValue(0, out List<ITerrainTileByLocationMutMapEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTerrainTileByLocationMutMapEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITerrainTileByLocationMutMapEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTerrainTileByLocationMutMapEffect(effect);
        }
        observersForTerrainTileByLocationMutMap.Remove(effect.id);
      }
    }
    effectsTerrainTileByLocationMutMapDeleteEffect.Clear();

    foreach (var effect in effectsTerrainTileByLocationMutMapAddEffect) {
      if (observers.TryGetValue(0, out List<ITerrainTileByLocationMutMapEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTerrainTileByLocationMutMapEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITerrainTileByLocationMutMapEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTerrainTileByLocationMutMapEffect(effect);
        }
      }
    }
    effectsTerrainTileByLocationMutMapAddEffect.Clear();

    foreach (var effect in effectsTerrainTileByLocationMutMapRemoveEffect) {
      if (observers.TryGetValue(0, out List<ITerrainTileByLocationMutMapEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTerrainTileByLocationMutMapEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITerrainTileByLocationMutMapEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTerrainTileByLocationMutMapEffect(effect);
        }
      }
    }
    effectsTerrainTileByLocationMutMapRemoveEffect.Clear();

    foreach (var effect in effectsTerrainTileByLocationMutMapCreateEffect) {
      if (observers.TryGetValue(0, out List<ITerrainTileByLocationMutMapEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnTerrainTileByLocationMutMapEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<ITerrainTileByLocationMutMapEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnTerrainTileByLocationMutMapEffect(effect);
        }
      }
    }
    effectsTerrainTileByLocationMutMapCreateEffect.Clear();

  }

    public int GetKamikazeTargetTTCStrongByLocationMutMapHash(int id, int version, KamikazeTargetTTCStrongByLocationMutMapIncarnation incarnation) {
      int result = id * version;
      foreach (var entry in incarnation.map) {
        result += id * version * entry.Key.GetDeterministicHashCode() * entry.Value.GetDeterministicHashCode();
      }
      return result;
    }
    public KamikazeTargetTTCStrongByLocationMutMapIncarnation GetKamikazeTargetTTCStrongByLocationMutMapIncarnation(int id) {
      return rootIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap[id].incarnation;
    }
    public KamikazeTargetTTCStrongByLocationMutMap GetKamikazeTargetTTCStrongByLocationMutMap(int id) {
      return new KamikazeTargetTTCStrongByLocationMutMap(this, id);
    }
    public List<KamikazeTargetTTCStrongByLocationMutMap> AllKamikazeTargetTTCStrongByLocationMutMap() {
      List<KamikazeTargetTTCStrongByLocationMutMap> result = new List<KamikazeTargetTTCStrongByLocationMutMap>(rootIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap.Count);
      foreach (var id in rootIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap.Keys) {
        result.Add(new KamikazeTargetTTCStrongByLocationMutMap(this, id));
      }
      return result;
    }
    public bool KamikazeTargetTTCStrongByLocationMutMapExists(int id) {
      return rootIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap.ContainsKey(id);
    }
    public void CheckHasKamikazeTargetTTCStrongByLocationMutMap(KamikazeTargetTTCStrongByLocationMutMap thing) {
      CheckRootsEqual(this, thing.root);
      CheckHasKamikazeTargetTTCStrongByLocationMutMap(thing.id);
    }
    public void CheckHasKamikazeTargetTTCStrongByLocationMutMap(int id) {
      if (!rootIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap.ContainsKey(id)) {
        throw new System.Exception("Invalid KamikazeTargetTTCStrongByLocationMutMap}: " + id);
      }
    }
    public KamikazeTargetTTCStrongByLocationMutMap EffectKamikazeTargetTTCStrongByLocationMutMapCreate() {
      CheckUnlocked();
      var id = NewId();
      EffectInternalCreateKamikazeTargetTTCStrongByLocationMutMap(
          id,
          rootIncarnation.version,
          new KamikazeTargetTTCStrongByLocationMutMapIncarnation(
              new SortedDictionary<Location, int>()));
      return new KamikazeTargetTTCStrongByLocationMutMap(this, id);
    }
       
    public void EffectInternalCreateKamikazeTargetTTCStrongByLocationMutMap(int id, int incarnationVersion, KamikazeTargetTTCStrongByLocationMutMapIncarnation incarnation) {
      var effect = new KamikazeTargetTTCStrongByLocationMutMapCreateEffect(id);
      rootIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap
          .Add(
              id,
              new VersionAndIncarnation<KamikazeTargetTTCStrongByLocationMutMapIncarnation>(
                  incarnationVersion,
                  incarnation));
      effectsKamikazeTargetTTCStrongByLocationMutMapCreateEffect.Add(effect);
    }
    public void EffectKamikazeTargetTTCStrongByLocationMutMapDelete(int id) {
      CheckUnlocked();
      var effect = new KamikazeTargetTTCStrongByLocationMutMapDeleteEffect(id);
      effectsKamikazeTargetTTCStrongByLocationMutMapDeleteEffect.Add(effect);
      var versionAndIncarnation = rootIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap[id];
      rootIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap.Remove(id);
    }
    public void EffectKamikazeTargetTTCStrongByLocationMutMapAdd(int mapId, Location key, int value) {
      CheckUnlocked();
      CheckHasKamikazeTargetTTCStrongByLocationMutMap(mapId);
      CheckHasKamikazeTargetTTC(value);

      var effect = new KamikazeTargetTTCStrongByLocationMutMapAddEffect(mapId, key, value);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap[mapId];
      if (oldIncarnationAndVersion.incarnation.map.ContainsKey(key)) {
        throw new Exception("Key exists! " + key);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        oldIncarnationAndVersion.incarnation.map.Add(key, value);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.map;
        var newMap = new SortedDictionary<Location, int>(oldMap);
        newMap.Add(key, value);
        var newIncarnation = new KamikazeTargetTTCStrongByLocationMutMapIncarnation(newMap);
        rootIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap[mapId] =
            new VersionAndIncarnation<KamikazeTargetTTCStrongByLocationMutMapIncarnation>(
                rootIncarnation.version,
                newIncarnation);
      }
      effectsKamikazeTargetTTCStrongByLocationMutMapAddEffect.Add(effect);
    }
       
    public void EffectKamikazeTargetTTCStrongByLocationMutMapRemove(int mapId, Location key) {
      CheckUnlocked();
      CheckHasKamikazeTargetTTCStrongByLocationMutMap(mapId);

      var effect = new KamikazeTargetTTCStrongByLocationMutMapRemoveEffect(mapId, key);

      var oldIncarnationAndVersion = rootIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap[mapId];
      if (!oldIncarnationAndVersion.incarnation.map.ContainsKey(key)) {
        throw new Exception("Key doesnt exist! " + key);
      }
      if (oldIncarnationAndVersion.version == rootIncarnation.version) {
        var oldValue = oldIncarnationAndVersion.incarnation.map[key];
        oldIncarnationAndVersion.incarnation.map.Remove(key);
      } else {
        var oldMap = oldIncarnationAndVersion.incarnation.map;
        var newMap = new SortedDictionary<Location, int>(oldMap);
        newMap.Remove(key);
        var newIncarnation = new KamikazeTargetTTCStrongByLocationMutMapIncarnation(newMap);
        rootIncarnation.incarnationsKamikazeTargetTTCStrongByLocationMutMap[mapId] =
            new VersionAndIncarnation<KamikazeTargetTTCStrongByLocationMutMapIncarnation>(
                rootIncarnation.version, newIncarnation);
      }
      effectsKamikazeTargetTTCStrongByLocationMutMapRemoveEffect.Add(effect);
    }
    public void AddKamikazeTargetTTCStrongByLocationMutMapObserver(int id, IKamikazeTargetTTCStrongByLocationMutMapEffectObserver observer) {
      List<IKamikazeTargetTTCStrongByLocationMutMapEffectObserver> obsies;
      if (!observersForKamikazeTargetTTCStrongByLocationMutMap.TryGetValue(id, out obsies)) {
        obsies = new List<IKamikazeTargetTTCStrongByLocationMutMapEffectObserver>();
      }
      obsies.Add(observer);
      observersForKamikazeTargetTTCStrongByLocationMutMap[id] = obsies;
    }

    public void RemoveKamikazeTargetTTCStrongByLocationMutMapObserver(int id, IKamikazeTargetTTCStrongByLocationMutMapEffectObserver observer) {
      if (observersForKamikazeTargetTTCStrongByLocationMutMap.ContainsKey(id)) {
        var map = observersForKamikazeTargetTTCStrongByLocationMutMap[id];
        map.Remove(observer);
        if (map.Count == 0) {
          observersForKamikazeTargetTTCStrongByLocationMutMap.Remove(id);
        }
      } else {
        throw new Exception("Couldnt find!");
      }
    }

  public void BroadcastKamikazeTargetTTCStrongByLocationMutMapEffects(
      SortedDictionary<int, List<IKamikazeTargetTTCStrongByLocationMutMapEffectObserver>> observers) {
    foreach (var effect in effectsKamikazeTargetTTCStrongByLocationMutMapDeleteEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeTargetTTCStrongByLocationMutMapEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeTargetTTCStrongByLocationMutMapEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeTargetTTCStrongByLocationMutMapEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeTargetTTCStrongByLocationMutMapEffect(effect);
        }
        observersForKamikazeTargetTTCStrongByLocationMutMap.Remove(effect.id);
      }
    }
    effectsKamikazeTargetTTCStrongByLocationMutMapDeleteEffect.Clear();

    foreach (var effect in effectsKamikazeTargetTTCStrongByLocationMutMapAddEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeTargetTTCStrongByLocationMutMapEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeTargetTTCStrongByLocationMutMapEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeTargetTTCStrongByLocationMutMapEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeTargetTTCStrongByLocationMutMapEffect(effect);
        }
      }
    }
    effectsKamikazeTargetTTCStrongByLocationMutMapAddEffect.Clear();

    foreach (var effect in effectsKamikazeTargetTTCStrongByLocationMutMapRemoveEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeTargetTTCStrongByLocationMutMapEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeTargetTTCStrongByLocationMutMapEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeTargetTTCStrongByLocationMutMapEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeTargetTTCStrongByLocationMutMapEffect(effect);
        }
      }
    }
    effectsKamikazeTargetTTCStrongByLocationMutMapRemoveEffect.Clear();

    foreach (var effect in effectsKamikazeTargetTTCStrongByLocationMutMapCreateEffect) {
      if (observers.TryGetValue(0, out List<IKamikazeTargetTTCStrongByLocationMutMapEffectObserver> globalObservers)) {
        foreach (var observer in globalObservers) {
          observer.OnKamikazeTargetTTCStrongByLocationMutMapEffect(effect);
        }
      }
      if (observers.TryGetValue(effect.id, out List<IKamikazeTargetTTCStrongByLocationMutMapEffectObserver> objObservers)) {
        foreach (var observer in objObservers) {
          observer.OnKamikazeTargetTTCStrongByLocationMutMapEffect(effect);
        }
      }
    }
    effectsKamikazeTargetTTCStrongByLocationMutMapCreateEffect.Clear();

  }
}

}
